====== Solution Stack ======

Solution stack are a set of software solutions that are needed to deliver a fully functional solution. For a web application the stack requires an operating system, a web server, a database, and programming language. For the development of the web application, you require an integrated development environment (IDE). Understanding how these solution stacks are set up is important part of web application development. This section provides an introduction to the various stacks we will use, how to use them and how to install them on your computer.

Polycademy offers you two solution stacks. The Cloud stack is useful for portable deployment. You can access it anywhere you have an internet connection. This allows you to forgo installing your development environment every time you use a new computer. This comes at a cost of flexibility as you don't control the environment fully and a potential point of failure. What happens if Cloud9 goes offline one day? At any case that's why we also show you how to setup your own local development stack. This gets more complicated as we have to cater to different operating systems, but in the end it is more powerful. You can choose which one you prefer to use, but you need to read both options to get the best of both worlds. In fact the local stack has some tools you cannot use in Cloud 9 which you need.

===== Cloud Stack =====

[[https://c9.io/|Cloud9 IDE]] is an online development environment for Javascript, Node.js, PHP, Java, Ruby and 23 other languages.

It is full featured environment with SSH and shell access allowing you to install your own command line utilities. It integrates with your Github projects and allows live editing and real time collaboration between team members. It is free for open source projects. For you as a student, we don't have to license our project open source, it is only openly accessible, but prying eyes would need to actively search for your shareable url or nobody will ever know. Cloud9 offers practically everything we will need to develop your application.

Even with most of the work done, we still need to get acquainted with Cloud9's environment and do some extra installations for Cloud 9. The below instructions will be demonstrated via text/images and video.

==== Git Project ====

Cloud 9 integrates with [[https://github.com/|Github]]. Github is a web service providing Git functionality. Think of Git as a time machine for your code. Please refer to the [[Web Application Development:Git|Git article]] for a full explanation on using this amazing tool.

First create a Github account and initialise your first project. We'll be registering on Cloud9 using our Github account. Name your project something memorable, we'll be using this as your repository to do work.

{{ youtube>vnXi0gGTVS8?large }}

==== Playing with Cloud9's Tools ====

Cloud9 may seem daunting at first, so let's go through some of the common tools you'll be using. This section will also demonstrate the installation of extra tools that Cloud9 doesn't provide natively.

=== Apache MySQL PHP (AMP) ===

[{{ :web_application_development:640px-lampp_architecture.png?200|LAMP Architecture ((By Arturo muthuvel (Own Work) [CC-BY-SA-3.0 (http://creativecommons.org/licenses/by-sa/3.0)], via Wikimedia Commons))}}]

The AMP stack in fact provides bundled software, namely Apache, MySQL, PHP, that are used to run dynamic Web sites or servers. Strictly speaking, this is all that is required to run and serve a website either locally or on the internet. There are other kinds of stacks used to run other kinds of applications, but the AMP stack is the most commonly used, and is appropriate for Polycademy's PHP based web application development course. The AMP stack is commonly bundled with the Linux OS, which means this is usually called the [[wp>/LAMP_(software_bundle)|LAMP stack]].

Apache is an HTTP web server. This is what responds to requests from client browsers over the internet. MySQL is an relational database management system. PHP refers to the programming language, however in the context of LAMP, it is actually an Apache module. Apache runs PHP in order to process requests and return dynamic content. Apache has many modules, but this is the one we use in order to learn and develop in the PHP language.

For the purposes of using Cloud9, it provides us with preinstalled Linux, Apache and PHP. The MySQL will have to come from an external provider, and that is explained in the [[Solution Stack#cloud_database|Cloud Database]] section. You can run PHP files in Cloud9 in the run tab. Cloud9 allows you to share your urls with your team mates so you can code together and see results immediately. Cloud9 also allows you to run multiple files, so you only need to run once on the root index.php to navigate to deeper files. If you end up writing polyglot applications, you can run multiple runtimes simultaneously.

=== Text Editor Workspace ===

Cloud9's text editor has many features that allows us to code more pleasantly. You'll learn how to take advantage of features as we start coding, but it's important to get acquainted with the workspace so we can hit the ground running.

You can use Cloud9 to run your PHP files, and they are immediately available through a generated URL. The great thing about this URL, is that you can share it with your team mates or clients and they will see your changes as you code. This is perfect for front end designers! The right click context menu is designed to match what you would have if you are developing on the desktop computer, so you can expect the same kinds of options. One useful preference in Cloud9 is the Color Picker option, allowing you to pick colors immediately when marking up CSS.

Ctrl-F also works on Cloud 9 and it reveals quite a powerful find and replace functionality. This is invaluable when you're trying to hunt down that small syntax character in your 1000 line code. When saving files you can either switch on auto-save in the preferences or you can just use Ctrl-S.

Finally of course is the collaboration features of Cloud9. You can share your project URL with your team mates and they can see your coding in live. Cloud9 is still somewhat buggy and you need a fast internet connection or else you'll pull your hair out. So if it's taking some time to create files or load files. Just refresh the site and it will automatically save your session.

{{ youtube>liaXnk2X0Ow?large }}

=== Command Line Usage ===

As a developer you will begin using the command line more. Although it's not as pretty as the GUI (graphical user interface), and also requires more memory, it is far more powerful. Many developer tools are only available as command line applications.

Different operating systems have different command line commands. Fortunately Cloud9 abstracts this all away as we're using their Linux based system. So the commands will be the same everywhere. Note that if you are using Powershell on Windows, many Linux commands can also be used.

As we install and use more tools, we'll be utilising more command line tools and referencing specific documentation, but this section will show the most used commands.

  * [[wp>cd (command)|Change Directory]] - ''cd'' is used to move between folders and directories. When used on Windows without any arguments, it actually displays the current working directory.
  * [[wp>ls|List Files]] - ''ls'' is used to list the files and folders in the current directory. The Windows equivalent is ''dir''. To show hidden files ''.hidden'' in Linux use ''ls -a'', to show hidden files on Windows use ''dir /a''.
  * [[wp>Working directory|Present Working Directory]] - ''cwd'' or ''cd'' is used to show the current working directory's absolute path.
  * [[wp>file (command)|File Type]] - ''file'' is used to show the file or folder type.
  * [[wp>mv|Move Files]] - ''mv'' - is used to move files or folders from one path to another path. It is also possible to rename files using this command by moving the file to its current directory with a different name.
  * [[wp>cp (Unix)|Copy Files]] - ''cp'' is used to copy files and directories.
  * [[wp>rm (Unix)|Remove files]] - ''rm'' is used to remove files or directories.
  * [[wp>ln (Unix)|Link Files]] - ''ln'' is used to create links between files. You will usually use this in the format of ''ln -s //path/to/file// //path/to/link//'' in order to create soft links between binary files, so you can access the binary in another directory.
  * [[wp>chmod|Adjust Permissions]] - ''chmod'' is used to change the permissions of files. Sometimes you don't have the permissions to execute the file. You will usually use this in the format of ''chmod 777 //path/to/file//''. When you install third party packages, sometimes the binaries that come with it won't have the right permissions.
  * [[wp>Vim (text editor)|Vim]] - ''vim'' is used to edit text files from the command line. When first entering a file, it will enter "command" mode. Press ''i'' to enter "input" mode. You can then edit the text. Once finished, hit "esc" to go back to "command" mode. Then hit ":wq" to write and exit. Refer to [[http://www.tuxfiles.org/linuxhelp/vimcheat.html|Vim cheat sheet]] for more commands.
  * [[http://git-scm.com/docs|Git Usage]] - ''git'' is used to run [[Web Application Development:Git]] commands.
  * [[http://curl.haxx.se/docs/manual.html|Curl Usage]] - ''curl'' is used to download files or folders over the internet. Here's a good tutorial to CURL.((http://quickleft.com/blog/command-line-tutorials-curl))
  * [[http://www.gnu.org/software/wget/manual/wget.html|Wget Usage]] - ''wget'' is used to also download files and folders over the internet.
  * [[http://www.thegeekstuff.com/2010/04/unix-tar-command-examples/|Tar Usage]] - ''tar'' is used to unzip and manipulate archives.

You can also create [[wp>PATH (variable)|PATH variables]] in Cloud9. You can check out your currently set PATHs on Linux using ''echo $PATH'' on the terminal. For Windows, check out the [[Solution Stack#local stack|Local Stack]]. This allows you to create and download extra command line tools, and allow you to execute them in a global manner using an alias. This means you don't have to remember what directory they are in and just use them all over your computer. In Cloud9 because each workspace is temporary, it is not recommended to setup your own PATH variables. Instead Cloud9 has a binary folder that you can download any command line utilities into. Cloud9 has a PATH variable pointing to that binary folder by default, so you can run and binaries in that folder globally across your computer. This will be demonstrated when we install extra binaries and command line utilities.

{{ youtube>6eVeAa77D7U?large }}

The terminal is a very powerful tool, so if you want to understand it more you should check out this [[http://net.tutsplus.com/tutorials/tools-and-tips/the-command-line-is-your-best-friend/|shell tutorial on Nettuts]].

=== Cloud Deployment ===

Cloud9 is integrated into Heroku which is a cloud hosting service. However it doesn't play well with PHP based applications. So instead Polycademy recommends using [[https://www.appfog.com/|Appfog]]. The section on the [[Solution Stack#production_stack|Production Stack]] will explain how to setup Appfog. For now we'll use the command line to install Appfog's command line utility. We will be using this to push our application to Appfog's server when we have it setup.

[[https://docs.appfog.com/getting-started/af-cli|Appfog's command line utility]] is called ''af''. It is a Ruby app, so we need to use the Ruby virtual machine to run it. Ruby has a package manager called [[http://rubygems.org/|Gem]]. We can use Gem to install ''af'' and then run it globally without messing around with PATH variables.

{{ youtube>qqGwE5D5Y_s?large }}

=== Package Managers ===

Developers use package managers to make the process of sharing code libraries and frameworks easier. It abstracts the process of searching on Google or Github for code libraries and downloading them manually. This process saves time and encourages code reuse among the developer community.

PHP's primary package manager is called [[http://getcomposer.org/|Composer]]. For front end development, there are many package managers available, most of them are integrated into Node.js since most of them are Javascript libraries. For our purposes, we don't need to use these just yet, but you are free to explore them as we start coding. Check out [[http://yeoman.io/|Yeoman]] (not usable on Cloud9, requires local stack but on Linux/Mac OS), [[http://twitter.github.com/bower/|Bower]], [[http://volojs.org/|Volo]], [[http://ender.jit.su/|Ender]] and [[http://jamjs.org/|Jam]].

To install Composer, we will use Curl to download the installer package and execute with PHP. The installation instructions are on [[http://getcomposer.org/doc/00-intro.md#installation-nix|Composer's documentation]]. Once installed, we have to move it to directory that is already set in the default PATHs. That way can we can globally execute Composer without needing to remember where it was placed. In the documentation it mentions we can move it to ''/usr/local/bin/composer''. Remember when using the ''mv'' command, if the last section of the path is not directory that exists, it will rename the file/folder you moved. Thus the command renames the file to ''composer''. However instead of installing Composer here, we should instead install in the ''/app-root/data/bin/composer''. This is more appropriate for Cloud9 and easier for us to locate it if ever need to.

{{ youtube>QIPnGOb-pnQ?large }}

== Sparks ==

Codeigniter has its own specific package manager called [[http://getsparks.org/|Sparks]]. You may find third party Codeigniter packages that specify the installation via Sparks. Installation of Sparks is a bit more difficult than Composer. This is because the Sparks package manager is somewhat outdated compared to the Codeigniter 3.0 develop branch. Please refer to the [[https://github.com/Polycademy/commonprogramming|commonprogramming Github repository]] to see the correct way of installing Sparks.

To install Sparks onto the latest Codeigniter develop branch you need to change three things:

  * Add ''tools/*'' to your .gitignore
  * Add ''define('EXT', '.php');'' to your constants.php or convert MY_Loader.php that comes with Sparks and find and replace all instances of ''.EXT'' with ''.'.php'''.
  * The example-spark that is installed via the Spark installation guide is incorrect. You need to change its filename to ''Example_spark.php'' not ''example_spark.php''.

All sparks are installed in your project root. They can be loaded via the standard Codeigniter loader class. Refer the the [[http://getsparks.org/get-sparks|Sparks documentation]] to see how. We're ignoring the ''tools/*'' directory because the Sparks itself can be installed differently on different computers. However the third party libraries we're keeping. This is different from Composer, because Sparks does not remember what packages you have installed.

To run the Sparks executable, you have to ''chmod 777'' the binary. In order to keep it consistent with the ''bin'' directory of Composer, you should add a symbolic link via ''ln -s ../tools/spark bin/spark''. You can also add the symbolic link from ''~'' home directory. However this will have to be updated after some time when using Cloud9.

Don't worry if this doesn't quite make sense right now. You'll only need to do this once we get deeper into web programming.

==== Cloud Database ====

Cloud9 does not yet support database functionality. Fortunately there are free cloud based database services available. For the purposes of Polycademy, we'll be using [[http://xeround.com/|Xeround]] to provide free cloud hosted MySQL database service. If you're interested in using [[NoSQL]] databases, [[https://www.mongohq.com/|MongoHQ]] and [[https://mongolab.com/|MongoLab]] are also possibilities.

Xeround only provides 10mb of free data. However that is enough for developmental purposes. The hosts such as Appfog will provide us with a lot more space when we need it.

The first step is to create an account on Xeround. Then create a new database instance. Then we're going to use Cloud9 and PHP to connect to the Xeround database. We'll be using the ''mysqli'' extension in PHP to test the connection, however when we get to coding, we'll be using Codeigniter's database library to abstract connection process instead. This [[http://xeround.com/developers/connecting-your-mysql-application-to-xeround-cloud-database/|Xeround page on connecting to MySQL]] explains what is necessary.

{{ youtube>A2Z29Dhw0Pk?large }}

===== Local Stack =====

The local stack deployment process is somewhat more complicated than the cloud stack simply because we need to cater to multiple operating systems. However there are tools which can only be used on the local development environment and we will need these as well. Polycademy recommends you to start development with the Cloud Stack and install the local stack in your own time. At any case below are instructions pertaining to the installation of the same tools that Cloud9 provides on your own computer. It biased towards Windows computers, but the knowledge transferable to other operating systems, it will just require some extra googling.

==== Apache MySQL PHP (AMP) ====

As explained before, the AMP stack is all we need to run a web application server. There are several prepackaged AMP stacks for Windows and Mac OS. For Linux, you have to install them separately but this is an easy process too.

=== WAMP ===

The Wampserver is the easiest way to install WAMP on your own computer. Download it from the [[http://www.wampserver.com/en/|official website]]. The first choice you have to make is whether you are running a 32 bit computer or a 64 bit computer. If you don't know, just choose to run 32 bit. The second choice you have to make is to get the most recent version. For the 64 bit option, read the details and try to get a package that has Apache > 2.4 and PHP > 5.4. For the 32 bit option, get a package that has PHP > 5.4. These version details are on the bottom.

The installation is an executable, locate your wamp folder at the root of your drive. This is so that it easily accessible. This is not a program files kind of application.

**Composer Issues**

Note that if you find yourself unable to use Composer on the local stack with Wampserver, that's because the Curl extension hasn't been activated in the php.ini. Use ''php -m'' to see all the extensions. If curl isn't there, you need to use ''php -r "echo php_ini_loaded_file();"'' and navigate to that file. Find the line which mentions "curl", and also find another line which mentions "openssl", and uncomment both of the lines by removing the semicolon. One of them may already be uncommented. Try ''php -m'' again. If it doesn't work and comes up with an error about side by side. Then your the curl extension is corrupt. You need to follow the instructions posted here on [[http://stackoverflow.com/questions/10939248/php-curl-not-working-wamp-on-windows-7-64-bit|Stackoverflow regarding PHP Curl and WAMP]]. It's a simple matter of downloading the correct curl extension and replacing the default one in the ''ext'' folder.

**Short Open Tag Issues**

When we open up a PHP script, we have to prefix it with ''<?php'' and sometimes end it with ''?>''. However there's also the short open tag that is like:

<code php>
<?
//php here
?>
</code>

It is quite useful when injecting variables straight into templates. In some AMP stacks, the short open tag has not been activated. You'll need to check if it was activated. Go into your PHP settings, which should be in the WAMP icon and activate the short open tag option.

=== LAMP ===

There are many different Linux distros, so here are links to official documentation regarding the installation of LAMP.

  * [[https://help.ubuntu.com/community/ApacheMySQLPHP|Install a LAMP server on Ubuntu Linux]]
  * [[http://wiki.debian.org/LaMp|Install a LAMP server on Debian GNU/Linux]]
  * [[http://en.opensuse.org/SDB:Linux_Apache_MySQL_PHP|Install a LAMP server on SUSE Linux]]
  * [[http://fedorasolved.org/server-solutions/lamp-stack|Install a LAMP server on Fedora Linux]]
  * [[http://jesseforrest.name/setup-a-production-centos-lamp-web-server/212|Install a LAMP server on CentOS Linux]]

=== MAMP ===

Mac OS has MAMP stack available. You can download it at the [[http://www.mamp.info/|MAMP official site]] and further documentation can be found [[http://documentation.mamp.info/en|here]]

=== Running the AMP ===

Once you have setup your flavour of AMP, all you need to do is start the server. Please refer to documentation of the package you installed on how to start the webserver. This is usually quite straightforward, although you may sometimes encounter some difficulty. If that is the case, it may be that a 3rd party software is conflicting with the ports that AMP uses. A common example is Skype which sometimes may use port 80 and conflict with Apache. In the Skype connection options, make sure to uncheck the using of port 80 or 443 so to avoid Apache conflict.

This AMP stack is only one stack of out many. When you become a polyglot developer, you'll find yourself using all manners of stacks and different languages too.

==== PHPMyAdmin ====

PHPMyAdmin is web based graphical user interface for manipulating MySQL databases. It's an invaluable tool, the alternative of using GUIs would be managing the database using the command line and that isn't fun at all.

PHPMyAdmin comes with the standard WAMP and MAMP stacks. PHPMyAdmin is essentially a web app, so installation is the same as running any web app on the AMP stack. Refer to [[http://wiki.phpmyadmin.net/pma/Quick_Install|PHPMyAdmin's wiki]] for installation instructions.

==== Text Editor ====

The text editor is the workhorse of software development, choosing a text editor is paramount for developer happiness. Polycademy recommends three types of text editors corresponding to their particular operating systems. All three editors are free, however Sublime is trialware without any limits.

=== Notepad++ for Windows ===

If you have had prior programming experience, you would have been acquainted with Notepad or Dreamweaver. These two software stand at the opposite extremes of code editors. Notepad is one of the most simplest no frills text editor in existence. On the other hand Dreamweaver is one of the most complex and full fledged IDE for web code editing. For Polycademy, we recommend using [[http://notepad-plus-plus.org/|Notepad++]], this is a lightweight (super fast) code editor that has just enough features to be usable for complex applications. It has numerous plugins to make it even more flexible. It is free to download at their website: http://notepad-plus-plus.org/

Using the Notepad++ is simple. Just download the latest .exe installer and follow the prompts to finish the installation. Once installed, open it up. It should look similar to this:

{{ :web_application_development:notepad_-screenshot.jpg |}}

It has some important features to take care of:

  - The text encoding is currently set at ANSI (American National Standards Institute). Most files you encounter will be encoded at ANSI. Text encoding is essentially the way computers convert a human language character such as an English letter or Chinese character into set of numbers or bits so it can be transmitted electronically. ANSI is outdated due to the plethora of languages and symbols people use to express themselves on the internet, using it can result in all sorts of funny text errors. Therefore we need to change this into [[wp>UTF-8]] (Unicode Transformation Format), we can do this in the settings. Foreign languages will need to use other UTF formats. You can learn more about it here: http://code.alexreisner.com/articles/character-encoding.html
  - This shows the document format, this is only relevant to line spacing. Keep it at Dos/Windows, as this can be interpreted on all platforms.
  - To change the text encoding, we have to go into settings. Click on the "New Document/Default Directory" tab, then in the "Encoding" options select "UTF-8 without BOM" and tick "Apply to opened ANSI files". The BOM as in Byte Order Mark designates the file as UTF-8, however we don't need this and some applications may choke on the designation. We want to apply to opened ANSI files because that brings no harm to ANSI files that you download from the internet and makes those files more flexible.
  - Language settings allow you to set how you want Notepad++ to interpret/syntax highlight the code you are writing. It is not necessary to set it up manually as when you save the file extension such as php or html, it will automatically detect it.

Notepad++ has many features in which it would take an overly verbose manual to talk about it all, so just begin using it throughout the course and these features will eventually become evident.

=== Geany for Linux ===

[{{ :web_application_development:geany_main.png?200|Geany Main Screenshot}}]

Geany is the closest thing to Notepad++ on Linux. You can download it from their [[http://www.geany.org/|official site]]. The same issues explained in the Notepad++ section regarding UTF-8 is present in Geany. Although because it is developed on Linux, utf-8 setting should be on by default. You can install it through the Linux package management system or manually.

=== Sublime for Mac ===

Sublime is a superb editor for web development. It has many features beyond Notepad++, and it is well designed keeping in line with the Mac tradition. It has a paid version but its trial version has no limits. You can download it from their [[http://www.sublimetext.com/|official site]].

==== Console or Terminal ====

The console or terminal is an important tool for web developers. Many tools are only available through the command line. For Windows we'll be using Console 2 with Powershell to overlay the generic CMD in Windows. Linux already has a superior terminal so you can just used the normal one. Mac has their own terminal bundled in.

=== Console 2 with Powershell for Windows ===

[{{ :web_application_development:81523.jpg?200|Console2 Main Window}}]

Console 2 is a powerful wrapper for Window's command line. It allows multiple sessions to be running and also makes it easier to read. Powershell is an extension to the standard command line, we can actually use Unix commands there. If you're using Windows 7, it's already bundled. If not, download powershll from the [[http://technet.microsoft.com/en-us/scriptcenter/dd742419.aspx|Microsoft Script Center]].

After installing Powershell, make sure to remember where it's installed. If you don't know where it is, you can search for "powershell" in your start menu or file search. It will usually be located on ''C:\WINDOWS\system32\WindowsPowerShell\v1.0\powershell.exe''

Then download [[http://sourceforge.net/projects/console/|Console 2 from Sourceforge]]. You can put the extracted folder anywhere that is accessible.

Launch Console 2 and go into settings. The first thing to do is bind the path to powershell.exe to the Shell option. The Startup directory is where your command line will locate its current working directory when you first launch the shell. Think of Powershell like the bash terminal in Cloud9, you're using Powershell to navigate through your directories and manipulate your computer.

Adjust the appearance options to suit yourself. Try enlarging the font and making the terminal semi-transparent. The most important feature is the Tabs settings. This is where you can create custom tabs to launch specific shells at specific directories. A common use would be to create one pointing to your WAMP's ''www'' directory. Note that you would leave the shell as the Powershell unless you were specifically launching an application that had terminal access. Another use would be launching into the MySQL terminal or MongoDB daemon plus terminal. For the purposes of PHP development, our main terminal use would be for Composer, however app development in other languages/environments such as Node or Ruby would make use of the terminal a lot more. Try playing around with the settings and you'll get used to it.

==== Connection Tools ====

There are number of connection tools that developers use in order to connect to various services in order to upload, download or manipulate. These are the most common tools.

=== FTP ===

Developers generally do not use FTP anymore since it's not very secure. However in order to connect to legacy systems, FTP is still required. FTP stands for File Transfer Protocol. It's very simple unsecured way of uploading and downloading files and directories. This used to be the go to tool for uploading websites and web applications.

We recommend using [[http://filezilla-project.org/|Filezilla]] as a cross platform and powerful FTP tool.

=== SSH & SCP ===

SSH means secure shell access, it's a protocol for accessing the terminal shell of a remote computer. This is basically what you're doing with Cloud9's browser web based terminal. The implementation of SSH on your local computer depends on your OS. If you ever read about "Shell Access" or "SSH access" on web hosts, this is what they mean.

  * [[http://www.chiark.greenend.org.uk/~sgtatham/putty/|Putty]] for Windows.
  * [[http://support.suso.com/supki/SSH_Tutorial_for_Linux|Open SSH]] for Linux, chances are you already have this installed.
  * [[http://apple.blogoverflow.com/2012/02/how-to-use-ssh-on-mac-os-x/|Open SSH]] for Mac, Mac bundles SSH.

There are more clients you can use, some of them are graphical and some of them are not, try googling for them when you need to use them. There are also other protocols, here's an [[http://geekswithblogs.net/bvamsi/archive/2006/03/23/73147.aspx|article from GeekswithBlogs]] explaining them.

SCP means secure copy. This is basically similar to FTP but it's more secure. While we use SSH to access the shell, we can use the same address to use SCP.

  * [[http://winscp.net/eng/index.php|WinSCP]] for Windows, it kind of looks like an FTP program. In fact it does the same thing.
  * [[http://themediahost.de/secpanel/|SecPanel]] for Linux, its graphical for both SSH and SCP.
  * [[http://cyberduck.ch/|CyberDuck]] for Mac.

=== Curl ===

Curl is a command line tool for transferring data with URL syntax with support for almost every protocol. Curl is multi-platform and chances are it's already installed if you're using Linux or Mac. For Windows, go to the [[http://curl.haxx.se/|Curl homepage]] and head to the Download page. Use the [[http://curl.haxx.se/dlwiz/|Curl Download Wizard]] to get the right edition for your operating system. Put the extracted folder in an easily accessible place such as the root of your drive. Check the [[Solution Stack#path_variable_editing|Path Variable Editing]] section for details on how to register ''curl'' as a global command on your terminal.

=== Cloud Host CLI Tools ===

Most cloud hosts provide their own command line utility to connect and tunnel into their web host's service. This was already demonstrated with the ''af'' tool from Appfog.
==== Git Source Code Version Control ====

As explained before Git is a version control system for your source code. It allows multiple developers to collaborate and commit to a single project while tracking all the changes. Go to the [[Web Application Development:Git]] page for explanation on the usage of Git and Github.

The easiest way to use Git on a local stack is to download the Github's clients. Github has created easy to use GUI clients for Windows and Mac. They did not create one for Linux as Linux already has many.

  * [[http://windows.github.com/|Github for Windows]]
  * [[http://mac.github.com/|Github for Mac]]
  * [[https://git.wiki.kernel.org/index.php/Interfaces,_frontends,_and_tools#Graphical_Interfaces|Git Clients for Linux]] - take your pick.
  * [[http://mobile.github.com/|Github for Mobile]]
==== Package Management ====

[[wp>http://en.wikipedia.org/wiki/Package_management_system|Package management]] is important so we can reuse code written by ourselves and other people. It provides a standardised way of loading code libraries from third parties thus making this process easier and faster. Different language environments have different package managers.

  * PHP - [[http://getcomposer.org/|Composer]]
  * Node - [[https://npmjs.org/|NPM]]
  * Ruby - [[http://rubygems.org/|Gem]]
  * Python - [[http://pypi.python.org/pypi/pip|pip]]
  * Front End Development - [[http://yeoman.io/|Yeoman]], [[http://volojs.org/|Volo]], [[http://ender.jit.su/|Ender]], [[http://jamjs.org/|Jam]], [[http://twitter.github.com/bower/|Bower]]
  * Windows - [[http://chocolatey.org/|Chocolatey]]
  * Linux - [[http://wiki.debian.org/Aptitude|Aptitude]] or [[http://wiki.debian.org/Apt|APT]]
  * Codeigniter - [[http://getsparks.org/install]]

Polycademy's current course focuses on PHP development, so you'll have to install Composer. If you are using Linux or Mac, you can install Composer the way they demonstrate on their [[http://getcomposer.org/doc/00-intro.md#globally|documentation]]. Be sure to install it globally. If you are installing on Windows, you can instead use the [[http://getcomposer.org/doc/00-intro.md#installation-windows|Windows installer]]. You could also install it using the Curl method and then edit the PATH variables to match.

Once installed browse the [[https://packagist.org/|Packagist]] for PHP packages. If you are browsing Github repositories and you see a ''composer.json'' file, that means it's either part of the Composer package index or it's using Composer libraries. Refer to the Nettut's guide on [[http://net.tutsplus.com/tutorials/php/easy-package-management-with-composer/|Easy Package Management]] on using Composer.

One thing to note is that when using Composer with Github, [[http://getcomposer.org/doc/faqs/should-i-commit-the-dependencies-in-my-vendor-directory.md|don't commit your third party packages to Github]]. The reasons are mainly three fold, first there'll be a lot of files to commit when you're using many depedencies, secondly the git version history of those packages will be added to your own (cluttering up all your history) and thirdly they'll be recognised as a git submodule. This is problematic as they are not real git submodules. So it's important to add your vendor directory to your ''.gitignore'' file so that git will ignore it when committing. This is demonstrated in the [[Git]] page.

Composer itself can [[http://getcomposer.org/doc/articles/vendor-binaries.md|install vendor binaries]] that can be executed from the command line. In order for this to work, the binary file path needs to be added the PATH variables. This will allow packages that have command line utilities to be used easily. This will demonstrated below.

Sparks is a Codeigniter specific package manager, when installing Sparks locally, make sure to check if your OS is Windows or otherwise. If it is Windows, you will need to install it manually rather than using the command line option.
==== PATH Variable Editing ====

PATH editing allows us to run command line executables globally. Editing PATH variables is not very user friendly on Windows, so we use a GUI tool called Redmond Path. On Linux/Mac it's somewhat easier but require bash scripting in order to have the paths set permanently. The other option is checking what paths already exist using ''echo $PATH'', and putting your executable in one of the appropriate paths.

  * [[https://sites.google.com/site/redmondlab/path|Redmond Path Editor]] for Windows, use [[http://download.cnet.com/Redmond-Path/3000-2094_4-10811594.html|CNET]] to download this tool.
  * [[http://www.cyberciti.biz/faq/unix-linux-adding-path/|Guide to Path Editing]] for Linux. To permanently add paths refer to this [[http://linuxconfig.org/permanently-add-a-directory-to-shell-path|Linux Config for Path Editing]].
  * [[http://hathaway.cc/2008/06/how-to-edit-your-path-environment-variables-on-mac-os-x/|Path Editing]] for Mac.

The Redmond Path utility adds PATHs permanently to your computer. If you decide to remove Composer or move it around, make sure to remove the designated PATH, this is because having too many PATHs will be difficult to manage where your executable is coming from.

For Linux and Mac systems, to permanently add PATH variables you require to edit the ''.bashrc'' file in your home (~) directory. The ''.bashrc'' file is a text file of commands that are ran to setup environmental variables every time you launch your Bash terminal. Most terminals on Linux and Mac systems are Bash terminals. You need to navigate to your home folder, use ''ls -a'' to find ''.bashrc'' which is a hidden file. Open it up with ''vim'', and add a line like ''PATH=$PATH:path/to/binary/folder''.

For example if your composer binaries were installed in ''~/www/bin/'', you would use ''PATH=$PATH:~/www/bin''. Close and reopen your terminal and use ''echo $PATH''. You should see the resolved path of ''~/www/bin'' at the end. Note that the above instructions work in Cloud9 too.

When we start to use build tools installed by composer, you'll see this in action.

Please note that editing the ''.bashrc'' is semi-permanent in Cloud9. The file gets refreshed after a day. So it's only permanent for your session. Your session will last indefinitely as long as you are logged in. Cloud9 will save your session even if you close your browser.

==== Front End Tools ====

Our full stack course involves both the front end and back end. In order to develop for the front end, we still need these tools even if you decide to take the Cloud9 path.

=== Browser ===

First things first, I hope you have a browser! The two browsers that are suitable for development is [[https://www.google.com/intl/en/chrome/browser/|Chrome]] and [[http://http://www.mozilla.org/|Firefox]]. Firefox has been around for longer but Chrome has some bleeding edge features. Polycademy will be using Firefox mainly as it has more extensions catering to development.

=== Front End Debugging ===

[{{ :web_application_development:52717.png?200|Firebug Screenshot}}]

For front end debugging, we need to use the [[https://getfirebug.com/|Firebug extension to Firefox]]. Chrome itself has an integrated [[https://developers.google.com/chrome-developer-tools/|Chrome Developer Tools]]. 

Firebug provides an inspection mode allowing you to inspect the HTML, CSS markup, Javascript & DOM, and finally network logging data. This allows you to see how third party web sites are made on the front end.

=== Other Extensions ===

Here are some other Firefox extensions that are helpful when developing:

  * [[https://addons.mozilla.org/en-US/firefox/addon/web-developer/|Web Developer Extension]] - useful for cookies and manipulating different header options for accessing websites.
  * [[https://addons.mozilla.org/en-US/firefox/addon/fireshot/|Fireshot]] - useful for taking screenshots of web pages and creating pdfs.
  * [[http://www.colorzilla.com/|Colorzilla]] - useful for taking colour samples from web pages.
  * [[https://addons.mozilla.org/en-us/firefox/addon/firesizer/|Firesizer]] - useful for resizing your browser to specific widths and heights to test out different display resolutions.
  * [[http://www.firephp.org/|FirePHP]] - this integrates into Firebug, it allows you to log messages from PHP to the Firebug console, useful for PHP debugging.
==== Productivity Tools ====

Here are some productivity apps that Polycademy recommends. These are useful for collaboration and knowledge management.

  * [[http://www.launchy.net/|Launchy]] - quick launch apps from desktop
  * [[http://www.xmind.net/|Xmind]] - best mind mapping software
  * [[https://www.dropbox.com/|Dropbox]] - share files with your team mates
  * [[http://http://www.teamviewer.com/|Teamviewer]] - remote desktop and presentations
  * [[http://evernote.com/|Evernote]] - keep track of your ideas
  * [[http://s3browser.com/|S3 Browser]] - graphically browse Amazon S3 storage
===== Media Stack =====

As a web designer we need a couple multimedia tools to create graphics, video and audio. Web design isn't fine art, most of times we're creating simple gradients. It's the composition of different elements that is important. That being said, professional designers user professional software.

=== Adobe Photoshop ===

The king of graphics editing. We will be learning how to use [[wp>Photoshop|Photoshop]] to create website mockups. Photoshop is required to create the simplest of graphics to the most complicated digital art paintings. Although Photoshop is expensive to buy outright, Adobe currently offers [[https://creative.adobe.com/|Creative Cloud]] service allowing you to use Adobe applications on a monthly fee. Download the trial to begin the first 30 days.

=== Audio Editing ===

We won't be doing much audio editing, but if you need audio conversion, you won't go wrong with [[http://www.erightsoft.com/SUPER.html|SUPER]].

=== Video Editing ===

Video editing is best done with 4 tools. They are [[http://www.videolan.org/|VLC player]], [[http://www.virtualdub.org/|Virtual Dub]], [[http://camstudio.org/|Camstudio]] and [[http://www.adobe.com/products/premiere.html|Adobe Premiere Pro]].
===== Testing Stack =====

==== Backend Debugging ====

Front end debugging has been enhanced with the arrival of firebug and related developer tools. However for PHP, backend debugging used to be a matter of either using ''var_dump'' or logging to file in order to see what your code was doing at the time of execution. This was especially difficult when working with AJAX, and the code you were executing was not loading onto a new page, but behind the scenes. Both of these methods aren't very seamless, ''var_dump'' may break your layout and break any cache buffering. Logging to a file was a hassle, and sometimes you couldn't have a writable directory.

However there are some solutions to this. The first that I recommend is using the [[http://www.firephp.org/|FirePHP extension]] to the Firebug extension. This is an addon to firebug that allows you to log any data from PHP straight to the browser, no matter whether it was AJAX or a full page load. Just go ahead and install FirePHP into your Firefox browser which has Firebug. You also need their server side library. The developer who made it is currently upgrading it to FirePHP 1.0. However we'll be using their [[https://github.com/firephp/firephp-core|"FirePHPCore Server Library" version.]] You can install it through Composer.

<code>
"firephp/firephp-core": "dev-master"
</code>

This will be automatically autoloaded using Composer's PSR-0 autoloader. You'll mainly use ''FB::log('Message', 'Label);''. Refer to their [[http://www.firephp.org/HQ/Use.htm|official documentation on usage]].

Another option is to use [[https://github.com/Seldaek/monolog|Monolog]] which has a FirePHP handler among many other logging features as your server side library.

For Chrome users you have the [[http://code.google.com/p/php-console/|PHP-Console]].

If you cannot use Firefox or Chrome. There's a new option using the third party service [[http://phpconsole.com/|PHPConsole]]. When you use their library, it logs everything to their service. It is currently in invitation beta only. The advantages of using PHPConsole is that it can work in teams, so everyone can see the error logs, and your logs become persistent and synchronised over the internet.

=== Xdebug ===

Of course the holy grail of debugging is [[http://xdebug.org/|Xdebug]]. However this would already installed by default if you use Wampserver. It offers a much more detailed trace of any errors your programming caused.

There is however some settings for Xdebug you may want to change for purposes of development. According to the [[http://xdebug.org/docs/display|Xdebug documentation on the "var_dump()" function]], they limit the amount of children and depth you can see. During development we may need to extract the full depth and coverage of a multidimensional array, so we should change the settings to reflect this.

The three settings need to be placed in the ''php.ini''. If you're using the Wampserver package, Xdebug will already be installed and there will be an Xdebug section in your ''php.ini'' file. Add the below three lines just under the ''[xdebug]'' delimiter.

<code>
xdebug.var_display_max_depth = -1
xdebug.var_display_max_children = -1
xdebug.var_display_max_data = -1 
</code>

If you're not using Wampserver, you may need to check the [[http://wiki.netbeans.org/HowToConfigureXDebug#Overview|Netbeans wiki on configuring Xdebug]].
==== Browser Testing ====

In a perfect world, we could just develop our application for one modern browser, and it would work for all browsers. Unfortunately this isn't true. We need to manually test the layout and front end dynamic functionality through all available browsers.

We have to make a balance between the effort required to make cross-platform and backwards compatibility and the rewards gained from doing so. Therefore Polycademy suggests you to test your web app for the latest versions of Chrome, Safari, Firefox, Opera and IE > 8. If your web app/site is catering to enterprise users, you'll need to cater to IE > 7. The broader you cater your web app, the less advanced technologies you'll need to use, and the greater the amount of hacks or [[http://alistapart.com/article/understandingprogressiveenhancement|progressive enhancement methods]] are required.

To test for all browsers you'll need to download all the latest browsers from their official page. However to run multiple generations of IE, you'll need to use [[http://www.my-debugbar.com/wiki/IETester/HomePage|IETester on Windows]].

If you are using Mac or Linux, try [[http://browsershots.org/|Browsershots]] or [[https://browserlab.adobe.com/en-us/index.html|Adobe Browser Lab]] or [[https://browserling.com/|Browserling]] 

==== Unit Testing ====

=== TDD & BDD ===

[[wp>Test-driven development|Test-driven development]] (TDD) is a software development process that relies on the repetition of a very short development cycle: first the developer writes an (initially failing) automated test case that defines a desired improvement or new function, then produces the minimum amount of code to pass that test, and finally refactors the new code to acceptable standards. Creating tests like this improves code quality and forces us to think about the requirements of any new feature and also how one would break it. It also emphasises that the developer creates lowly coupled modularised code that can run as independent units. This matches well to our component map in the [[Vision and Plan]] and also enhances maintainability.

[[wp>Behavior-driven development|Behaviour-driven development]] (BDD) is essentially TDD done right. BDD was developed by Dan North because developers often asked these questions when told to implement TDD:

  * Where to start in the process?
  * What to test and what not to test?
  * How much to test in one go?
  * What to call the tests?
  * How to understand why a test fails?

BDD tests are written in natural language. It allows non-technical stakeholders to join in the testing & design process of software. It starts with a user story: "As a [role] I want [feature] so that [benefit]". This is turned into a scenario that satisfies the user story: "Given [initial context], when [event occurs], then [ensure some outcomes]". Behavior-driven development specifies that tests of any unit of software should be specified in terms of the desired behavior of the unit. Borrowing from agile software development the "desired behavior" in this case consists of the requirements set by the business - that is, the desired behavior that has business value for whatever entity commissioned the software unit under construction. Within BDD practice, this is referred to as BDD being an "outside-in" activity. [[http://blog.mattwynne.net/2012/11/20/tdd-vs-bdd/|Matt Wynne further elaborates on the difference between BDD and TDD]].

One of the great things of TDD/BDD is the fact that you can create a suite of tests that are ran everytime you commit new code or update a dependency. When your project gets larger (and your team gets larger), testing everything manually gets tiring and there could backwads compatibility problems and tight coupling (path dependency) problems that won't notice. By running these tests, you'll get code coverage reports and instantly know if your project is working or not and what changes you have to make through which test(s) failed.

The most commonly used TDD software for PHP is called [[https://github.com/sebastianbergmann/phpunit/|PHPUnit]]. Since we want to skip ahead to something better, Polycademy suggests using [[http://behat.org/|Behat]] as our primary BDD testing stack.

Behat by itself can test multiple types of applications. However in order test web applications, it requires also the installation of the Mink extension to Behat. Mink itself simply abstracts headless browser drivers,  so it requires either Sahi, Goutte or PhantomJS. You read more about them in the [[Solution Stack#acceptance_testing|Acceptance Testing Section]]. You can think of Behat plus Mink as "Application Level Testing".

{{ youtube>kB_RsoW_4Fg?large }}

[{{ :web_application_development:comparison.jpg?200|Comparison between PHPUnit, PHPSpec and Behat.((http://css.dzone.com/articles/phpspec-bdd-your-classes))}}]

However Behat plus Mink cannot test source code units. To do this, one could use [[http://www.phpunit.de/manual/current/en/|PHPUnit]]. Note that currently Codeigniter has poor support for TDD mechanics. We can still use Behat as it works on the application level though. There is a possibility of using PHP Slim framework instead.

The desired workflow then should then be to start from user stories and implement them with BDD outside-in, first by specifying the application behavior with Behat (business readable tests) and then descending into the details of classes with PHPSpec. We'll begin doing testing after we learn basic [[Web Programming]], until then don't get too overwhelmed with testing theory.

=== Acceptance Testing ===

The problem with unit tests, is that they test units, they can't test the integration between different software units unless you add an extra unit abstracting multiple child units. The ultimate abstraction is the web browser, the tool that your customers will be interfacing with. This is where unit tests fail, since you cannot compartmentalise browser interactions. However you can do acceptance testing with headless browsers.

Behat also includes the [[http://mink.behat.org/|Mink driver]], which can use with Goutte, Sahi or PhantomJS. This [[http://mink.behat.org/#understanding-the-mink|Mink section]] explains the difference between all these tools.

Follow the instructions on Behat's [[http://docs.behat.org/cookbook/behat_and_mink.html|Mink integration documentation]] to install and run Mink with Behat.

=== JS Unit Testing ===

There are many other testing frameworks available for different languages and environments. Front end development with javascript has a few well used frameworks for unit testing. [[http://pivotal.github.com/jasmine/|Jasmine]] is the main BDD framework for front end javascript. Jasmine is not tied to any particular environment, it can run anywhere there is a browser, so you run your tests via the browser.

Jasmine can be used as BDD or TDD for front end javascript. There are three extra libraries that makes Jasmine capable of testing DOM and Ajax level interactions. These are [[https://github.com/velesin/jasmine-jquery|jasmine-jquery]], [[https://github.com/pivotal/jasmine-ajax|jasmine-ajax]] and [[https://github.com/searls/jasmine-fixture|jasmine-fixture]].

Depending on the complexity of your project, your application may be more back-end heavy, or client-side heavy, or both. This will dictate where we spend most of our time. If your app doesn't use too much javascript and just involves basic jQuery scripting, there's not much reward from using Jasmine. However it is worth learning as the web development world moves more into front end development, single page apps and javascript dominance. Refer to this [[http://net.tutsplus.com/tutorials/javascript-ajax/testing-your-javascript-with-jasmine/|Nettuts tutorial on using Jasmine]].

Back end javascript involving Node.js should instead use [[http://net.tutsplus.com/tutorials/javascript-ajax/better-coffeescript-testing-with-mocha/|Mocha and Chai]].

===== Build Stack =====

==== Code Quality ====

Early on in development, we want to make sure we're using the correct syntax for our HTML and CSS. We can make use of W3's [[http://validator.w3.org/|HTML validator]] and [[http://jigsaw.w3.org/css-validator/|CSS validator]]. As you continue developing you'll make less mistakes and may have to take advantage of advanced syntax which may not validate so you'll discontinue using it.

For Javascript, we'll be using the [[http://www.jshint.com/|JSHint utility]] to keep us writing quality Javascript. JSHint can be integrated into Nodepad++ allowing you to automatically lint your Javascript code. Just look into the extensions plugin. JSHint is also automatically integrated into Cloud9's editor, so it'll tell you when you're writing bad code.

Although PHP has [[http://pear.php.net/package/PHP_CodeSniffer|code sniffer quality tool]] as well, it's a bit of an overkill, and is not required as long as you adhere to standards set in your team.
==== CSS Preprocessors ====

CSS is the styling language for HTML documents. However it isn't very powerful because it's not a programming language, it has no support for variables or functions.

[{{ :web_application_development:app-windows.png?200|Simpless Main Window}}]

Enter the CSS preprocessors. There are three types currently and they all augment the power of CSS by using DSL (domain specific language). These DSLs are usually cut down versions of CSS in order to reduce the verbosity of standard CSS, but at the same time add in support for variables, scoping and functions. They are then compiled into standard CSS using their specific compiler.

The three that are popularly used are [[http://lesscss.org/|LESS]], [[http://sass-lang.com/|SASS]] and [[http://learnboost.github.com/stylus/|Stylus]]. SASS is popular among the Ruby crowd, and Stylus is popular among the Node crowd. LESS is the most simple to use, and this is the one Polycademy will be teaching.

The best GUI tool to use on the local stack would be [[http://wearekiss.com/simpless|Simpless]]. It is cross platform and watches your LESS styles for changes and automatically compiles them into CSS when you save. If you're working on Cloud9, use composer to download [[https://github.com/leafo/lessphp|lessphp]]. It contains a command line tool allowing you to watch your ''.less'' files. This requires some setup which will be explained later. Check out lessphp's [[http://leafo.net/lessphp/docs/|docs]].

When we get to [[Web Design]], we'll start by writing some basic CSS, but quickly move on to using LESS, because it's far more powerful.

==== Phing PHP Build System ====

As you've got to this point in the course, I'm sure you noticed that a [[http://www.slideshare.net/michieltcs/building-and-deploying-php-applications-with-phing|developer's workflow]] is indeed complex and sometimes tiring. There are so many commands and so many tools, that it's very easy to make a mistake forgetting a command or workflow step.

Fortunately we have automated build systems to automate our workflow. These software stacks essentially do all the compiling, concatenating, minifying, preprocessing and testing all in one go.

[[http://www.phing.info/|Phing is a PHP based build system]]. There are others, but this is the one most suitable for PHP development. Phing can be installed locally, but as it is a command line app, it can also be installed and used in Cloud9 through Composer.

{{ youtube>QlpzwcLY0sI?large }}

=== Phing Automation ===

Phing can automate:

  * LESS compiling, concatenating and minifying.
  * Javascript compiling, concatenating and minifying (using UglifyJs)
  * Database migrations - Databases often need to be migrated from one development environment to another. This can be done manually via exporting and importing SQL, however we can automate this using Phing. This will be demonstrated later.
  * Run unit tests - We can use Phing to run our TDD and BDD tests.
  * Run Composer to update dependencies.

Phing has a [[http://www.phing.info/docs/guide/stable/|comprehensive user guide]] talking about how Phing should be setup. We'll look into the specifics of setting up our ''build.xml'' for Phing parsing later in the course. But it's important that you have it installed. If you want explore further check out this [[http://net.tutsplus.com/tutorials/tools-and-tips/how-to-use-the-nettuts-phing-build-script/|video on getting started with Phing]].

==== JS Build System ====

There are three build systems for Javascript. [[http://gruntjs.com/|Grunt]] is most similar to Phing as a true build system. Others include [[http://yeoman.io/|Yeoman]] or [[http://brunch.io/|Brunch]]. Yeoman is more opinionated, whereas Brunch is more flexible to allow you to do what you want. All three build systems rely on Node.js. Wait till you know Javascript and explored Node.js before trying these out.
===== Production Stack =====

Polycademy recommends using [[https://www.appfog.com/|Appfog]] for hosting your MVP. If you need self-hosted uploading/read/write capabilities then it is better to choose [[https://pagodabox.com/|Pagodabox]]. If you are running a polyglot app, it's better to use [[https://www.dotcloud.com/|dotCloud]]. All three cloud hosting services offer free cloud instances. They are suitable for development and production!

To start using Appfog, create an account on Appfog, setup an app, and then install the command line utility. Use [[https://docs.appfog.com/getting-started/af-cli|Appfog's CLI docs]] and experiment pushing your current directory to Appfog's instance.