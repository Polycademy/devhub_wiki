====== Web Design ======

Web design is a cross-disciplinary field involving many methodologies, areas of study and technology. Web design deals with the front-end client side of any web application. This is basically everything that the customer sees and feels about the product. It involves graphic design, user interface design, mark up such as HTML and CSS, client side scripts such as Javascript, content authoring, user experience design, search engine optimisation, disabled accessibility, internet browser quirks, and mobile responsive design. Some aspects of web design does cross over into web development so there are many grey areas. However web professionals can specialise in either web design or web programming.

We start with web design before web programming because at Polycademy we like to make the function follow the form.(([[http://gettingreal.37signals.com/ch09_Interface_First.php|Interface First]])) By working on the visual elements, the user experience, and interfacing methods first, we get a better idea of what the product will look and feel to the end user. The customer will not see, nor understand the plumbing (programming) of the application, so they won't care. Therefore we need to first plot out the design of the web application before we get to the programming. You can also think of web design as the prototype that you can test out, to see flaws that otherwise would not be noticed if you went straight ahead to programming. It also allows you to pitch it to potential investors and partners so they can see the vision.

===== Design Theory =====

Before we head into the practical stage of design with Photoshop and markup, we must first get acquainted with design theory. Design can be defined as a strategic approach for someone to achieve a unique specification of an object, which is intended to accomplish goals and satisfy requirements in a particular environment, while under constraints. It is important to understand that while design can be art, art cannot be design. Art is a means of self-expression, whereas design is a means of selling a product or service. Therefore art inspires emotion whereas design motivates actions. Art is interpreted so a different message is sent to different people, whereas design is understood so it is the same message to everyone. You can find out more about the differences from John O'Nolan's article at the [[http://www.webdesignerdepot.com|Web Designer Depot]].((http://www.webdesignerdepot.com/2009/09/the-difference-between-art-and-design/))

In this section, we'll examine theories and concepts in design that is relevant to the modern day web industry.

  - We'll first go through the philosophies in [[Aesthetic Foundations|aesthetics]] to lay down our foundations.
  - As this course is intended to teach how to design the actual web application itself, then understanding the [[User Experience Design|user experience]] of the product will be integral to design.
  - Then we'll get get more practical by examining the theory of [[User Interface|user interfaces]] which is the main thing that your customers will interact with.
  - Then we'll practice the industry standard of [[Wireframing, Mockups and Prototyping|wireframing, mockups and prototyping]].
===== Photoshop =====

At this point students should have already completed a wireframe of their product, understood their brand and theme, designed their user interface and user experience, and are ready to apply their design theory to an actual mockup.

To begin using Photoshop, we'll go through some of the common tools and options. Photoshop is a complex application but by starting with a few video tutorials you can start to see how a designer methodically and iteratively applies colours, lines and shapes to the canvas.

  * [[https://kuler.adobe.com/|Kuler]] - Colour Selection
  * [[http://thenounproject.com/|The Noun Project]] - Icons and Generic Images
  * [[http://www.sxc.hu/|Stock.xchng]] - Free stock image gallery, try to minimise the use of stock images, they often look fake and tacky. Instead take an image and modify it so it looks more generic or artsy. If you need real images, go take a real photo!
  * [[http://960.gs/|960 Grid]] - For standard website grid system
  * [[http://www.ravelrumba.com/photoshop-grids/|Ravel Rumba Grids]] - For mobile and ipad grids
  * [[http://subtlepatterns.com/|Subtle Patterns]] - For repeating patterns
  * [[http://www.fontsquirrel.com/|Font Squirrel]] - For custom fonts
  * [[https://www.filepicker.io/api/file/Lwd2zzhQMiDsqAB2WaC1|Polycademy Design PSD Template]] - For an example of how a Photoshop mockup will look when its finished.
  * [[http://graphicssoft.about.com/od/aboutgraphics/a/bitmapvector.htm|Bitmap vs Vector]] - The difference between bitmap and vector.
  * [[wp>Rasterisation|Rasterisation Process]]
  * [[http://www.telegraphics.com.au/sw/product/ICOFormat|ICO Format]] - This is so that your Photoshop can sav ''.ico'' files for Favicons. It's those small images at the top right of your browser tabs.

{{ youtube>I-RkAqxcP4o?large }}

{{ youtube>XBSr21-vOLs?large }}

**Video Based Tutorials**

The first four videos in the playlist are the most relevant to Photoshop design. Follow his instructions and try to replicate what he did.

{{ youtube>xUjHtm3vcw8&list=PLB405F6C3018255C0?large }}

Andrew takes you through web design using Photoshop. He makes good use of grids.

{{ vimeo>6520450?large }}

{{ vimeo>6520505?large }}

**Non-video tutorial**

  - [[http://psd.tutsplus.com/tutorials/interface-tutorials/photoshop-web-design-sleek/|Basic tutorial, very easy to get started]]
  - [[http://photoshoptutorials.ws/photoshop-tutorials/layouts/how-to-create-a-professional-web-layout-in-photoshop/?singlepage=1|Web App Style Layout]]
  - [[http://webdesignfan.com/design-a-clean-mobile-app-website-in-photoshop/|Single Focus Layout]]
  - [[http://psd.tutsplus.com/tutorials/interface-tutorials/how-a-simple-layout-can-be-mixed-n-matched-with-patterns-photos-and-backgrounds/|Shows the usage of Patterns, Photos and Grids]] - Do this once you have you finished at least one of the other tutorials.
  - [[http://vandelaydesign.com/blog/design/photoshop-layout-tutorials/|More for further exploration]]
  - [[http://www.smashingmagazine.com/2008/03/28/adobe-photoshop-video-tutorials-best-of/|Video based Photoshop tips]] - non web related

In class, I'll do some live demonstration of the Photoshop process. It is best to use a grid overlay to help with your proportioning so you don't need to calculate pixels just to align something.

==== Photoshop Slicing ====

Once you have your Photoshop mockup finished, it's time to get started [[http://designshack.net/articles/css/do-we-still-slice-psds/|slicing up the PSD file]] into separate images so we can use them for our HTML and CSS. There are two ways of doing slicing. You can either follow the old way of slicing as demonstrated on this [[http://net.tutsplus.com/articles/news/converting-a-design-from-psd-to-html/|Nettuts article]] or if you structured your mockup correctly with multiple layers, then you can simply export your layers one by one. The reasons this is better is because then you don't have unnecessary images. Slicing can create a lot of useless images. You should minimise the use of images, since many graphical elements can be simply be created using CSS. If you can do this, your user loads your website quicker and faster. This will be demonstrated in class. But you can try it yourself by simply duplicating your layer into a new window, trimming and cropping, then save to web.  

There's a couple guidelines for this process:

  * Use JPEGs for photographic images and images that many different colours and elements.
  * Use PNGs when you need transparency or for background graphics and icons.
  * Use GIFs for very simple images, images that have only a couple colours and are pixel sized.
  * When exporting balance between the size of the image and the quality of the image.
  * Make use of interlace for PNG and optimise/progressive for JPEG. Interlaced and progressive images will load to the browser little by little, so the browser doesn't wait for the whole image to load before viewing it.
  * Flatten your transparency to a solid colour by merging layers when that image doesn't need to move or be used in multiple places. This will give an illusion of transparency to the viewer, but you'll have a smaller file size.
  * Try using sprites for background images and icons. Sprites are a single image that has multiple images composed together. This reduces the number of HTTP requests which are one of the primary bottlenecks in loading web pages. This reduces your flexibility, so only use this for images that won't change a lot. Do not use sprites for images that are part of an article. People may want to download those images independently.
  * You can also use data URIs to further reduce the number of HTTP requests. These images become text by running through a base 64 filter. However the support and flexibility for this is worse than sprites. IE7 and lower cannot view data URIs.

===== HTML & CSS =====

At this point, it's time to turn that Photoshop layout into HTML and CSS markup. By the end of this section, you'll officially become a web designer. Before we go straight writing markup, we need to take some time to understand the syntax, structure and tools that web designers use to write HTML and CSS.

==== Syntax ====

The syntax of HTML and CSS is your own responsibility. You're expected to read through the documentation and have it open to reference when coding. Don't try to remember it all, instead learn to practice immediately what you read.

  * HTML Syntax - [[http://reference.sitepoint.com/html|Sitepoint Documentation]] and [[https://developer.mozilla.org/en/docs/HTML|MDN Documentation]]
  * HTML5 API - [[https://developer.mozilla.org/en-US/docs/HTML/HTML5|MDN Documentation]]
  * CSS - [[http://reference.sitepoint.com/css|Sitepoint Documentation]] and [[https://developer.mozilla.org/en-US/docs/CSS/CSS_Reference|MDN Documentation]]
  * CSS Starters - [[https://developer.mozilla.org/en-US/docs/CSS/Getting_Started|MDN Documentation]]

=== CSS Preprocessor ===

CSS also has its share of preprocessors. CSS itself is a very basic markup language. It's not a programming language which means it is very simple. But its simplicity means that it's not very powerful and when you need to write up CSS for hundreds of pages, it can get messy very quickly. That's why we use CSS preprocessors. These provide extra syntax to the CSS language and then compiles the language when we're done. It allows us to modularise our CSS code and import them when compiling. It will also concatenate and minify our CSS files so that the HTTP response is smaller thus speeding up your web application. There are several CSS preprocessors. The most popular in use is [[http://webdesign.tutsplus.com/tutorials/htmlcss-tutorials/get-into-less-the-programmable-stylesheet-language/|LESS]].

The LESS reference page is at the official [[http://lesscss.org/|LESS documentation]]. In order to compile LESS into CSS, you can use Simpless if you're on the local stack. Or if you're using the Cloud Stack, you'll need to use lessphp as a command line tool to watch out CSS files and compile them whenever there are any changes. Refer to the [[Solution Stack]] to acquire these tools.

We're going to go straight to learning LESS since it incorporates CSS. However the LESS documentation obviously does not contain basic CSS. So you'll need to refer back to the CSS documentation before you can understand how to use LESS.

{{ youtube>1l3JgDGl_Z8&list=PLwwh-11EOGvMYzAz6MxIK_2R15KRvlrXa?large }}

Furthermore, since many CSS3 properties are still at developmental stage, browser vendors actually prefix CSS3 rules with their particular browser engine name. We could write each CSS3 rule and add their browser vendor prefix, or we can use a package called [[http://clearleft.github.com/clearless/|Clearless]]. It provides a comprehensive mixin library to make CSS a breeze.

==== HTML/CSS Framework ====

We're going to be using [[http://twitter.github.com/bootstrap/|Twitter Bootstrap]] combined with [[http://html5boilerplate.com/|HTML 5 Boilerplate]]. HTML 5 Boilerplate is simply a single HTML file with an assortment of addons which demonstrate the best practices when it comes to creating modern HTML and CSS. Twitter Bootstrap is a design framework offering its own brand of CSS functionality that you can immediately plug and play. Basically the granular CSS work to create grids, nice looking forms, tables, responsive design and other UI elements already exist. This doesn't mean you can't customise it, everything can be overwritten, however it will really speed up your development time.

Refer to the official documentation of Twitter Bootstrap and HTML 5 Boilerplate to get a feel of what they offer. Note that these two frameworks can also be used on HTML5 Mobile apps, however it's probably better to not use Bootstrap because many of their functionality will be overkill and you won't really use it. So that means using this framework does not mean you don't have to learn basic HTML and CSS, especially when you want to do something out of the ordinary.

H5BP and Twitter Bootstrap can be combined manually, but instead we can simply use a service called [[http://www.initializr.com/|Initializr]] that automatically packages these together. So head to Initialzr and click on the Bootstrap option. Leave the top grid of options as their defaults, for the H5BP optionals, click to download all of them.

It's up to you to study the syntax of HTML and CSS, and then studying the API of Bootstrap plus the [[https://github.com/h5bp/html5-boilerplate/blob/v4.1.0/doc/TOC.md|features in H5BP]]. We'll go through common UI elements using these two frameworks later, and but you'll be applying those concepts to your UI when we're in class.

There is a [[http://html5boilerplate.com/mobile/|mobile variant of H5BP]] as well. Use this as a reference when starting a mobile design.

==== Generic Skeleton ====

This generic skeleton uses Initializr's packaged Bootstrap and H5BP, but slightly modifies it so you can see multiple elements in action. It is commented, so go through each one and test them out in your development environment. It also uses LESS.css and the lessphp compiler. If you're cloning this on your own local stack, you should use Simpless instead. Note that LESS will not be highlighted properly if the IDE does not have a LESS parser. You will simply use CSS based highlighting.

You can find the project respository on [[https://github.com/Polycademy/commonui|commonui Github repository]]. Navigate to the ''app'' directory on the ''master'' branch. Look for the ''index.html'' and ''css/main.less''.

This video demonstrates the installation of the initializr package on Cloud9 and integrates LESS and lessphp into the project. It basically shows how to setup the basic skeleton as shown above. Note that your CSS files are not minified via this method, but requires an extra minifier to do this. We can do this using the Phing build system later. Remember to refer to the [[https://github.com/leafo/lessphp#how-to-use-from-the-command-line|LESS documentation on the command line usage of plessc]]. Note that lessphp currently does not support lesshat. Use clearless instead.

The video below shows how to create a symbolic link in the bin directory to the plessc in the vendor directory. The link is prefixed with the ''~'' operator to indicate home. A better way to do it is actually to simply use relative links such as ''../vendor/leafo/lessphp/plessc'' instead of the ''~/NUMBER'' link. This is because your ''NUMBER'' may change over time due to cloud virtualisation.

{{ youtube>i9l1JQxG5og?large }}

==== Common UI Elements ====

This section will demonstrate some common elements that are used in HTML and CSS. It will also have a standard skeleton of a generic website. You will need to learn these concepts and syntax structure and apply to your own layout. Make sure to have Firebug ready so you can inspect the code and make changes to them to see the effects. You can even clone the repo your local/cloud stack. The code has embedded comments are isolated from other page components.

  * [[http://polycademy.github.com/commonui/|Common User Interfaces Demo Site]] - to see the HTML/CSS executing live and their corresponding code examples.
  * [[https://github.com/Polycademy/commonui|Common User Interface Github Repository]] - clone this into your Cloud9 project and play around with it.

You should also read these articles which talk about specific theories or quirks of certain HTML and CSS constructs.

  * [[http://coding.smashingmagazine.com/2007/07/27/css-specificity-things-you-should-know/|CSS Hierarchy/Specificity]] and [[http://css-tricks.com/specifics-on-css-specificity/|Demos of CSS Specificity]]
  * [[http://www.impressivewebs.com/difference-block-inline-css/|Inline vs Block Elements]] & [[http://www.impressivewebs.com/default-css-display-values-html-elements/|Default Display Values for HTML Elements]] & [[http://designshack.net/articles/css/whats-the-deal-with-display-inline-block/|Display Inline Block]]
  * [[http://net.tutsplus.com/tutorials/html-css-techniques/the-30-css-selectors-you-must-memorize/|CSS Selectors Reference]]
  * [[http://coding.smashingmagazine.com/2011/07/13/learning-to-use-the-before-and-after-pseudo-elements-in-css/|Before and After Pseudo Element Selectors]]
  * [[http://www.smashingmagazine.com/2009/03/03/how-to-use-icons-to-support-content-in-web-design/|Using icons to support content]]
  * [[http://www.smashingmagazine.com/2008/06/12/block-quotes-and-pull-quotes-examples-and-good-practices/|Block quotes and pull quotes for typography]]
  * [[http://twitter.github.com/bootstrap/scaffolding.html#responsive|Responsive utility classes from Twitter Bootstrap]]
  * [[http://coding.smashingmagazine.com/2009/07/27/the-definitive-guide-to-using-negative-margins/|Guide to using Negative Margins]]
  * [[http://coding.smashingmagazine.com/2009/09/15/the-z-index-css-property-a-comprehensive-look/|Z-index Guide]]
  * [[http://html5doctor.com/i-b-em-strong-element/|Guide to using i, b, em and strong elements in typography]]
  * [[http://www.html5rocks.com/en/tutorials/forms/html5forms/|HTML5 Forms and New Elements]]

You may see some unconventional grid or animated layouts that aren't supported by Bootstrap alone. These often require javascript to get the right effect. Try these:

  * [[http://suprb.com/apps/gridalicious/|Gridalicious]] - Column style grids, good for image galleries with differing sizes.
  * [[http://fluidsquares.com/|Fluid Squares]] - Rather than columns of varying heights, it has exact squares that are fluidly adjusted.
  * [[http://www.turnjs.com/|Turn JS]] - Flip the pages instead of reloading them.

CSS3 provides animations, transitions, transformations, filters and more. These are quite specialised topics involving some understanding of math. You will not need this for designing most web sites and web applications. However if you do, these two resources should suffice:

  * [[http://css3.bradshawenterprises.com/|CSS3 Transitions, Transforms, Animation and Filters Tutorials]]
  * [[http://coding.smashingmagazine.com/2011/09/14/the-guide-to-css-animation-principles-and-examples/|Guide to Animations and Animation Theory]]

These effects can be replicated in javascript, however the advantage is that these are usually rendered faster by the browsers that support it. On the other hand, only the latest browsers support this functionality. Using these effects would be useful for HTML5 mobile applications.

==== UI Video Tutorials ====

Watch these 3 video tutorials when beginning your Photoshop slicing and HTML/CSS markup.

  * [[http://webdesign.tutsplus.com/tutorials/complete-websites/twitter-bootstrap-101-introduction/|Twitter Bootstrap Video Tutorials]]
  * [[http://net.tutsplus.com/sessions/photoshop-to-html/|From Photoshop to HTML & CSS]] - this has 9 screencasts taking you from the Photoshop slicing to the final HTML and CSS output. Your final output is this: {{ :web_application_development:final_small.jpg?400 |}}
  * [[http://net.tutsplus.com/articles/news/slice-and-dice-that-psd/|Slice and Dice that PSD]] - this starts from an already made PSD file and has a video turning that into HTML and CSS. Your final output is this: {{ :web_application_development:thehtml.png?400 |}}
==== Debugging ====

When doing web design or front end development, the browser shows the final output, but doesn't really tell you what's going on inside the browser. You need a front end debugger to show how the browser interprets your HTML/CSS and javascript. The two main browsers that come with good front end debuggers is Firefox and Chrome. Chrome has its own web developer tools which you can access by right clicking and going into inspect element. However Firefox requires an installation of the Firebug extension. This section will focus on the firebug extension.

{{ youtube>tdIk2PztcL0&list=PLwwh-11EOGvODmCKnjDwv7XWXj46mGDlx?large }}

Firebug is accessed via the right click context menu. It opens up an embedded console with 7 tabs: Console, HTML, CSS, Script, DOM, Net, and Cookies. For the purposes of design you'll mostly use HTML, CSS and Net. When you start to get more deep into front end development with javascript, you'll start to look into using the Console, Script, DOM and Cookies.

The HTML tab shows a structured and collapsed version of your HTML markup. You can explode the elements with the plus button to get a deeper look at the nodes. The panel is also interactive, you can edit the HTML and it will be immediately represented on the page in realtime. Try changing the attributes inside each tag or the textual content in ''<p>'' tags.

On the right of the HTML panel, is a secondary panel with Style, Computed, Layout and DOM. Style contains the combined CSS rules that apply to the HTML element you are currently focused on. It tells you the selector, the rule and which file the rule came from. You can also edit this in real time, this allows quick iteration of different colours or positioning straight from your browser.

The Computed tab shows the final output from those rules that the browser has calculated. This is useful when you have CSS rules that overwrite each other, you may want to know what the final value is, instead of following the order of overwriting. The Layout tab shows the dimensions and coordinates of each element. This is useful when you want to know which part of the element is margins, padding, border or internal width/height. The DOM tab shows the DOM functions and properties accessible from that HTML node.

The CSS tab focuses on just the CSS. The main panel shows all the CSS rules according to the file it came from. The secondary panel asks you first to type in a CSS selector, and it will show all the HTML nodes that have that CSS rule applied to it.

When you have written some HTML and CSS, and then tested in the browser, you may find that the behaviour was not what you intended. That's when you use Firebug to find out the CSS style or offending HTML node that is causing that behaviour. Sometimes it is a matter of trial and error, you have to disable or change rules and see the behaviour change in real time. As you observe the results, you'll be able to make the necessary adjustments.

The Net tab will show you the performance of your page. It will show you all the HTTP requests are being made while accessing your page. This can show you bottlenecks and which files are taking longer to load than others. It is also useful for AJAX as you can see what data is being piped and received.

You should also use Firebug to inspect other websites so you can learn from them, especially any design sites showing a demo of HTML and CSS markup.

When you start working with javascript and AJAX, it is important to use Firebug to inspect your DOM properties and adjust them on the fly. You can also check the Cookies tab so you can see if the cookies you set were set properly. Finally you can use the Console to interactively execute javascript on the page. The Console is a useful learning tool, but any commands will affect what's on the page.

Please note, anything you change on Firebug is only temporary for your browser session. It does not permanently change anything in your files.

===== Browser Testing =====

The aim of cross-browser testing is to ensure that your design looks the same and works across all browsers. There are not only different browser models, but different browser versions. Older browsers don't support the latest technology that we are using in both javascript, HTML and CSS. This is why we need to use [[http://remysharp.com/2010/10/08/what-is-a-polyfill/|Polyfills]]. Luckily for us, experienced developers have done the hardwork in creating cross-browser Polyfills for us to use. Polyfills are basically fallback techniques that implement the features in non-compliant or older browsers. There are several techniques involving Modernizr, HTML5shims, jQuery, user-agent detection and standard if this then that javascript. 

If we have advanced javascript we want to implement, then most major libraries automatically abstract away the fallback strategies, they'll automatically use the polyfill. However if you're doing something unconventional, then you'll need to research on browser quirks to find the correct functionality. This can be as simple as googling the functionality for that browser, or as difficult as digging into the browser developer documentation.

If you have newer html5 elements such as ''<section>'', then the HTML5shim takes care of that, by converting it into a normal ''<div>'' element. Since we are using HTML5BP and Bootstrap, this is already done for us.

If you're using advanced CSS3, then you have three options. You can either use javascript to reimplement the same functionality. This is more costly, because javascript is slower than parsing CSS, but javascript is more flexible than CSS. The second option is implement it via proprietary CSS rules that are not part the international standard. You can most likely find it across various web development blogs. The third option is implement a concept called graceful degradation or progressive enhancement.

==== Graceful Degradation & Progressive Enhancement ====

These two concepts are just two ways of saying the same thing. If we were to implement some of the newer technologies without any fallbacks or degradation strategies, then when older browsers visited, it would just break with the page being unusable or even freeze the browser itself. This is not very good for user experience. This concept simply states, that instead of trying to replicate the same functionality, just gracefully degrade the experience for them. Think like this, instead of 3D, do 2D. Instead of transparency, just use a flat colour. Instead of several javascript transitions, have them instantly popup.

You have to balance the effort to cost though. Is the reward of creating a degraded experience for older browsers worth your time. Sometimes it may be better to simply tell them that they have an old browser, and they need to upgrade before using your web application.
===== Mobile Design =====

There are two ways of designing for mobile phones. It is fluid design based on either graceful degradation for mobile browsers, or via the mobile first strategy. The second is creating a full fledged mobile app. You have to decide for your requirements, whether your mobile app is a full featured app using either Phonegap or native development toolkit, or whether your mobile app is actually a mobile website.

For Polycademy, we're going to focus more on fluid design with graceful degradation. This is where we start with a full desktop based web page, and fluidly stretch down to mobile appropriate design and gracefully degrade some unnecessary elements. If you are want a separate mobile app, then you can simply start straight from a mobile appropriate design. But you should do that in your own time. As for [[http://designshack.net/articles/css/mobilefirst/|mobile first strategy, you can read this article]] to find out more about it. The skills to do both aren't different, you're still using the same old HTML and CSS.

In order to demonstrate fluid design with graceful degradation. You should take your desktop designed site from HTML5BP and Bootstrap, and simply resize your browser down to see how it will look on a mobile phone. Bootstrap will automatically stack your columns vertically. You'll probably see a few things out of place and will want to apply extra CSS rules to make them fit correctly.

The next step is to gracefully degrade the experience. Mobile phones don't need as many options and controls to be useful. In fact adding that many elements will clutter up the screen. One common thing that gets degraded is the amount of adverts on content sites. Often when the screen gets smaller, there'll only be one header advert, and the rest may be sprinkled between the content. But there won't be sidebar based adverts. Another is the menu. The menu would be shrinked and collapsed into a menu button, this can automatically be done in bootstrap. When designing for mobile, less is more. So think about what you want to remove or be able to resize.
==== Mobile UX ====

Mobile user experience has its own peculiarities. Mainly with the fact that the screen is smaller, so we either need to stretch/crop our elements to be viewable on a smaller screen, and of course the philosophy of "less is more". Take a look at the below sites for each topic.

  * [[http://24ways.org/2012/responsive-images-what-we-thought-we-needed/|Responsive Images]] and [[http://adaptive-images.com/|Adaptive Images]] - our images not only need to be resized, but also their sizes should also be smaller.
  * [[http://uxdesign.smashingmagazine.com/2012/10/30/motion-animation-new-mobile-ux-design-material/|Principles of Animation for Mobile Apps]] and the same for [[http://coding.smashingmagazine.com/2011/09/14/the-guide-to-css-animation-principles-and-examples/|CSS]] - good for standard desktop design too!
  * [[http://webdesignerwall.com/tutorials/css-elastic-videos|CSS Elastic Videos]] and [[http://fitvidsjs.com/|jQuery Elastic Videos]] - to fit videos on a mobile screen.
  * [[http://www.nngroup.com/articles/condense-mobile-content/|Mobile Copywriting]]
  * [[http://blog.cloudfour.com/on-mobile-context/|The context of how people use Mobile Apps]]
  * [[http://uxdesign.smashingmagazine.com/2011/07/18/seven-guidelines-for-designing-high-performance-mobile-user-experiences/|Designing for Performance]]
  * [[http://mobiledesignpatterngallery.com/mobile-patterns.php|Mobile Design Pattern Gallery]]

===== Single Page Applications =====

Single Page Applications (SPAs) are web apps that are loaded completely by javascript. Basically when you first access the website, it'll return a full feature client side javascript MVC based business logic. Each action or navigation will actually be carried out by the javascript and the page should remain persistent, that is there would be less page refreshes or loads. You can see this in Facebook and Github. You can learn more about designing for Single Page Applications via the below references:

  * [[http://christianheilmann.com/2011/12/28/on-single-page-apps/|On Single Page Apps]] - in terms of usability concerns.
  * [[http://backbonetutorials.com/seo-for-single-page-apps/|SEO for SPAs]]
  * [[http://singlepageappbook.com/|Single Page App Online Book]]

===== Copywriting =====

Copywriting is the act of writing copy. Copy is text that is used with finished design products such as websites, web applications or posters. You are doing copywriting everytime you're writing to make your user do something or commit to some action. You're also doing copywriting when writing menus, context actions and button texts for the controls of your web application. You're also doing copywriting when you're blogging, but blogging involves more than writing to sell, but writing to educate, persuade and inform.

I wouldn't get too deep in learning about copywriting, it's more a black art, and 90% of anything is crud. But take a look at this [[http://heronacademy.com/lab/copywriting/copywriting-for-beginners-part-1|copywriting tutorial]].

===== SEO =====

SEO is a black art in the web world too. So don't get too focused on it. However this [[http://www.slideshare.net/randfish/the-death-rebirth-of-seo|slideshare demonstrates the world of SEO]] quite well.

{{url>http://www.slideshare.net/slideshow/embed_code/9492949?rel=0 427px,356px noscroll noborder}}