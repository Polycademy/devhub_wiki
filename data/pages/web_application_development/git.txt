====== Git ======

Git is distributed version control system (VCS). It is used by developers to collaborate, share and keep track of code contributions. It's invaluable for software development teams. Other kinds of VCS exist as Subversion or Mercurial, but Git is the only one that is distributed. Git's not only useful for software development, it's also been used by the German government to keep track of political bills. At its core, it's simply a version history tracker of text files, this gives it a lot of flexibility and further applications include keeping track and collaborating on writing novels, keeping track and collaborating on scientific experiments. Git is also useful for designers to keep track of the evolution of their designs. In fact there's a couple startups focusing on bringing the concept and practice of VCS to non-software developers.

===== GitHub =====

[[wp>Github]] is web service that allows developers to host their source code online using the Git [[wp>revision control system]]. Github provided very user friendly web based front-end to Git, which is normally a command line tool. We will be using Github and its associated software in class and out of class, there we have to learn how to install it on your local computer.

==== Installation ====

To begin, go to Github's main website and signup to a free open source account. Once signed up, you'll receive a validate email message in your inbox, you can validate it later.

[{{ :web_application_development:github_for_windows-screenshot.jpg?200|Main Window of the Windows Github Client}}]

Now at this point we can create a new repository via Github's GUI. This should be done if you're intending to use Github with the [[Solution Stack#cloud_stack|Cloud Stack]]. You then need to connect your Github repository to the Cloud Stack's git client. Refer to the Cloud Stack documentation as to how you're meant to connect them both. Make sure to pick a good name for your repository. It should represent your project's name. If you instead are using the local stack, then don't create a repository just yet. It's easier to download a Github's GUI client and open up a repository and then synchronise to Github. If you're intending to use Github locally and on the Cloud, then this is the route you should take too.

Github provides 2 desktop GUIs. There is one for [[http://windows.github.com/|Windows]] and one for [[http://mac.github.com/|Mac]]. Linux already has many git clients, you can take your pick at the [[https://git.wiki.kernel.org/index.php/InterfacesFrontendsAndTools#Graphical_Interfaces|Git User Interfaces Wiki]]. All git software works roughly the same, so the below instructions will be biased towards the Windows Github client, but play around with the other clients and it should work.

The Github installation installs a "Git Shell" and a "Github". We'll be using both the GUI and the command line to work with Git. The GUI makes some things simpler, but the command line gives you more options and information as to what is happening.

==== Setting up the Environment ====

In web application development, code is hosted on servers. There will usually be two servers used for two different purposes. The first is your local development server, this is usually your own computer. The second is the production server, this will be the server that runs the application for your external users. For our case, Github will act as an intermediary development server between the your local development server and the production server. This is to allow a team of developers to work on a single project while still maintaining their own local file integrity. However we want to be able to synchronise the files between development server and Github so we don't have the manually upload files or code changes (which are known as "commits" in Git).

[{{ :web_application_development:github_development_workflow.png?200|Simple Git Deployment Workflow}}]

If you're working on the Cloud Stack, then the cloud IDE would be our local development server. Or it could be your second development server. Using Git allows you to have multiple independent development servers which can have their own version of the project, all working independently and yet can come together to merge when its time to deploy. This is the meaning of git's //distributed// version control system.

Let's setup our git client to work on our Local Stack. If you're using Wampserver, the ''wamp/www'' directory is where the code for your web applications will be executed. This is where we're going to set the default location for your git repositories.

Launch the git client, and go into tools then options. On the top right there should be a section titled "default storage directory". Make the following file path to match the file path that gets you into your "www" or "public_html" directory. You can click on the "..." button to navigate there. If you are on Windows, it should be "C:\wamp\www\". Note that you can if you want create a subdirectory called "polycademy_projects" inside that folder so you can separate your local projects from your Polycademy projects. At this point, you should also login via your Github account and setup your full name and email. Once this is done, click "update" on the bottom.

Now we're going to create our first repository. Git works as a distributed system. This means your local repositories are essentially folders on your computer. Your remote repositories are folders on Github's service. These repositories are separate. It's not like Dropbox where whatever you edit will automatically synchronise. You have to tell git to explicitly synchronise. The point is that you can have git manage your local repositories and you never have to interact with Github. But that's not really fun. By keeping a copy of your project on both your local repositories and Github's repository, this allows your teammates or yourself to clone your project remotely and keep working on it. No more carrying around documents and projects on USB sticks or downloading/uploading via ftp. Try using it for your non-related programming work! It's great for word docs too!

If you used Cloud9 to setup your repository, then you should already have a remote repository on Github. You can check out your remote repositories by navigating to your Github account on the left panel of your git client. You can then click clone to download your remote repository to the location you set as your default storage location. This should go into your www directory.

If you didn't start with Cloud9, it's very simple to create your first local repository. Just create a new folder in your www directory and drag it into the git client. This will automatically initialise a new local git repository. You can write a custom name for it, although it's best to leave it the same as your folder. Try using snake_case instead of normal spacing, this is a standard file naming practice across software development. You can give it a small description, and choose to whether push it to Github or keep it as a local repository.

Once you have your local repository setup, you can click into it. Now anything that goes on in that folder will be tracked by Github. Any changes to any files or new files will automatically be tracked. Once you commit the files, you can hit the sync button which will push your local changes to the remote repository on Github.

===== Basic Usage =====

We're going to get acquainted with the git command line. If you're on Cloud9, just launch your terminal. The ''git'' command is globally installed. If you're using the git client, go into your new project and hit tools, open a shell here. This will open up the terminal at your project repository. Note that in the main git client options you can choose which kind of terminal shell you would like. It's probably on the standard cmd if you're using Windows. It's better to choose Powershell when you have that installed.

  * ''git add'' - is used to add files to the staging area. It creates a snapshot of all the files and this prepares them for committing into the git version history tracker. This is located in .git hidden folder. You can use ''git add .'' to add all files or ''git add //filename//''. To add in deleted files, that is if you deleted any files, you would have to use ''git add -u'' to stage those commits. A shortcut to do both ''git add .'' and ''git add -u'' is ''git add -A''.
  * ''git commit'' - is used to commit added files to the version history tracker. By default you need to add a descriptive message to each commit. It may seem cumbersome at the beginning, but it's very important that you add descriptive messages. This will help your teammates understand what changed and also yourself when you're trying to hunt down a previous version. Use ''git commit -m //message//'' to commit and add a message.
  * ''git push'' - is used to push your current repository to a remote repository. You need to have initialised a repository on Github to do this. The Github client will do this automatically. Sometimes you have use ''git push origin master'', where origin is the upstream alias of your remote repository and master is the name of the remote branch (it will create it remotely if it doesn't yet exist). The push will merge your changes to the remote repository.
  * ''git pull'' - is the opposite of ''git push''. This pulls in the remote repository and merges with your own. You may need to use ''git pull origin master'', where origin is the alias of your remote repository and master is the name of the remote branch.
  * ''git status'' - use this to show if there are any file changes that have not been added or committed. Useful to know when you want to know if you want to complete a synchronisation.
  * ''git remote'' - shows your remote aliases. Use this when you want to know how many remotes you have and what their aliases are. You can then use their names to push to or pull from. A git repository can have many remotes.
  * ''git remote add'' - use this to add extra remotes to your current repository. You need to add to extra parameters like this ''git remote add //remotename// //ssh-url//''. The default remote alias should be origin, and the ssh-url can be acquired from any Github repository. Github's ssh-url looks like ''git@github:/Polycademy/polycademy.git''.
  * ''git branch'' - use this to show what branches you have on your current repository. You can add extra branches by specifying a branch name like ''git branch //branchname//''.
  * ''git checkout'' - use this to switch branches. You need to add the name of the branch like ''git checkout //branchname//''.
  * ''git checkout -b'' - use this to create and checkout the branch at the same time like ''git checkout -b //branchname//''. It will normally be used to pull in a remote branch like ''git checkout -b //new_branch// //origin/new_branch//''.
  * ''git clone'' - use this to download a repository that you don't control. Normally it will also download their git history, to avoid that use ''git clone --depth 1 //url_to_git_repo//''.
  * ''git merge'' - use this to merge branches together. You should first ''git checkout branch_to_receive_merge'', then ''git merge branch_to_be_merged''.
  * ''git rebase'' - use this to take the current branch's commits and apply them on top another branch. Like this ''git checkout branch_to_rebase'' then ''git rebase branch_to_rebase_into''.

You should always pull before pushing, if you know that your remote repository is more up to date than your local repository. This is true when working with teams. Doing this and communicating with your team on which files you're editing will avoid merge conflicts. So never work on the same file simultaneously.

{{ youtube>DQUcmNO4diQ&list=PLwwh-11EOGvPkZPJi8pYsC9b0ysZW3_52?large }}

===== Using Branches ======

Each repository will have multiple branches, branches are basically duplicates of the code base but with specific changes in them. This allows teams to separate what they consider production ready code to developing code to specific feature sets. Right now your repository only has one branch and this is the master branch. We need to create a develop branch and feature branches for your specific part of the project. To do this, go to the local repository list, open the repository in the GUI, then on the top middle there is a tab called "master". Click on it and a drop down menu should appear. You can create or change branches in this menu or you can go into the advanced "manage" panel. By typing a new branch into the FILTER OR CREATE NEW input you can then create the "develop" branch.

{{ :web_application_development:create_branch_github.jpg |}}

The develop branch is where the most of the work will be merged between all the developers in the team. The master branch will be the production ready code. We will be creating new branches for whenever we need to create a feature set. Branches allow a project to be worked on in a distributed manner and we merge back the branches to develop then master when they are ready to run. Note that as you create branches in the Github GUI, they won't be published to the Github server. You need to click "publish" for that to happen. Branches are created on top of existing branches, so they can grow from a base branch. The develop branch should "branch off" the master branch, and the further feature set branches should "branch off" the develop branch. You will need to go into the "manage" panel in the branch menu to do that. (It's also used for merges) Now that you have multiple branches created, you can select your current branch your Github will track. This means that any changes to your code in your filesystem will only be recorded and committed into the currently selected branch. Make sure to keep track of this as you don't want to commit untested code to your master branch.

===== Reverting Commits =====

But if you do commit a bad change, we can revert code easily. This is one of the greatest advantages of using a revision control system. To use this we must first understand how code changes are tracked by the Git software. Let's use the current develop branch that we just created. Assuming it is currently unpublished, then none of the changes will be committed to the Github server. Go into your project on your file system and create a text file with any code. Save it and then check the Github GUI. It should show that there are some "uncommitted changes". If you click on that it will show the list of uncommitted changes. It should show that there is a new text file and the contents of that text file. If you go back and change the file again, you will see the changes reflect in the uncommitted changes. Let's go ahead and commit those changes. Remember to check that your current branch is still on the develop branch that is unpublished. You should write a commit message describing what the point of the code change is for.

{{ :web_application_development:uncommitted_changes.jpg |}}

You will now see that there are no more uncommitted changes, but there is new unsynced commit. Clicking on the right will show you the recent committed code change. Let's say you didn't like that commit. Then right now you can either revert commit via Github GUI, or you can go into the file/folder and remove offending code/file via your explorer. It is better to linearly progress through your code (to get an accurate history) so try to remove it via your explorer (and give a reason) rather than through Github. Specific commits throughout your history can get reverted as well, so it doesn't have to be in order, however this may result in merge conflicts with other files so it's best to avoid trying that function.

It is possible to rollback your commit. This means to rollback your unsynced commit to an uncommitted commit. All of these features are powerful however it is very easy to get into merge conflicts with historical revisionism. It also confuses your team members if you mess with public history. So it's best to just linearly progress through your coding and use the history not as administrative tool but as a historical tracking tool. If you do get into a grandfather paradox where you deleted the file not in sequence and did some reversions then some other changes, then you can resolve this by rolling back to the committed commit that caused all the problems.

It is also possible to commit multiple code changes in multiple files at the same time. For the purposes of early development it is better to commit once per code change per page. Although you may get a messy unsynced commit history, you get a more precise history.

Now after you have committed all your code and you have created a working feature, it is time to sync it with Github server. Since our branch is currently unpublished, we cannot sync it. So first click publish and let Github GUI upload your develop branch to your project's repository. Once this is done, its status should show "in sync". Congratulations on committing then syncing to your first code change on Github! After the branch is published when you have committed commits, then click sync to sync them to the remote branch.

To do the same on the command line refer to the page on [[http://git-scm.com/book/en/Git-Basics-Undoing-Things|Git Scm Book]] on undoing things.
===== The Merge Workflow =====

With the power of the distributed version control, comes the problems of merge conflicts. Imagine you're work in with another team member. You create a branch off the main branch to work on a special feature. He does this as well. He decides to edit ''config.php'' for his feature branch. You also edit ''config.php'' in your own branch. Then your team member merges his feature branch back into the main branch. You do a ''git pull'' in order to pull in his changes that are now on the main branch into your feature branch. Git throws an error, you have a merge conflict on ''config.php''. Note that the main branch could also be the remote repository main branch, and your feature branch could just be your local repository's main branch.

The easiest way to avoid this, is to avoid working on the same files. This requires constant communication on what features everybody is working on. However sometimes this is unavoidable. You can resolve this merge conflict by going into the conflicted file, merge the file by hand then save it. You'll see the merge conflict demarcated with something with ''HEAD''. The head section is your team mate's change, and below is your own change.

Once you've removed those git marks and merged the file by hand, save the file and then re add the file to the staging area with ''git add .''. Then continue the merge with the command that the git terminal told you and you'll complete the merge. 

Now this merge workflow doesn't work well when there are multiple developers. [[http://randyfay.com/node/89|Your git history will look like a merge mess and it isn't pretty]]. There is an alternative, it's called the Rebase Workflow.
==== Rebase Workflow ====

The first thing is to make sure is to never work on the master branch unless you immediately push to the remote to keep it synchronised. Local masters and remote masters should never be different. The local master branch should always be kept up to date with the remote master branch by doing regular ''git pull''.

When you clone a project, branch off the master branch with a feature branch. Work on your feature branch and commit them to your feature branch. The feature branch can have a corresponding remote branch, but that's not necessary.

Once you've tested your feature branch and is confident it's ready for the master branch, make sure you're on the feature branch and do a git rebase.

  git checkout featurebranch
  git rebase master

This creates a temporary branch that contains all of the master commit history (including any commits your team mate made in parallel) and applies your commits from the featurebranch on top. You should make sure that your master branch is up to date before doing this. It as this point that git will notify you of any merge conflicts. Manually resolve your conflicted files, do a ''git add .'' then ''git rebase --continue''. Now if you look at your feature branch you'll see your version history include all the up to date master commits and with your changes on top. This creates a more linear version history that makes more sense and is easier to look through. The temporary branch will be deleted automatically. You can continue working on your feature branch if you haven't finished and you can do more rebases. Or you can decide its time to push to the master.

Now it's time to merge the rebased feature branch into the master branch.

  git checkout master
  git merge featurebranch

Because your feature branch was rebased to include all of master's history, it will be a fast forward merge. This doesn't create ugly merge commits in your history, and simply takes your feature branch history and synchronises it into the master branch. Your version history now looks linear even though work was done in parralel. Push it to remote main. Your team mate can then pull the master into his master, and this should work well, because he never does any work on the master directly without immediately pushing. He can then execute the rebase workflow to bring his feature branch up to date and merge into the master, before finally pushing again. You can now delete your feature branch as it's no longer useful. Rinse and repeat for any new features you want to work on.

Your team now has a kind of seesaw approach, where everyone takes a turn pushing to the master. While this si happening, everyone synchronises with the remote, then everyone creates their own feature branch, rebases, resolves merge conflicts, merge into master then take their turn pushing. As soon as a team mate merges, everyone synchronises with a pull and a rebase.

To learn more about the rebase workflow see:

  - http://git-scm.com/book/en/Git-Branching-Rebasing
  - http://stackoverflow.com/questions/457927/git-workflow-and-rebase-vs-merge-questions
  - http://www.randyfay.com/node/91

===== Gitignore =====

You can use a file named ''.gitignore'' which is located at the root of your project repository to make [[https://help.github.com/articles/ignoring-files|git ignore files or directories]]. This is useful when have third party packages or tools or configuration files only relevant to your current workstation. 

Refer to these [[https://github.com/github/gitignore|example .gitignore files]] to construct your own. There's even an example there for Codeigniter.

  #to ignore a directory
  /foldername/*
  #also ignores a directory
  foldername
  #also ignores a hidden directory
  .hidden_folder
  #ignores all files with php extension
  /*.php
  #except don't ignore this php file!
  !/lol.php
  #ignores specifically example.php
  folder/to/my/file/example.php
  #ignores example.php at root level
  /example.php

If you're working on the Cloud Stack or Local stack using Codeigniter you should ignore:

<file>
*/config/development
*/logs/log-*.php
*/logs/!index.html
*/cache/*
*/cache/!index.html
vendor/*
bin/*
.c9revisions/*
tools/*
</file>

Don't ignore the ''.git'' folder. Click on the little gear symbol on the workspace to see hidden files or folders on your Cloud9.
===== Advanced Git =====

Git is a very powerful tool. It could constitute its own course. To learn about the power of git and its applicability, see the online [[http://git-scm.com/doc|Git Scm Book]].

Seth Robertson has also compiled a [[http://sethrobertson.github.com/GitBestPractices/|list of git best practices]].