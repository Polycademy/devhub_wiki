a:2872:{i:0;a:3:{i:0;s:14:"document_start";i:1;a:0:{}i:2;i:0;}i:1;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:37:"Javascript - Client Side Architecture";i:1;i:1;i:2;i:1;}i:2;i:1;}i:2;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:1;}i:2;i:1;}i:3;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:1;}i:4;a:3:{i:0;s:13:"interwikilink";i:1;a:4:{i:0;s:13:"wp>JavaScript";i:1;s:10:"Javascript";i:2;s:2:"wp";i:3;s:10:"JavaScript";}i:2;i:54;}i:5;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:359:" is an interpreted programming language. It was designed to be executed on client side web browsers in order to provide dynamic functionality, alter the user interface dynamically, and provide asynchronous communication to the server. However the language has grown in popularity is now available across many platforms including server side development using ";}i:2;i:82;}i:6;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:18:"http://nodejs.org/";i:1;s:7:"Node.js";}i:2;i:441;}i:7;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:27:", mobile development using ";}i:2;i:471;}i:8;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:20:"http://phonegap.com/";i:1;s:8:"Phonegap";}i:2;i:498;}i:9;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:61:" and other HTML5 technologies, and desktop development using ";}i:2;i:531;}i:10;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:30:"https://github.com/appjs/appjs";i:1;s:5:"AppJS";}i:2;i:592;}i:11;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:5:" and ";}i:2;i:632;}i:12;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:50:"http://www.appcelerator.com/platform/titanium-sdk/";i:1;s:12:"Titanium SDK";}i:2;i:637;}i:13;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:145:". Therefore one can see that javascript is probably the only truly ubiquitous programming language, and it is definitely the language of the web.";}i:2;i:704;}i:14;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:849;}i:15;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:849;}i:16;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:247:"Javascript is a multi-paradigm language, that contains all of the features of a dynamically interpreted language such as weak typing. It can be written in an object oriented manner, imperative or in a functional manner. It's object inheritance is ";}i:2;i:851;}i:17;a:3:{i:0;s:13:"interwikilink";i:1;a:4:{i:0;s:30:"wp>Prototype-based programming";i:1;s:15:"prototype based";i:2;s:2:"wp";i:3;s:27:"Prototype-based programming";}i:2;i:1098;}i:18;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:87:", which means there's no such thing as a class. The syntax was inspired by C just like ";}i:2;i:1148;}i:19;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"PHP";}i:2;i:1235;}i:20;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:14:", however the ";}i:2;i:1238;}i:21;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:47:"http://javascript.crockford.com/javascript.html";i:1;s:32:"language is much more functional";}i:2;i:1252;}i:22;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:".";}i:2;i:1336;}i:23;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:1337;}i:24;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:1337;}i:25;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:41:"In traditional non-threaded environment, ";}i:2;i:1339;}i:26;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:40:"http://stackoverflow.com/a/748189/582917";i:1;s:30:"code is executed synchronously";}i:2;i:1380;}i:27;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:203:". In a multi-threaded environment, code can be executed in parallel. Javascript is mainly operated inside a browser which offers a single thread of execution, therefore javascript is not multi-threaded (";}i:2;i:1455;}i:28;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:54:"http://www.html5rocks.com/en/tutorials/workers/basics/";i:1;s:22:"except for Web Workers";}i:2;i:1658;}i:29;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:40:"). This presents a bit of a problem for ";}i:2;i:1739;}i:30;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"GUI";}i:2;i:1779;}i:31;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:137:" programming, which is what javascript is mainly used for in browsers. Any complex or long running process in javascript will freeze the ";}i:2;i:1782;}i:32;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"GUI";}i:2;i:1919;}i:33;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:209:" making it non responsive. For javascript to be dynamic and good at rendering GUIs, it needs to be asynchronous. But multi-threading is a complex programming paradigm and it is a bit of an overkill for simple ";}i:2;i:1922;}i:34;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"GUI";}i:2;i:2131;}i:35;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:89:" applications. Therefore browsers offered event driven asynchronous APIs such as XHR for ";}i:2;i:2134;}i:36;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:4:"AJAX";}i:2;i:2223;}i:37;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:434:" requests, and the javascript language itself can be event driven. This means that certain code blocks such as functions are bound to a particular event or signal, so the structure of the written code does not map directly to the flow of execution. The browser also offers an event handler that is running an event loop, this allows javascript to hook into the event loop through asynchronous callbacks. This basically means that the ";}i:2;i:2227;}i:38;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:87:"http://stackoverflow.com/questions/8963209/does-async-programming-means-multi-threading";i:1;s:116:"flow of execution can move on to another function or statement without waiting for the previous function to complete";}i:2;i:2661;}i:39;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:".";}i:2;i:2869;}i:40;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:2870;}i:41;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:2870;}i:42;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:104:"It is recommended while working through javascript, to practice them using the real time coding service ";}i:2;i:2872;}i:43;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:21:"http://beta.plnkr.co/";i:1;s:7:"Plunker";}i:2;i:2976;}i:44;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:168:". Also make sure to have your Firebug or Chrome web developer tools open to the console tab. You'll be able to see logs and write javascript directly into your browser.";}i:2;i:3009;}i:45;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:3177;}i:46;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:3179;}i:47;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:26:"Javascript Implementations";i:1;i:2;i:2;i:3179;}i:2;i:3179;}i:48;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:2;}i:2;i:3179;}i:49;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:3179;}i:50;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:103:"Javascript on the client side actually consists of three parts. The ECMAScript, Document Object Model (";}i:2;i:3219;}i:51;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"DOM";}i:2;i:3322;}i:52;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:37:") and the Browser Object Model (BOM).";}i:2;i:3325;}i:53;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:3362;}i:54;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:3362;}i:55;a:3:{i:0;s:13:"interwikilink";i:1;a:4:{i:0;s:13:"wp>ECMAScript";i:1;s:10:"ECMAScript";i:2;s:2:"wp";i:3;s:10:"ECMAScript";}i:2;i:3364;}i:56;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:416:" is the foundation of the javascript language, but it is independent from the browser environment. Think of it as the agreed upon constitution of how javascript interpreters should work. ECMAScript was created in order to provide interoperability between different browsers, or else every browser would have their own versions of client side scripting languages! At its core it specifies these aspects of javascript:";}i:2;i:3392;}i:57;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:3809;}i:58;a:3:{i:0;s:10:"listu_open";i:1;a:0:{}i:2;i:3809;}i:59;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:3809;}i:60;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:3809;}i:61;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:7:" Syntax";}i:2;i:3813;}i:62;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:3820;}i:63;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:3820;}i:64;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:3820;}i:65;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:3820;}i:66;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:6:" Types";}i:2;i:3824;}i:67;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:3830;}i:68;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:3830;}i:69;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:3830;}i:70;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:3830;}i:71;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:11:" Statements";}i:2;i:3834;}i:72;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:3845;}i:73;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:3845;}i:74;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:3845;}i:75;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:3845;}i:76;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:9:" Keywords";}i:2;i:3849;}i:77;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:3858;}i:78;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:3858;}i:79;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:3858;}i:80;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:3858;}i:81;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:15:" Reserved words";}i:2;i:3862;}i:82;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:3877;}i:83;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:3877;}i:84;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:3877;}i:85;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:3877;}i:86;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:10:" Operators";}i:2;i:3881;}i:87;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:3891;}i:88;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:3891;}i:89;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:3891;}i:90;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:3891;}i:91;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:8:" Objects";}i:2;i:3895;}i:92;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:3903;}i:93;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:3903;}i:94;a:3:{i:0;s:11:"listu_close";i:1;a:0:{}i:2;i:3903;}i:95;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:3903;}i:96;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:133:"ECMAScript is released in editions. Most modern browsers support ECMAScript 5th edition. However work is currently being done on the ";}i:2;i:3905;}i:97;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:46:"http://espadrine.github.com/New-In-A-Spec/es6/";i:1;s:25:"6th edition named Harmony";}i:2;i:4038;}i:98;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:160:" which may be fully supported by modern browsers in a year or two. You can find out the compatibility of different browsers for ES5 or ES6 via these two charts:";}i:2;i:4114;}i:99;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:4275;}i:100;a:3:{i:0;s:10:"listu_open";i:1;a:0:{}i:2;i:4275;}i:101;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:4275;}i:102;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:4275;}i:103;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:" ";}i:2;i:4279;}i:104;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:42:"http://kangax.github.com/es5-compat-table/";i:1;s:23:"ES5 Compatibility Chart";}i:2;i:4280;}i:105;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:4350;}i:106;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:4350;}i:107;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:4350;}i:108;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:4350;}i:109;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:" ";}i:2;i:4354;}i:110;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:46:"http://kangax.github.com/es5-compat-table/es6/";i:1;s:23:"ES6 Compatibility Chart";}i:2;i:4355;}i:111;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:4429;}i:112;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:4429;}i:113;a:3:{i:0;s:11:"listu_close";i:1;a:0:{}i:2;i:4429;}i:114;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:8:"imagebox";i:1;a:2:{i:0;i:1;i:1;a:11:{s:4:"type";s:13:"internalmedia";s:3:"src";s:41:":web_application_development:dom-demo.jpg";s:5:"title";s:0:"";s:5:"align";s:5:"right";s:5:"width";s:3:"200";s:6:"height";N;s:5:"cache";s:5:"cache";s:7:"linking";s:7:"details";s:1:"w";s:3:"200";s:6:"detail";s:141:"/lib/exe/detail.php?id=web_application_development%3Ajavascript_-_client_side_architecture&amp;media=web_application_development:dom-demo.jpg";s:5:"exist";b:1;}}i:2;i:1;i:3;s:50:"[{{ :web_application_development:dom-demo.jpg?200|";}i:2;i:4431;}i:115;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:8:"imagebox";i:1;a:2:{i:0;i:3;i:1;s:16:"Demostration of ";}i:2;i:3;i:3;s:16:"Demostration of ";}i:2;i:4481;}i:116;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"DOM";}i:2;i:4497;}i:117;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:8:"imagebox";i:1;a:2:{i:0;i:4;i:1;s:3:"}}]";}i:2;i:4;i:3;s:3:"}}]";}i:2;i:4500;}i:118;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:4500;}i:119;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:4:"The ";}i:2;i:4505;}i:120;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"DOM";}i:2;i:4509;}i:121;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:15:" refers to the ";}i:2;i:4512;}i:122;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"W3C";}i:2;i:4527;}i:123;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:21:" specification on an ";}i:2;i:4530;}i:124;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"API";}i:2;i:4551;}i:125;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:38:" that allows javascript to manipulate ";}i:2;i:4554;}i:126;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:4:"HTML";}i:2;i:4592;}i:127;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:38:". It was necessary to standardise the ";}i:2;i:4596;}i:128;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"DOM";}i:2;i:4634;}i:129;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:96:" across browsers or else the different browsers would have different ways of representing their ";}i:2;i:4637;}i:130;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:4:"HTML";}i:2;i:4733;}i:131;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:47:" programmatically. Unfortunately even with the ";}i:2;i:4737;}i:132;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"DOM";}i:2;i:4784;}i:133;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:128:", browsers behave differently, and hence is why we have the jQuery library that abstracts the granular details. Essentially the ";}i:2;i:4787;}i:134;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:4:"HTML";}i:2;i:4915;}i:135;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:122:" structure is converted into a hierarchical graph of nodes. These graphs look like upside down trees. You can inspect the ";}i:2;i:4919;}i:136;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:26:"https://getfirebug.com/dom";i:1;s:14:"DOM in Firebug";}i:2;i:5041;}i:137;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:11:" using the ";}i:2;i:5086;}i:138;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"DOM";}i:2;i:5097;}i:139;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:18:" panel, or in the ";}i:2;i:5100;}i:140;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:4:"HTML";}i:2;i:5118;}i:141;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:33:" side panel, which will give the ";}i:2;i:5122;}i:142;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"DOM";}i:2;i:5155;}i:143;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:19:" properties of any ";}i:2;i:5158;}i:144;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:4:"HTML";}i:2;i:5177;}i:145;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:29:" node/tag you are inspecting.";}i:2;i:5181;}i:146;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:5210;}i:147;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:5210;}i:148;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:4:"The ";}i:2;i:5212;}i:149;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"DOM";}i:2;i:5216;}i:150;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:61:" includes everything that would be required to represent the ";}i:2;i:5219;}i:151;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:4:"HTML";}i:2;i:5280;}i:152;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:24:", so if all you was the ";}i:2;i:5284;}i:153;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"DOM";}i:2;i:5308;}i:154;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:45:", it could easily be converted back into the ";}i:2;i:5311;}i:155;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:4:"HTML";}i:2;i:5356;}i:156;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:62:". That means the name, content, attributes and even styles of ";}i:2;i:5360;}i:157;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:4:"HTML";}i:2;i:5422;}i:158;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:59:" tags are all computed and encoded and accessible from the ";}i:2;i:5426;}i:159;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"DOM";}i:2;i:5485;}i:160;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:" ";}i:2;i:5488;}i:161;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"API";}i:2;i:5489;}i:162;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:6:". The ";}i:2;i:5492;}i:163;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"DOM";}i:2;i:5498;}i:164;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:73:" specifications have gone through 3 levels. Most modern browsers support ";}i:2;i:5501;}i:165;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"DOM";}i:2;i:5574;}i:166;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:15:" level 2. This ";}i:2;i:5577;}i:167;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"DOM";}i:2;i:5592;}i:168;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:21:" specification added:";}i:2;i:5595;}i:169;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:5617;}i:170;a:3:{i:0;s:10:"listu_open";i:1;a:0:{}i:2;i:5617;}i:171;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:5617;}i:172;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:5617;}i:173;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:" ";}i:2;i:5621;}i:174;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"DOM";}i:2;i:5622;}i:175;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:112:" Views — Describes interfaces to keep track of the various views of a document (the document before and after ";}i:2;i:5625;}i:176;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"CSS";}i:2;i:5737;}i:177;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:22:" styling, for example)";}i:2;i:5740;}i:178;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:5762;}i:179;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:5762;}i:180;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:5762;}i:181;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:5762;}i:182;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:" ";}i:2;i:5766;}i:183;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"DOM";}i:2;i:5767;}i:184;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:62:" Events — Describes interfaces for events and event handling";}i:2;i:5770;}i:185;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:5832;}i:186;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:5832;}i:187;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:5832;}i:188;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:5832;}i:189;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:" ";}i:2;i:5836;}i:190;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"DOM";}i:2;i:5837;}i:191;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:45:" Style — Describes interfaces to deal with ";}i:2;i:5840;}i:192;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"CSS";}i:2;i:5885;}i:193;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:26:"-based styling of elements";}i:2;i:5888;}i:194;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:5914;}i:195;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:5914;}i:196;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:5914;}i:197;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:5914;}i:198;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:" ";}i:2;i:5918;}i:199;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"DOM";}i:2;i:5919;}i:200;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:88:" Traversal and Range — Describes interfaces to traverse and manipulate a document tree";}i:2;i:5922;}i:201;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:6010;}i:202;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:6010;}i:203;a:3:{i:0;s:11:"listu_close";i:1;a:0:{}i:2;i:6010;}i:204;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:6010;}i:205;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:211:"The BOM refers to the APIs that the browser vendors expose to developers. Basically anytime you're manipulating or accessing a property of the browser itself would mean you're using the BOM. This could refer to:";}i:2;i:6012;}i:206;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:6224;}i:207;a:3:{i:0;s:10:"listu_open";i:1;a:0:{}i:2;i:6224;}i:208;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:6224;}i:209;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:6224;}i:210;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:122:" The window object, allowing the capability to pop up new browser windows, and to move, resize, and close browser windows.";}i:2;i:6228;}i:211;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:6350;}i:212;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:6350;}i:213;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:6350;}i:214;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:6350;}i:215;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:76:" The navigator object, which provides detailed information about the browser";}i:2;i:6354;}i:216;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:6430;}i:217;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:6430;}i:218;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:6430;}i:219;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:6430;}i:220;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:91:" The location object, which gives detailed information about the page loaded in the browser";}i:2;i:6434;}i:221;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:6525;}i:222;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:6525;}i:223;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:6525;}i:224;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:6525;}i:225;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:89:" The screen object, which gives detailed information about the user’s screen resolution";}i:2;i:6529;}i:226;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:6618;}i:227;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:6618;}i:228;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:6618;}i:229;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:6618;}i:230;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:20:" Support for cookies";}i:2;i:6622;}i:231;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:6642;}i:232;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:6642;}i:233;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:6642;}i:234;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:6642;}i:235;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:78:" Custom objects such as XMLHttpRequest and Internet Explorer’s ActiveXObject";}i:2;i:6646;}i:236;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:6724;}i:237;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:6724;}i:238;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:6724;}i:239;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:6724;}i:240;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:55:" And a number of other HTML5 APIs such as local storage";}i:2;i:6728;}i:241;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:6783;}i:242;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:6783;}i:243;a:3:{i:0;s:11:"listu_close";i:1;a:0:{}i:2;i:6783;}i:244;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:6783;}i:245;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:122:"There is no standard for BOM, so each browser may try to out compete other vendors by offering features others don't have.";}i:2;i:6785;}i:246;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:6907;}i:247;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:6907;}i:248;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:92:"In the browser host environment, javascript is simply loaded via script tags similar to how ";}i:2;i:6909;}i:249;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"CSS";}i:2;i:7001;}i:250;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:61:" is loaded. These script tags can be placed anywhere in your ";}i:2;i:7004;}i:251;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:4:"HTML";}i:2;i:7065;}i:252;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:96:", however it is recommended that they are placed in the footer of the body tag. This allows the ";}i:2;i:7069;}i:253;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:4:"HTML";}i:2;i:7165;}i:254;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:111:" to be loaded before javascript is loaded. There are exceptions for javascript scripts that need to change the ";}i:2;i:7169;}i:255;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:4:"HTML";}i:2;i:7280;}i:256;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:188:" before it is rendered such as Modernizr. You may need to concatenate and minify scripts in production. In other host environments, javascript may be loaded using file I/O such as Node.js.";}i:2;i:7284;}i:257;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:7473;}i:258;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:7473;}i:259;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:21:"Working in Javascript";i:1;i:2;i:2;i:7473;}i:2;i:7473;}i:260;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:2;}i:2;i:7473;}i:261;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:7473;}i:262;a:3:{i:0;s:11:"strong_open";i:1;a:0:{}i:2;i:7508;}i:263;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:15:"Console Logging";}i:2;i:7510;}i:264;a:3:{i:0;s:12:"strong_close";i:1;a:0:{}i:2;i:7525;}i:265;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:7527;}i:266;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:7527;}i:267;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:340:"Before we get started in javascript we have to learn how to debug our javascript code. Because javascript often fails silently it is difficult to debug. By using Firebug or related tools, we can inspect our javascript code and its variables during run time. You should start using these commands to log variables to your console. Check out ";}i:2;i:7529;}i:268;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:49:"https://getfirebug.com/wiki/index.php/Console_API";i:1;s:40:"Firebug's wiki for more console commands";}i:2;i:7869;}i:269;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:".";}i:2;i:7963;}i:270;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:7964;}i:271;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:7964;}i:272;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:42:"http://beta.plnkr.co/edit/iinTwz?p=preview";i:1;s:12:"Plunker Demo";}i:2;i:7966;}i:273;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:8025;}i:274;a:3:{i:0;s:4:"code";i:1;a:3:{i:0;s:384:"
var object = {};

console.log(object); //logs the object
console.error(object); //shows a error symbol
console.info(object); //shows an info symbol
console.warn(object); //shows a warning symbol
console.debug(object); //does the same as log
console.dir(object); //shows a  list of child objects, good for logging objects
console.table(object); //shows the object in a tabular format
";i:1;s:10:"javascript";i:2;N;}i:2;i:8032;}i:275;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:8032;}i:276;a:3:{i:0;s:11:"strong_open";i:1;a:0:{}i:2;i:8437;}i:277;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:10:"Use Strict";}i:2;i:8439;}i:278;a:3:{i:0;s:12:"strong_close";i:1;a:0:{}i:2;i:8449;}i:279;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:8451;}i:280;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:8451;}i:281;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:289:"Javascript is a very dynamic and loose language, and since it fails silently, it's easy to fall into traps of bad code. You can use the use strict mode in order to make your javascript fail more strictly and to keep you writing good code. Just put this at the top of any scripts you write.";}i:2;i:8453;}i:282;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:8742;}i:283;a:3:{i:0;s:4:"code";i:1;a:3:{i:0;s:15:"
'use strict';
";i:1;s:10:"javascript";i:2;N;}i:2;i:8749;}i:284;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:8749;}i:285;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:9:"Refer to ";}i:2;i:8785;}i:286;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:61:"http://ejohn.org/blog/ecmascript-5-strict-mode-json-and-more/";i:1;s:38:"John Resig's article on the use strict";}i:2;i:8794;}i:287;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:26:" to find out what it does.";}i:2;i:8898;}i:288;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:8924;}i:289;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:8924;}i:290;a:3:{i:0;s:11:"strong_open";i:1;a:0:{}i:2;i:8926;}i:291;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:15:"Other Bad Parts";}i:2;i:8928;}i:292;a:3:{i:0;s:12:"strong_close";i:1;a:0:{}i:2;i:8943;}i:293;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:8945;}i:294;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:8945;}i:295;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:64:"One thing that trips up javascript developers is the binding of ";}i:2;i:8947;}i:296;a:3:{i:0;s:18:"doublequoteopening";i:1;a:0:{}i:2;i:9011;}i:297;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:4:"this";}i:2;i:9012;}i:298;a:3:{i:0;s:18:"doublequoteclosing";i:1;a:0:{}i:2;i:9016;}i:299;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:189:" in objects. This is considered a confusing part of javascript as it was not developed to be OOP from the beginning. Refer to these slides for an explanation on the bad parts of javascript.";}i:2;i:9017;}i:300;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:9207;}i:301;a:3:{i:0;s:10:"listu_open";i:1;a:0:{}i:2;i:9207;}i:302;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:9207;}i:303;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:9207;}i:304;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:" ";}i:2;i:9211;}i:305;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:72:"http://johnkpaul.github.com/presentations/empirejs/javascript-bad-parts/";i:1;s:20:"Javascript Bad Parts";}i:2;i:9212;}i:306;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:9309;}i:307;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:9309;}i:308;a:3:{i:0;s:11:"listu_close";i:1;a:0:{}i:2;i:9309;}i:309;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:9309;}i:310;a:3:{i:0;s:11:"strong_open";i:1;a:0:{}i:2;i:9311;}i:311;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:19:"Shims and Polyfills";}i:2;i:9313;}i:312;a:3:{i:0;s:12:"strong_close";i:1;a:0:{}i:2;i:9332;}i:313;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:9334;}i:314;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:9334;}i:315;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:321:"Because the host environment that runs javascript could be different, front end developers often face the problem of adapting code for older browsers, and sometimes we even create polyfills for new features that current browsers don't support yet. Shims (or shivs) are just a generic name for any kind of interception of ";}i:2;i:9336;}i:316;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"API";}i:2;i:9657;}i:317;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:110:" calls, polyfills are code that provides a fallback for older browsers, they are usually implemented as shims.";}i:2;i:9660;}i:318;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:9770;}i:319;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:9770;}i:320;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:44:"The two most important shims you'll need is:";}i:2;i:9772;}i:321;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:9817;}i:322;a:3:{i:0;s:10:"listu_open";i:1;a:0:{}i:2;i:9817;}i:323;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:9817;}i:324;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:9817;}i:325;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:" ";}i:2;i:9821;}i:326;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:37:"https://github.com/kriskowal/es5-shim";i:1;s:8:"ES5 Shim";}i:2;i:9822;}i:327;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:39:" - ES5 features are usually missing in ";}i:2;i:9872;}i:328;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:2:"IE";}i:2;i:9911;}i:329;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:".";}i:2;i:9913;}i:330;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:9914;}i:331;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:9914;}i:332;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:9914;}i:333;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:9914;}i:334;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:" ";}i:2;i:9918;}i:335;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:38:"https://github.com/paulmillr/es6-shim/";i:1;s:8:"ES6 Shim";}i:2;i:9919;}i:336;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:46:" - ES6 features are almost missing everywhere.";}i:2;i:9970;}i:337;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:10016;}i:338;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:10016;}i:339;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:10016;}i:340;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:10016;}i:341;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:" ";}i:2;i:10020;}i:342;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:33:"http://bestiejs.github.com/json3/";i:1;s:11:"JSON 3 Shim";}i:2;i:10021;}i:343;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:22:" - JSON3 required for ";}i:2;i:10070;}i:344;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:2:"IE";}i:2;i:10092;}i:345;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:".";}i:2;i:10094;}i:346;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:10095;}i:347;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:10095;}i:348;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:10095;}i:349;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:10095;}i:350;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:" ";}i:2;i:10099;}i:351;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:66:"https://github.com/angular-ui/angular-ui/tree/master/common/ieshiv";i:1;s:7:"IE Shiv";}i:2;i:10100;}i:352;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:89:" - For AngularJS, and Angular UI, so you can have custom tag names working as directives.";}i:2;i:10178;}i:353;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:10267;}i:354;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:10267;}i:355;a:3:{i:0;s:11:"listu_close";i:1;a:0:{}i:2;i:10267;}i:356;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:10267;}i:357;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:140:"The above are just the basics. To work with HTML5 APIs, you'll need to consider your feature list and the browsers you want to support. The ";}i:2;i:10269;}i:358;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:73:"https://github.com/Modernizr/Modernizr/wiki/HTML5-Cross-browser-Polyfills";i:1;s:55:"Modernizr wiki has a large list of maintained polyfills";}i:2;i:10409;}i:359;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:27:" for all sorts of projects.";}i:2;i:10542;}i:360;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:10570;}i:361;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:10570;}i:362;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:17:"OOP in Javascript";i:1;i:2;i:2;i:10570;}i:2;i:10570;}i:363;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:2;}i:2;i:10570;}i:364;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:10570;}i:365;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:351:"In classical OOP languages, software is architected through a structure of classes that have properties and methods. Each class is instantiated and then calls upon classes its dependent on and uses them. Javascript however does have any concept of classes, instead it has prototypes. Note that if you want to know why we have to use OOP, refer to the ";}i:2;i:10601;}i:366;a:3:{i:0;s:12:"internallink";i:1;a:2:{i:0;s:62:"PHP - Server Side Architecture#object_oriented_programming_oop";i:1;s:31:"Server Side Architecture on OOP";}i:2;i:10952;}i:367;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:".";}i:2;i:11050;}i:368;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:11051;}i:369;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:11051;}i:370;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:353:"Prototype-based programming is a style of object-oriented programming in which classes are not present, and behavior reuse (known as inheritance in class-based languages) is accomplished through a process of decorating existing objects which serve as prototypes. This model is also known as class-less, prototype-oriented, or instance-based programming.";}i:2;i:11053;}i:371;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:11406;}i:372;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:11406;}i:373;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:180:"Javascript defines an object as an unordered collection of properties each of which contains a primitive value, object or function. It is the equivalent of an associative array in ";}i:2;i:11408;}i:374;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"PHP";}i:2;i:11588;}i:375;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:179:" (javascript actually does not have an associative array concept). Each property is identified by their key. This means objects in javascript is far more flexible than objects in ";}i:2;i:11591;}i:376;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"PHP";}i:2;i:11770;}i:377;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:185:". They can be enumerated and iterated, and have setters and getters at run time. Objects can be used as simple data structures, or as structures that contain methods and functions like ";}i:2;i:11773;}i:378;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"PHP";}i:2;i:11958;}i:379;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:148:"'s objects. Due to this flexibility, almost everything in javascript is an object, and the creation and manipulation of objects can take many forms.";}i:2;i:11961;}i:380;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:12109;}i:381;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:12109;}i:382;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:68:"You refer to these resources on OOP in javascript before continuing:";}i:2;i:12111;}i:383;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:12180;}i:384;a:3:{i:0;s:10:"listu_open";i:1;a:0:{}i:2;i:12180;}i:385;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:12180;}i:386;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:12180;}i:387;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:" ";}i:2;i:12184;}i:388;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:70:"http://killdream.github.com/blog/2011/10/understanding-javascript-oop/";i:1;s:28:"Understanding Javascript OOP";}i:2;i:12185;}i:389;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:12288;}i:390;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:12288;}i:391;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:12288;}i:392;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:12288;}i:393;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:" ";}i:2;i:12292;}i:394;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:94:"https://developer.mozilla.org/en-US/docs/JavaScript/Introduction_to_Object-Oriented_JavaScript";i:1;s:42:"Introduction to Object Oriented Javascript";}i:2;i:12293;}i:395;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:12434;}i:396;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:12434;}i:397;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:12434;}i:398;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:12434;}i:399;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:" ";}i:2;i:12438;}i:400;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:91:"http://net.tutsplus.com/tutorials/javascript-ajax/the-basics-of-object-oriented-javascript/";i:1;s:40:"The Basics of Object Oriented Javascript";}i:2;i:12439;}i:401;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:12575;}i:402;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:12575;}i:403;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:12575;}i:404;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:12575;}i:405;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:" ";}i:2;i:12579;}i:406;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:91:"http://stackoverflow.com/questions/9108925/how-is-almost-everything-in-javascript-an-object";i:1;s:37:"Everything in Javascript is an Object";}i:2;i:12580;}i:407;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:12713;}i:408;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:12713;}i:409;a:3:{i:0;s:11:"listu_close";i:1;a:0:{}i:2;i:12713;}i:410;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:12715;}i:411;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:15:"Object Creation";i:1;i:3;i:2;i:12715;}i:2;i:12715;}i:412;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:12715;}i:413;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:12715;}i:414;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:147:"Creating objects in javascript can take many forms. Each has their advantages and disadvantages. You'll have to choose the one that works the best.";}i:2;i:12742;}i:415;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:12889;}i:416;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:12889;}i:417;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:161:"The simplest way to create an object is the through the object literal style, also known as short hand syntax. This style is not unlike the associative array in ";}i:2;i:12891;}i:418;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"PHP";}i:2;i:13052;}i:419;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:211:". You would use this whenever you need to create a container for some data, or a throw away object. Javascript libraries often use objects to configure their settings too, in which you would have experienced in ";}i:2;i:13055;}i:420;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"PHP";}i:2;i:13266;}i:421;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:104:" with passing in associative arrays. Therefore this style is not intended for creating modularised code.";}i:2;i:13269;}i:422;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:13373;}i:423;a:3:{i:0;s:4:"code";i:1;a:3:{i:0;s:394:"
//OBJECT LITERAL STYLE

var object = {
    literalKey: 'Blah', //you can use literal keys, without quotes, but they must have no spaces in them
    'string key': 'Blahblah'
};

console.log(typeof object); //will show that it's an object


//OBJECT CONSTRUCTOR STYLE (equivalent)

var differentObject = new Object();

differentObject.name = 'I am a big object!';

console.log(differentObject);
";i:1;s:10:"javascript";i:2;N;}i:2;i:13380;}i:424;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:13380;}i:425;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:587:"In order to create objects in a classless programming language that is intended for modular code and code reuse, we can't use the object literal style. Instead we have the Constructor Pattern, Prototype Pattern, and Combination Constructor & Prototype Pattern. There are others such as Parasitic Constructor Pattern and  Durable Constructor Pattern, however they are specialised for particular purposes. Also note that in these examples we are using function expressions, as this is a better practice than function declarations, it prevents the functions from polluting the global scope.";}i:2;i:13795;}i:426;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:14382;}i:427;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:14384;}i:428;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:19:"Constructor Pattern";i:1;i:4;i:2;i:14384;}i:2;i:14384;}i:429;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:4;}i:2;i:14384;}i:430;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:14384;}i:431;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:73:"This constructor pattern allows to create reusable modular units of code.";}i:2;i:14413;}i:432;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:14486;}i:433;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:14486;}i:434;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:42:"http://beta.plnkr.co/edit/QTO6W1?p=preview";i:1;s:12:"Plunker Demo";}i:2;i:14488;}i:435;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:14547;}i:436;a:3:{i:0;s:4:"code";i:1;a:3:{i:0;s:735:"
'use strict'; //everytime you write javascript code, make sure to do this, it forces you to write good javascript

//Constructor Pattern

var Person = function(name, age, job){ //by convention constructors should be capitalised based on StudlyCaps
    //this refers to the newly instantiated object
    this.name = name;
    this.age = age;
    this.job = job;
    this.sayName = function(){
        console.log(this.name);
    };
}

//by "newing" the function, it executes the function, and binds "this" to the new variable, the variable becomes an object construct
var person1 = new Person('Roger', '21', 'Awesome');
var person2 = new Person('Dave', 43, 'Yeap');

person1.sayName();
person2.sayName();

console.log(typeof person1);
";i:1;s:10:"javascript";i:2;N;}i:2;i:14554;}i:437;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:15310;}i:438;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:17:"Prototype Pattern";i:1;i:4;i:2;i:15310;}i:2;i:15310;}i:439;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:4;}i:2;i:15310;}i:440;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:15310;}i:441;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:247:"However what happens to inheritance? After all one of the great advantages of OOP is the ability to have concrete classes inherit from abstract parent classes. This way you can share code between similar objects. Well in javascript we have to use ";}i:2;i:15337;}i:442;a:3:{i:0;s:13:"interwikilink";i:1;a:4:{i:0;s:18:"wp>Prototype-based";i:1;s:10:"prototypes";i:2;s:2:"wp";i:3;s:15:"Prototype-based";}i:2;i:15584;}i:443;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:243:" instead. Everytime you create a function, it contains a prototype property. By setting properties onto the prototype, and then constructing an object from that function, the properties on that prototype gets shared among all object instances.";}i:2;i:15617;}i:444;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:15860;}i:445;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:15860;}i:446;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:42:"http://beta.plnkr.co/edit/oM8QPa?p=preview";i:1;s:12:"Plunker Demo";}i:2;i:15862;}i:447;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:15921;}i:448;a:3:{i:0;s:4:"code";i:1;a:3:{i:0;s:570:"
'use strict';

//Prototype pattern 

var Person = function(){};

//all of these are shared among all object instances
Person.prototype.name = 'Nicholas';
Person.prototype.age = 29;
Person.prototype.job = 'Software Engineer';
Person.prototype.sayName = function(){
    console.log(this.name);
};

var person1 = new Person();
var person2 = new Person();

person1.sayName();
person2.sayName();

//is the two functions the same?
console.log(person1.sayName === person2.sayName); //in js, we use triple equals more often than double equals due to its weird type conversion!
";i:1;s:10:"javascript";i:2;N;}i:2;i:15928;}i:449;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:15928;}i:450;a:3:{i:0;s:11:"strong_open";i:1;a:0:{}i:2;i:16519;}i:451;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:43:"Prototype & Constructor Combination Pattern";}i:2;i:16521;}i:452;a:3:{i:0;s:12:"strong_close";i:1;a:0:{}i:2;i:16564;}i:453;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:16566;}i:454;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:16566;}i:455;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:317:"Understanding prototypes is crucial to understanding OOP in javascript. The below code example combines the unique instantiations of the constructor pattern with the shared methods of the prototype pattern. This pattern of combination is probably the most common form of object creation you'll see in javascript land.";}i:2;i:16568;}i:456;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:16885;}i:457;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:16885;}i:458;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:42:"http://beta.plnkr.co/edit/ZVo66w?p=preview";i:1;s:12:"Plunker Demo";}i:2;i:16887;}i:459;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:16946;}i:460;a:3:{i:0;s:4:"code";i:1;a:3:{i:0;s:827:"
'use strict';

//Prototype & Constructor combination pattern 

var Person = function(name, age, job){
    //these properties will be unique to each instance
    this.name = name;
    this.age = age;
    this.job = job;
};

//this is shared among all instances
Person.prototype.sayName = function(){
    console.log(this.name);
};

var person1 = new Person('Dave', 21, 'Super Developer');

person1.sayName();

console.log(person1);
//person1 object instance has a __proto__ property
console.log(person1.__proto__);
//it points to the Constructor's prototype
console.log(person1.__proto__ === Person.prototype); 

//the constructor function has a prototype
console.log(Person.prototype);
//the prototype has a constructor property pointing back to the constructor function
console.log(Person.prototype.constructor === Person); 
";i:1;s:10:"javascript";i:2;N;}i:2;i:16953;}i:461;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:16953;}i:462;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:50:"The question you should be asking is how does the ";}i:2;i:17801;}i:463;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:17851;}i:464;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:9:"sayName()";}i:2;i:17853;}i:465;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:17862;}i:466;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:35:" function still work? Where is the ";}i:2;i:17864;}i:467;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:17899;}i:468;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:4:"this";}i:2;i:17901;}i:469;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:17905;}i:470;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:47:" referring to? And how does it get the name of ";}i:2;i:17907;}i:471;a:3:{i:0;s:18:"doublequoteopening";i:1;a:0:{}i:2;i:17954;}i:472;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:4:"Dave";}i:2;i:17955;}i:473;a:3:{i:0;s:18:"doublequoteclosing";i:1;a:0:{}i:2;i:17959;}i:474;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:487:"? When a property is looked up inside an object, javascript searches on the object instance itself. If it is found, javascript stops searching. If it is not found, the search continues to its prototype, and looks through it to find the property. We can see that the above code demonstrates that there are multiple occurences of where javascript is searching, and finding a property on the instance (produced by the constructor), and sometimes finding the property on the prototype. When ";}i:2;i:17960;}i:475;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:18447;}i:476;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:18:"person1.sayName();";}i:2;i:18449;}i:477;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:18467;}i:478;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:49:" is called, that's accessing the prototype. When ";}i:2;i:18469;}i:479;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:18518;}i:480;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:9:"this.name";}i:2;i:18520;}i:481;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:18529;}i:482;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:24:" is accessed inside the ";}i:2;i:18531;}i:483;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:18555;}i:484;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:9:"sayName()";}i:2;i:18557;}i:485;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:18566;}i:486;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:156:" function, then it's accessing the object instance. You can start to see how javascript allows code reuse through the mixing of constructors and prototypes.";}i:2;i:18568;}i:487;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:18724;}i:488;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:18724;}i:489;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:226:"Because the object instances takes priority over the prototype, this allows method overriding. This is as simple as redeclaring a property with the same name onto the object instance. It shadows the property on the prototype. ";}i:2;i:18726;}i:490;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:18952;}i:491;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:18952;}i:492;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:42:"http://beta.plnkr.co/edit/yW9srh?p=preview";i:1;s:12:"Plunker Demo";}i:2;i:18954;}i:493;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:19013;}i:494;a:3:{i:0;s:4:"code";i:1;a:3:{i:0;s:1312:"
'use strict';

//demonstrating shadowing or method overriding with "private" variables

var Person = function(name, age, job){
    this.name = name;
    this.age = age;
    this.job = job;
    var privateVariable = 'I am the equivalent of private variables';
    this.privelegedMethod = function(){
        return privateVariable;
    }
};

//fallback method on the prototype
Person.prototype.sayName = function(){
    console.log(this.age); //says the age
};

var person1 = new Person('Dave', 21, 'Super Developer');

//overrides the prototype method
person1.sayName = function(){
    console.log(this.name);
    console.log(this.privelegedMethod());
}

//executes the object instance's method
person1.sayName(); //says the name!

//now how do we call the prototype method if it's been overwritten?
//By calling it via the __proto__ in the object instance or part of the constructor function
var o = { age: 15 };
person1.__proto__.sayName.call(o); //these are binding functions (will display 15)
//notice how we didn't need to use () to execute the function, the call and apply takes care of that
Person.prototype.sayName.apply(person1); //another binding function (will display 21)

//this will show nothing due to lack of binding, more on this in the understanding "this" section
Person.prototype.sayName();
";i:1;s:10:"javascript";i:2;N;}i:2;i:19020;}i:495;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:19020;}i:496;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:94:"Note that there is also a shorter way of defining multiple properties onto the prototype. See ";}i:2;i:20353;}i:497;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:42:"http://beta.plnkr.co/edit/lGGH9p?p=preview";i:1;s:47:"Plunker demo of short hand prototype definition";}i:2;i:20447;}i:498;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:66:". But make sure to be careful when iterating the object in a loop!";}i:2;i:20541;}i:499;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:20607;}i:500;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:20607;}i:501;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:116:"If you need to determine whether a property is part of the object instance or part of the prototype you can use the ";}i:2;i:20609;}i:502;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:20725;}i:503;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:16:"hasOwnProperty()";}i:2;i:20727;}i:504;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:20743;}i:505;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:33:" function. This is often used in ";}i:2;i:20745;}i:506;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:20778;}i:507;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:6:"for in";}i:2;i:20780;}i:508;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:20786;}i:509;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:" ";}i:2;i:20788;}i:510;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:111:"http://stackoverflow.com/questions/921789/how-to-loop-through-javascript-object-literal-with-objects-as-members";i:1;s:50:"loops that iterate through the object's properties";}i:2;i:20789;}i:511;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:65:" and you need to avoid the prototype's properties when iterating.";}i:2;i:20955;}i:512;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:21020;}i:513;a:3:{i:0;s:4:"code";i:1;a:3:{i:0;s:412:"
for(var key in object){ //notice the var operator inside the for loop, we want to avoid pollution!
    if(object.hasOwnProperty(key)){ //this will make sure that the iterated values are part of the object instance, not prototype! Unless of course you want it!
        
        var value = object[key]; //object properties can be accessed via array style syntax too!
        console.log(value);
        
    }
}
";i:1;s:10:"javascript";i:2;N;}i:2;i:21027;}i:514;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:21459;}i:515;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:40:"Understanding "this" Context and Binding";i:1;i:3;i:2;i:21459;}i:2;i:21459;}i:516;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:21459;}i:517;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:21459;}i:518;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:44:"A key concept in javascript OOP is that the ";}i:2;i:21511;}i:519;a:3:{i:0;s:18:"doublequoteopening";i:1;a:0:{}i:2;i:21555;}i:520;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:4:"this";}i:2;i:21556;}i:521;a:3:{i:0;s:18:"doublequoteclosing";i:1;a:0:{}i:2;i:21560;}i:522;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:183:" context changes based on where it's been invocated (called and executed), not where it's been declared (where it was written in the code). In classical OOP languages, the binding of ";}i:2;i:21561;}i:523;a:3:{i:0;s:18:"doublequoteopening";i:1;a:0:{}i:2;i:21744;}i:524;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:4:"this";}i:2;i:21745;}i:525;a:3:{i:0;s:18:"doublequoteclosing";i:1;a:0:{}i:2;i:21749;}i:526;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:270:" to the object context is implicit, it's always the immediate parent object. However in javascript this isn't always the case. In javascript, binding loss can occur whenever you're accessing a function through a reference rather than directly through its object context.";}i:2;i:21750;}i:527;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:22020;}i:528;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:22020;}i:529;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:39:"Consider these examples of binding the ";}i:2;i:22022;}i:530;a:3:{i:0;s:18:"doublequoteopening";i:1;a:0:{}i:2;i:22061;}i:531;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:4:"this";}i:2;i:22062;}i:532;a:3:{i:0;s:18:"doublequoteclosing";i:1;a:0:{}i:2;i:22066;}i:533;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:":";}i:2;i:22067;}i:534;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:22068;}i:535;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:22068;}i:536;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:42:"http://beta.plnkr.co/edit/p8m3ai?p=preview";i:1;s:12:"Plunker Demo";}i:2;i:22070;}i:537;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:22129;}i:538;a:3:{i:0;s:4:"code";i:1;a:3:{i:0;s:1686:"
//'use strict'; //this is commented out, as use strict would actually make this demonstration impossible, it tells you when you have binding loss, uncomment it to see it working!

//demonstration of binding sensitive code, be careful of these!

var name = 'I am in the window! You should not see me!';

var object = {
	name: 'Hi I am an object!',
	greet: function(){
		console.log('Message: ' + this.name);
	},
	timeoutMethod: function(){
		setTimeout(function(){
			console.log('Timeout Method: ' + this.name);
		}, 2000);
	},
	bindingTimeoutMethod: function(){
		setTimeout(this.funcToBeTimedOut, 3000);
	},
	funcToBeTimedOut: function(){
		console.log('Second Timeout Method ' + this.name);
	}
};
//"METHOD CALL"
object.greet(); //works

//"BASELESS FUNCTION CALL"
//executing the function outside of the object context
//the "this" loses its binding, it actually binds to window global!
var funcToBeExecutedOutside = object.greet;
funcToBeExecutedOutside(); //does not work

//"METHOD CALLBACK"
//still loses the binding
var anotherObject = {
	highFunc: function(callback){
		callback(); //executes object.greet();
	}
};
anotherObject.highFunc(object.greet);

//"USING TIMEOUT"
//also loses its binding
setTimeout(object.greet, 1000);
//even when it is inside the a method! (think about where this is been invocated, it's not inside the object context, its part of setTimeout!)
object.timeoutMethod();
//similar concept, calling a method that calls its own method, still fails
object.bindingTimeoutMethod();

//this one will still work, because it is still a "METHOD CALL"
var thirdObject = {
	thirdPartyMethod: function(){
		object.greet();
	}
};

thirdObject.thirdPartyMethod();
";i:1;s:10:"javascript";i:2;N;}i:2;i:22136;}i:539;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:22136;}i:540;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:79:"In order to solve this problem of binding loss, we need to explicitly bind the ";}i:2;i:23843;}i:541;a:3:{i:0;s:18:"doublequoteopening";i:1;a:0:{}i:2;i:23922;}i:542;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:4:"this";}i:2;i:23923;}i:543;a:3:{i:0;s:18:"doublequoteclosing";i:1;a:0:{}i:2;i:23927;}i:544;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:148:" back to the correct object context. There are several ways of doing this depending on your situation. The most common ways are the closure method, ";}i:2;i:23928;}i:545;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:91:"https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Function/apply";i:1;s:12:"apply method";}i:2;i:24076;}i:546;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:6:", and ";}i:2;i:24184;}i:547;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:90:"https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Function/call";i:1;s:11:"call method";}i:2;i:24190;}i:548;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:449:". The closure method works when you're writing a throw away anonymous function, and you have the ability to wrap it in another function while being side the object. The apply and call methods allow you to pass in parameters to the function, however you need to have the right context available. You should use the apply method whenever you don't know the number of parameters to the function, the parameters can then be dynamically accessed via the ";}i:2;i:24296;}i:549;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:100:"https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Functions_and_function_scope/arguments";i:1;s:18:"arguments variable";}i:2;i:24745;}i:550;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:24:" inside of the function.";}i:2;i:24868;}i:551;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:24892;}i:552;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:24892;}i:553;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:4:"The ";}i:2;i:24894;}i:554;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:90:"https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Function/bind";i:1;s:11:"bind method";}i:2;i:24898;}i:555;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:153:" in ES5 is far more flexible as it doesn't automatically execute your function allowing it to be used in callback situations. However this does not have ";}i:2;i:25004;}i:556;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:42:"http://kangax.github.com/es5-compat-table/";i:1;s:11:"IE8 support";}i:2;i:25157;}i:557;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:28:", so you'll need to use the ";}i:2;i:25215;}i:558;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:37:"https://github.com/kriskowal/es5-shim";i:1;s:8:"ES5 shim";}i:2;i:25243;}i:559;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:17:" in your scripts.";}i:2;i:25293;}i:560;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:25310;}i:561;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:25310;}i:562;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:121:"Note that in ES6 which currently is under development, there will be a new way of declaring functions that have implicit ";}i:2;i:25312;}i:563;a:3:{i:0;s:18:"doublequoteopening";i:1;a:0:{}i:2;i:25433;}i:564;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:4:"this";}i:2;i:25434;}i:565;a:3:{i:0;s:18:"doublequoteclosing";i:1;a:0:{}i:2;i:25438;}i:566;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:26:" binding. It's called the ";}i:2;i:25439;}i:567;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:49:"http://css.dzone.com/articles/javascript-fat-city";i:1;s:18:"fat arrow function";}i:2;i:25465;}i:568;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:".";}i:2;i:25537;}i:569;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:25538;}i:570;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:25538;}i:571;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:42:"http://beta.plnkr.co/edit/WejeTp?p=preview";i:1;s:12:"Plunker Demo";}i:2;i:25540;}i:572;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:25599;}i:573;a:3:{i:0;s:4:"code";i:1;a:3:{i:0;s:1933:"
'use strict'; //strict works now

//demonstration binding solutions

var name = 'I am in the window! You should not see me!';

var object = {
	name: 'Hi I am an object!',
	greet: function(parameter){
		console.log('Message: ' + this.name);
		if(typeof parameter !== 'undefined'){
			console.log(parameter);
		}
	},
	timeoutMethod: function(){
		//closure, fix the "this"
		var self = this;
		setTimeout(function(){
			console.log('Timeout Method: ' + self.name + ' (FROM CLOSURE)');
		}, 2000);
	},
	bindingTimeoutMethod: function(){
		//the first this works (implicit binding)
		//the second this is explicitly binded to the funcToBeTimedOut
		setTimeout(this.funcToBeTimedOut.bind(this), 3000);
	},
	funcToBeTimedOut: function(){
		console.log('Second Timeout Method ' + this.name + ' (BIND WITHIN METHOD)');
	}
};

var funcToBeExecutedOutside = object.greet;

//"APPLY METHOD"
//apply actually executes the function
funcToBeExecutedOutside.apply(object, ['FROM APPLY']);

//"CALL METHOD"
//call actually executes the function
funcToBeExecutedOutside.call(object, 'FROM CALL')

//"BIND METHOD" (ES5 syntax, no IE8 support, requires shim!)
//bind does not execute the function, allowing its use in callbacks
//notice the extra parantheses to execute and pass in parameters!
funcToBeExecutedOutside.bind(object)('FROM BIND');

//"BIND WITH CALLBACK"
var anotherObject = {
	highFunc: function(callback){
		callback('FROM CALLBACK BIND');
	}
};
anotherObject.highFunc(object.greet.bind(object)); //this requires bind! No extra parantheses, since we're passing it in as a callback

//"USING TIMEOUT"
//setTimeout cannot be used with call or apply! It needs bind
setTimeout(object.greet.bind(object), 1000, 'FROM TIMEOUT BIND');
//timeout has a third parameter available in modern browsers

//"CLOSURE METHOD" (see the function)
object.timeoutMethod();

//this is another bind, but inside the method call
object.bindingTimeoutMethod();
";i:1;s:10:"javascript";i:2;N;}i:2;i:25606;}i:574;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:25606;}i:575;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:96:"Remember that if you are using frameworks or libraries, sometimes they will explicitly bind the ";}i:2;i:27560;}i:576;a:3:{i:0;s:18:"doublequoteopening";i:1;a:0:{}i:2;i:27656;}i:577;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:4:"this";}i:2;i:27657;}i:578;a:3:{i:0;s:18:"doublequoteclosing";i:1;a:0:{}i:2;i:27661;}i:579;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:113:" to what they consider to be the most appropriate construct. This is especially true when it comes to events and ";}i:2;i:27662;}i:580;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"DOM";}i:2;i:27775;}i:581;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:141:" manipulation. Certain frameworks also offer a binding construct that you can use to abstract from browser differences. One example would be ";}i:2;i:27778;}i:582;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:35:"http://api.jquery.com/jQuery.proxy/";i:1;s:21:"jQuery's proxy method";}i:2;i:27919;}i:583;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:124:". This is no longer required with the introduction of ES5's bind method. However you may still see it out there in the wild.";}i:2;i:27980;}i:584;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:28104;}i:585;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:28106;}i:586;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:11:"Inheritance";i:1;i:3;i:2;i:28106;}i:2;i:28106;}i:587;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:28106;}i:588;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:28106;}i:589;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:313:"While we have learned how to create objects via the combination of constructor and prototype pattern. However that only works for one object linked to one prototype. In large applications, the inheritance chain could be much longer and wider. Therefore we have to understand the concept of inheritance a bit more.";}i:2;i:28129;}i:590;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:28442;}i:591;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:28444;}i:592;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:18:"Prototype Chaining";i:1;i:4;i:2;i:28444;}i:2;i:28444;}i:593;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:4;}i:2;i:28444;}i:594;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:28444;}i:595;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:223:"Prototype chaining is defined as the primary method of inheritance in ECMAScript. It is possible to assign the prototype of a constructor to an instance of another constructor, which could have it's own prototype. Think of ";}i:2;i:28472;}i:596;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:76:"http://johnkpaul.github.com/presentations/empirejs/javascript-bad-parts/#/11";i:1;s:75:"prototypes as omnipresent shadows that follow all the instantiations around";}i:2;i:28695;}i:597;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:".";}i:2;i:28851;}i:598;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:28852;}i:599;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:28852;}i:600;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:42:"http://beta.plnkr.co/edit/hY0TiP?p=preview";i:1;s:12:"Plunker Demo";}i:2;i:28854;}i:601;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:28913;}i:602;a:3:{i:0;s:4:"code";i:1;a:3:{i:0;s:1156:"
'use strict';

//prototype chaining demonstration

//parent object
var Animal = function(){
	this.weight = '100kg';
};

Animal.prototype.getWeight = function(){
	return this.weight;
};

//child object
var Pig = function(){
	this.colour = 'Pink';
};

//Pig now inherits a prototype that is actually the constructor instantiation of Animal
Pig.prototype = new Animal();

//we can add to the prototype in dynamic languages
Pig.prototype.getColour = function(){
	return this.colour;
}

var pig = new Pig();

//notice how both functions are in prototypes
console.log(pig.getWeight()); //from the parent
console.log(pig.getColour()); //from the child

//because they are inherited, the prototypes are "combined", therefore javascript only ever considers two areas when looking up properties, the object's instance, and the object's prototype!
console.log(Animal.prototype); //has the getWeight
console.log(Pig.prototype); //has the getWeight and getColour
console.log(pig.__proto__); //same

//protoypes can be overwritten
Pig.prototype.getWeight = function(){
    return '1000 kg';
};
    
var heavierPig = new Pig();
    
console.log(heavierPig.getWeight());
";i:1;s:10:"javascript";i:2;N;}i:2;i:28920;}i:603;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:28920;}i:604;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:64:"Remember that all objects in javascript inherit from the native ";}i:2;i:30097;}i:605;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:30161;}i:606;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:16:"Object.prototype";}i:2;i:30163;}i:607;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:30179;}i:608;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:46:". That's how you can get access to the native ";}i:2;i:30181;}i:609;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"API";}i:2;i:30227;}i:610;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:17:" methods such as ";}i:2;i:30230;}i:611;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:30247;}i:612;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:14:"hasOwnProperty";}i:2;i:30249;}i:613;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:30263;}i:614;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:2:", ";}i:2;i:30265;}i:615;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:30267;}i:616;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:8:"toString";}i:2;i:30269;}i:617;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:30277;}i:618;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:5:" and ";}i:2;i:30279;}i:619;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:30284;}i:620;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:7:"valueOf";}i:2;i:30286;}i:621;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:30293;}i:622;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:34:". You can find out more about the ";}i:2;i:30295;}i:623;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:93:"https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Object/prototype";i:1;s:38:"native object prototype methods on MDN";}i:2;i:30329;}i:624;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:3:" & ";}i:2;i:30465;}i:625;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:83:"https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Object";i:1;s:28:"native object methods on MDN";}i:2;i:30468;}i:626;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:39:". Similarly functions descend from the ";}i:2;i:30584;}i:627;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:30623;}i:628;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:18:"Function.prototype";}i:2;i:30625;}i:629;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:30643;}i:630;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:16:". Check out the ";}i:2;i:30645;}i:631;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:95:"https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Function/prototype";i:1;s:26:"native function API on MDN";}i:2;i:30661;}i:632;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:".";}i:2;i:30787;}i:633;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:30788;}i:634;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:30788;}i:635;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:23:"Because prototypes are ";}i:2;i:30790;}i:636;a:3:{i:0;s:18:"doublequoteopening";i:1;a:0:{}i:2;i:30813;}i:637;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:7:"shadows";}i:2;i:30814;}i:638;a:3:{i:0;s:18:"doublequoteclosing";i:1;a:0:{}i:2;i:30821;}i:639;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:186:" that are shared across all instances, if you need a unique instance property to be on the parent object, this becomes impossible, as it will affect all instances. Consider this example:";}i:2;i:30822;}i:640;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:31008;}i:641;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:31008;}i:642;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:42:"http://beta.plnkr.co/edit/Nq8f16?p=preview";i:1;s:12:"Plunker Demo";}i:2;i:31010;}i:643;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:31069;}i:644;a:3:{i:0;s:4:"code";i:1;a:3:{i:0;s:394:"
var SuperType = function(){
	this.colors = ['red', 'blue', 'green'];
};

var SubType = function(){};

SubType.prototype = new SuperType();

var instance1 = new SubType();

//this will be shared among all instances!
instance1.colors.push('black');

console.log(instance1.colors); //'red,blue,green,black'

var instance2 = new SubType();

console.log(instance2.colors); //'red,blue,green,black'
";i:1;s:10:"javascript";i:2;N;}i:2;i:31076;}i:645;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:31491;}i:646;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:33:"Parasitic Combination Inheritance";i:1;i:4;i:2;i:31491;}i:2;i:31491;}i:647;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:4;}i:2;i:31491;}i:648;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:31491;}i:649;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:117:"In order to have unique parent instances, and to have the ability to call the constructor of the parent (as we do in ";}i:2;i:31534;}i:650;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"PHP";}i:2;i:31651;}i:651;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:391:"), we need to separate the inheritance chain, so that constructors inherit from constructors, and prototypes inherit from prototypes. This means a child constructor could call the parent's constructor and apply unique values to the parent. Furthermore since the prototype is chained, we can still have sharable functions across instances. If we stop at this point, we'd essentially be doing ";}i:2;i:31654;}i:652;a:3:{i:0;s:18:"doublequoteopening";i:1;a:0:{}i:2;i:32045;}i:653;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:20:"Constructor Stealing";}i:2;i:32046;}i:654;a:3:{i:0;s:18:"doublequoteclosing";i:1;a:0:{}i:2;i:32066;}i:655;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:52:", which is similar to calling parent constructor in ";}i:2;i:32067;}i:656;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"PHP";}i:2;i:32119;}i:657;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:343:". However in order to link up prototypes, we would have to make the child prototype equal to the instantiation of the parent constructor. This is somewhat inefficient, as that leads us to executing the parent constructor twice, once when we steal the constructor, and a second time when we link up the prototype. We can employ a method called ";}i:2;i:32122;}i:658;a:3:{i:0;s:18:"doublequoteopening";i:1;a:0:{}i:2;i:32465;}i:659;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:33:"Parasitic Combination Inheritance";}i:2;i:32466;}i:660;a:3:{i:0;s:18:"doublequoteclosing";i:1;a:0:{}i:2;i:32499;}i:661;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:151:", in order to assign the parent prototype directly to the child's prototype. The below code example also demonstrates an augmentation of native object ";}i:2;i:32500;}i:662;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"API";}i:2;i:32651;}i:663;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:41:" in javascript, and also uses ES5 syntax.";}i:2;i:32654;}i:664;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:32695;}i:665;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:32695;}i:666;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:42:"http://beta.plnkr.co/edit/bpuD9W?p=preview";i:1;s:12:"Plunker Demo";}i:2;i:32697;}i:667;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:32756;}i:668;a:3:{i:0;s:4:"code";i:1;a:3:{i:0;s:1453:"
'use strict';

//parasitic combination inheritance
//this style most closely models the classical OOP inheritance style, and therefore has all the same power! Also needs ES5
//also perserves instanceof and isPrototypeOf chains

//adding an inherit method to the native Object (javascript is dynamic and flexible)
//Essentially it assigns the superType's prototype to the subType's prototype
Object.inherit = function(subType, superType){
	//creates a new empty object with the superType's prototype
	var prototype = Object.create(superType.prototype);
	//preserving the reverse chain from the prototype back to the constructor, in this case subType
	prototype.constructor = subType;
	//finally assigns the prototype to subType
	subType.prototype = prototype;
};

var Animal = function(weight = '100 kg'){
	this.weight = weight; //this is going to be added to the child instance
};

Animal.prototype.getWeight = function(){
	return this.weight;
};

var Pig = function(colour = 'Pink'){
	//executes the Animal constructor function, bringing in it's unique instance variables to the Pig's scope
	Animal.apply(this, ['1000 kg']);
	this.colour = colour;
};

//assigns Animal's prototype to Pig's prototype
Object.inherit(Pig, Animal);

//augment the prototype for Pig, but not for other animals (if any)
Pig.prototype.getColour = function(){
	return this.colour;
};

var pig = new Pig('Yellow');

console.log(pig.getColour());
console.log(pig.getWeight());
";i:1;s:10:"javascript";i:2;N;}i:2;i:32763;}i:669;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:34237;}i:670;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:26:"True Prototype Inheritance";i:1;i:4;i:2;i:34237;}i:2;i:34237;}i:671;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:4;}i:2;i:34237;}i:672;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:34237;}i:673;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:504:"All of the above styles are quite common to object and inheritance creation in javascript land. However all of them are essentially trying to provide classical class based OOP capability to a prototype based language. So that way developers from a classical OOP background can quickly grasp large scale application development in javascript. However all of that is unnecessary if we embrace true prototype based inheritance programming. This requires a shift in the way we think (and philosophise) about ";}i:2;i:34273;}i:674;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:56:"http://en.wikipedia.org/wiki/Prototype-based_programming";i:1;s:22:"objects in programming";}i:2;i:34777;}i:675;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:5:" and ";}i:2;i:34860;}i:676;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:45:"http://en.wikipedia.org/wiki/Prototype_theory";i:1;s:9:"real life";}i:2;i:34865;}i:677;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:2:". ";}i:2;i:34924;}i:678;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:47:"http://javascript.crockford.com/prototypal.html";i:1;s:61:"This style in javascript was popularised by Douglas Crockford";}i:2;i:34926;}i:679;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:72:", but it is also commonly used in less popular prototype languages. The ";}i:2;i:35039;}i:680;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:113:"http://stackoverflow.com/questions/879061/what-are-the-advantages-that-prototype-based-oo-has-over-class-based-oo";i:1;s:25:"advantages of this method";}i:2;i:35111;}i:681;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:198:" is that it's actually closer to how humans cognitively think about objects, possibly easier to learn if never exposed to class based OOP, and incredibly expressive. Oh and it's ridiculously simple.";}i:2;i:35254;}i:682;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:35452;}i:683;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:35452;}i:684;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:99:"We first need a object creator function that assigns a prototype and gives us back an empty object.";}i:2;i:35454;}i:685;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:35553;}i:686;a:3:{i:0;s:4:"code";i:1;a:3:{i:0;s:177:"
//takes an object, returns a new object but with a prototype assigned to the inserted object
function object(o){
    function F(){};
    F.prototype = o;
    return new F();
}
";i:1;s:10:"javascript";i:2;N;}i:2;i:35560;}i:687;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:35560;}i:688;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:101:"With the proliferation of ES5, you don't have to create your own helper function. You can simply use ";}i:2;i:35758;}i:689;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:35859;}i:690;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:15:"Object.create()";}i:2;i:35861;}i:691;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:35876;}i:692;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:131:", the first parameter being the object you want to be a prototype. You'll have noticed that we actually did use this method in the ";}i:2;i:35878;}i:693;a:3:{i:0;s:18:"doublequoteopening";i:1;a:0:{}i:2;i:36009;}i:694;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:33:"Combination Parasitic Inheritance";}i:2;i:36010;}i:695;a:3:{i:0;s:18:"doublequoteclosing";i:1;a:0:{}i:2;i:36043;}i:696;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:9:" pattern.";}i:2;i:36044;}i:697;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:36053;}i:698;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:36053;}i:699;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:689:"In class based languages, you often had to carefully plan out your taxonomy and relationships between abstract concepts. This often results in a plethora of interesting nouns that essentially lay downs contractual agreements in their relationships. Prototype supporters think that the practice is unnecessary, and instead you should start creating objects with behaviours as soon as possible, and then then later think about classification of similar objects. This is because prototype theory in cognitive science argues that categories of objects are not strictly concrete all the time, but instead there is a graded categorisation of objects which may have one or more focal points. See ";}i:2;i:36055;}i:700;a:3:{i:0;s:13:"interwikilink";i:1;a:4:{i:0;s:19:"wp>Prototype theory";i:1;s:49:"prototype theory for more interesting discussions";i:2;s:2:"wp";i:3;s:16:"Prototype theory";}i:2;i:36744;}i:701;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:284:". The point is, in programming, objects can simply inherit from other objects, not because those objects are hierarchical parents, but simply because they are related in some way, and these relationships aren't strictly inherited, some disappear and new ones appear when they need to.";}i:2;i:36817;}i:702;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:37101;}i:703;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:37101;}i:704;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:176:"You can see this happening in javascript. All objects have a prototype pointing back the native Object.prototype. This makes sense because they are all related semantically to ";}i:2;i:37103;}i:705;a:3:{i:0;s:18:"doublequoteopening";i:1;a:0:{}i:2;i:37279;}i:706;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:6:"object";}i:2;i:37280;}i:707;a:3:{i:0;s:18:"doublequoteclosing";i:1;a:0:{}i:2;i:37286;}i:708;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:620:". If you need a new object to contain modular code or conceptualise some sort of state or actor, you can either create ex-nihilo via the object literal syntax, or create extend it from a previous related object. The practice is bottom-up, there's no need to categorise everything from an abstraction down to concrete, just write concrete examples, and when you see relationships form between concrete examples, then depending on the concrete object you're writing, you can then inherit one from the other. When you need a wider generalisation, then just create higher abstract object and make both prototypes inherit it.";}i:2;i:37287;}i:709;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:37907;}i:710;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:37907;}i:711;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:6:"iframe";i:1;a:7:{s:3:"url";s:65:"http://www.docstoc.com/docs/document-preview.aspx?doc_id=27581648";s:5:"width";s:5:"427px";s:6:"height";s:5:"356px";s:3:"alt";N;s:6:"scroll";b:0;s:6:"border";b:0;s:5:"align";b:0;}i:2;i:5;i:3;s:103:"{{url>http://www.docstoc.com/docs/document-preview.aspx?doc_id=27581648 427px,356px noscroll noborder}}";}i:2;i:37909;}i:712;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:38012;}i:713;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:38012;}i:714;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:52:"Here's an example of using prototypical inheritance.";}i:2;i:38014;}i:715;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:38066;}i:716;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:38066;}i:717;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:42:"http://beta.plnkr.co/edit/QCUYSV?p=preview";i:1;s:12:"Plunker Demo";}i:2;i:38068;}i:718;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:38127;}i:719;a:3:{i:0;s:4:"code";i:1;a:3:{i:0;s:549:"
'use strict';

//animal prototype! (no need to use StudlyCaps since it's not a constructor function)
var animal = {
	weight: '100 kg',
	getWeight: function(){
		return this.weight;
	}
};

//pig is a prototype of animal
var pig1 = Object.create(animal);
pig1.colour = 'Pink';

var pig2 = Object.create(animal);
pig2.colour = 'Brown';

var wildPig = Object.create(pig2);
wildPig.tusks = true;

//the proto chain is being preserved, and it's overlapping!
console.log(wildPig);
console.log(wildPig.__proto__);
console.log(wildPig.__proto__.__proto__);
";i:1;s:10:"javascript";i:2;N;}i:2;i:38134;}i:720;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:38703;}i:721;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:36:"Functional Programming in Javascript";i:1;i:2;i:2;i:38703;}i:2;i:38703;}i:722;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:2;}i:2;i:38703;}i:723;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:38703;}i:724;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:21:"Javascript is a very ";}i:2;i:38753;}i:725;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:43:"http://eloquentjavascript.net/chapter6.html";i:1;s:19:"functional language";}i:2;i:38774;}i:726;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:315:", its functions are very flexible, and because it's architecture is often event driven and asynchronous, it often uses callbacks. You've also seen how it uses functions to create objects. All functions in javascript are naturally closures, they access variables outside of its own scope. I usually refer to this as ";}i:2;i:38841;}i:727;a:3:{i:0;s:18:"doublequoteopening";i:1;a:0:{}i:2;i:39156;}i:728;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:71:"functions can access things upwards, but cannot access things downwards";}i:2;i:39157;}i:729;a:3:{i:0;s:18:"doublequoteclosing";i:1;a:0:{}i:2;i:39228;}i:730;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:203:". So a high level function can access variables inside of its functions. Another recommended practice is to always use functional expressions rather than function declarations. This is because using the ";}i:2;i:39229;}i:731;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:39432;}i:732;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:3:"var";}i:2;i:39434;}i:733;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:39437;}i:734;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:177:" operator keeps the function within the local scope, that way you don't pollute the global scope. This section will discuss several important aspects of functions in javascript.";}i:2;i:39439;}i:735;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:39616;}i:736;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:39618;}i:737;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:43:"Anonymous Self-Executing Function Enclosure";i:1;i:3;i:2;i:39618;}i:2;i:39618;}i:738;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:39618;}i:739;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:39618;}i:740;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:440:"Sometimes you'll need to create a functional scope and execute it immediately. This mainly because only functions create an explicit scope in a javascript. By creating a function, you can scope all of your variable names so they won't conflict with other people's code. While this is useful, sometimes the code needs to execute, so instead of creating a functional expression and then executing it, we can just execute it as it was created.";}i:2;i:39673;}i:741;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:40113;}i:742;a:3:{i:0;s:4:"code";i:1;a:3:{i:0;s:391:"
//self-executing anonymous function enclosure

//you need to wrap the anonymous function with two parantheses, then add another two parantheses!
(function(parameter){

    var nameThatCannotConflict = 'Blah!';
    console.log('I was declared and executed immediately! Here is my ' + parameter);
    
})('parameter');
//second set of parantheses can have parameters, or have actual commands
";i:1;s:10:"javascript";i:2;N;}i:2;i:40120;}i:743;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:40120;}i:744;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:127:"The above style is often used in jQuery plugins, since many different authors would be using similar names for their variables!";}i:2;i:40532;}i:745;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:40659;}i:746;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:40661;}i:747;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:34:"Functional Scope and Block Scoping";i:1;i:3;i:2;i:40661;}i:2;i:40661;}i:748;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:40661;}i:749;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:40661;}i:750;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:44:"The block expressions in javascript such as ";}i:2;i:40707;}i:751;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:40751;}i:752;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:3:"for";}i:2;i:40753;}i:753;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:40756;}i:754;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:5:" and ";}i:2;i:40758;}i:755;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:40763;}i:756;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:2:"if";}i:2;i:40765;}i:757;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:40767;}i:758;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:301:" do not create scopes. However sometimes we'll need block scopes when each iteration of the block expression has something unique. We can also use self-executing anonymous function enclosures to simulate block expression scope. The below code shows how block expressions can confuse novice developers.";}i:2;i:40769;}i:759;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:41070;}i:760;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:41070;}i:761;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:42:"http://beta.plnkr.co/edit/AFBt5e?p=preview";i:1;s:12:"Plunker Demo";}i:2;i:41072;}i:762;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:41131;}i:763;a:3:{i:0;s:4:"code";i:1;a:3:{i:0;s:982:"
'use strict';

//Demonstration of function scoping vs the lack of block scoping

//In this example, we want to be able to log 1, 2, 3, but we'll see that we cannot!
var arr = [1,2,3];
var out = [];

//the for loop is a block expression, it has no scope
for(var i = 0; i<arr.length;i++) {
	var item = arr[i]; //therefore when the loop finishes, it will be as if item has been defined outside
	//here we push a callback function into the out array
	out.push(function(){
		console.log(item); //this will access item which is defined outside of its scope
	});
}

console.log(item, '<- This is the item after the loop finishes!'); //the fact that I can access item, means that for did not scope that item
console.log(out, '<- This is the array of functions!');

//the forEach is the ES5 command which executes a callback on each item of the array, the func is automatically injected from the javascript
out.forEach(function(func){
	func(); //the executes the callback on each array
});
";i:1;s:10:"javascript";i:2;N;}i:2;i:41138;}i:764;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:41138;}i:765;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:283:"Because the block expression has no scope, the item variable remains at 3 when the callback is called. In order to avoid this problem, we have to wrap the block scope's code inside an anonymous self-executing function enclosure. Note that once ES6 takes place, we can simply use the ";}i:2;i:42141;}i:766;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:42424;}i:767;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:3:"let";}i:2;i:42426;}i:768;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:42429;}i:769;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:111:" operator to automatically make a variable block scoped, however at this moment, it is not very well supported.";}i:2;i:42431;}i:770;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:42542;}i:771;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:42542;}i:772;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:42:"http://beta.plnkr.co/edit/1GgFPd?p=preview";i:1;s:12:"Plunker Demo";}i:2;i:42544;}i:773;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:42603;}i:774;a:3:{i:0;s:4:"code";i:1;a:3:{i:0;s:746:"
'use strict';

//Using an anonymous function or let to provide block scoping

//In this example, we want to be able to log 1, 2, 3, but we'll see that we cannot!
var arr = [1,2,3];
var out = [];

//the for loop is a block expression, it has no scope
for(var i = 0; i<arr.length;i++) {
	(function(item){
		out.push(function(){
		   console.log(item); 
		});
	})(arr[i]);
}

out.forEach(function(func){
	func();
});

//using "let" in ES6 also works (notice that it requires version=1.7 in the script tag!)
var arr2 = [1, 2, 3];
var out = [];

for(var i = 0; i < arr2.length; i++){
	let item = arr2[i]; //can't really be used right now! No shims available
	out.push(function(){
		console.log(item);
	});
}

out.forEach(function(func){
	func();
});
";i:1;s:10:"javascript";i:2;N;}i:2;i:42610;}i:775;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:43377;}i:776;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:28:"Using Higher Order Functions";i:1;i:3;i:2;i:43377;}i:2;i:43377;}i:777;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:43377;}i:778;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:43377;}i:779;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:17:"As we learned in ";}i:2;i:43417;}i:780;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"PHP";}i:2;i:43434;}i:781;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:514:", higher order functions are functions that either accept a callback function as a parameter, and/or return back a function to be used. You're going to use higher order functions often when programming for events, because you need to pass callback functions into the event handlers! One of the advantages of this ability is that it provides a more expressive functional alternative to loops. There's a number of higher order functional constructs for arrays that allow you to pass callbacks in, instead of looping.";}i:2;i:43437;}i:782;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:43951;}i:783;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:43951;}i:784;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:42:"http://beta.plnkr.co/edit/7TPJ6o?p=preview";i:1;s:12:"Plunker Demo";}i:2;i:43953;}i:785;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:44012;}i:786;a:3:{i:0;s:4:"code";i:1;a:3:{i:0;s:1993:"
'use strict';

//demonstrating using functions instead of loops

//instead of iterating through an array, we can use forEach, map and filter functions
var array = ['one', 'two', 'three'];

for(var i = 0; i < array.length; i++){
	if(array[i] === 'two'){
		array[i] = array[i].toUpperCase();
	}
}
console.log(array, '<- LOOPING');

//forEach method (runs a function when it encounters each value)
var array = ['one', 'two', 'three'];
array.forEach(function(value, index, originalArray){
	if(value === 'two'){
		array[index] = value.toUpperCase();
	}
});
console.log(array, '<- FOREACH METHOD');

//map method (returns a new array and mutates the value)
var array = ['one', 'two', 'three'];
array = array.map(function(value, index, originalArray){
	if(value === 'two'){
		value = 'TWO';
	}
	return value;
}).join(','); //cool use of joins by mapping out an array and then joining into a string!
console.log(array, '<- MAP METHOD');

//filter method
var array = ['one', 'two', 'three'];
array = array.filter(function(value, index, originalArray){
	if(value === 'two'){
		return false;
	}
	return true;
});
console.log(array, '<- FILTER METHOD');

//reduce method (iterates through two values at a time
var array = ['one', 'two', 'three'];
array = array.reduce(function(prev, next, index, originalArray){
	if(next === 'two'){
		next = next.toUpperCase();
	}
	return prev + next;
});
console.log(array, '<- REDUCE METHOD');

//you can combine all of these methods together via method chaining
var array = ['one', 'two', 'three'];
array = array.map(function(value){
	if(value === 'two'){
		return 'TWO';
	}
	return value; //without this it'll be almost like filtering
}).filter(function(value){
	if(value === 'three'){
		return false;
	}
	return true;
}).reduce(function(prev, next){
	if(next === 'one'){
		next = 'oNe';
	}
	return prev + next;
}, ''); //second parameter to reduce is initial value, if you want to start "next" at the first elemnt of array
console.log(array, '<- COMBINED METHOD');
";i:1;s:10:"javascript";i:2;N;}i:2;i:44019;}i:787;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:44019;}i:788;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:103:"More interesting applications of functional programming in javascript can be acquired in these sources:";}i:2;i:46033;}i:789;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:46137;}i:790;a:3:{i:0;s:10:"listu_open";i:1;a:0:{}i:2;i:46137;}i:791;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:46137;}i:792;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:46137;}i:793;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:" ";}i:2;i:46141;}i:794;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:53:"http://dailyjs.com/2012/09/14/functional-programming/";i:1;s:72:"Daily JS demonstrations of partial application, composition and flipping";}i:2;i:46142;}i:795;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:".";}i:2;i:46272;}i:796;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:46273;}i:797;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:46273;}i:798;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:46273;}i:799;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:46273;}i:800;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:" ";}i:2;i:46277;}i:801;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:48:"http://cjohansen.no/talks/2012/sdc-functional/#1";i:1;s:32:"Slides on Functional Programming";}i:2;i:46278;}i:802;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:46363;}i:803;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:46363;}i:804;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:46363;}i:805;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:46363;}i:806;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:" ";}i:2;i:46367;}i:807;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:49:"http://osteele.com/sources/javascript/functional/";i:1;s:37:"Oliver Steele's Functional JS Library";}i:2;i:46368;}i:808;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:46459;}i:809;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:46459;}i:810;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:46459;}i:811;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:46459;}i:812;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:" ";}i:2;i:46463;}i:813;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:31:"https://github.com/caolan/async";i:1;s:46:"Library for simplifying asynchronous callbacks";}i:2;i:46464;}i:814;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:46546;}i:815;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:46546;}i:816;a:3:{i:0;s:11:"listu_close";i:1;a:0:{}i:2;i:46546;}i:817;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:46548;}i:818;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:17:"MVC in Javascript";i:1;i:2;i:2;i:46548;}i:2;i:46548;}i:819;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:2;}i:2;i:46548;}i:820;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:46548;}i:821;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:591:"As developers realised javascript was more and more important to the development of the web, they started to face architectural issues when they wanted to build large scale client side applications. So developers decided to apply the battle tested MVC architecture to the client side. MVC on the client side is quite different from MVC on the server side. The formulations of MVC on the server side are quite similar, however front end developers faced problems translating those concepts to the client side, and so the implementations of MVC differs across different client side frameworks.";}i:2;i:46579;}i:822;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:47170;}i:823;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:47170;}i:824;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:55:"The particular framework that Polycademy recommends is ";}i:2;i:47172;}i:825;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:21:"http://angularjs.org/";i:1;s:9:"AngularJS";}i:2;i:47227;}i:826;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:117:". This client side framework is produced and maintained by Google. It considers itself an MV* framework, essentially ";}i:2;i:47262;}i:827;a:3:{i:0;s:18:"doublequoteopening";i:1;a:0:{}i:2;i:47379;}i:828;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:11:"MV whatever";}i:2;i:47380;}i:829;a:3:{i:0;s:18:"doublequoteclosing";i:1;a:0:{}i:2;i:47391;}i:830;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:94:". Before we launch into AngularJS, let's try to understand Angular's architectural philosophy.";}i:2;i:47392;}i:831;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:47486;}i:832;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:47488;}i:833;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:17:"Models & Services";i:1;i:4;i:2;i:47488;}i:2;i:47488;}i:834;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:4;}i:2;i:47488;}i:835;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:47488;}i:836;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:31:"In AngularJS, the concept of a ";}i:2;i:47515;}i:837;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:65:"http://docs.angularjs.org/guide/dev_guide.mvc.understanding_model";i:1;s:29:"model can refer to two things";}i:2;i:47546;}i:838;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:215:". Most often it refers to any object that contains useful data that is then displayed to the user for viewing or further modification. In order for these models to display, the model objects have to attached to the ";}i:2;i:47645;}i:839;a:3:{i:0;s:18:"doublequoteopening";i:1;a:0:{}i:2;i:47860;}i:840;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:5:"scope";}i:2;i:47861;}i:841;a:3:{i:0;s:18:"doublequoteclosing";i:1;a:0:{}i:2;i:47866;}i:842;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:183:" of the controller and view. However models on the server side is where to access and mutate application state, they are not just variables of data. Similarly in AngularJS, there are ";}i:2;i:47867;}i:843;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:50:"http://docs.angularjs.org/guide/dev_guide.services";i:1;s:69:""services" that act as our mediators, accessors and mutators of state";}i:2;i:48050;}i:844;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:137:". However in the case of client side applications, this state is usually stored on the server side, which is then accessed via a RESTful ";}i:2;i:48174;}i:845;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"API";}i:2;i:48311;}i:846;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:91:". Therefore models in AngularJS could be simple variables, a layer that mediates a RESTful ";}i:2;i:48314;}i:847;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"API";}i:2;i:48405;}i:848;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:136:", or a layer that mediates data storage on the client, or some other complex business logic that doesn't involve user interface changes.";}i:2;i:48408;}i:849;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:48544;}i:850;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:48546;}i:851;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:38:"Views, Templates, Directives & Filters";i:1;i:4;i:2;i:48546;}i:2;i:48546;}i:852;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:4;}i:2;i:48546;}i:853;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:48546;}i:854;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:165:"On the client side, everything can be considered the view. However with the growing complexity of client side applications, we have to make the distinction clearer. ";}i:2;i:48594;}i:855;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:64:"http://docs.angularjs.org/guide/dev_guide.mvc.understanding_view";i:1;s:50:"The view in AngularJS is live rendering of the DOM";}i:2;i:48759;}i:856;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:42:". It is live because it's not just static ";}i:2;i:48878;}i:857;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"DOM";}i:2;i:48920;}i:858;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:36:" which is simple read from, but the ";}i:2;i:48923;}i:859;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"DOM";}i:2;i:48959;}i:860;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:252:" can actively change based on user, browser or server sent events. Furthermore it's the final rendering because it's after the controller has matched the models with their templates, and after AngularJS renders your directives and applies your filters.";}i:2;i:48962;}i:861;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:49214;}i:862;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:49214;}i:863;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:41:"AngularJS has two unique concepts called ";}i:2;i:49216;}i:864;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:41:"http://docs.angularjs.org/guide/directive";i:1;s:10:"directives";}i:2;i:49257;}i:865;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:5:" and ";}i:2;i:49313;}i:866;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:59:"http://docs.angularjs.org/guide/dev_guide.templates.filters";i:1;s:7:"filters";}i:2;i:49318;}i:867;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:".";}i:2;i:49389;}i:868;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:49390;}i:869;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:49390;}i:870;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:45:"You can think of directives as extensions to ";}i:2;i:49392;}i:871;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:4:"HTML";}i:2;i:49437;}i:872;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:87:". They are like reusable user interface components. Directives is where you place your ";}i:2;i:49441;}i:873;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"DOM";}i:2;i:49528;}i:874;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:123:" manipulations such as jQuery and other logic to handle user inputted events. They are like as if you had control over the ";}i:2;i:49531;}i:875;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:4:"HTML";}i:2;i:49654;}i:876;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:39:" standard and started adding in custom ";}i:2;i:49658;}i:877;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:4:"HTML";}i:2;i:49697;}i:878;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:90:" tags that you needed for your web application. The usage of directives and enhancing the ";}i:2;i:49701;}i:879;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:4:"HTML";}i:2;i:49791;}i:880;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:169:" itself comes from AngularJS's philosophy of declarative programming when building UI and imperative programming when building business logic. This may seem to conflict ";}i:2;i:49795;}i:881;a:3:{i:0;s:18:"doublequoteopening";i:1;a:0:{}i:2;i:49964;}i:882;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:22:"unobtrusive javascript";}i:2;i:49965;}i:883;a:3:{i:0;s:18:"doublequoteclosing";i:1;a:0:{}i:2;i:49987;}i:884;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:141:" movement, however as you start working in AngularJS, you start to see how this philosophy not only improves testability, but also makes the ";}i:2;i:49988;}i:885;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:4:"HTML";}i:2;i:50129;}i:886;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:121:" a self-documenting document on how the end user interface, whereas before you would never know if clicking on a certain ";}i:2;i:50133;}i:887;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:4:"HTML";}i:2;i:50254;}i:888;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:28:" tag would cause some other ";}i:2;i:50258;}i:889;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:4:"HTML";}i:2;i:50286;}i:890;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:100:" to appear or disappear. This is one of the best concepts that AngularJS has brought into the world.";}i:2;i:50290;}i:891;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:50390;}i:892;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:50390;}i:893;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:246:"Filters simply format data for display. They don't fit in the directive space, because they aren't user interface changes, but subtly change the display of model data. Such as for example to turn letters into uppercase, or to localise currencies.";}i:2;i:50392;}i:894;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:50638;}i:895;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:50638;}i:896;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:434:"AngularJS also doesn't have a preference on how you structure your templates. It is possible for you to store your templates on the server and lazy load them over the wire, or to store them on the client side as template scripts, or to embed them in your directive code. Polycademy suggests you store the templates on the client side as template scripts. You often don't need to lazy load templates, because templates are often empty ";}i:2;i:50640;}i:897;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:4:"HTML";}i:2;i:51074;}i:898;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:44:", when you strip away all the data from the ";}i:2;i:51078;}i:899;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:4:"HTML";}i:2;i:51122;}i:900;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:339:", you're not left with much. The overhead of loading all the templates up front will be less the time taken to download the templates each time you visit a page. Of course there are caching solutions, but such a solution takes up implementation time. Now of course if your templates are large and numerous, then you may choose to build an ";}i:2;i:51126;}i:901;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"API";}i:2;i:51465;}i:902;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:199:" to load up templates from the server. By having all of your templates on the client side on one page load, your site becomes far more responsive, and approaches being a true single page application!";}i:2;i:51468;}i:903;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:51667;}i:904;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:51669;}i:905;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:20:"Controllers & Scopes";i:1;i:4;i:2;i:51669;}i:2;i:51669;}i:906;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:4;}i:2;i:51669;}i:907;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:51669;}i:908;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:14:"In AngularJS, ";}i:2;i:51699;}i:909;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:70:"http://docs.angularjs.org/guide/dev_guide.mvc.understanding_controller";i:1;s:79:"controllers bind model variables acquired or mutated from services to templates";}i:2;i:51713;}i:910;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:240:". Controllers aren't resources or pages on the client side, but rather a section of dynamic user interface. If you can draw a box around certain dynamically changing sections of the page and give semantic meaning, then it can be considered ";}i:2;i:51867;}i:911;a:3:{i:0;s:18:"doublequoteopening";i:1;a:0:{}i:2;i:52107;}i:912;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:12:"controllable";}i:2;i:52108;}i:913;a:3:{i:0;s:18:"doublequoteclosing";i:1;a:0:{}i:2;i:52120;}i:914;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:35:". This basically means inside your ";}i:2;i:52121;}i:915;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:4:"HTML";}i:2;i:52156;}i:916;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:271:", you would specify a certain containing to be the controller of all the nested tags. You can have a main controller for the entire page state, multiple controllers side by side, controllers nested in parent controllers or no controllers at all if the page isn't dynamic.";}i:2;i:52160;}i:917;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:52431;}i:918;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:52431;}i:919;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:64:"The key to understanding AngularJS controllers is understanding ";}i:2;i:52433;}i:920;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:37:"http://docs.angularjs.org/guide/scope";i:1;s:6:"scopes";}i:2;i:52497;}i:921;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:62:". In other client side frameworks, these are often called the ";}i:2;i:52545;}i:922;a:3:{i:0;s:18:"doublequoteopening";i:1;a:0:{}i:2;i:52607;}i:923;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:10:"view model";}i:2;i:52608;}i:924;a:3:{i:0;s:18:"doublequoteclosing";i:1;a:0:{}i:2;i:52618;}i:925;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:110:". The scope is simply an object that is available to all elements, directives and filters that are within the ";}i:2;i:52619;}i:926;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:4:"HTML";}i:2;i:52729;}i:927;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:130:" tag specified as the controller. It provides the glue that binds the changes in model data to the changes on the user interface. ";}i:2;i:52733;}i:928;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:41:"http://stackoverflow.com/a/9693933/582917";i:1;s:68:"One of the unique aspects of AngularJS is bidirectional data binding";}i:2;i:52863;}i:929;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:188:". This means as data changes on the user interface either via user events or browser events, these changes get reflected in the controller, model and services, and vice versa. This allows ";}i:2;i:52977;}i:930;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:63:"http://docs.angularjs.org/guide/dev_guide.templates.databinding";i:1;s:98:"real time updating and propagation of model changes across all layers of the AngularJS application";}i:2;i:53165;}i:931;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:358:". This is a very powerful tool, allowing you create truly responsive client side applications, there can multiple layers of application respond to change events. One common application of this is having forms self-validate in real time, and having the data get interpreted which may trigger user interface changes such as suggestions to what they are typing.";}i:2;i:53331;}i:932;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:53689;}i:933;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:53689;}i:934;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:374:"Polycademy is currently preparing an AngularJS + Codeigniter seed application. This is basically a full boilerplate and architecture ready set of files that has all the necessary configuration and third party libraries installed. You'll be able to just clone it and start coding immediately. It will avoid repeat configuration. When this is ready, you'll see it a link here.";}i:2;i:53691;}i:935;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:54065;}i:936;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:54065;}i:937;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:94:"To start getting deeper into AngularJS, you should read/watch/refer to all of these resources:";}i:2;i:54067;}i:938;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:54162;}i:939;a:3:{i:0;s:10:"listu_open";i:1;a:0:{}i:2;i:54162;}i:940;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:54162;}i:941;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:54162;}i:942;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:" ";}i:2;i:54166;}i:943;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:40:"http://docs.angularjs.org/guide/concepts";i:1;s:26:"AngularJS Conceptual Guide";}i:2;i:54167;}i:944;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:112:" - You should read the rest of the guide while you're at it, but make sure to do the tutorials at the same time.";}i:2;i:54238;}i:945;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:54350;}i:946;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:54350;}i:947;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:54350;}i:948;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:54350;}i:949;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:" ";}i:2;i:54354;}i:950;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:18:"http://egghead.io/";i:1;s:10:"Egghead.io";}i:2;i:54355;}i:951;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:67:" - Short video tutorials working on the core features of AngularJS.";}i:2;i:54388;}i:952;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:54455;}i:953;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:54455;}i:954;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:54455;}i:955;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:54455;}i:956;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:" ";}i:2;i:54459;}i:957;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:34:"http://docs.angularjs.org/tutorial";i:1;s:39:"Official AngularJS Tutorial Application";}i:2;i:54460;}i:958;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:207:" - This tutorial takes you through building a simple AngularJS application involving page changes, services, and AngularJS's integrated test driven development. You will need to install Node.js to run tests.";}i:2;i:54538;}i:959;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:54745;}i:960;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:54745;}i:961;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:54745;}i:962;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:54745;}i:963;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:" ";}i:2;i:54749;}i:964;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:44:"http://onehungrymind.com/category/angularjs/";i:1;s:25:"Simpulton's Blog & Videos";}i:2;i:54750;}i:965;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:54824;}i:966;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:54824;}i:967;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:54824;}i:968;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:54824;}i:969;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:" ";}i:2;i:54828;}i:970;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:44:"http://www.yearofmoo.com/tags/AngularJS.html";i:1;s:32:"Year of Moo's AngularJS articles";}i:2;i:54829;}i:971;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:54910;}i:972;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:54910;}i:973;a:3:{i:0;s:11:"listu_close";i:1;a:0:{}i:2;i:54910;}i:974;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:54910;}i:975;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:84:"Here are several youtube videos regarding AngularJS that you also complete watching.";}i:2;i:54912;}i:976;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:54996;}i:977;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:6:"vshare";i:1;a:8:{s:4:"site";s:7:"youtube";s:5:"video";s:51:"tKe25THBoF4&list=PLwwh-11EOGvME7nAKOD6zq9I4wAZtsp-a";s:5:"flash";s:131:"http://www.youtube.com/v/tKe25THBoF4%26list%3DPLwwh-11EOGvME7nAKOD6zq9I4wAZtsp-a?allowFullScreen=true&allowScriptAccess=always&fs=1";s:4:"vars";a:3:{s:15:"allowFullScreen";s:4:"true";s:17:"allowScriptAccess";s:6:"always";s:2:"fs";s:1:"1";}s:5:"align";i:3;s:5:"width";i:520;s:6:"height";i:406;s:5:"title";s:0:"";}i:2;i:5;i:3;s:71:"{{ youtube>tKe25THBoF4&list=PLwwh-11EOGvME7nAKOD6zq9I4wAZtsp-a?large }}";}i:2;i:54998;}i:978;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:55071;}i:979;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:7:"Modules";i:1;i:3;i:2;i:55071;}i:2;i:55071;}i:980;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:55071;}i:981;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:55071;}i:982;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:38:"http://docs.angularjs.org/guide/module";i:1;s:43:"AngularJS structures its code under modules";}i:2;i:55090;}i:983;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:28:". These are the not same as ";}i:2;i:55176;}i:984;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:54:"http://wiki.ecmascript.org/doku.php?id=harmony:modules";i:1;s:32:"modules that are coming into ES6";}i:2;i:55204;}i:985;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:500:". Instead they act more like namespaces or packages. AngularJS is a fully dependency injected framework. By structuring your controllers, services and directives as modules, they can then be available to be dependency injected anywhere in your code. This means that modules is how AngularJS wires up and bootstraps all of the dependencies. Kind of like an IOC container. Furthermore this opens up opportunities to share AngularJS libraries with fellow AngularJS developers. For example check out the ";}i:2;i:55295;}i:986;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:21:"http://ngmodules.org/";i:1;s:28:"AngularJS Modules aggregator";}i:2;i:55795;}i:987;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:".";}i:2;i:55849;}i:988;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:55850;}i:989;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:55850;}i:990;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:193:"One key consideration is that unlike server side code, when you deploy your client side application in production, they are all deployed into one document, either minified or imported into the ";}i:2;i:55852;}i:991;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:4:"HTML";}i:2;i:56045;}i:992;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:99:" document. So modules in AngularJS have nothing to do with script loading, you can still integrate ";}i:2;i:56049;}i:993;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:18:"http://headjs.com/";i:1;s:7:"Head.JS";}i:2;i:56148;}i:994;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:4:" or ";}i:2;i:56178;}i:995;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:21:"http://requirejs.org/";i:1;s:10:"Require.JS";}i:2;i:56182;}i:996;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:12:" if need be.";}i:2;i:56218;}i:997;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:56230;}i:998;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:56230;}i:999;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:46:"It's important to read the AngularJS guide on ";}i:2;i:56232;}i:1000;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:47:"http://docs.angularjs.org/guide/concepts#module";i:1;s:45:"how modules configure the dependency injector";}i:2;i:56278;}i:1001;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:19:", and refer to the ";}i:2;i:56375;}i:1002;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:44:"http://docs.angularjs.org/api/angular.Module";i:1;s:31:"module API in the documentation";}i:2;i:56394;}i:1003;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:19:" before continuing.";}i:2;i:56474;}i:1004;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:56493;}i:1005;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:56493;}i:1006;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:357:"AngularJS doesn't really specify how you should structure your development files, they simply suggest that you put all of your components as part of modules. Here is our recommendation on structuring your client side application. Note that it doesn't consider where to put your partial templates, that is left up to you. We recommend embedding them in your ";}i:2;i:56495;}i:1007;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:4:"HTML";}i:2;i:56852;}i:1008;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:92:" that is first loaded by your server, refer to the template section for further information.";}i:2;i:56856;}i:1009;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:56949;}i:1010;a:3:{i:0;s:12:"preformatted";i:1;a:1:{i:0;s:1203:"  root/js
    |
    |----app.js
    |
    |----controllers
    |       |
    |       |----This is where your place your page controllers
    |       |
    |       |----Blog.Controllers.js (page controller)
    |       |
    |       |----Header.Controllers.js (sectional controller)
    |
    |----directives
    |       |
    |       |----This is where you put reusable directive code
    |       |
    |       |----Fade.Directive.js
    |       |
    |       |----EqualiseHeight.Directive.js
    |
    |----filters
    |       |
    |       |----This is where you put reusable filter code
    |       |
    |       |----Currency.Filter.js
    |
    |----services
    |       |
    |       |----This is where you put shared services
    |       |
    |       |----Blog.Service.js
    |       |
    |       |----ErrorResponse.Service.js
    |
    |----vendor
            |
            |----AngularJS Libraries
            |
            |----jQuery Libraries
            |
            |----Bootstrap Libraries
            |
            |----Modernizr
            |
            |----es5 shim
            |
            |----es6 shim
            |
            |----ieshiv
            |
            |----JSON3";}i:2;i:56949;}i:1011;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:56949;}i:1012;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:4:"Our ";}i:2;i:58257;}i:1013;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:58261;}i:1014;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:6:"app.js";}i:2;i:58263;}i:1015;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:58269;}i:1016;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:128:" is equivalent to our front controller. This is where we configure all of our dependencies, our page level routing, single page ";}i:2;i:58271;}i:1017;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"URL";}i:2;i:58399;}i:1018;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:11:" structure ";}i:2;i:58402;}i:1019;a:3:{i:0;s:18:"doublequoteopening";i:1;a:0:{}i:2;i:58413;}i:1020;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:12:"deep linking";}i:2;i:58414;}i:1021;a:3:{i:0;s:18:"doublequoteclosing";i:1;a:0:{}i:2;i:58426;}i:1022;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:68:", and any initial configuration and constants such as handling CSRF.";}i:2;i:58427;}i:1023;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:58495;}i:1024;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:58495;}i:1025;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:505:"Each page on our web application can have its own page level controller. These are not the same as RESTful resources, but simply user interface constructs. If we were using AngularJS on a mobile application, then the controllers may be completely different! The controllers directory is also where we place any sectional controllers that don't correspond to any particular page. Any subsections of a page can be considered sub controllers, and these can be placed inside the page controller's script file.";}i:2;i:58497;}i:1026;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:59002;}i:1027;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:59002;}i:1028;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:259:"The directives will contain reusable directive code, they don't contain any template files. Notice how we name them, they don't refer to any kind of data or page, but particular behaviour of our user interface. Directives can often be used in multiple places.";}i:2;i:59004;}i:1029;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:59263;}i:1030;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:59263;}i:1031;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:46:"Filters will contain any reusable filter code.";}i:2;i:59265;}i:1032;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:59311;}i:1033;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:59311;}i:1034;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:266:"Services should have the same name as our RESTful resources on the server. This is where we put the intermediary layer to communicate with external resources. The services section can also contain any kind of business logic that don't involve user interface changes.";}i:2;i:59313;}i:1035;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:59579;}i:1036;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:59579;}i:1037;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:225:"Please note that module names are StudlyCaps. The names of the controllers, services, and filters are also StudlyCaps. The only exception is directives need to be camelcased. However all of their filenames will be StudlyCaps.";}i:2;i:59581;}i:1038;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:59806;}i:1039;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:59806;}i:1040;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:304:"The vendor directory is where we place all of our third party code. It is recommended to use their CDNs to load the scripts instead of from your own server if they provide it. Make sure to always use their minified version, and if they don't have a minified version, you can minify it yourself using the ";}i:2;i:59808;}i:1041;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:26:"http://refresh-sf.com/yui/";i:1;s:18:"online YUI service";}i:2;i:60112;}i:1042;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:".";}i:2;i:60161;}i:1043;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:60162;}i:1044;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:60162;}i:1045;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:105:"Inside of each of those script files, we register them as a module, and we also declare any dependencies.";}i:2;i:60164;}i:1046;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:60269;}i:1047;a:3:{i:0;s:4:"file";i:1;a:3:{i:0;s:1034:"
'use strict';

//here's an example of app.js registering itself as a module, and then declaring all of its dependencies!
//you may notice some modules as part of AngularJS itself

/* ==========================================================================
   BOOTSTRAPPER (notice the cascading dependencies, AngularJS uses the order you defined to configure the injector!)
   ========================================================================== */

//app is an module that is dependent on several top level modules
var app = angular.module('App', [
	'Controllers',
	'Filters',
	'Services',
	'Directives',
	'ngResource', //for RESTful resources
	'ngCookies' //for manipulation of cookies
]);

//Define all the page level controllers (Application Logic)
angular.module('Controllers', []);
//Define all shared filters (UI Filtering)
angular.module('Filters', []);
//Define all shared services (Interaction with Backend)
angular.module('Services', []);
//Define all shared directives (UI Logic)
angular.module('Directives', []);
";i:1;s:10:"javascript";i:2;s:6:"app.js";}i:2;i:60276;}i:1048;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:60276;}i:1049;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:58:"Here's an excerpt out of a typical page controller module.";}i:2;i:61338;}i:1050;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:61396;}i:1051;a:3:{i:0;s:4:"file";i:1;a:3:{i:0;s:822:"
'use strict';

/**
 * This controller is bound the Controllers module
 * It is possible to have multiple controllers on this module, however they should be sub controllers that are nested inside the CoursesIndexCtrl
 */

angular.module('Controllers')
    .controller('CoursesIndexCtrl', [ //<- actual name of the controller, not the module
        //this part is for dependency injection, we're injecting $scope service and CoursesServ service into this controller's function. The CoursesServ has been dependency injected, because in our app.js bootstrapping process, we added in the Courses.Service module to injector globally!
        '$scope',
        'CoursesServ',
        function($scope, CoursesServ){
        
            //start doing magic here!
            //add models to the scope
        
        }
    ]);
";i:1;s:10:"javascript";i:2;s:22:"Courses.Controllers.js";}i:2;i:61403;}i:1052;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:61403;}i:1053;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:46:"Here's an excerpt from the Courses.Service.js.";}i:2;i:62269;}i:1054;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:62315;}i:1055;a:3:{i:0;s:4:"file";i:1;a:3:{i:0;s:407:"
'use strict';

angular.module('Services')
    .factory('CoursesServ', [
        '$resource',
        function($resource){
            return $resource(
                'api/courses/:id',
                {},
                {
                    update: {
                        method: 'PUT', //THIS METHOD DOESN'T EXIST BY DEFAULT
                    }
                }
            );
        }
    ]);
";i:1;s:10:"javascript";i:2;s:18:"Courses.Service.js";}i:2;i:62322;}i:1056;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:62322;}i:1057;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:273:"Modules is also how AngularJS configures itself. That is you can hook into AngularJS's processing during its config phase, and after everything's been loaded in its run phase. You can do this in any module as long as it has been specified as a dependent module on the main ";}i:2;i:62769;}i:1058;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:63042;}i:1059;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:6:"app.js";}i:2;i:63044;}i:1060;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:63050;}i:1061;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:79:" module. For example, here is the ErrorResponse.Service module that intercepts ";}i:2;i:63052;}i:1062;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:4:"HTTP";}i:2;i:63131;}i:1063;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:30:" responses and inspects their ";}i:2;i:63135;}i:1064;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:4:"HTTP";}i:2;i:63165;}i:1065;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:73:" status code and then creates a corresponding message for various errors.";}i:2;i:63169;}i:1066;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:63242;}i:1067;a:3:{i:0;s:4:"file";i:1;a:3:{i:0;s:5570:"
'use strict';

/**
 * Response Handler for Error Codes across all HTTP requests to show an alert box!
 */
angular.module('Services')
    .config([
        '$provide',
        '$httpProvider',
        function($provide, $httpProvider){
                
            //model variable...
            var httpMessages = [];
                
            //bind the httpMessages array to the httpMessages key so it can be dependency injected
            $provide.value('httpMessages', httpMessages);
                
            $httpProvider.responseInterceptors.push(['$q', function($q) {
                
                return function(promise) {
                        
                    return promise.then(
                        function(successResponse) {
                                
                            //we only want to show anything that wasn't a GET based request
                            //these allow you show messages, you don't have to show these types though (because usually not required)
                                
                            switch(successResponse.config.method.toUpperCase()){
                                case 'GET':
                                    httpMessages.push({
                                        message: 'Successfully Received',
                                        type: 'success'
                                    });
                                    break;
                                case 'POST':
                                    httpMessages.push({
                                        message: 'Successfully Posted',
                                        type: 'success'
                                    });
                                    break;
                                case 'PUT':
                                    httpMessages.push({
                                        message: 'Successfully Updated',
                                        type: 'success'
                                    });
                                    break;
                                case 'DELETE':
                                    httpMessages.push({
                                        message: 'Sucessfully Deleted',
                                        type: 'success'
                                    });
                                    break;
                            }
                            
                                
                            return successResponse;

                        },
                        function(failureResponse) {
                                
                            switch(failureResponse.status){
                                case 400: //show validation error messages then!
                                    httpMessages.push({
                                        message: 'Validation failed, try tweaking your submission.',
                                        type: 'failure'
                                    });
                                    break;
                                case 401: //for ionauth authentication, will need to redirect to login screen, or modal box
                                    httpMessages.push({
                                        message: 'Unauthorised request, try logging in.',
                                        type: 'failure'
                                    });
                                    break;
                                case 403: //returned by server for resources the user should not be able to access directly
                                    httpMessages.push({
                                        message: 'You can\'t access this.',
                                        type: 'failure'
                                    });
                                    break;
                                case 404:
                                    httpMessages.push({
                                        message: '404, sorry could not find what you were looking for.',
                                        type: 'failure'
                                    });
                                    break;
                                case 405:
                                    httpMessages.push({
                                        message: 'The requested method was incompatible with the requested resource.',
                                        type: 'failure'
                                    });
                                    break;
                                case 500:
                                    httpMessages.push({
                                        message: 'There was a server error, try again later, or contact the owners.',
                                        type: 'failure'
                                    });
                                    break;
                                default:
                                    httpMessages.push({
                                        message: failureResponse.status + ' General error processing the request',
                                        type: 'failure'
                                    });
                            }
                                
                            return $q.reject(failureResponse);
                                
                        }
                    );
                        
                };
                   
            }]);
                
        }
    ]);
";i:1;s:10:"javascript";i:2;s:17:"Error.Response.js";}i:2;i:63249;}i:1068;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:68857;}i:1069;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:7:"Routing";i:1;i:3;i:2;i:68857;}i:2;i:68857;}i:1070;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:68857;}i:1071;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:68857;}i:1072;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:144:"One of the core features of single page applications is client side routing. This means the client side javascript handles the page loading and ";}i:2;i:68876;}i:1073;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"URL";}i:2;i:69020;}i:1074;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:100:" changes. Originally this was limited due to the lack of history management provided by browsers in ";}i:2;i:69023;}i:1075;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:4:"AJAX";}i:2;i:69123;}i:1076;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:44:" applications, however with HTML5's history ";}i:2;i:69127;}i:1077;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"API";}i:2;i:69171;}i:1078;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:196:", client side javascript can tap into the history of browsers, and manage the page state through the URLs itself. Therefore the URLs could change live based on the state of the page. This allowed ";}i:2;i:69174;}i:1079;a:3:{i:0;s:13:"interwikilink";i:1;a:4:{i:0;s:49:"wp>Deep linking#Deep_linking_and_web_technologies";i:1;s:12:"deep linking";i:2;s:2:"wp";i:3;s:46:"Deep linking#Deep_linking_and_web_technologies";}i:2;i:69370;}i:1080;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:71:" and enhanced user experience as people could copy and share states of ";}i:2;i:69436;}i:1081;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:4:"AJAX";}i:2;i:69507;}i:1082;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:371:" enhanced applications. AngularJS provides this powerful functionality as part of the framework. However there are still problems to resolve on the server side either in security, and in routing requests so they could be handled by the client. Furthermore SEO was still an issue as search engine robots could not run javascript, this will be investigated at a later time.";}i:2;i:69511;}i:1083;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:69882;}i:1084;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:69884;}i:1085;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:8:"Base Tag";i:1;i:4;i:2;i:69884;}i:2;i:69884;}i:1086;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:4;}i:2;i:69884;}i:1087;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:69884;}i:1088;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:32:"The first thing to setup is the ";}i:2;i:69902;}i:1089;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:4:"HTML";}i:2;i:69934;}i:1090;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:" ";}i:2;i:69938;}i:1091;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:69939;}i:1092;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:8:"<base />";}i:2;i:69941;}i:1093;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:69949;}i:1094;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:32:" tag which provides a reference ";}i:2;i:69951;}i:1095;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"URL";}i:2;i:69983;}i:1096;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:176:" for all the relative links in your web application. This simplifies the job of maintaining relative URLs for AngularJS. If you did not have this base tag pointing to the root ";}i:2;i:69986;}i:1097;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"URL";}i:2;i:70162;}i:1098;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:57:" of your web application, then any relative URLs in your ";}i:2;i:70165;}i:1099;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:4:"AJAX";}i:2;i:70222;}i:1100;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:61:" requests inside javascript would be relative to the current ";}i:2;i:70226;}i:1101;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"URL";}i:2;i:70287;}i:1102;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:50:" state of the user. Imagine if I needed to access ";}i:2;i:70290;}i:1103;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:70340;}i:1104;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:8:"api/blog";}i:2;i:70342;}i:1105;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:70350;}i:1106;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:38:" in an XHR request, if the end user's ";}i:2;i:70352;}i:1107;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"URL";}i:2;i:70390;}i:1108;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:14:" state was at ";}i:2;i:70393;}i:1109;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:70407;}i:1110;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:35:"http://example.com/some/random/page";i:1;N;}i:2;i:70409;}i:1111;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:70444;}i:1112;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:19:", then the resolve ";}i:2;i:70446;}i:1113;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"URL";}i:2;i:70465;}i:1114;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:10:" would be ";}i:2;i:70468;}i:1115;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:70478;}i:1116;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:44:"http://example.com/some/random/page/api/blog";i:1;N;}i:2;i:70480;}i:1117;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:70524;}i:1118;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:32:". It's quite unlikely that your ";}i:2;i:70526;}i:1119;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"API";}i:2;i:70558;}i:1120;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:36:" would be accessible in that manner.";}i:2;i:70561;}i:1121;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:70597;}i:1122;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:70597;}i:1123;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:62:"To start using the base tag, you need to place inside of your ";}i:2;i:70599;}i:1124;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:70661;}i:1125;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:13:"<head></head>";}i:2;i:70663;}i:1126;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:70676;}i:1127;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:22:" tags, and inside the ";}i:2;i:70678;}i:1128;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:70700;}i:1129;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:4:"href";}i:2;i:70702;}i:1130;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:70706;}i:1131;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:34:" attribute, you need to place the ";}i:2;i:70708;}i:1132;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"URL";}i:2;i:70742;}i:1133;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:59:" to your web application. In the case of Codeigniter, both ";}i:2;i:70745;}i:1134;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:70804;}i:1135;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:10:"base_url()";}i:2;i:70806;}i:1136;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:70816;}i:1137;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:5:" and ";}i:2;i:70818;}i:1138;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:70823;}i:1139;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:10:"site_url()";}i:2;i:70825;}i:1140;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:70835;}i:1141;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:24:" functions will suffice.";}i:2;i:70837;}i:1142;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:70861;}i:1143;a:3:{i:0;s:4:"code";i:1;a:3:{i:0;s:54:"
<head>
    <base href="<?= base_url() ?>" />
</head>
";i:1;s:11:"html4strict";i:2;N;}i:2;i:70868;}i:1144;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:70868;}i:1145;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:168:"Now if I needed to link relatively, I can simply name the link without any preceding slashes. If I wanted to go to the home page, I would simply have nothing inside my ";}i:2;i:70937;}i:1146;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:71105;}i:1147;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:4:"href";}i:2;i:71107;}i:1148;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:71111;}i:1149;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:60:" attribute. Absolute links still work, just write them from ";}i:2;i:71113;}i:1150;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:71173;}i:1151;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:5:"http:";}i:2;i:71175;}i:1152;a:3:{i:0;s:11:"unformatted";i:1;a:1:{i:0;s:1:"/";}i:2;i:71182;}i:1153;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:"/";}i:2;i:71185;}i:1154;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:71186;}i:1155;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:62:" onwards. Note that the base tag does not affect links inside ";}i:2;i:71188;}i:1156;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"CSS";}i:2;i:71250;}i:1157;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:37:". It simply affects links inside the ";}i:2;i:71253;}i:1158;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:4:"HTML";}i:2;i:71290;}i:1159;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:16:" and javascript.";}i:2;i:71294;}i:1160;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:71310;}i:1161;a:3:{i:0;s:4:"code";i:1;a:3:{i:0;s:396:"
<ul class="nav">
    <li><a href="">home</a></li>
    <li><a href="courses">courses</a></li>
    <li><a href="partners">partners</a></li>
    <li><a href="http://codeforaustralia.com.au">code for australia</a></li>
    <li><a href="http://phpbounce.aws.af.cm/">php bounce</a></li>
    <li><a href="http://polycademy.eventbrite.com.au/">events</a></li>
    <li><a href="blog">blog</a></li>
</ul>
";i:1;s:11:"html4strict";i:2;N;}i:2;i:71317;}i:1162;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:71317;}i:1163;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:233:"One key problem to keep track of is the hash (#) links. These don't play nicely with the base tag. If you have a hash link, on the page, they will always go to the base url. You can solve this by always prefixing it with the current ";}i:2;i:71728;}i:1164;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"URL";}i:2;i:71961;}i:1165;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:4:" or ";}i:2;i:71964;}i:1166;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"URL";}i:2;i:71968;}i:1167;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:32:" segment by using Codeigniter's ";}i:2;i:71971;}i:1168;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"URL";}i:2;i:72003;}i:1169;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:59:" functions or javascript to interpret the current location.";}i:2;i:72006;}i:1170;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:72065;}i:1171;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:72067;}i:1172;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:21:"Client Routing Config";i:1;i:4;i:2;i:72067;}i:2;i:72067;}i:1173;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:4;}i:2;i:72067;}i:1174;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:72067;}i:1175;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:101:"When single page applications and client side routing first started getting popular, developers used ";}i:2;i:72098;}i:1176;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:88:"http://www.webmonkey.com/2011/02/gawker-learns-the-hard-way-why-hash-bang-urls-are-evil/";i:1;s:58:"hash bang URLs in order allow javascript to change the URL";}i:2;i:72199;}i:1177;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:105:" without reloading the page. However this is no longer required with the the introduction of the history ";}i:2;i:72350;}i:1178;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"API";}i:2;i:72455;}i:1179;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:169:". We can now have URLs that change with javascript and look completely the same as normal URLs. Assuming we have the base tag setup, here is what we would do inside our ";}i:2;i:72458;}i:1180;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:72627;}i:1181;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:6:"app.js";}i:2;i:72629;}i:1182;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:72635;}i:1183;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:36:" front controller to get HTML5 URLs.";}i:2;i:72637;}i:1184;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:72673;}i:1185;a:3:{i:0;s:4:"code";i:1;a:3:{i:0;s:1621:"
/* ==========================================================================
   ROUTER
   ========================================================================== */

//Define all routes here and which page level controller should handle them
app.config(
    [
        '$routeProvider', //used for routing
        '$locationProvider', //used to manipulate the URL
        function($routeProvider, $locationProvider) {
            
            //HTML5 Mode URLs
            //there are two commands here, one to make html5mode true, and the second to set the hashPrefix for the hashbang fallback, so it will be #! for the urls in legacy browsers
            $locationProvider.html5Mode(true).hashPrefix('!');
            
            //Routing
            //this is chained up, and it's cascading, so when it hits '/' it goes to home, if nothing, go back to home
            $routeProvider
                .when(
                    '/',
                    {
                        templateUrl: 'home_index.html', //the templateUrl can be loaded with the controller, this only works when you are using the "ng-view" directive in your HTML
                        controller: 'HomeIndexCtrl'
                    }
                )
                .when(
                    '/blog',
                    {
                        templateUrl: 'blog_index.html',
                        controller: 'BlogIndexCtrl'
                    }
                )
                .otherwise(
                    {
                        redirectTo: '/'
                    }
                );
            
        }
    ]
);
";i:1;s:10:"javascript";i:2;N;}i:2;i:72680;}i:1186;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:72680;}i:1187;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:60:"However remember that older browsers don't have the history ";}i:2;i:74322;}i:1188;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"API";}i:2;i:74382;}i:1189;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:112:", AngularJS intelligently rewrites your links with hash bangs so you don't have to worry about it. Refer to the ";}i:2;i:74385;}i:1190;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:60:"http://docs.angularjs.org/guide/dev_guide.services.$location";i:1;s:34:"documentation on $location service";}i:2;i:74497;}i:1191;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:22:" for more information.";}i:2;i:74596;}i:1192;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:74618;}i:1193;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:74618;}i:1194;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:41:"The routing only works when you have the ";}i:2;i:74620;}i:1195;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:74661;}i:1196;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:7:"ng-view";}i:2;i:74663;}i:1197;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:74670;}i:1198;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:25:" directive setup in your ";}i:2;i:74672;}i:1199;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:4:"HTML";}i:2;i:74697;}i:1200;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:158:". This would usually be placed between the header and footer templates. In the case of Codeigniter, and if you are using Polycademy's CiTemplating class, the ";}i:2;i:74701;}i:1201;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:74859;}i:1202;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:7:"ng-view";}i:2;i:74861;}i:1203;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:74868;}i:1204;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:70:" directive would be placed in your index view of your home controller.";}i:2;i:74870;}i:1205;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:74940;}i:1206;a:3:{i:0;s:4:"file";i:1;a:3:{i:0;s:94:"
<div class="main">
    <div class="container">
        <div ng-view></div>
    </div>
</div>
";i:1;s:3:"php";i:2;s:14:"index_view.php";}i:2;i:74947;}i:1207;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:74947;}i:1208;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:51:"The client side template that you specified in the ";}i:2;i:75070;}i:1209;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:75121;}i:1210;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:11:"templateUrl";}i:2;i:75123;}i:1211;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:75134;}i:1212;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:48:" would be injected as a child to the tags where ";}i:2;i:75136;}i:1213;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:75184;}i:1214;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:7:"ng-view";}i:2;i:75186;}i:1215;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:75193;}i:1216;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:11:" is placed.";}i:2;i:75195;}i:1217;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:75206;}i:1218;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:75208;}i:1219;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:19:"Server Side Routing";i:1;i:4;i:2;i:75208;}i:2;i:75208;}i:1220;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:4;}i:2;i:75208;}i:1221;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:75208;}i:1222;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:68:"So far we've managed to make AngularJS responsive to links and make ";}i:2;i:75237;}i:1223;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"URL";}i:2;i:75305;}i:1224;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:115:" changes automatically without reloading the page. However a problem arises, if someone were to save their current ";}i:2;i:75308;}i:1225;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"URL";}i:2;i:75423;}i:1226;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:93:" at a some point outside of the home page, close the browser, reopen it and navigate to that ";}i:2;i:75426;}i:1227;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"URL";}i:2;i:75519;}i:1228;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:294:" directly from their browser, where would that browser go? If you're handling routing on the client side, and that javascript is only loaded on the home page, then the browser would go no where but hit a 404. What we need to do is make the server point to home page whenever someone requests a ";}i:2;i:75522;}i:1229;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"URL";}i:2;i:75816;}i:1230;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:14:". Those extra ";}i:2;i:75819;}i:1231;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"URL";}i:2;i:75833;}i:1232;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:226:" segments would remain when the javascript gets loaded and AngularJS would interpret it and then navigate to the correct page state. Of course we don't want to rout requests to the home page, or else we couldn't have a server ";}i:2;i:75836;}i:1233;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"API";}i:2;i:76062;}i:1234;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:53:", we need to keep some routes open for direct access.";}i:2;i:76065;}i:1235;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:76118;}i:1236;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:76118;}i:1237;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:31:"To implement this on an Apache ";}i:2;i:76120;}i:1238;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"PHP";}i:2;i:76151;}i:1239;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:105:" server, we need an .htaccess file that makes all requests that don't look for files or directories to a ";}i:2;i:76154;}i:1240;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"PHP";}i:2;i:76259;}i:1241;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:207:" front controller. We already have done this during the server side programming. Next we need to configure our server routing to make all requests go to the home controller except for requests which hit the ";}i:2;i:76262;}i:1242;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"API";}i:2;i:76469;}i:1243;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:78:". This can be easily achieved with the Pigeon routing library. Therefore your ";}i:2;i:76472;}i:1244;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:76550;}i:1245;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:17:"config/routes.php";}i:2;i:76552;}i:1246;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:76569;}i:1247;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:35:" file will start to look like this:";}i:2;i:76571;}i:1248;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:76606;}i:1249;a:3:{i:0;s:4:"code";i:1;a:3:{i:0;s:806:"
Pigeon::map(function($r){   

    //Route all API requests to the correct controller/method
    //this acts as the gate keeper prefix, there is no required change in our controllers
    $r->route('api', false, function($r){
    
        //setup your RESTful resources
        $r->resources('courses');
        $r->resources('applications');
        
        //remove the migrations in production
        $r->get('migrate', 'migrate/index');
        $r->get('migrate/revert', 'migrate/revert');
        
    });
    
    //everything else can go to the home controller and index method (while preserving all URL segments, that's what the parantheses and hash does)
    $r->route('(.*)', 'home#index');
    
});

$route = Pigeon::draw();

$route['default_controller'] = 'home';
$route['404_override'] = '';
";i:1;s:3:"php";i:2;N;}i:2;i:76613;}i:1250;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:76613;}i:1251;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:46:"Now on the client side, when someone accesses:";}i:2;i:77433;}i:1252;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:77479;}i:1253;a:3:{i:0;s:4:"code";i:1;a:3:{i:0;s:305:"
() means it's interpreted by the server
[] means it's interpreted by the client
http://example.com/ => (Home/Index) & [/]
http://example.com/some/other/page => (Home/Index) & [/Some/Other/Page]
http://example.com/api/courses => (Courses/Index)
http://example.com/api/applications => (Applications/Index)
";i:1;N;i:2;N;}i:2;i:77486;}i:1254;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:77486;}i:1255;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:88:"This allows your AngularJS to handle UI page states, and leaves your server open up its ";}i:2;i:77801;}i:1256;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"API";}i:2;i:77889;}i:1257;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:15:" to any client.";}i:2;i:77892;}i:1258;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:77907;}i:1259;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:77909;}i:1260;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:12:"CSRF Problem";i:1;i:4;i:2;i:77909;}i:2;i:77909;}i:1261;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:4;}i:2;i:77909;}i:1262;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:77909;}i:1263;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:146:"Codeigniter natively only inspects POST requests for its CSRF code. It also expects that the CSRF code would be inside a form encoded data called ";}i:2;i:77931;}i:1264;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:78077;}i:1265;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:33:"application/x-www-form-urlencoded";}i:2;i:78079;}i:1266;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:78112;}i:1267;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:459:". There are several problems with this in the single page application world. Firstly we use POST, PUT and DELETE for RESTful resources. CSRF should be checked on all three of those requests except GET. Secondly AngularJS and many other client side frameworks send and receive data based on JSON. If we are sending forms and data from the client to server and back using the JSON format, the CSRF checked in Codeigniter would fail because the JSON mimetype of ";}i:2;i:78114;}i:1268;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:78573;}i:1269;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:16:"application/json";}i:2;i:78575;}i:1270;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:78591;}i:1271;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:20:" is not the same as ";}i:2;i:78593;}i:1272;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:78613;}i:1273;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:33:"application/x-www-form-urlencoded";}i:2;i:78615;}i:1274;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:78648;}i:1275;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:55:", Codeigniter would not be able to find the CSRF token.";}i:2;i:78650;}i:1276;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:78705;}i:1277;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:78705;}i:1278;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:114:"To solve this problem we have to change the way CSRF is interpreted on the server to include POST, PUT and DELETE ";}i:2;i:78707;}i:1279;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:4:"HTTP";}i:2;i:78821;}i:1280;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:119:" methods and also to check for the CSRF code outside of a form encoded hidden input. AngularJS recommends us to use an ";}i:2;i:78825;}i:1281;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:4:"HTTP";}i:2;i:78944;}i:1282;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:23:" header message called ";}i:2;i:78948;}i:1283;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:78971;}i:1284;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:12:"X-XSRF-TOKEN";}i:2;i:78973;}i:1285;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:78985;}i:1286;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:233:" instead. This should be included on every requests to the server, and its value will be checked against the CSRF token in the cookie. Let's first change the CSRF checker on Codeigniter, we can extend the native library by writing a ";}i:2;i:78987;}i:1287;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:79220;}i:1288;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:15:"MY_Security.php";}i:2;i:79222;}i:1289;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:79237;}i:1290;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:18:" class inside the ";}i:2;i:79239;}i:1291;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:79257;}i:1292;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:16:"application/core";}i:2;i:79259;}i:1293;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:79275;}i:1294;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:90:". This class would be provided to you on Polycademy's Angular Codeigniter seed repository.";}i:2;i:79277;}i:1295;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:79367;}i:1296;a:3:{i:0;s:4:"file";i:1;a:3:{i:0;s:2070:"
<?php

class MY_Security extends CI_Security{

    //overriding the normal csrf_verify, this gets automatically called in the Input library's constructor
    //verifying on POST and PUT and DELETE
    public function csrf_verify(){
        
        //If it is GET, ignore the rest Watch out for CORS support!, You may need to let OPTIONS go through to!
        if(strtoupper($_SERVER['REQUEST_METHOD']) == 'GET'){
            return $this->csrf_set_cookie();
        }
        
        // Check if URI has been whitelisted from CSRF checks
        if($exclude_uris = config_item('csrf_exclude_uris')){
            $uri = load_class('URI', 'core');
            if(in_array($uri->uri_string(), $exclude_uris)){
                return $this;
            }
        }
        
        //COOKIE needs to exist and at least either POST or SERVER needs to exist and at least one of the POST or SERVER must match the COOKIE
        if(
            (
                !isset($_COOKIE[$this->_csrf_cookie_name]) //if cookie doesnt exist
                OR
                (
                    !isset($_POST[$this->_csrf_token_name]) //or if both POST and SERVER doesnt exist
                    AND
                    !isset($_SERVER['HTTP_X_XSRF_TOKEN'])
                )
            )
            AND
            (
                ($_POST[$this->_csrf_token_name] !== $_COOKIE[$this->_csrf_cookie_name]) //and if both did not match
                AND
                ($_SERVER['HTTP_X_XSRF_TOKEN'] !== $_COOKIE[$this->_csrf_cookie_name])
            )
        ){
        
            $this->csrf_show_error();
        
        }
        
        // We kill this since we're done and we don't want to polute the _POST array
        unset($_POST[$this->_csrf_token_name]);

        if(config_item('csrf_regenerate')){
            unset($_COOKIE[$this->_csrf_cookie_name]);
            $this->_csrf_hash = '';
        }

        $this->_csrf_set_hash();
        $this->csrf_set_cookie();

        log_message('debug', 'CSRF token verified');
        return $this;
    
    }

}
";i:1;s:3:"php";i:2;s:15:"MY_Security.php";}i:2;i:79374;}i:1297;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:79374;}i:1298;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:12:"Next in our ";}i:2;i:81474;}i:1299;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:81486;}i:1300;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:6:"app.js";}i:2;i:81488;}i:1301;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:81494;}i:1302;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:249:" front controller, we have to take the CSRF token that comes from the server in the form of a cookie, create an X-XSRF-TOKEN header message with the value of the CSRF token. We can try and find it by rummaging through the cookie data, or we can get ";}i:2;i:81496;}i:1303;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"PHP";}i:2;i:81745;}i:1304;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:270:" to tell javascript what the cookie is called and hence how to find the CSRF token. This can be achieved by placing an embedded script inside our footer partial, that creates a global object, we can run Codeigniter commands that gives the CSRF cookie name to javascript.";}i:2;i:81748;}i:1305;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:82018;}i:1306;a:3:{i:0;s:4:"code";i:1;a:3:{i:0;s:245:"
<!-- Pass in PHP variables to Javascript -->
<script>
    var serverVars = {
        baseUrl: '<?= base_url() ?>',
        csrfCookieName: '<?= $this->config->item('cookie_prefix') . $this->config->item('csrf_cookie_name') ?>'
    };
</script>
";i:1;s:11:"html4strict";i:2;N;}i:2;i:82025;}i:1307;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:82025;}i:1308;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:159:"In our javascript, we need to watch any change in the cookie's CSRF value. This is because the CSRF value may be regenerated on each request. That is what the ";}i:2;i:82285;}i:1309;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:82444;}i:1310;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:6:"$watch";}i:2;i:82446;}i:1311;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:82452;}i:1312;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:18:" service gives us.";}i:2;i:82454;}i:1313;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:82472;}i:1314;a:3:{i:0;s:4:"code";i:1;a:3:{i:0;s:767:"
/* ==========================================================================
   GLOBAL FEATURES
   ========================================================================== */

app.run([
    '$rootScope',
    '$cookies',
    '$http',
    function($rootScope, $cookies, $http){
    
        //XSRF INTEGRATION
        
        //this $watch has two callback parameters, one to watch, second to setup the X-XSRF-TOKEN
        $rootScope.$watch(
            function(){
                return $cookies[serverVars.csrfCookieName]; //notice the usage of csrfCookieName from serverVars
            },
            function(){
                $http.defaults.headers.common['X-XSRF-TOKEN'] = $cookies[serverVars.csrfCookieName];
            }
        );
        
    }
]);
";i:1;s:10:"javascript";i:2;N;}i:2;i:82479;}i:1315;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:83266;}i:1316;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:7:"Scoping";i:1;i:3;i:2;i:83266;}i:2;i:83266;}i:1317;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:83266;}i:1318;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:83266;}i:1319;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:133:"The scope is responsible for detecting changes to the model section and provides the execution context for expressions inside of the ";}i:2;i:83285;}i:1320;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:4:"HTML";}i:2;i:83418;}i:1321;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:125:". It's part of AngularJS's bidirectional binding. The scopes are nested in a hierarchical structure which closely follow the ";}i:2;i:83422;}i:1322;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"DOM";}i:2;i:83547;}i:1323;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:46:" structure. When you setup a controller using ";}i:2;i:83550;}i:1324;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:83596;}i:1325;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:13:"ng-controller";}i:2;i:83598;}i:1326;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:83611;}i:1327;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:189:", that setups a scope. Certain directives also create scopes, however there are nuances to the way the scope operates and inherits from the parent scope. Furthermore as soon as you declare ";}i:2;i:83613;}i:1328;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:83802;}i:1329;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:6:"ng-app";}i:2;i:83804;}i:1330;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:83810;}i:1331;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:42:" on a particular tag, AngularJS creates a ";}i:2;i:83812;}i:1332;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:83854;}i:1333;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:10:"$rootScope";}i:2;i:83856;}i:1334;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:83866;}i:1335;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:78:" from which all other scopes are inherit from. Here's an example, if you have ";}i:2;i:83868;}i:1336;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:4:"HTML";}i:2;i:83946;}i:1337;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:9:" like so:";}i:2;i:83950;}i:1338;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:83959;}i:1339;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:83959;}i:1340;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:51:"http://plnkr.co/edit/28R71g7ICtXan6Gp2XOW?p=preview";i:1;s:12:"Plunker Demo";}i:2;i:83961;}i:1341;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:84029;}i:1342;a:3:{i:0;s:4:"code";i:1;a:3:{i:0;s:202:"
<body>
    <div ng-controller="GreetCtrl">Hello {{name}}!</div>
    <div ng-controller="ListCtrl">
        <ol>
            <li ng-repeat="name in names">{{name}}</li>
        </ol>
    </div>
</body>
";i:1;s:11:"html4strict";i:2;N;}i:2;i:84036;}i:1343;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:84036;}i:1344;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:23:"And javascript like so:";}i:2;i:84253;}i:1345;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:84276;}i:1346;a:3:{i:0;s:4:"code";i:1;a:3:{i:0;s:142:"
function GreetCtrl($scope) {
    $scope.name = 'World';
}
     
function ListCtrl($scope) {
    $scope.names = ['Igor', 'Misko', 'Vojta'];
}
";i:1;s:10:"javascript";i:2;N;}i:2;i:84283;}i:1347;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:84283;}i:1348;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:114:"Then the scopes operate in this manner. Check the highlighted scopes. Each controller created a scope, and in the ";}i:2;i:84446;}i:1349;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:84560;}i:1350;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:9:"ng-repeat";}i:2;i:84562;}i:1351;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:84571;}i:1352;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:38:" directive, each line created a scope.";}i:2;i:84573;}i:1353;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:84611;}i:1354;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:84611;}i:1355;a:3:{i:0;s:13:"internalmedia";i:1;a:7:{i:0;s:47:":web_application_development:concepts-scope.png";i:1;s:0:"";i:2;s:6:"center";i:3;s:3:"500";i:4;N;i:5;s:5:"cache";i:6;s:7:"details";}i:2;i:84613;}i:1356;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:84671;}i:1357;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:84671;}i:1358;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:82:"Scopes are very powerful, they are not only used to establish contexts inside the ";}i:2;i:84673;}i:1359;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:4:"HTML";}i:2;i:84755;}i:1360;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:308:", but to watch mutations of data, broadcast and handle events, run functions outside of AngularJS context and allow child to parent communication. The usage of scopes will be demonstrated over the course of writing controllers and directives, however this section will point to some common misunderstandings:";}i:2;i:84759;}i:1361;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:85067;}i:1362;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:85067;}i:1363;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:74:"1. Confusion over how child scopes can changes values on the parent scope:";}i:2;i:85069;}i:1364;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:85143;}i:1365;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:85143;}i:1366;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:711:"Scopes are objects that can contain primitive properties or reference types such as objects and arrays. Scope inheritance is based on prototypical inheritance that is happening behind the scenes. Therefore it's important to understand how scope properties are created and accessed and modified. This often causes confusion because if you set a property on a scope, and you actually want to change a property on the parent (which is in the child scope's prototype), it may sometimes simply create that property on the child which shadows the property on the parent. The problem comes from a misunderstanding of how properties are accessed. The resource below will go into detail over how to resolve this problem:";}i:2;i:85145;}i:1367;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:85857;}i:1368;a:3:{i:0;s:10:"listu_open";i:1;a:0:{}i:2;i:85857;}i:1369;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:85857;}i:1370;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:85857;}i:1371;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:" ";}i:2;i:85861;}i:1372;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:86:"https://github.com/angular/angular.js/wiki/The-Nuances-of-Scope-Prototypal-Inheritance";i:1;s:45:"The Nuances of Scope Prototypical Inheritance";}i:2;i:85862;}i:1373;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:13:" - Here is a ";}i:2;i:85998;}i:1374;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:56:"http://beta.plnkr.co/edit/7H4ZZKhcfm2OLodz6FVS?p=preview";i:1;s:60:"Plunker Demo showing one of the nuances of scope inheritance";}i:2;i:86011;}i:1375;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:".";}i:2;i:86132;}i:1376;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:86133;}i:1377;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:86133;}i:1378;a:3:{i:0;s:11:"listu_close";i:1;a:0:{}i:2;i:86133;}i:1379;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:86133;}i:1380;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:161:"2. Confusion about why running a AngularJS function inside a callback of a third party function, or native javascript function doesn't update the scope bindings:";}i:2;i:86135;}i:1381;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:86296;}i:1382;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:86296;}i:1383;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:198:"Sometimes you need get AngularJS to update its scope properties or run some sort of function defined inside AngularJS, but it will be executed in the context of a native javascript function such as ";}i:2;i:86298;}i:1384;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:86496;}i:1385;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:10:"setTimeout";}i:2;i:86498;}i:1386;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:86508;}i:1387;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:248:" or in a third party library such as a jQuery event binding callback. If you just try to run the function, you may get binding loss, but also the scope bindings just may not activate. If you're meeting this problem you need to learn how to use the ";}i:2;i:86510;}i:1388;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:86758;}i:1389;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:13:"$scope.$apply";}i:2;i:86760;}i:1390;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:86773;}i:1391;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:49:" method. The resources below discuss this method:";}i:2;i:86775;}i:1392;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:86825;}i:1393;a:3:{i:0;s:10:"listu_open";i:1;a:0:{}i:2;i:86825;}i:1394;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:86825;}i:1395;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:86825;}i:1396;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:" ";}i:2;i:86829;}i:1397;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:78:"https://github.com/angular/angular.js/wiki/When-to-use-%24scope.%24apply%28%29";i:1;s:24:"When to use scope.$apply";}i:2;i:86830;}i:1398;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:86937;}i:1399;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:86937;}i:1400;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:86937;}i:1401;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:86937;}i:1402;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:" ";}i:2;i:86941;}i:1403;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:57:"http://jimhoskins.com/2012/12/17/angularjs-and-apply.html";i:1;s:36:"In depth explanation of scope.$apply";}i:2;i:86942;}i:1404;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:87040;}i:1405;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:87040;}i:1406;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:87040;}i:1407;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:87040;}i:1408;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:" ";}i:2;i:87044;}i:1409;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:79:"http://stackoverflow.com/questions/12304728/how-can-i-tell-angularjs-to-refresh";i:1;s:27:"Application of scope.$apply";}i:2;i:87045;}i:1410;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:87156;}i:1411;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:87156;}i:1412;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:87156;}i:1413;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:87156;}i:1414;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:" ";}i:2;i:87160;}i:1415;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:36:"http://jsfiddle.net/vojtajina/U7Bz9/";i:1;s:28:"jsFiddle for Infinite Scroll";}i:2;i:87161;}i:1416;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:46:" - this example shows an application of using ";}i:2;i:87230;}i:1417;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:87276;}i:1418;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:13:"$scope.$apply";}i:2;i:87278;}i:1419;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:87291;}i:1420;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:31:" inside a jQuery bind callback.";}i:2;i:87293;}i:1421;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:87324;}i:1422;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:87324;}i:1423;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:87324;}i:1424;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:87324;}i:1425;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:" ";}i:2;i:87328;}i:1426;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:30:"https://coderwall.com/p/ngisma";i:1;s:17:"Safe Apply Helper";}i:2;i:87329;}i:1427;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:3:" & ";}i:2;i:87381;}i:1428;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:116:"http://stackoverflow.com/questions/13639717/does-the-scope-and-phase-workaround-always-work-as-expected-in-angularjs";i:1;s:34:"Checking the digest phase in apply";}i:2;i:87384;}i:1429;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:87539;}i:1430;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:87539;}i:1431;a:3:{i:0;s:11:"listu_close";i:1;a:0:{}i:2;i:87539;}i:1432;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:87539;}i:1433;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:163:"Scopes have various other nuances and applications, but we'll get to there in the later sections. Here are some resources on scopes you need to understand as well.";}i:2;i:87541;}i:1434;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:87705;}i:1435;a:3:{i:0;s:10:"listu_open";i:1;a:0:{}i:2;i:87705;}i:1436;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:87705;}i:1437;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:87705;}i:1438;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:" ";}i:2;i:87709;}i:1439;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:61:"http://onehungrymind.com/notes-on-angularjs-scope-life-cycle/";i:1;s:16:"Scope Life Cycle";}i:2;i:87710;}i:1440;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:87792;}i:1441;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:87792;}i:1442;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:87792;}i:1443;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:87792;}i:1444;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:" ";}i:2;i:87796;}i:1445;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:37:"http://docs.angularjs.org/guide/scope";i:1;s:32:"Official documentation on scopes";}i:2;i:87797;}i:1446;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:87871;}i:1447;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:87871;}i:1448;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:87871;}i:1449;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:87871;}i:1450;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:" ";}i:2;i:87875;}i:1451;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:42:"http://stackoverflow.com/a/14177235/582917";i:1;s:34:"ng-repeat and using it with scopes";}i:2;i:87876;}i:1452;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:87957;}i:1453;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:87957;}i:1454;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:87957;}i:1455;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:87957;}i:1456;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:" ";}i:2;i:87961;}i:1457;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:42:"http://stackoverflow.com/a/13457410/582917";i:1;s:21:"Directives and scopes";}i:2;i:87962;}i:1458;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:88030;}i:1459;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:88030;}i:1460;a:3:{i:0;s:11:"listu_close";i:1;a:0:{}i:2;i:88030;}i:1461;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:88031;}i:1462;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:11:"Controllers";i:1;i:3;i:2;i:88031;}i:2;i:88031;}i:1463;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:88031;}i:1464;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:88031;}i:1465;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:3:"In ";}i:2;i:88054;}i:1466;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:70:"http://docs.angularjs.org/guide/dev_guide.mvc.understanding_controller";i:1;s:21:"AngularJS controllers";}i:2;i:88057;}i:1467;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:571:" are used to designate sections of your user interface and manage the scope object in that particular section of the interface. In doing so, the controllers also access shared services in order to acquire data from the external third parties or your own RESTful resources. Therefore controllers can represent whole pages, sections of a page, or subsections of a page. Any time you need some sort of dynamic functionality on the page and it can be semantically separate from the other sections of the page, you need a controller. Controller hence determine the page state.";}i:2;i:88153;}i:1468;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:88724;}i:1469;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:88724;}i:1470;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:50:"Assuming the seed application layout, inside your ";}i:2;i:88726;}i:1471;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:88776;}i:1472;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:14:"js/controllers";}i:2;i:88778;}i:1473;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:88792;}i:1474;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:342:" directory, each file inside there would be a module. Each module would contain at least one controller. That controller can be considered the page level controller. Any controllers that would be nested inside a particular page would be appended to the module. Let's start with an example. Assuming we have a page we want to represent called ";}i:2;i:88794;}i:1475;a:3:{i:0;s:18:"doublequoteopening";i:1;a:0:{}i:2;i:89136;}i:1476;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:4:"Blog";}i:2;i:89137;}i:1477;a:3:{i:0;s:18:"doublequoteclosing";i:1;a:0:{}i:2;i:89141;}i:1478;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:94:" which is a page level module/controller and we want that controller to be accessible from an ";}i:2;i:89142;}i:1479;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"URL";}i:2;i:89236;}i:1480;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:15:" state such as ";}i:2;i:89239;}i:1481;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:89254;}i:1482;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:16:"example.com/blog";}i:2;i:89256;}i:1483;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:89272;}i:1484;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:39:". Then we need to create a file called ";}i:2;i:89274;}i:1485;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:89313;}i:1486;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:19:"Blog.Controllers.js";}i:2;i:89315;}i:1487;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:89334;}i:1488;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:34:" inside our controllers directory.";}i:2;i:89336;}i:1489;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:89370;}i:1490;a:3:{i:0;s:4:"file";i:1;a:3:{i:0;s:1071:"
'use strict';

//whenever there's a [] in the 2nd parameter, it means the module is created, here there's no [], so it's attaching itself to the Controllers module
angular.module('Controllers')
    .controller('BlogIndexCtrl', [ //<- BlogIndexCtrl is actual name of the controller
        '$scope',
        function($scope){
            //the $scope here would be available to all elements that are the children of BlogIndexCtrl
            $scope.data = 'Hello World!';
        }
    ])
    .controller('BlogMobileCtrl', [ //this part is optional, imagine a different kind of Blog State that may be used conditionally from the routes
        '$scope',
        function($scope){
            $scope.data = 'I am a different controller!';
        }
    ])
    .controller('BlogSubCtrl', [ //<- this also demonstrates a controller that is part of the Blog.Controllers.Mobile, so this could be a sub controller that is nested inside 'BlogMobileCtrl'
        '$scope',
        function($scope){
            $scope.data = 'I am a different controller!';
        }
    ]);    
";i:1;s:10:"javascript";i:2;s:19:"Blog.Controllers.js";}i:2;i:89377;}i:1491;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:89377;}i:1492;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:40:"If we want one of the controllers to be ";}i:2;i:90489;}i:1493;a:3:{i:0;s:18:"doublequoteopening";i:1;a:0:{}i:2;i:90529;}i:1494;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:8:"routable";}i:2;i:90530;}i:1495;a:3:{i:0;s:18:"doublequoteclosing";i:1;a:0:{}i:2;i:90538;}i:1496;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:22:" (accessible from the ";}i:2;i:90539;}i:1497;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"URL";}i:2;i:90561;}i:1498;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:194:" state), then we need add the controller's name to one of our routes. Of course make sure to add the page level module as a dependency to the controllers modules in the bootstrapping process in ";}i:2;i:90564;}i:1499;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:90758;}i:1500;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:6:"app.js";}i:2;i:90760;}i:1501;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:90766;}i:1502;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:".";}i:2;i:90768;}i:1503;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:90769;}i:1504;a:3:{i:0;s:4:"code";i:1;a:3:{i:0;s:304:"
$routeProvider
    .when(
        '/blog',
        {
            templateUrl: 'blog_index.html', //<- don't worry about this yet, this comes from an embedded template
            controller: 'BlogIndexCtrl' //<- here is our controller that is being routed to when the URL is at "/blog"
        }
    );
";i:1;s:10:"javascript";i:2;N;}i:2;i:90776;}i:1505;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:90776;}i:1506;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:7:"In our ";}i:2;i:91101;}i:1507;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:4:"HTML";}i:2;i:91108;}i:1508;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:35:", we can setup a template with the ";}i:2;i:91112;}i:1509;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:91147;}i:1510;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:13:"BlogIndexCtrl";}i:2;i:91149;}i:1511;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:91162;}i:1512;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:132:" managing it. The below file is a partial template that gets embedded in footer partial. Find out about it in the templates section.";}i:2;i:91164;}i:1513;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:91296;}i:1514;a:3:{i:0;s:4:"code";i:1;a:3:{i:0;s:113:"
<script type="text/ng-template" id="blog_index.html">
    <p>Hi the scope's data is here {{data}}</p>
</script>
";i:1;s:11:"html4strict";i:2;N;}i:2;i:91303;}i:1515;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:91303;}i:1516;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:38:"Notice that we do not need to use the ";}i:2;i:91431;}i:1517;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:91469;}i:1518;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:13:"ng-controller";}i:2;i:91471;}i:1519;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:91484;}i:1520;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:127:" directive to bind the controller to the template. This is because it is implicitly done inside the routing, when we said that ";}i:2;i:91486;}i:1521;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:91613;}i:1522;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:13:"BlogIndexCtrl";}i:2;i:91615;}i:1523;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:91628;}i:1524;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:15:" is matched to ";}i:2;i:91630;}i:1525;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:91645;}i:1526;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:15:"blog_index.html";}i:2;i:91647;}i:1527;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:91662;}i:1528;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:91:". However if we wanted to make a certain controller a sub controller that is nested inside ";}i:2;i:91664;}i:1529;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:91755;}i:1530;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:13:"BlogIndexCtrl";}i:2;i:91757;}i:1531;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:91770;}i:1532;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:63:" then we would have to explicitly write that directive like so:";}i:2;i:91772;}i:1533;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:91835;}i:1534;a:3:{i:0;s:4:"code";i:1;a:3:{i:0;s:324:"
<script type="text/ng-template" id="nested_index.html">
    <!-- This is assuming you have a controller that has these sub controllers! -->
    <div>NESTED INDEX CTRL: {{data}}</div>
    <div ng-controller="NestedSubCtrl">SUB CTRL: {{data}}</div>
    <div ng-controller="NestedSub2Ctrl">SUB CTRL2: {{data}}</div>
</script>
";i:1;s:11:"html4strict";i:2;N;}i:2;i:91842;}i:1535;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:91842;}i:1536;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:60:"Finally remember that not all controller modules inside the ";}i:2;i:92181;}i:1537;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:92241;}i:1538;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:14:"js/controllers";}i:2;i:92243;}i:1539;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:92257;}i:1540;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:210:" directory need to be a particular page. They can just be sections of a page. For example, the headers and footers of a page may be shared across many pages. Then you can make them top level modules inside the ";}i:2;i:92259;}i:1541;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:92469;}i:1542;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:14:"js/controllers";}i:2;i:92471;}i:1543;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:92485;}i:1544;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:11:" directory.";}i:2;i:92487;}i:1545;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:92498;}i:1546;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:92498;}i:1547;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:134:"All of the above may be a bit confusing, since there's a lot of interlinking parts that need to come together to work. Check out this ";}i:2;i:92500;}i:1548;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:56:"http://beta.plnkr.co/edit/XZs1zNLpZubPBjnULJ3n?p=preview";i:1;s:63:"Plunker demo with a working configuration of nested controllers";}i:2;i:92634;}i:1549;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:142:". It won't match your file/directory structure because everything needs to be in files. However you can see what the end result may look like.";}i:2;i:92758;}i:1550;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:92900;}i:1551;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:92902;}i:1552;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:33:"Communication between Controllers";i:1;i:4;i:2;i:92902;}i:2;i:92902;}i:1553;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:4;}i:2;i:92902;}i:1554;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:92902;}i:1555;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:28:"You will need to eventually ";}i:2;i:92945;}i:1556;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:113:"http://stackoverflow.com/questions/11252780/whats-the-correct-way-to-communicate-between-controllers-in-angularjs";i:1;s:130:"communicate between different controllers depending on an external event or some third party service or your own RESTful resources";}i:2;i:92973;}i:1557;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:344:". There are two ways to communicate between controllers. The recommended way is through services. Services are meant to be shared across controllers, this philosophy is similar to the operation of models in the traditional server side MVC, where controllers call upon models to do work. You should look at the services section to find out more.";}i:2;i:93221;}i:1558;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:93565;}i:1559;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:93565;}i:1560;a:3:{i:0;s:11:"strong_open";i:1;a:0:{}i:2;i:93567;}i:1561;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:21:"Shared Service Method";}i:2;i:93569;}i:1562;a:3:{i:0;s:12:"strong_close";i:1;a:0:{}i:2;i:93590;}i:1563;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:93592;}i:1564;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:93592;}i:1565;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:61:"This example shows how to use shared services along with the ";}i:2;i:93594;}i:1566;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:93655;}i:1567;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:6:"$watch";}i:2;i:93657;}i:1568;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:93663;}i:1569;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:54:" function to allow messaging between controllers. The ";}i:2;i:93665;}i:1570;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:93719;}i:1571;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:6:"$watch";}i:2;i:93721;}i:1572;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:93727;}i:1573;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:137:" service observes changes in a model variable and then runs a function when it changes. This is probably the most common method, however ";}i:2;i:93729;}i:1574;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:80:"http://eburley.github.com/2013/01/31/angularjs-watch-pub-sub-best-practices.html";i:1;s:84:"sometimes it won't solve your problem when you have more complicated messaging needs";}i:2;i:93866;}i:1575;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:".";}i:2;i:94035;}i:1576;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:94037;}i:1577;a:3:{i:0;s:10:"listu_open";i:1;a:0:{}i:2;i:94037;}i:1578;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:94037;}i:1579;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:94037;}i:1580;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:" ";}i:2;i:94041;}i:1581;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:56:"http://beta.plnkr.co/edit/X8txKfVBotWTDfD9au8x?p=preview";i:1;s:40:"Plunker Demo of Shared Services & $watch";}i:2;i:94042;}i:1582;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:94143;}i:1583;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:94143;}i:1584;a:3:{i:0;s:11:"listu_close";i:1;a:0:{}i:2;i:94143;}i:1585;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:94143;}i:1586;a:3:{i:0;s:11:"strong_open";i:1;a:0:{}i:2;i:94145;}i:1587;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:12:"Event Method";}i:2;i:94147;}i:1588;a:3:{i:0;s:12:"strong_close";i:1;a:0:{}i:2;i:94159;}i:1589;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:94161;}i:1590;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:94161;}i:1591;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:137:"The second way of communicating between controllers is to construct a publish/subscribe event bus system. The simple way would be to use ";}i:2;i:94163;}i:1592;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:94300;}i:1593;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:16:"$scope.broadcast";}i:2;i:94302;}i:1594;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:94318;}i:1595;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:2:", ";}i:2;i:94320;}i:1596;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:94322;}i:1597;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:11:"$scope.emit";}i:2;i:94324;}i:1598;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:94335;}i:1599;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:5:" and ";}i:2;i:94337;}i:1600;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:94342;}i:1601;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:9:"$scope.on";}i:2;i:94344;}i:1602;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:94353;}i:1603;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:241:" to send and capture events. You can basically broad cast and event from one controller, and catch and handle it in another controller. First thing to understand is what those functions do. Please note that these functions also exist on the ";}i:2;i:94355;}i:1604;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:94596;}i:1605;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:10:"$rootScope";}i:2;i:94598;}i:1606;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:94608;}i:1607;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:5:" too.";}i:2;i:94610;}i:1608;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:94616;}i:1609;a:3:{i:0;s:10:"listu_open";i:1;a:0:{}i:2;i:94616;}i:1610;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:94616;}i:1611;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:94616;}i:1612;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:" ";}i:2;i:94620;}i:1613;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:60:"http://docs.angularjs.org/api/ng.$rootScope.Scope#$broadcast";i:1;s:18:""$scope.broadcast"";}i:2;i:94621;}i:1614;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:107:" creates an event that is propagated to the child scopes. That could be inside a controller or a directive.";}i:2;i:94704;}i:1615;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:94811;}i:1616;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:94811;}i:1617;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:94811;}i:1618;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:94811;}i:1619;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:" ";}i:2;i:94815;}i:1620;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:55:"http://docs.angularjs.org/api/ng.$rootScope.Scope#$emit";i:1;s:13:""$scope.emit"";}i:2;i:94816;}i:1621;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:114:" creates an event that is propagated to the parent scopes. That could be a controller or the run configuration of ";}i:2;i:94889;}i:1622;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:95003;}i:1623;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:6:"ng-app";}i:2;i:95005;}i:1624;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:95011;}i:1625;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:".";}i:2;i:95013;}i:1626;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:95014;}i:1627;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:95014;}i:1628;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:95014;}i:1629;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:95014;}i:1630;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:" ";}i:2;i:95018;}i:1631;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:53:"http://docs.angularjs.org/api/ng.$rootScope.Scope#$on";i:1;s:11:""$scope.on"";}i:2;i:95019;}i:1632;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:71:" listens for an event and runs a callback handler function accordingly.";}i:2;i:95088;}i:1633;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:95159;}i:1634;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:95159;}i:1635;a:3:{i:0;s:11:"listu_close";i:1;a:0:{}i:2;i:95159;}i:1636;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:95159;}i:1637;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:254:"As you can see the hierarchy of scopes matter when deciding to broadcast, emit or listen to an event. A common question would be how to communicate between sibling controllers. There are three possible configurations in using these scope event functions:";}i:2;i:95161;}i:1638;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:95416;}i:1639;a:3:{i:0;s:10:"listo_open";i:1;a:0:{}i:2;i:95416;}i:1640;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:95416;}i:1641;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:95416;}i:1642;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:56:" Use a shared service to always broadcast down from the ";}i:2;i:95420;}i:1643;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:95476;}i:1644;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:10:"$rootScope";}i:2;i:95478;}i:1645;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:95488;}i:1646;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:26:". This is demonstrated by ";}i:2;i:95490;}i:1647;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:69:"http://onehungrymind.com/angularjs-communicating-between-controllers/";i:1;s:59:"Simpulton in his video on communicating between controllers";}i:2;i:95516;}i:1648;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:".";}i:2;i:95649;}i:1649;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:95650;}i:1650;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:95650;}i:1651;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:95650;}i:1652;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:95650;}i:1653;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:71:" Construct a ping pong configuration between child controllers and the ";}i:2;i:95654;}i:1654;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:95725;}i:1655;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:6:"ng-app";}i:2;i:95727;}i:1656;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:95733;}i:1657;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:50:" run configuration. Child scopes emit events, the ";}i:2;i:95735;}i:1658;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:95785;}i:1659;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:10:"$rootScope";}i:2;i:95787;}i:1660;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:95797;}i:1661;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:8:" in the ";}i:2;i:95799;}i:1662;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:95807;}i:1663;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:6:"ng-app";}i:2;i:95809;}i:1664;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:95815;}i:1665;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:50:" run section broadcasts it back to all listeners. ";}i:2;i:95817;}i:1666;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:26:"http://jsfiddle.net/VxafF/";i:1;s:37:"This is demonstrated in this jsFiddle";}i:2;i:95867;}i:1667;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:".";}i:2;i:95935;}i:1668;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:95936;}i:1669;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:95936;}i:1670;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:95936;}i:1671;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:95936;}i:1672;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:125:" Just do it ad-hoc. Emit when you need to communicate to the parent, and broadcast when you need to communicate to the child.";}i:2;i:95940;}i:1673;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:96065;}i:1674;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:96065;}i:1675;a:3:{i:0;s:11:"listo_close";i:1;a:0:{}i:2;i:96065;}i:1676;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:96065;}i:1677;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:270:"The disadvantage of using the broadcast, is that the event propagation cannot be cancelled. That is, if you were to emit an event, a listener could handle the event and then stop propagation. However if an event is broadcasted to children, then all children will get it.";}i:2;i:96067;}i:1678;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:96337;}i:1679;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:96337;}i:1680;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:9:"Here's a ";}i:2;i:96339;}i:1681;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:42:"http://beta.plnkr.co/edit/ZU0XNK?p=preview";i:1;s:50:"Plunker demo showing these event methods in action";}i:2;i:96348;}i:1682;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:112:". Pay attention to the console, and play around with how the messages are sent, plus make sure to check out the ";}i:2;i:96445;}i:1683;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:96557;}i:1684;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:5:"event";}i:2;i:96559;}i:1685;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:96564;}i:1686;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:5:" and ";}i:2;i:96566;}i:1687;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:96571;}i:1688;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:3:"arg";}i:2;i:96573;}i:1689;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:96576;}i:1690;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:58:" parameters that can be displayed in the handler function.";}i:2;i:96578;}i:1691;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:96636;}i:1692;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:96636;}i:1693;a:3:{i:0;s:11:"strong_open";i:1;a:0:{}i:2;i:96638;}i:1694;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:16:"Event Bus Method";}i:2;i:96640;}i:1695;a:3:{i:0;s:12:"strong_close";i:1;a:0:{}i:2;i:96656;}i:1696;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:96658;}i:1697;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:96658;}i:1698;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:452:"Broadcasting, emitting and handling up and down the scopes is actually somewhat inefficient, especially when you have many events happening. Therefore you will need a dedicated event bus that abstracts this process, there are several third party libraries that make this possible. However they may or may not be implemented as an AngularJS service, therefore possibly bypassing the dependency injection. These libraries will not be using the AngularJS ";}i:2;i:96660;}i:1699;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:97112;}i:1700;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:16:"$scope.broadcast";}i:2;i:97114;}i:1701;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:97130;}i:1702;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:2:", ";}i:2;i:97132;}i:1703;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:97134;}i:1704;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:11:"$scope.emit";}i:2;i:97136;}i:1705;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:97147;}i:1706;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:4:" or ";}i:2;i:97149;}i:1707;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:97153;}i:1708;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:9:"$scope.on";}i:2;i:97155;}i:1709;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:97164;}i:1710;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:44:", instead they implement their own handlers:";}i:2;i:97166;}i:1711;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:97211;}i:1712;a:3:{i:0;s:10:"listu_open";i:1;a:0:{}i:2;i:97211;}i:1713;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:97211;}i:1714;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:97211;}i:1715;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:" ";}i:2;i:97215;}i:1716;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:41:"http://jsfiddle.net/ThomasBurleson/sv7D5/";i:1;s:48:"jQuery Event Bus + AngularJS Service integration";}i:2;i:97216;}i:1717;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:120:" - This one relies on jQuery to handle the events. however it integrates the code into an AngularJS service. Here's the ";}i:2;i:97310;}i:1718;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:51:"http://fiddle.jshell.net/ThomasBurleson/sv7D5/show/";i:1;s:16:"full explanation";}i:2;i:97430;}i:1719;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:".";}i:2;i:97502;}i:1720;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:97503;}i:1721;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:97503;}i:1722;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:97503;}i:1723;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:97503;}i:1724;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:5:" The ";}i:2;i:97507;}i:1725;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:33:"http://radio.uxder.com/index.html";i:1;s:8:"Radio.js";}i:2;i:97512;}i:1726;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:78:" is third party library that doesn't have any dependencies, it's has a simple ";}i:2;i:97558;}i:1727;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"API";}i:2;i:97636;}i:1728;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:249:" to allow you to send and capture events. However it will introduce a global variable into your AngularJS code since it's not integrated as an AngularJS service. However it may be possible to create a service wrapper around this third party library.";}i:2;i:97639;}i:1729;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:97888;}i:1730;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:97888;}i:1731;a:3:{i:0;s:11:"listu_close";i:1;a:0:{}i:2;i:97888;}i:1732;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:97889;}i:1733;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:10:"Directives";i:1;i:3;i:2;i:97889;}i:2;i:97889;}i:1734;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:97889;}i:1735;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:97889;}i:1736;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:82:"In following with AngularJS's declarative philosophy in building user interfaces, ";}i:2;i:97911;}i:1737;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:41:"http://docs.angularjs.org/guide/directive";i:1;s:48:"AngularJS introduced a concept called directives";}i:2;i:97993;}i:1738;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:52:". These are essentially behaviour extensions to the ";}i:2;i:98087;}i:1739;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:4:"HTML";}i:2;i:98139;}i:1740;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:209:" that allow complex user interface manipulation. This is where you would place your jQuery code. Remember that if you come from the jQuery world, you probably think that events and their handlers should drive ";}i:2;i:98143;}i:1741;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"DOM";}i:2;i:98352;}i:1742;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:126:" changes. In the Angular world, events drive the model/$scope changes, which automatically update the view. The view contains/";}i:2;i:98355;}i:1743;a:3:{i:0;s:18:"doublequoteopening";i:1;a:0:{}i:2;i:98481;}i:1744;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:8:"declares";}i:2;i:98482;}i:1745;a:3:{i:0;s:18:"doublequoteclosing";i:1;a:0:{}i:2;i:98490;}i:1746;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:45:" directives. These directives manipulate the ";}i:2;i:98491;}i:1747;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"DOM";}i:2;i:98536;}i:1748;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:2:" (";}i:2;i:98539;}i:1749;a:3:{i:0;s:18:"doublequoteopening";i:1;a:0:{}i:2;i:98541;}i:1750;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:13:"automatically";}i:2;i:98542;}i:1751;a:3:{i:0;s:18:"doublequoteclosing";i:1;a:0:{}i:2;i:98555;}i:1752;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:39:") when the corresponding model changes.";}i:2;i:98556;}i:1753;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:98595;}i:1754;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:98595;}i:1755;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:175:"When you're constructing directives, you are also constructing a domain specific language for your application's user interface. Directives are declaratively invoked from the ";}i:2;i:98597;}i:1756;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:4:"HTML";}i:2;i:98772;}i:1757;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:25:" itself as a custom tag, ";}i:2;i:98776;}i:1758;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:4:"HTML";}i:2;i:98801;}i:1759;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:175:" attribute or even a comment, and they are imperatively constructed inside the javascript. AngularJS already packages a number of core directives, which can be found in their ";}i:2;i:98805;}i:1760;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:30:"http://docs.angularjs.org/api/";i:1;s:17:"API documentation";}i:2;i:98980;}i:1761;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:53:". In fact the very way AngularJS binds itself to the ";}i:2;i:99032;}i:1762;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"DOM";}i:2;i:99085;}i:1763;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:90:" is through directives, so even when you need to call a controller you're still using the ";}i:2;i:99088;}i:1764;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:99178;}i:1765;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:13:"ng-controller";}i:2;i:99180;}i:1766;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:99193;}i:1767;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:79:" directive, and when you're binding a whole application, then you're using the ";}i:2;i:99195;}i:1768;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:99274;}i:1769;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:6:"ng-app";}i:2;i:99276;}i:1770;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:99282;}i:1771;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:25:" directive. The usage of ";}i:2;i:99284;}i:1772;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:99309;}i:1773;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:4:"{{}}";}i:2;i:99311;}i:1774;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:99315;}i:1775;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:43:" to display model variables is actually an ";}i:2;i:99317;}i:1776;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:45:"http://docs.angularjs.org/api/ng.$interpolate";i:1;s:21:"interpolate directive";}i:2;i:99360;}i:1777;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:".";}i:2;i:99431;}i:1778;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:99432;}i:1779;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:99432;}i:1780;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:42:"In order for directives to manipulate the ";}i:2;i:99434;}i:1781;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"DOM";}i:2;i:99476;}i:1782;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:47:", they need to be first binded to a particular ";}i:2;i:99479;}i:1783;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"DOM";}i:2;i:99526;}i:1784;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:25:" element. Then when that ";}i:2;i:99529;}i:1785;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"DOM";}i:2;i:99554;}i:1786;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:362:" element comes into existence either on first page load, or via programmatic insertion from another directive, the directive specified in your AngularJS code then gets executed. There are a number of options to configure how the directive works, either between other directives, between parent and child scopes, or within which phase of compilation it will work.";}i:2;i:99557;}i:1787;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:99919;}i:1788;a:3:{i:0;s:4:"code";i:1;a:3:{i:0;s:3414:"
//THIS IS PSEUDO CODE, but shows you all the options and configuration of a directive

angular.module('Directives')
    .directive('directiveName', [ //<- Actual directive name is always camelcased
        '$someService',
        '$anotherService',
        function($someService, $anotherService) { //<- Directive's factory function, can be dependency injected with services
        
            //any code here is not binded to a particular directive, but would be executed on the first instantiation of the directive
        
            //we need to return a "directive definition object" that configures the directive
            return {
                name: '', //<- name of the directive, never used
                priority: 0, //<- user when there are multiple directives on the same element, and you need to specify the order of activation
                terminal: true, //<- takes the all directives on the elemnt with the same priority number and makes them the last to be activated
                template: '<div></div>', //<- you can create templates straight in the directive
                templateUrl: 'directive.html', //<- this can query a template over the internet, or from an embedded template, directives can act as reusable widgets
                replace: false, //<- boolean for replacing the original element with the directive delcaration
                transclude: false, //<- boolean for moving the original element's content into the template's ng-transclude, used in reusable widgets
                restrict: 'A', //<- determines how the directive can be declared
                scope: { //<- defines the scope of the directive, by default it is false, but can be true for prototypical scope, or {} for isolate scope
                    localName: @externalName, //<- here's the guest list for the isolate scope
                    localBind: =externalName,
                    localExp: &externalName
                },
                controller: function($scope, $element, $attrs, $transclude){
                    //this is a "directive controller", can be used to allow interdirective communication, this controller will only be binded to each directive instantiation, not the same as ng-controller, since that is only accessible via scope inheritance
                },
                require: ['?^directiveName', 'requiredDirective', '^parentDirective'], //<- goes with directive controllers, specifies a contract that it needs other directives to ALSO include the controller function, and parameter in their compile/linking functions
                compile: function(element, attrs, transclude) {
                    //this function is executed BEFORE the directive is compiled and linked to the scope
                    //it would replace the link: property
                    //the element here refers to the original element where the directive was declared
                    return {
                        pre: function(scope, iElement, iAttrs, controller) {}, //just before the linking
                        post: function(scope, iElement, iAttrs, controller) {} //the same as the link: function defined below
                    }
                },
                link: function(scope, element, attrs) {} //this is what you would 90% of the time, you can actually manipulate the DOM in the inside here
            };
            
        }
    ]);
";i:1;s:10:"javascript";i:2;N;}i:2;i:99926;}i:1789;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:99926;}i:1790;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:259:"The above psuedo code shows all the possible configuration options of a directive. In most cases you won't need to use so many options, as directives usually deal with just manipulating the final compiled scope variables and expressions, and manipulating any ";}i:2;i:103361;}i:1791;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"DOM";}i:2;i:103620;}i:1792;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:109:" using jQuery. Therefore the a common directive can be written like so with just a scope and link definition.";}i:2;i:103623;}i:1793;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:103732;}i:1794;a:3:{i:0;s:4:"code";i:1;a:3:{i:0;s:1025:"
angular.module('Directives')
    .directive('camelCasedDirectiveNameDir', [ //<- this is optional since no dependencies to be injected, but still used for convention
        function(){
            //here i can return the directive definition object
            return{
                scope: {},
                link: function(scope, element, attributes){
                    //at this point the DOM has been compiled, the scope is attached, and you can start manipulating things
                    //scope is the scope of the directive, it could be the containing, controller's scope if it scope: false, it could be it's own scope if {}, it could be a prototypical scope if scope: true
                    //element is the DOM element that you placed the directive on, except that it's also wrapped in jQlite, or jQuery if you have it loaded
                    //attributes is an object listing all the attributes on the DOM element that the directive is attached to.
                }
            };
        }
    ]);

";i:1;s:10:"javascript";i:2;N;}i:2;i:103739;}i:1795;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:103739;}i:1796;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:29:"A directive is attached to a ";}i:2;i:104785;}i:1797;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"DOM";}i:2;i:104814;}i:1798;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:192:" element just by writing it as an attribute, class, comment or tag name. It is recommended to attach it as an attribute as this is the most compatible for older browsers, and also matches the ";}i:2;i:104817;}i:1799;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:4:"HTML";}i:2;i:105009;}i:1800;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:" ";}i:2;i:105013;}i:1801;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:4:"spec";}i:2;i:105014;}i:1802;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:".";}i:2;i:105018;}i:1803;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:105019;}i:1804;a:3:{i:0;s:4:"code";i:1;a:3:{i:0;s:223:"
<div camel-cased-directive-name-dir="parameterToGoIntoTheDirective" another-directive-can-be-attached-too-dir>
<!-- It is possible to have data and child elements in here too, they would need to be transcluded. -->
</div>
";i:1;s:11:"html4strict";i:2;N;}i:2;i:105026;}i:1805;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:105026;}i:1806;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:58:"For detailed explanation of each of those options see the ";}i:2;i:105264;}i:1807;a:3:{i:0;s:18:"doublequoteopening";i:1;a:0:{}i:2;i:105322;}i:1808;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:33:"Writing directives (long version)";}i:2;i:105323;}i:1809;a:3:{i:0;s:18:"doublequoteclosing";i:1;a:0:{}i:2;i:105356;}i:1810;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:16:" section of the ";}i:2;i:105357;}i:1811;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:41:"http://docs.angularjs.org/guide/directive";i:1;s:23:"directive documentation";}i:2;i:105373;}i:1812;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:369:". This section will focus on common use cases of directives and their demonstration. For purposes of demonstration, any Plunker demos won't follow the embedded template convention, this is because Plunker cannot refer back to embedded templates in their directives, but when you write it in your own application, you should separate your templates from your javascript.";}i:2;i:105442;}i:1813;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:105811;}i:1814;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:105813;}i:1815;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:28:"Building Reusable Directives";i:1;i:4;i:2;i:105813;}i:2;i:105813;}i:1816;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:4;}i:2;i:105813;}i:1817;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:105813;}i:1818;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:625:"As you build larger and large client side applications. You'll start to realise that an user interface state cannot be handled by one single controller or view file. There could be a section that deals with notifications, another that deals with chat, another that deals with information summary. The view state will need to be broken down via a separation of responsibilities. Directives can be used to build reusable widgets so you can have maintainable and scalable view states. Note that there is another native directive that allows you to bring in templates into your view state without a custom directive, it's called ";}i:2;i:105851;}i:1819;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:52:"http://docs.angularjs.org/api/ng.directive:ngInclude";i:1;s:11:""ng-include";}i:2;i:106476;}i:1820;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:53:", however it's not as flexible as a custom directive.";}i:2;i:106544;}i:1821;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:106597;}i:1822;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:106597;}i:1823;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:109:"In order to implement this, we first need to have a template for the widget. Then we attach a directive to a ";}i:2;i:106599;}i:1824;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"DOM";}i:2;i:106708;}i:1825;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:187:" element that will contain the template when it is compiled. Then we configure the directive to reference the template, and then we can manipulate it using the scope, jQuery or otherwise.";}i:2;i:106711;}i:1826;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:106898;}i:1827;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:106898;}i:1828;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:73:"Here's the the template that will be reused, it can be embedded into the ";}i:2;i:106900;}i:1829;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:4:"HTML";}i:2;i:106973;}i:1830;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:40:" or offloaded to be requested on demand:";}i:2;i:106977;}i:1831;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:107017;}i:1832;a:3:{i:0;s:4:"code";i:1;a:3:{i:0;s:214:"
<script type="text/ng-template" id="directive_widget.html">
    <div class="widget">
        <p>I'm a little widget!</p>
        <ul>
            <li>Items to be displayed!</li>
        </ul>
    </div>
</script>
";i:1;s:11:"html4strict";i:2;N;}i:2;i:107024;}i:1833;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:107024;}i:1834;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:33:"Here's the widget directive code:";}i:2;i:107253;}i:1835;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:107286;}i:1836;a:3:{i:0;s:4:"code";i:1;a:3:{i:0;s:615:"
'use strict';

angular.module('Directives')
    .directive('widgetDir', [
        function(){
            return {
                templateUrl: 'directive_widget.html', //<- this can refer to the embedded template
                link: function(scope, element, attributes){
                    console.log(scope); //<- since there's no scope defined, this scope will actually point to the containing controller's scope
                    console.log(element); //<- DOM element with jQuery wrapped
                    console.log(attributes); //Attributes object
                }
            };
        }
    ]);
";i:1;s:10:"javascript";i:2;N;}i:2;i:107293;}i:1837;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:107293;}i:1838;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:83:"Then it's possible to use this widget and have the template come out by doing this:";}i:2;i:107929;}i:1839;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:108012;}i:1840;a:3:{i:0;s:4:"code";i:1;a:3:{i:0;s:98:"
<div widget-dir="Something"></div> <!-- the "Something" will be inside the attributes object -->
";i:1;s:11:"html4strict";i:2;N;}i:2;i:108019;}i:1841;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:108019;}i:1842;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:59:"Now that widget's template will be placed whenever you add ";}i:2;i:108132;}i:1843;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:108191;}i:1844;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:10:"widget-dir";}i:2;i:108193;}i:1845;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:108203;}i:1846;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:8:" on any ";}i:2;i:108205;}i:1847;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"DOM";}i:2;i:108213;}i:1848;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:342:" element. The template will be inserted inside of it. Try using jQuery to manipulate the template's own elements. Notice that since you didn't define scope, the scope actually points to the nearest containing controller's scope. This won't be very useful for reusable directives, so you should actually create a prototypical scope by setting ";}i:2;i:108216;}i:1849;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:108558;}i:1850;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:11:"scope: true";}i:2;i:108560;}i:1851;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:108571;}i:1852;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:18:" or isolate scope ";}i:2;i:108573;}i:1853;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:108591;}i:1854;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:9:"scope: {}";}i:2;i:108593;}i:1855;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:108602;}i:1856;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:202:", that way the directives won't step on each others shoes and it won't overwrite or accidentally change the parent scope properties. Also note that if you don't have jQuery loaded before AngularJS, the ";}i:2;i:108604;}i:1857;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:45:"http://docs.angularjs.org/api/angular.element";i:1;s:42:"element is a jQlite wrapped object instead";}i:2;i:108806;}i:1858;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:52:", check out the Angular documentation on jQlite and ";}i:2;i:108898;}i:1859;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:108950;}i:1860;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:15:"angular.element";}i:2;i:108952;}i:1861;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:108967;}i:1862;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:18:" to find out more.";}i:2;i:108969;}i:1863;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:108987;}i:1864;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:108987;}i:1865;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:10:"Here is a ";}i:2;i:108989;}i:1866;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:56:"http://beta.plnkr.co/edit/F6JrOGtT3QJB841Cii0r?p=preview";i:1;s:55:"Plunker Demo demonstrating using directives with jQuery";}i:2;i:108999;}i:1867;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:49:", which integrates a number of nuances regarding ";}i:2;i:109115;}i:1868;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:109164;}i:1869;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:12:"scope.$apply";}i:2;i:109166;}i:1870;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:109178;}i:1871;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:5:" and ";}i:2;i:109180;}i:1872;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:109185;}i:1873;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:15:"angular.element";}i:2;i:109187;}i:1874;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:109202;}i:1875;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:".";}i:2;i:109204;}i:1876;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:109205;}i:1877;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:109207;}i:1878;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:25:"Using scope in Directives";i:1;i:4;i:2;i:109207;}i:2;i:109207;}i:1879;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:4;}i:2;i:109207;}i:1880;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:109207;}i:1881;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:143:"One of the most confusing parts of writing directives is managing the scope of the directive, and because there may be multiple directives one ";}i:2;i:109242;}i:1882;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"DOM";}i:2;i:109385;}i:1883;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:68:" element, one directive's scope will affect other directive's scope.";}i:2;i:109388;}i:1884;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:109456;}i:1885;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:109456;}i:1886;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:601:"By default, if you don't configure the scope property in the directive definition object, the scope will be false. This means in the linking function, the scope refers to the parent containing controller's scope. This make it easy to modify model properties in the parent, however it's not very flexible, since if you define anything on the scope, it may step on the parent's scope and inadvertently overwrite some model properties of the same name. This means it's not very good for reusable or modular directives. This configuration was demonstrated in the building reusable directive section above.";}i:2;i:109458;}i:1887;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:110059;}i:1888;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:110059;}i:1889;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:69:"The scope configuration allows two other styles. The first is simply ";}i:2;i:110061;}i:1890;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:110130;}i:1891;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:11:"scope: true";}i:2;i:110132;}i:1892;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:110143;}i:1893;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:437:", this creates a scope that prototypically inherits from the parent scope. This scope operates in the same manner as a child controller's scope. Now any model properties defined in the directive will be defined on the directive's scope rather in the parent. Furthermore if multiple directives on the same element request a new scope, only one new scope is created. In order to communicate with the parent, you'll have to be aware of the ";}i:2;i:110145;}i:1894;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:86:"https://github.com/angular/angular.js/wiki/The-Nuances-of-Scope-Prototypal-Inheritance";i:1;s:28:"nuances of scope inheritance";}i:2;i:110582;}i:1895;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:384:". This is slightly better than no scope, however if you read properties from the parent, then you're hard coupling the directive to the parent's scope, in that the directive would not work without having a parent provide certain properties. Furthermore, you may still accidentally read and change (via reference access) properties from the parent scope even when you didn't intend it.";}i:2;i:110701;}i:1896;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:111085;}i:1897;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:111085;}i:1898;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:23:"The final style is the ";}i:2;i:111087;}i:1899;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:68:"http://onehungrymind.com/angularjs-sticky-notes-pt-2-isolated-scope/";i:1;s:13:"isolate scope";}i:2;i:111110;}i:1900;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:68:". It can be set as an empty object, or as an object hash. It it was ";}i:2;i:111196;}i:1901;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:111264;}i:1902;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:9:"scope: {}";}i:2;i:111266;}i:1903;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:111275;}i:1904;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:202:", then it creates an empty isolate scope. This scope does not prototypically inherit from the parent's scope. This is best choice for creating reusable directives that have to be usable anywhere in the ";}i:2;i:111277;}i:1905;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"DOM";}i:2;i:111479;}i:1906;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:143:" regardless of external circumstances. Note that each directive on the same element that requests an isolate scope get their own isolate scope.";}i:2;i:111482;}i:1907;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:111625;}i:1908;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:111625;}i:1909;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:246:"However sometimes you still need to allow the outside world to configure or add properties to the directive. Sometimes you need a provide a callback that is defined in the parent to the directive. This often happens when you need to link a UI or ";}i:2;i:111627;}i:1910;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"DOM";}i:2;i:111873;}i:1911;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:261:" transformation (directive's job) to a model or service activation (controller's job). One example would be infinite scroll, where the directive will check for the scroll event, and activate the controller's service to retrieve more result rows from the server ";}i:2;i:111876;}i:1912;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"API";}i:2;i:112137;}i:1913;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:311:". This means you need an object hash. The object hash can accept key to value properties, in which the key represents the local value you want defined as a model variable in the directive's scope, and the value represents the external model variable from outside the directive. You may see something similar to:";}i:2;i:112140;}i:1914;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:112451;}i:1915;a:3:{i:0;s:4:"code";i:1;a:3:{i:0;s:340:"
scope: {
    localProp: @, //assuming localProp is the same name as the external property
    localProp2: =,
    localProp3: &,
    localProp4: @externalProp //assuming that external property has a different name from local property
}
//now all for local properties will be accessible inside the directive's scope, such as scope.localProp
";i:1;s:10:"javascript";i:2;N;}i:2;i:112458;}i:1916;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:112458;}i:1917;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:14:"Refer to this ";}i:2;i:112819;}i:1918;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:56:"http://beta.plnkr.co/edit/WK1lvOCxz8HeMDRr56vd?p=preview";i:1;s:12:"Plunker Demo";}i:2;i:112833;}i:1919;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:184:" which demonstrates how the model variables are bound using the three types of isolate scope hashing. Open up your console and see the logging working. Then refer to this sticky notes ";}i:2;i:112906;}i:1920;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:36:"http://jsfiddle.net/simpulton/VJ94U/";i:1;s:14:"Fiddle example";}i:2;i:113090;}i:1921;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:167:" of wiring up nested directives with a controller. It even demonstrates using the directive controller instead of a linking function. Though both could have been used.";}i:2;i:113145;}i:1922;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:113312;}i:1923;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:113312;}i:1924;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:106:"All of these properties in the object hash have to be defined on the attributes of the directive attached ";}i:2;i:113314;}i:1925;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"DOM";}i:2;i:113420;}i:1926;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:125:" element. In javascript they will be written as camel case, but in the attribute, they are always written with dashes. So if ";}i:2;i:113423;}i:1927;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:113548;}i:1928;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:9:"localProp";}i:2;i:113550;}i:1929;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:113559;}i:1930;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:10:" would be ";}i:2;i:113561;}i:1931;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:113571;}i:1932;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:10:"local-prop";}i:2;i:113573;}i:1933;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:113583;}i:1934;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:8:" on the ";}i:2;i:113585;}i:1935;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"DOM";}i:2;i:113593;}i:1936;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:9:" element.";}i:2;i:113596;}i:1937;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:113605;}i:1938;a:3:{i:0;s:4:"code";i:1;a:3:{i:0;s:48:"
<div widget local-prop="some parameter"></div>
";i:1;s:11:"html4strict";i:2;N;}i:2;i:113612;}i:1939;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:113612;}i:1940;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:425:"The '@' hash is designed for one-directional binding. This means either a primitive string or number is provided to the directive, often for some sort of basic configuration. The '@' hash can also be used to bring in interpolated model properties of the parent scope. Whatever you do the '@' attribute will not be reflected in any other scopes. In order to retrieve the value of the '@' hash, you can't just access them from ";}i:2;i:113675;}i:1941;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:114100;}i:1942;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:5:"scope";}i:2;i:114102;}i:1943;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:114107;}i:1944;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:131:" in the linking function. This is because the process of interpolation hasn't been done yet. You'll need to either get it from the ";}i:2;i:114109;}i:1945;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:114240;}i:1946;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:10:"attributes";}i:2;i:114242;}i:1947;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:114252;}i:1948;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:53:" object if it was a primitive, or you'll need to use ";}i:2;i:114254;}i:1949;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:114307;}i:1950;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:19:"attributes.$observe";}i:2;i:114309;}i:1951;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:114328;}i:1952;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:154:" to parse the interpolation. Furthermore in order to set the directive's attribute, you can't just set it from the attributes object, but you need to use ";}i:2;i:114330;}i:1953;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:114484;}i:1954;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:15:"attributes.$set";}i:2;i:114486;}i:1955;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:114501;}i:1956;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:37:" (this can be useful if you're using ";}i:2;i:114503;}i:1957;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"DOM";}i:2;i:114540;}i:1958;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:49:" attributes to do inter-directive communication).";}i:2;i:114543;}i:1959;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:114592;}i:1960;a:3:{i:0;s:4:"code";i:1;a:3:{i:0;s:991:"
//if our html was like this
/*
<div widget attribute="some primitive string" interpolated-attribute="{{interpolatedModel}}"></div>
*/
//assuming object hash:
/*
scope: {
    attribute: '@',
    interpolatedAttribute: '@'
};
*/
//then in order to access it in the linking function
function(scope, element, attributes){
    console.log(scope.attribute); //won't work
    console.log(attributes.attribute); //works
    
    attributes.$observe('interpolatedAttribute', function(value){
        //value now contains the interpolated {{interpolatedModel}}
        //this also runs everytime the interpolation changes
        console.log('Observe got activated, new value: ' + value);
    });
    
    //now it is one way binding, so if the interpolatedModel changed in the controller, then the directive would get it, but if it got changed in the directive, the controller will not get it, but the $observe will still activate!
    
    attributes.$set('interpolatedAttribute', 'new value!');
}
";i:1;s:10:"javascript";i:2;N;}i:2;i:114599;}i:1961;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:114599;}i:1962;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:316:"The most often used is the '=' hash. This setups bi-directional binding. If the model changes in the controller, it is propagated to the directive. If it is changed in the directive, it is propagated to the controller. You don't have to use the attributes object to access or change it. It can be done straight from ";}i:2;i:115611;}i:1963;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:115927;}i:1964;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:5:"scope";}i:2;i:115929;}i:1965;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:115934;}i:1966;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:150:". Furthermore you don't have to worry about scope inheritance. This binding doesn't come from prototypical inheritance, but is directly bound. On the ";}i:2;i:115936;}i:1967;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"DOM";}i:2;i:116086;}i:1968;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:71:" attributes, it is bound without the need of the interpolate directive ";}i:2;i:116089;}i:1969;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:116160;}i:1970;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:4:"{{}}";}i:2;i:116162;}i:1971;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:116166;}i:1972;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:".";}i:2;i:116168;}i:1973;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:116169;}i:1974;a:3:{i:0;s:4:"code";i:1;a:3:{i:0;s:255:"
//assuming HTML
/*
<div widget bidirectional="data"></div>
*/
//assuming scope
/*
scope: {
    bidirectional: '='
}
*/
function(scope, element, attributes){
    console.log(scope.bidirectional);
    scope.bidirectional = 'new value to be propagated!';
}
";i:1;s:10:"javascript";i:2;N;}i:2;i:116176;}i:1975;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:116176;}i:1976;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:340:"The more complicated version is the '&' hash which allows functions to be bound to the directive's isolate scope. This will allow you run parent scope's functions from inside the directive. Now originally if you didn't use isolate scope, you could simply access the function from the attributes object and execute from your directive. This ";}i:2;i:116452;}i:1977;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:36:"http://jsfiddle.net/vojtajina/U7Bz9/";i:1;s:33:"infinite scroll directive example";}i:2;i:116792;}i:1978;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:47:" uses just the attributes object. It also uses ";}i:2;i:116866;}i:1979;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:116913;}i:1980;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:12:"$scope.apply";}i:2;i:116915;}i:1981;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:116927;}i:1982;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:38:" but that's only due to the fact that ";}i:2;i:116929;}i:1983;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:116967;}i:1984;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:4:"bind";}i:2;i:116969;}i:1985;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:116973;}i:1986;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:306:" is a jQuery function. However we're building reusable directives, so we need to be a bit more stringent. The number one confusion in using the '&' hash, is the way parameters are passed into the functions. You can't just pass it into the function. You need to have a parameter name declared the attribute ";}i:2;i:116975;}i:1987;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"DOM";}i:2;i:117281;}i:1988;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:79:", and when you pass in a variable, it needs to be in the form of an object map.";}i:2;i:117284;}i:1989;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:117363;}i:1990;a:3:{i:0;s:4:"code";i:1;a:3:{i:0;s:573:"
//assuming HTML
/*
<div widget expression="doSomething(param)"></div>
*/
//assuming scope
/*
scope: {
    expression: '&'
}
*/
//also assuming parent controller
/*
function($scope){
    $scope.doSomething(input){
        console.log(input);
    };
    $scope.param = 'Some default parameters!';
}
*/
function(scope, element, attributes){
    scope.doSomething('Something I want to pass in'); //doesn't work
    scope.doSomething({param: 'something I want to pass in!'}); //works
    scope.doSomething(); //also works, uses the default parameter in the parent container!
}
";i:1;s:10:"javascript";i:2;N;}i:2;i:117370;}i:1991;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:117370;}i:1992;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:201:"Try experimenting with these object hashes. Remember to always use isolate scopes when you're building robust reusable directives. Eventually you could even share your directives with other developers.";}i:2;i:117964;}i:1993;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:118165;}i:1994;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:118167;}i:1995;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:22:"Transclusion & Compile";i:1;i:4;i:2;i:118167;}i:2;i:118167;}i:1996;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:4;}i:2;i:118167;}i:1997;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:118167;}i:1998;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:52:"Directives can also be used to manipulate the child ";}i:2;i:118199;}i:1999;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"DOM";}i:2;i:118251;}i:2000;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:17:" elements of the ";}i:2;i:118254;}i:2001;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"DOM";}i:2;i:118271;}i:2002;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:273:" element which was attached to a directive. You may wish to do this when you need to provide large pieces of data or to provide a custom template to be injected into the directive template. You can do this by either using the transclusion method or compile function method.";}i:2;i:118274;}i:2003;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:118547;}i:2004;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:118547;}i:2005;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:162:"Transclusion simply means moving the children of the original directive element into the directive's template. The directive's template would also need to attach ";}i:2;i:118549;}i:2006;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:118711;}i:2007;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:13:"ng-transclude";}i:2;i:118713;}i:2008;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:118726;}i:2009;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:270:" to a container. The children would be interpolated and processed in the parent container's scope, and when they get injected into the directive template, they get their own transclude scope, that would be a sibling to any isolate/prototypical directive scope. Here's a ";}i:2;i:118728;}i:2010;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:56:"http://beta.plnkr.co/edit/ZKrSGdrDH0iZpnEGMldG?p=preview";i:1;s:39:"Plunker Demo showing basic transclusion";}i:2;i:118998;}i:2011;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:2:". ";}i:2;i:119098;}i:2012;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:119100;}i:2013;a:3:{i:0;s:4:"code";i:1;a:3:{i:0;s:743:"
//assuming HTML
/*
<body ng-controller="ContainingCtrl">
    <h1>Tranclusion</h1>
    <div widget>
        Hello Im going to get transcluded!
        <p>So am I!</p>
        <p>{{meToo}}</p>
    </div>
</body>
*/
//the directive would be like this
app.directive('widget', [
        function(){
            return {
                replace: true, //<- this is going to make the whole template replace the directive element
                scope:{},
                transclude: true, //<- transcluded scope is a sibling to the isolate scope
                template:   '<div class="widget" ng-transclude></div>' //<- placing ng-transcluded will move the children elements from directive element to the template
            };
        }
    ]);
";i:1;s:10:"javascript";i:2;N;}i:2;i:119107;}i:2014;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:119107;}i:2015;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:5:"This ";}i:2;i:119871;}i:2016;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:63:"http://blog.omkarpatil.com/2012/11/transclude-in-angularjs.html";i:1;s:28:"blog article on transclusion";}i:2;i:119876;}i:2017;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:155:" goes into more detail regarding the different uses of such a technique. For inspiration on the application of transclusion see this article on creating a ";}i:2;i:119972;}i:2018;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:85:"http://thesmithfam.org/blog/2012/12/17/communicating-between-directives-in-angularjs/";i:1;s:37:"dynamic search box using transclusion";}i:2;i:120127;}i:2019;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:".";}i:2;i:120254;}i:2020;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:120255;}i:2021;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:120255;}i:2022;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:94:"The basic form of transclusion isn't very flexible, it simply moves all the children to where ";}i:2;i:120257;}i:2023;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:120351;}i:2024;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:13:"ng-transclude";}i:2;i:120353;}i:2025;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:120366;}i:2026;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:60:" is defined. Sometimes we need to be able to manipulate the ";}i:2;i:120368;}i:2027;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"DOM";}i:2;i:120428;}i:2028;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:280:" before it is compiled into scopes by AngularJS, so we can change the structure of the transclusion. We can of course just use jQuery via the linking function's element parameter to change everything, however this may not be desirable, as it is faster to work on the pre-compiled ";}i:2;i:120431;}i:2029;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"DOM";}i:2;i:120711;}i:2030;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:103:". To do this, we can use the compile function instead of the link function. Note that this means using ";}i:2;i:120714;}i:2031;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:120817;}i:2032;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:13:"ng-transclude";}i:2;i:120819;}i:2033;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:120832;}i:2034;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:61:" is optional, as we are essentially manually transcluding it.";}i:2;i:120834;}i:2035;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:120895;}i:2036;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:120895;}i:2037;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:9:"Here's a ";}i:2;i:120897;}i:2038;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:56:"http://beta.plnkr.co/edit/lhhJhbAHjwXJeYWYYANP?p=preview";i:1;s:65:"Plunker Demo that uses a compile function along with transclusion";}i:2;i:120906;}i:2039;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:31:" to manipulate the transcluded ";}i:2;i:121032;}i:2040;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:4:"HTML";}i:2;i:121063;}i:2041;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:34:" rather than just doing a dump of ";}i:2;i:121067;}i:2042;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:121101;}i:2043;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:13:"ng-transclude";}i:2;i:121103;}i:2044;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:121116;}i:2045;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:".";}i:2;i:121118;}i:2046;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:121119;}i:2047;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:121121;}i:2048;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:28:"Interdirective Communication";i:1;i:4;i:2;i:121121;}i:2;i:121121;}i:2049;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:4;}i:2;i:121121;}i:2050;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:121121;}i:2051;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:772:"Communicating between directives can be done in the same way controllers communicate between each other. You can use a shared service, custom events, or a dedicated event bus. Directives can even use a parent containing controller's scope to communicate as well. However directives have two more ways to communicate between themselves. The first is through the directive element's attributes. You can setup multiple directives to bind to the same attributes, and have one directive change the attributes, which will be reflected in the other attributes. However this is not very flexible, so AngularJS also provides a construct called directive controllers. These are controllers that are bound to the directive itself, and its properties are shared across the directives.";}i:2;i:121159;}i:2052;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:121931;}i:2053;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:121931;}i:2054;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:14:"Refer to this ";}i:2;i:121933;}i:2055;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:56:"http://beta.plnkr.co/edit/7lMDPqF3EYv5dyR5sLRA?p=preview";i:1;s:12:"Plunker Demo";}i:2;i:121947;}i:2056;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:198:" of using multiple directives with directive controllers on one element, and also having a child directive requesting the parent's directive controllers. It also incorporates a demonstration of the ";}i:2;i:122020;}i:2057;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:50:"http://docs.angularjs.org/api/ngSanitize.$sanitize";i:1;s:17:"ngSanitize module";}i:2;i:122218;}i:2058;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:5:" and ";}i:2;i:122290;}i:2059;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:122295;}i:2060;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:12:"ng-bind-html";}i:2;i:122297;}i:2061;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:122309;}i:2062;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:29:" directive which will render ";}i:2;i:122311;}i:2063;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:4:"HTML";}i:2;i:122340;}i:2064;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:175:" from your models. Note the nuances of scope, you cannot have multiple isolate scopes on the same element, and you cannot have multiple templates attached to the same element.";}i:2;i:122344;}i:2065;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:122519;}i:2066;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:122519;}i:2067;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:130:"Often you would use this when you have a main directive that handles the templates and transclusion, but you also need some other ";}i:2;i:122521;}i:2068;a:3:{i:0;s:18:"doublequoteopening";i:1;a:0:{}i:2;i:122651;}i:2069;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:6:"plugin";}i:2;i:122652;}i:2070;a:3:{i:0;s:18:"doublequoteclosing";i:1;a:0:{}i:2;i:122658;}i:2071;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:280:" directives that can augment the capability of the main directive. Child directives can also communicate through directive controllers allowing you to create multidimentional directives. That is directives that encompass several elements. One example would be creating tab panels.";}i:2;i:122659;}i:2072;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:122939;}i:2073;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:122939;}i:2074;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:68:"Here are some extra sources of information on using this construct: ";}i:2;i:122941;}i:2075;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:123010;}i:2076;a:3:{i:0;s:10:"listu_open";i:1;a:0:{}i:2;i:123010;}i:2077;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:123010;}i:2078;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:123010;}i:2079;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:" ";}i:2;i:123014;}i:2080;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:82:"http://www.bennadel.com/blog/2446-Using-Controllers-In-Directives-In-AngularJS.htm";i:1;s:31:"Using controllers in directives";}i:2;i:123015;}i:2081;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:123133;}i:2082;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:123133;}i:2083;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:123133;}i:2084;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:123133;}i:2085;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:" ";}i:2;i:123137;}i:2086;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:113:"http://www.bennadel.com/blog/2447-Exploring-Directive-Controllers-Compiling-Linking-And-Priority-In-AngularJS.htm";i:1;s:44:"Exploring directive controllers and priority";}i:2;i:123138;}i:2087;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:123300;}i:2088;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:123300;}i:2089;a:3:{i:0;s:11:"listu_close";i:1;a:0:{}i:2;i:123300;}i:2090;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:123302;}i:2091;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:22:"Conditional Directives";i:1;i:4;i:2;i:123302;}i:2;i:123302;}i:2092;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:4;}i:2;i:123302;}i:2093;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:123302;}i:2094;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:206:"One of the key concepts in client side templating is that there should be as little logic as possible. AngularJS provides a number native directives that is sufficient to do basic conditional logic in your ";}i:2;i:123334;}i:2095;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"DOM";}i:2;i:123540;}i:2096;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:114:". A number of these directives are also specifically designed for forms and form validation. These directives are:";}i:2;i:123543;}i:2097;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:123658;}i:2098;a:3:{i:0;s:10:"listu_open";i:1;a:0:{}i:2;i:123658;}i:2099;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:123658;}i:2100;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:123658;}i:2101;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:" ";}i:2;i:123662;}i:2102;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:49:"http://docs.angularjs.org/api/ng.directive:ngShow";i:1;s:6:"ngShow";}i:2;i:123663;}i:2103;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:29:" - Use this to show and hide ";}i:2;i:123723;}i:2104;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"DOM";}i:2;i:123752;}i:2105;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:185:" elements based on a boolean value. When used in multiple places, you could have a single boolean switch on and off multiple elements. This is also often used in conjunction with forms.";}i:2;i:123755;}i:2106;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:123940;}i:2107;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:123940;}i:2108;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:123940;}i:2109;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:123940;}i:2110;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:" ";}i:2;i:123944;}i:2111;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:49:"http://docs.angularjs.org/api/ng.directive:ngHide";i:1;s:6:"ngHide";}i:2;i:123945;}i:2112;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:31:" - Just the opposite of ngShow.";}i:2;i:124005;}i:2113;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:124036;}i:2114;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:124036;}i:2115;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:124036;}i:2116;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:124036;}i:2117;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:" ";}i:2;i:124040;}i:2118;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:51:"http://docs.angularjs.org/api/ng.directive:ngSwitch";i:1;s:8:"ngSwitch";}i:2;i:124041;}i:2119;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:91:" - Used when you need to do multiple ngShows, you can essentially switch between different ";}i:2;i:124105;}i:2120;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"DOM";}i:2;i:124196;}i:2121;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:57:" elements depending on boolean expression. It also has a ";}i:2;i:124199;}i:2122;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:37:"http://plnkr.co/edit/qm3EUM?p=preview";i:1;s:45:"change attribute which can equate to function";}i:2;i:124256;}i:2123;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:59:" that is fired every time the switch expression is checked.";}i:2;i:124343;}i:2124;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:124402;}i:2125;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:124402;}i:2126;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:124402;}i:2127;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:124402;}i:2128;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:" ";}i:2;i:124406;}i:2129;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:51:"http://docs.angularjs.org/api/ng.directive:ngRepeat";i:1;s:8:"ngRepeat";}i:2;i:124407;}i:2130;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:177:" - Use this to repeat or list out elements based on a collection of items. This also creates its own scope and exposes several scope properties to determine the list properties.";}i:2;i:124471;}i:2131;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:124648;}i:2132;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:124648;}i:2133;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:124648;}i:2134;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:124648;}i:2135;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:" ";}i:2;i:124652;}i:2136;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:61:"http://docs.angularjs.org/api/ngSanitize.directive:ngBindHtml";i:1;s:10:"ngBindHtml";}i:2;i:124653;}i:2137;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:3:" & ";}i:2;i:124729;}i:2138;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:59:"http://docs.angularjs.org/api/ng.directive:ngBindHtmlUnsafe";i:1;s:16:"ngBindHtmlUnsafe";}i:2;i:124732;}i:2139;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:52:" - These are what you use when you need to bind raw ";}i:2;i:124812;}i:2140;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:4:"HTML";}i:2;i:124864;}i:2141;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:109:" to the scope. You can't just interpolate them normally, or else Angular will think of them as text, and not ";}i:2;i:124868;}i:2142;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:4:"HTML";}i:2;i:124977;}i:2143;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:6:". The ";}i:2;i:124981;}i:2144;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:124987;}i:2145;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:10:"ngBindHtml";}i:2;i:124989;}i:2146;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:124999;}i:2147;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:14:" requires the ";}i:2;i:125001;}i:2148;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:40:"http://docs.angularjs.org/api/ngSanitize";i:1;s:17:"ngSanitize module";}i:2;i:125015;}i:2149;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:".";}i:2;i:125077;}i:2150;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:125078;}i:2151;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:125078;}i:2152;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:125078;}i:2153;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:125078;}i:2154;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:" ";}i:2;i:125082;}i:2155;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:50:"http://docs.angularjs.org/api/ng.directive:ngClass";i:1;s:7:"ngClass";}i:2;i:125083;}i:2156;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:23:" - Use this to apply a ";}i:2;i:125145;}i:2157;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"CSS";}i:2;i:125168;}i:2158;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:14:" class to the ";}i:2;i:125171;}i:2159;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"DOM";}i:2;i:125185;}i:2160;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:191:" element, the passed in parameters could be a space delimited string of class names, array of class names, or object map of class names to model booleans. Essentially you will be able to set ";}i:2;i:125188;}i:2161;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"CSS";}i:2;i:125379;}i:2162;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:73:" classes dynamically without creating a whole new custom directive. This ";}i:2;i:125382;}i:2163;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:42:"http://stackoverflow.com/a/13813255/582917";i:1;s:64:"Stackoverflow post goes into detail of using ngClass and ngStyle";}i:2;i:125455;}i:2164;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:".";}i:2;i:125566;}i:2165;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:125567;}i:2166;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:125567;}i:2167;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:125567;}i:2168;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:125567;}i:2169;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:" ";}i:2;i:125571;}i:2170;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:50:"http://docs.angularjs.org/api/ng.directive:ngStyle";i:1;s:7:"ngStyle";}i:2;i:125572;}i:2171;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:42:" - Use this to apply styles directly to a ";}i:2;i:125634;}i:2172;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"DOM";}i:2;i:125676;}i:2173;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:86:" element. However you should be using ngClass as much as possible and prevent writing ";}i:2;i:125679;}i:2174;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"CSS";}i:2;i:125765;}i:2175;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:20:" in your javascript.";}i:2;i:125768;}i:2176;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:125788;}i:2177;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:125788;}i:2178;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:125788;}i:2179;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:125788;}i:2180;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:" ";}i:2;i:125792;}i:2181;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:50:"http://docs.angularjs.org/api/ng.directive:ngClick";i:1;s:7:"ngClick";}i:2;i:125793;}i:2182;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:57:" - Use this to bind a callback function to a click event.";}i:2;i:125855;}i:2183;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:125912;}i:2184;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:125912;}i:2185;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:125912;}i:2186;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:125912;}i:2187;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:" ";}i:2;i:125916;}i:2188;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:49:"http://docs.angularjs.org/api/ng.directive:ngHref";i:1;s:6:"ngHref";}i:2;i:125917;}i:2189;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:51:" - Used when you need to interpolate a link in the ";}i:2;i:125977;}i:2190;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:126028;}i:2191;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:4:"href";}i:2;i:126030;}i:2192;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:126034;}i:2193;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:32:" attribute such as anchor links.";}i:2;i:126036;}i:2194;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:126068;}i:2195;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:126068;}i:2196;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:126068;}i:2197;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:126068;}i:2198;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:" ";}i:2;i:126072;}i:2199;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:48:"http://docs.angularjs.org/api/ng.directive:ngSrc";i:1;s:5:"ngSrc";}i:2;i:126073;}i:2200;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:51:" - Used when you need to interpolate a link in the ";}i:2;i:126131;}i:2201;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:126182;}i:2202;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:3:"src";}i:2;i:126184;}i:2203;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:126187;}i:2204;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:26:" attribute such as images.";}i:2;i:126189;}i:2205;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:126215;}i:2206;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:126215;}i:2207;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:126215;}i:2208;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:126215;}i:2209;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:" ";}i:2;i:126219;}i:2210;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:56:"http://docs.angularjs.org/api/ng.directive:ngNonBindable";i:1;s:13:"ngNonBindable";}i:2;i:126220;}i:2211;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:126:" - Use this when you're writing code that may be interpreted by AngularJS and you actually don't want Angular to interpret it.";}i:2;i:126294;}i:2212;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:126420;}i:2213;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:126420;}i:2214;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:126420;}i:2215;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:126420;}i:2216;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:" ";}i:2;i:126424;}i:2217;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:54:"http://docs.angularjs.org/api/ng.directive:ngPluralize";i:1;s:11:"ngPluralize";}i:2;i:126425;}i:2218;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:125:" - Used to automatically pluralisation like when you need to display how many people is viewing or doing something at a time.";}i:2;i:126495;}i:2219;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:126620;}i:2220;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:126620;}i:2221;a:3:{i:0;s:11:"listu_close";i:1;a:0:{}i:2;i:126620;}i:2222;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:126620;}i:2223;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:179:"Forms have a special place in AngularJS as they are the primary way of interacting with web applications. Therefore AngularJS augments the forms in a number of ways. Refer to the ";}i:2;i:126622;}i:2224;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:47:"http://docs.angularjs.org/api/ng.directive:form";i:1;s:39:"form documentation for more information";}i:2;i:126801;}i:2225;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:382:", remember that each form input tag such as select and textarea all have their unique AngularJS directives. Here are number of commonly used form directives with forms. Some of these directives are only required if you're going them be based on conditional model properties. Like for example, if you need to dynamically determine if a form input is required or not, you can use the ";}i:2;i:126892;}i:2226;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:70:"https://github.com/angular/angular.js/issues/1202#issuecomment-9927346";i:1;s:10:"ngRequired";}i:2;i:127274;}i:2227;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:93:", however if it's always going to be required, then you can just skip that and use the HTML5 ";}i:2;i:127359;}i:2228;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:127452;}i:2229;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:8:"required";}i:2;i:127454;}i:2230;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:127462;}i:2231;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:21:" attribute by itself.";}i:2;i:127464;}i:2232;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:127486;}i:2233;a:3:{i:0;s:10:"listu_open";i:1;a:0:{}i:2;i:127486;}i:2234;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:127486;}i:2235;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:127486;}i:2236;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:" ";}i:2;i:127490;}i:2237;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:51:"http://docs.angularjs.org/api/ng.directive:ngSubmit";i:1;s:8:"ngSubmit";}i:2;i:127491;}i:2238;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:99:" - When you're submitting a form, you probably want to submit it through AngularJS so it can do an ";}i:2;i:127555;}i:2239;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:4:"AJAX";}i:2;i:127654;}i:2240;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:230:" XHR POST request or PUT request. You'll need the ngSubmit directive on the form tag to specify a expression to evaluate when someone hits the submit button. This will prevent the default action of the browser submitting the form.";}i:2;i:127658;}i:2241;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:127888;}i:2242;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:127888;}i:2243;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:127888;}i:2244;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:127888;}i:2245;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:" ";}i:2;i:127892;}i:2246;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:48:"http://docs.angularjs.org/api/ng.directive:input";i:1;s:5:"Input";}i:2;i:127893;}i:2247;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:26:" - AngularJS augments the ";}i:2;i:127951;}i:2248;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:4:"HTML";}i:2;i:127977;}i:2249;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:204:" input tag with a number of native directives. Most of it is due to the fact that you may wish to interpolate boolean values from the model, and you cannot just use the normal attributes of the input tag.";}i:2;i:127981;}i:2250;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:128185;}i:2251;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:128185;}i:2252;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:128185;}i:2253;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:128185;}i:2254;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:" ";}i:2;i:128189;}i:2255;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:50:"http://docs.angularjs.org/api/ng.directive:ngModel";i:1;s:7:"ngModel";}i:2;i:128190;}i:2256;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:171:" - When using forms, you have to use ngModel to bind the input's data to a scope property. This can be used for check boxes and radios, and can be immediately linked to a ";}i:2;i:128252;}i:2257;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:128423;}i:2258;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:6:"$scope";}i:2;i:128425;}i:2259;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:128431;}i:2260;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:95:" property defined in the controller or any other directives relying on the input's data change.";}i:2;i:128433;}i:2261;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:128528;}i:2262;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:128528;}i:2263;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:128528;}i:2264;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:128528;}i:2265;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:" ";}i:2;i:128532;}i:2266;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:53:"http://docs.angularjs.org/api/ng.directive:ngDisabled";i:1;s:10:"ngDisabled";}i:2;i:128533;}i:2267;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:90:" - Used to disable or enable a form input based on an AngularJS model property/expression.";}i:2;i:128601;}i:2268;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:128691;}i:2269;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:128691;}i:2270;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:128691;}i:2271;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:128691;}i:2272;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:" ";}i:2;i:128695;}i:2273;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:53:"http://docs.angularjs.org/api/ng.directive:ngReadonly";i:1;s:10:"ngReadonly";}i:2;i:128696;}i:2274;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:92:" - Used to make a form input only read only based on an AngularJS model property/expression.";}i:2;i:128764;}i:2275;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:128856;}i:2276;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:128856;}i:2277;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:128856;}i:2278;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:128856;}i:2279;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:" ";}i:2;i:128860;}i:2280;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:51:"http://docs.angularjs.org/api/ng.directive:ngChange";i:1;s:8:"ngChange";}i:2;i:128861;}i:2281;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:111:" - Run a expression every time a form input changes, this relies on ngModel being declared on the same element.";}i:2;i:128925;}i:2282;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:129036;}i:2283;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:129036;}i:2284;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:129036;}i:2285;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:129036;}i:2286;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:" ";}i:2;i:129040;}i:2287;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:53:"http://docs.angularjs.org/api/ng.directive:ngSelected";i:1;s:10:"ngSelected";}i:2;i:129041;}i:2288;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:124:" - Select the correct option from a select drop down based on interpolated model properties. This is used on the option tag.";}i:2;i:129109;}i:2289;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:129233;}i:2290;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:129233;}i:2291;a:3:{i:0;s:11:"listu_close";i:1;a:0:{}i:2;i:129233;}i:2292;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:129233;}i:2293;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:102:"The Angular UI project also contains a number of directives useful for conditions. One of them is the ";}i:2;i:129235;}i:2294;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:29:"http://angular-ui.github.com/";i:1;s:14:"ngIf directive";}i:2;i:129337;}i:2295;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:87:", which does a similar thing to ngShow, but it actually removes it completely from the ";}i:2;i:129385;}i:2296;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"DOM";}i:2;i:129472;}i:2297;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:69:". This is less efficient than just hiding it, however it will affect ";}i:2;i:129475;}i:2298;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"DOM";}i:2;i:129544;}i:2299;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:70:" traversal because the elements will literally no longer exist in the ";}i:2;i:129547;}i:2300;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"DOM";}i:2;i:129617;}i:2301;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:".";}i:2;i:129620;}i:2302;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:129621;}i:2303;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:129623;}i:2304;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:11:"Inspiration";i:1;i:4;i:2;i:129623;}i:2;i:129623;}i:2305;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:4;}i:2;i:129623;}i:2306;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:129623;}i:2307;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:279:"There are a number of pre-made directives for AngularJS that developers have released open source. You can find inspiration for interesting directives and perhaps integrate them into your application. Here are various sources of directives and information on creating directives:";}i:2;i:129644;}i:2308;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:129924;}i:2309;a:3:{i:0;s:10:"listu_open";i:1;a:0:{}i:2;i:129924;}i:2310;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:129924;}i:2311;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:129924;}i:2312;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:" ";}i:2;i:129928;}i:2313;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:68:"http://deansofer.com/posts/view/14/AngularJs-Tips-and-Tricks-UPDATED";i:1;s:23:"AngularJS Tips & Tricks";}i:2;i:129929;}i:2314;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:130025;}i:2315;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:130025;}i:2316;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:130025;}i:2317;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:130025;}i:2318;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:" ";}i:2;i:130029;}i:2319;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:52:"https://github.com/andreev-artem/angular_experiments";i:1;s:19:"Angular Experiments";}i:2;i:130030;}i:2320;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:130106;}i:2321;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:130106;}i:2322;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:130106;}i:2323;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:130106;}i:2324;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:" ";}i:2;i:130110;}i:2325;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:29:"http://angular-ui.github.com/";i:1;s:10:"Angular UI";}i:2;i:130111;}i:2326;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:130155;}i:2327;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:130155;}i:2328;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:130155;}i:2329;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:130155;}i:2330;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:" ";}i:2;i:130159;}i:2331;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:37:"http://angular-ui.github.com/ng-grid/";i:1;s:17:"Angular UI ngGrid";}i:2;i:130160;}i:2332;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:32:" - For table related directives.";}i:2;i:130219;}i:2333;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:130251;}i:2334;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:130251;}i:2335;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:130251;}i:2336;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:130251;}i:2337;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:" ";}i:2;i:130255;}i:2338;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:39:"http://angular-ui.github.com/bootstrap/";i:1;s:16:"Angular UI Strap";}i:2;i:130256;}i:2339;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:35:" - For Twitter Bootstrap directives";}i:2;i:130316;}i:2340;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:130351;}i:2341;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:130351;}i:2342;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:130351;}i:2343;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:130351;}i:2344;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:" ";}i:2;i:130355;}i:2345;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:68:"https://github.com/petebacondarwin/AngularJS-Directives-Presentation";i:1;s:33:"AngularJS Directives Presentation";}i:2;i:130356;}i:2346;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:130462;}i:2347;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:130462;}i:2348;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:130462;}i:2349;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:130462;}i:2350;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:" ";}i:2;i:130466;}i:2351;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:56:"http://onehungrymind.com/angularjs-and-dom-manipulation/";i:1;s:31:"Basic animation with directives";}i:2;i:130467;}i:2352;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:130559;}i:2353;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:130559;}i:2354;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:130559;}i:2355;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:130559;}i:2356;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:" ";}i:2;i:130563;}i:2357;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:53:"http://onehungrymind.com/angularjs-directives-basics/";i:1;s:31:"Animating balls with directives";}i:2;i:130564;}i:2358;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:130653;}i:2359;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:130653;}i:2360;a:3:{i:0;s:11:"listu_close";i:1;a:0:{}i:2;i:130653;}i:2361;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:130654;}i:2362;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:10:"Templating";i:1;i:3;i:2;i:130654;}i:2;i:130654;}i:2363;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:130654;}i:2364;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:130654;}i:2365;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:147:"Templates in AngularJS can specified in multiple ways. They can be stored on the server, and be requested on demand by AngularJS through a RESTful ";}i:2;i:130676;}i:2366;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"API";}i:2;i:130823;}i:2367;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:41:". You will simply have to use a relative ";}i:2;i:130826;}i:2368;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:130867;}i:2369;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:11:"templateUrl";}i:2;i:130869;}i:2370;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:130880;}i:2371;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:64:" in your routing or directives to acquire them. You should then ";}i:2;i:130882;}i:2372;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:47:"http://docs.angularjs.org/api/ng.$templateCache";i:1;s:21:"cache those templates";}i:2;i:130946;}i:2373;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:10:" (see the ";}i:2;i:131019;}i:2374;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:37:"http://plnkr.co/edit/J6Y2dc?p=preview";i:1;s:59:"Plunker demo that caches templates on the run configuration";}i:2;i:131029;}i:2375;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:71:"). The second way would be to embed the client side templates into the ";}i:2;i:131130;}i:2376;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:4:"HTML";}i:2;i:131201;}i:2377;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:297:" on the first page load. This would bring all of the templates into the user's browser, and there will be no need to download templates on other page loads. Finally you can also write templates directly into the AngularJS javascript code, however this is not recommended as it mixes your concerns.";}i:2;i:131205;}i:2378;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:131502;}i:2379;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:131502;}i:2380;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:178:"Most templates for most web applications are actually quite small. So we can just embed them on the first page load. The client side templates in AngularJS have to be wrapped in ";}i:2;i:131504;}i:2381;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:131682;}i:2382;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:8:"<script>";}i:2;i:131684;}i:2383;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:131692;}i:2384;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:14:" tags like so:";}i:2;i:131694;}i:2385;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:131708;}i:2386;a:3:{i:0;s:4:"code";i:1;a:3:{i:0;s:134:"
<script type="text/ng-template" id="the_name_of_the_template.html">
    <p>HTML template and AngularJS directives here</p>
</script>
";i:1;s:11:"html4strict";i:2;N;}i:2;i:131715;}i:2387;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:131715;}i:2388;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:34:"They can then be referenced using ";}i:2;i:131864;}i:2389;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:131898;}i:2390;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:11:"templateUrl";}i:2;i:131900;}i:2391;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:131911;}i:2392;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:45:" through their id. For example in the routes:";}i:2;i:131913;}i:2393;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:131958;}i:2394;a:3:{i:0;s:4:"code";i:1;a:3:{i:0;s:176:"
$routeProvider
    .when(
        '/',
        {
            templateUrl: 'the_name_of_the_template.html',
            controller: 'TheControllerToBeBoundTo'
        }
    );
";i:1;s:10:"javascript";i:2;N;}i:2;i:131965;}i:2395;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:131965;}i:2396;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:29:"It is unnecessary to specify ";}i:2;i:132162;}i:2397;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:132191;}i:2398;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:13:"ng-controller";}i:2;i:132193;}i:2399;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:132206;}i:2400;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:121:" in templates that are routed. The specified controller will automatically be assigned the root of your template partial.";}i:2;i:132208;}i:2401;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:132329;}i:2402;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:132329;}i:2403;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:74:"Now in order to embed these templates we can use the CiTemplating class's ";}i:2;i:132331;}i:2404;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:132405;}i:2405;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:18:"Template::asset();";}i:2;i:132407;}i:2406;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:132425;}i:2407;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:264:" method to import the templates. Assuming that you placed your templates into the partial directory based on the CiTemplating's specified directory structure, you can bring all of the templates and embed them by simply writing this in your footer partial template:";}i:2;i:132427;}i:2408;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:132691;}i:2409;a:3:{i:0;s:4:"code";i:1;a:3:{i:0;s:300:"
<!-- the first parameter is the path to the partials folder, the second parameter is the extension of the files we want, the third parameter is an array of negated files or directories -->
<? Template::asset('application/views/partials', 'php', array('footer_partial.php', 'header_partial.php')) ?>
";i:1;s:11:"html4strict";i:2;N;}i:2;i:132698;}i:2410;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:132698;}i:2411;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:95:"It may be recommended to cache outputted view file, since the templates hardly change, and the ";}i:2;i:133013;}i:2412;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:133108;}i:2413;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:9:".htaccess";}i:2;i:133110;}i:2414;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:133119;}i:2415;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:45:" file doesn't stipulate the browser to cache ";}i:2;i:133121;}i:2416;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:4:"HTML";}i:2;i:133166;}i:2417;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:101:" files. Since we're using AngularJS the templates are separate from the content, so we can cache the ";}i:2;i:133170;}i:2418;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:4:"HTML";}i:2;i:133271;}i:2419;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:55:", instead the dynamic data from our JSON based RESTful ";}i:2;i:133275;}i:2420;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"API";}i:2;i:133330;}i:2421;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:".";}i:2;i:133333;}i:2422;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:133335;}i:2423;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:133335;}i:2424;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:8:"Services";i:1;i:3;i:2;i:133335;}i:2;i:133335;}i:2425;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:133335;}i:2426;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:133335;}i:2427;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:113:"Services in AngularJS most represent the server side concept of models. Here's a list of common uses of services:";}i:2;i:133355;}i:2428;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:133469;}i:2429;a:3:{i:0;s:10:"listu_open";i:1;a:0:{}i:2;i:133469;}i:2430;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:133469;}i:2431;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:133469;}i:2432;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:34:" To act as mediators to a RESTful ";}i:2;i:133473;}i:2433;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"API";}i:2;i:133507;}i:2434;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:".";}i:2;i:133510;}i:2435;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:133511;}i:2436;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:133511;}i:2437;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:133511;}i:2438;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:133511;}i:2439;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:55:" For inter-controller or inter-directive communication.";}i:2;i:133515;}i:2440;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:133570;}i:2441;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:133570;}i:2442;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:133570;}i:2443;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:133570;}i:2444;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:45:" To provide modularised global configuration.";}i:2;i:133574;}i:2445;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:133619;}i:2446;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:133619;}i:2447;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:133619;}i:2448;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:133619;}i:2449;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:14:" To intercept ";}i:2;i:133623;}i:2450;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:4:"HTTP";}i:2;i:133637;}i:2451;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:37:" requests and provide global changes.";}i:2;i:133641;}i:2452;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:133678;}i:2453;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:133678;}i:2454;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:133678;}i:2455;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:133678;}i:2456;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:45:" To act as an event bus for your application.";}i:2;i:133682;}i:2457;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:133727;}i:2458;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:133727;}i:2459;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:133727;}i:2460;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:133727;}i:2461;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:148:" To wrap over third party library functions, so you can dependency inject and thus mock the dependencies during TDD. Like for example the event bus ";}i:2;i:133731;}i:2462;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:23:"http://radio.uxder.com/";i:1;s:8:"Radio.js";}i:2;i:133879;}i:2463;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:".";}i:2;i:133915;}i:2464;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:133916;}i:2465;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:133916;}i:2466;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:133916;}i:2467;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:133916;}i:2468;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:41:" To act as an AngularJS specific library.";}i:2;i:133920;}i:2469;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:133961;}i:2470;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:133961;}i:2471;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:133961;}i:2472;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:133961;}i:2473;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:78:" To interact with HTML5 APIs that deal with data storage or cache rather than ";}i:2;i:133965;}i:2474;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"DOM";}i:2;i:134043;}i:2475;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:14:" manipulation.";}i:2;i:134046;}i:2476;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:134060;}i:2477;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:134060;}i:2478;a:3:{i:0;s:11:"listu_close";i:1;a:0:{}i:2;i:134060;}i:2479;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:134060;}i:2480;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:219:"One key difference is that services are instantiated as singletons, when multiple controllers request a service, it is always the same service, not multiple instantiations. This helps for inter-controller communication.";}i:2;i:134062;}i:2481;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:134281;}i:2482;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:134281;}i:2483;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:67:"Services can be defined in three ways. The simplest is through the ";}i:2;i:134283;}i:2484;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:134350;}i:2485;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:7:"service";}i:2;i:134352;}i:2486;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:134359;}i:2487;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:52:" function, and the most complex but flexible is the ";}i:2;i:134361;}i:2488;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:134413;}i:2489;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:8:"provider";}i:2;i:134415;}i:2490;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:134423;}i:2491;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:37:" function. The one in between is the ";}i:2;i:134425;}i:2492;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:134462;}i:2493;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:7:"factory";}i:2;i:134464;}i:2494;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:134471;}i:2495;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:56:" function, which is the one that is most commonly used. ";}i:2;i:134473;}i:2496;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:44:"https://gist.github.com/Mithrandir0x/3639232";i:1;s:62:"The three different styles is demonstrated by this Github gist";}i:2;i:134529;}i:2497;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:".";}i:2;i:134640;}i:2498;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:134641;}i:2499;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:134641;}i:2500;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:57:"This examples shows a service interacting with a RESTful ";}i:2;i:134643;}i:2501;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"API";}i:2;i:134700;}i:2502;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:11:" using the ";}i:2;i:134703;}i:2503;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:134714;}i:2504;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:9:"$resource";}i:2;i:134716;}i:2505;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:134725;}i:2506;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:14:" service. The ";}i:2;i:134727;}i:2507;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:134741;}i:2508;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:9:"$resource";}i:2;i:134743;}i:2509;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:134752;}i:2510;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:143:" services comes from a separate AngularJS module called ngResource. You'll need to load up that script file and load it as a module dependency.";}i:2;i:134754;}i:2511;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:134897;}i:2512;a:3:{i:0;s:4:"code";i:1;a:3:{i:0;s:239:"
//assuming this in your footer <script src="js/vendor/angular-resource.min.js"></script>
//write this in your bootstrapper in app.js
var app = angular.module('App', [
    'ngResource' //add ngResource to the list of dependent modules
]);
";i:1;s:10:"javascript";i:2;N;}i:2;i:134904;}i:2513;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:134904;}i:2514;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:35:"You can then dependency inject the ";}i:2;i:135164;}i:2515;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:135199;}i:2516;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:9:"$resource";}i:2;i:135201;}i:2517;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:135210;}i:2518;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:9:" object. ";}i:2;i:135212;}i:2519;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:50:"http://docs.angularjs.org/api/ngResource.$resource";i:1;s:60:"It provides an API that naturally maps to any RESTful design";}i:2;i:135221;}i:2520;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:111:". However the PUT request is missing, so you will need to define it on the configuration object. Note that the ";}i:2;i:135336;}i:2521;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:135447;}i:2522;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:9:"$resource";}i:2;i:135449;}i:2523;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:135458;}i:2524;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:136:" service works on objects, so the returned JSON data must be either a single object, or an array of objects, no primitives allowed. The ";}i:2;i:135460;}i:2525;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:135596;}i:2526;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:7:"query()";}i:2;i:135598;}i:2527;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:135605;}i:2528;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:45:" function always expects an array of objects.";}i:2;i:135607;}i:2529;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:135652;}i:2530;a:3:{i:0;s:4:"code";i:1;a:3:{i:0;s:1042:"
'use strict';

angular.module('Services')
    .factory('CoursesServ', [ //<- name of the service will be dependency injected into a controller
        '$resource', //<- dependency injecting the $resource
        function($resource){
            
            //factories must return an object API to be usable, here we are returning a fully configured $resource object back to the controller or directive that dependency injects this CoursesServ service
            return $resource(
                'api/courses/:id', //here is the URL (relative) to the server, the ":id" is actually an optional parameter, that will appear when you specify it in the default configuration or the configuration when you use in the controller
                {}, //default configuration (nothing here for now)
                {
                    update: {
                        method: 'PUT', //this method doesn't exist by default, so we're adding in an update method
                    }
                }
            );
            
        }
    ]);
";i:1;s:10:"javascript";i:2;N;}i:2;i:135659;}i:2531;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:135659;}i:2532;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:56:"Now in your controller you can use this service like so:";}i:2;i:136722;}i:2533;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:136778;}i:2534;a:3:{i:0;s:4:"code";i:1;a:3:{i:0;s:2645:"
'use strict';

angular.module('Controllers')
    .controller('CoursesIndexCtrl', [
        '$scope',
        'CoursesServ',
        function($scope, CoursesServ){
            
            //these examples won't demonstrate the .query function, this is because based on our RESTful convention, we're always going to get back an object map, rather than an array. However you are free to explore
            
            //get all the courses, get is part of the $resource object
            CoursesServ.get(
                {},
                function(response){
                    //this is the success callback
                    console.log(response);
                },
                function(response){
                    //fail callback (will activate on 400 or 500 status codes)
                    console.log(response);
                }
            );
            
            //we can get a specific course, and pass in a parameter into the URL
            CoursesServ.get(
                { id: 2 },
                function(response){},
                function(response){}
            );
            
            //any parameters specified that was not also part of the URL actually end up becoming query strings
            CoursesServ.get(
                { limit: 10, offset: 10 }, //will result in api/courses/?limit=10&offset=10
                function(response){},
                function(response){}
            );
            
            //equivalent to POST
            CoursesServ.save(
                {},
                { //<- this is the payload data
                    courseName: '11 Weeks Weekly',
                    courseDate: '12th April 2013'
                },
                function(response){
                    //success function 
                    console.log(response.status); 
                },
                function(response){}
            );
            
            //now we're using our custom update method configured in the service
            CoursesServ.update(
                { id: 2 },
                { //<- this is the payload data
                    courseName: 'new name',
                    courseDate: '14th April 2013'
                },
                function(response){
                    //success function 
                    console.log(response.status); 
                },
                function(response){}
            );
            
            //and of course delete
            CoursesServ.remove(
                { id: 2 },
                function(response){},
                function(response){}
            );
            
        }
    ]);
";i:1;s:10:"javascript";i:2;N;}i:2;i:136785;}i:2535;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:136785;}i:2536;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:26:"All of the methods on the ";}i:2;i:139451;}i:2537;a:3:{i:0;s:18:"doublequoteopening";i:1;a:0:{}i:2;i:139477;}i:2538;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:9:"$resource";}i:2;i:139478;}i:2539;a:3:{i:0;s:18:"doublequoteclosing";i:1;a:0:{}i:2;i:139487;}i:2540;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:141:" object can be overwritten in its configuration. But sometimes you need a more granular control over your XHR requests. You can then use the ";}i:2;i:139488;}i:2541;a:3:{i:0;s:18:"doublequoteopening";i:1;a:0:{}i:2;i:139629;}i:2542;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:5:"$http";}i:2;i:139630;}i:2543;a:3:{i:0;s:18:"doublequoteclosing";i:1;a:0:{}i:2;i:139635;}i:2544;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:17:" service instead.";}i:2;i:139636;}i:2545;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:139653;}i:2546;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:139653;}i:2547;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:277:"Remember that $resource works with objects, it will always expect either an object to come back, or an array of objects (if it is $resource.query). You cannot have array of arrays, and array of primitives won't work either. However this can be overwritten, and you can use the ";}i:2;i:139655;}i:2548;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:38:"http://docs.angularjs.org/api/ng.$http";i:1;s:13:"$http service";}i:2;i:139932;}i:2549;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:43:" instead if you need more granular control.";}i:2;i:139988;}i:2550;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:140031;}i:2551;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:140033;}i:2552;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:49:"HTTP Intercepting via Run & Config Block Services";i:1;i:4;i:2;i:140033;}i:2;i:140033;}i:2553;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:4;}i:2;i:140033;}i:2554;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:140033;}i:2555;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:95:"Services is also where you can append configuration and run blocks to the application. In your ";}i:2;i:140092;}i:2556;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:140187;}i:2557;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:6:"app.js";}i:2;i:140189;}i:2558;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:140195;}i:2559;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:395:" file, you have global configuration and global run blocks. These can actually be abstracted to the services, and they just have to be loaded as dependencies to the main module. In fact you can have multiple configuration and run blocks across multiple services and they will all be combined when the application is initialised. This is important as you may wish to have services that intercept ";}i:2;i:140197;}i:2560;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:4:"HTTP";}i:2;i:140592;}i:2561;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:44:" requests and responses. The application of ";}i:2;i:140596;}i:2562;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:4:"HTTP";}i:2;i:140640;}i:2563;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:61:" intercepting includes authentication (login/logout events), ";}i:2;i:140644;}i:2564;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:4:"HTTP";}i:2;i:140705;}i:2565;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:64:" error handling, and state transition based on the state of the ";}i:2;i:140709;}i:2566;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:4:"HTTP";}i:2;i:140773;}i:2567;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:45:" request, or any application events based on ";}i:2;i:140777;}i:2568;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:4:"HTTP";}i:2;i:140822;}i:2569;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:99:" status. The intercepting process can only be done in the configuration block, as this is when the ";}i:2;i:140826;}i:2570;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:140925;}i:2571;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:13:"$httpProvider";}i:2;i:140927;}i:2572;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:140940;}i:2573;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:130:" is available for configuration, however global event broad casting can only be done in the run configuration as that is when the ";}i:2;i:140942;}i:2574;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:141072;}i:2575;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:10:"$rootScope";}i:2;i:141074;}i:2576;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:141084;}i:2577;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:14:" is available.";}i:2;i:141086;}i:2578;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:141100;}i:2579;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:141100;}i:2580;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:77:"Here is an example of a configuration block inside a service that intercepts ";}i:2;i:141102;}i:2581;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:4:"HTTP";}i:2;i:141179;}i:2582;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:28:" responses and checks their ";}i:2;i:141183;}i:2583;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:4:"HTTP";}i:2;i:141211;}i:2584;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:178:" status, and creates a corresponding array of messages. These messages are then configured as value based services and added to the dependency injector. This is done through the ";}i:2;i:141215;}i:2585;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:43:"http://docs.angularjs.org/api/AUTO.$provide";i:1;s:18:""$provide" service";}i:2;i:141393;}i:2586;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:182:", which is the actually the backbone of creating services to be dependency injected. When you write a service on a module, those are just convenience functions that actually use the ";}i:2;i:141459;}i:2587;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:141641;}i:2588;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:8:"$provide";}i:2;i:141643;}i:2589;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:141651;}i:2590;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:49:" in the background. You should investigate these ";}i:2;i:141653;}i:2591;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:39:"http://slides.wesalvaro.com/20121113/#/";i:1;s:49:"slides on the "$provide" service to find out more";}i:2;i:141702;}i:2592;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:".";}i:2;i:141795;}i:2593;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:141796;}i:2594;a:3:{i:0;s:4:"file";i:1;a:3:{i:0;s:7016:"
'use strict';

/**
 * Response Handler for Error Codes across all HTTP requests to show an alert box!
**/
angular.module('Services')
    .config([ //<-  config phase to acquire the $httpProvider service
        '$provide', //<- the provide service is only available in the configuration block, it allows the creation of services, factories, providers, values, constants and decorators
        '$httpProvider', //<- you can only inject Providers in config blocks
        function($provide, $httpProvider){
        
            //model variable...
            var httpMessages = [];
            
            //bind the httpMessages array to the httpMessages key so it can be dependency injected
            //the $provide configures the dependency injector, this is because we don't actually want to dependency inject this ErrorResponse handler, but instead it's output
            $provide.value('httpMessages', httpMessages);
            
            //we are using the responseInterceptors function to push in interceptors, as there could be multiple interceptors
            //$q is a promise implementation allowing us to pass a promise of a future value even if it doesn't exist currently
            $httpProvider.responseInterceptors.push(['$q', function($q) {
            
                //we are in the interceptor that is being added to the list of responseInterceptors
                
                //we have to return a function that accepts a promise parameter, and return the original or new promise
                
                return function(promise) {
                
                    //here we are using a promise and applying a then function 
                    return promise.then( //<- then is part of the promise API
                        function(successResponse) { //<- successResponse is actually being passed in from previous interceptors, so you can stack interceptors
                            
                            //we only want to show anything that wasn't a GET based request
                            //these allow you show messages, you don't have to show these types though (because usually not required)
                            
                            //here I'm intercepting the HTTP method for the success, because the same 200 code could be used for multiple success states
                            switch(successResponse.config.method.toUpperCase()){
                                case 'GET':
                                    httpMessages.push({
                                        message: 'Successfully Received',
                                        type: 'success'
                                    });
                                    break;
                                case 'POST':
                                    httpMessages.push({
                                        message: 'Successfully Posted',
                                        type: 'success'
                                    });
                                    break;
                                case 'PUT':
                                    httpMessages.push({
                                        message: 'Successfully Updated',
                                        type: 'success'
                                    });
                                    break;
                                case 'DELETE':
                                    httpMessages.push({
                                        message: 'Sucessfully Deleted',
                                        type: 'success'
                                    });
                                    break;
                            }
                            
                            
                            return successResponse;

                        },
                        function(failureResponse) {
                            
                            //here I'm intercepting the actual HTTP status
                            switch(failureResponse.status){
                                case 400: //show validation error messages then!
                                    httpMessages.push({
                                        message: 'Validation failed, try tweaking your submission.',
                                        type: 'failure'
                                    });
                                    break;
                                case 401: //for ionauth authentication, will need to redirect to login screen, or modal box
                                    httpMessages.push({
                                        message: 'Unauthorised request, try logging in.',
                                        type: 'failure'
                                    });
                                    break;
                                case 403: //returned by server for resources the user should not be able to access directly
                                    httpMessages.push({
                                        message: 'You can\'t access this.',
                                        type: 'failure'
                                    });
                                    break;
                                case 404:
                                    httpMessages.push({
                                        message: '404, sorry could not find what you were looking for.',
                                        type: 'failure'
                                    });
                                    break;
                                case 405:
                                    httpMessages.push({
                                        message: 'The requested method was incompatible with the requested resource.',
                                        type: 'failure'
                                    });
                                    break;
                                case 500:
                                    httpMessages.push({
                                        message: 'There was a server error, try again later, or contact the owners.',
                                        type: 'failure'
                                    });
                                    break;
                                default:
                                    httpMessages.push({
                                        message: failureResponse.status + ' General error processing the request',
                                        type: 'failure'
                                    });
                            }
                            
                            //we have return the $q promise as it will be passed onto to other interceptors
                            return $q.reject(failureResponse);
                            
                        }
                    );
                    
                };
                
            }]);
        
        }
    ]);
";i:1;s:10:"javascript";i:2;s:24:"ErrorResponse.Service.js";}i:2;i:141803;}i:2595;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:148865;}i:2596;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:24:"Promises in Interceptors";i:1;i:4;i:2;i:148865;}i:2;i:148865;}i:2597;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:4;}i:2;i:148865;}i:2598;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:148865;}i:2599;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:4:"The ";}i:2;i:148899;}i:2600;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:4:"HTTP";}i:2;i:148903;}i:2601;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:26:" interceptors rely on the ";}i:2;i:148907;}i:2602;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:35:"http://docs.angularjs.org/api/ng.$q";i:1;s:31:""$q" implementation of promises";}i:2;i:148933;}i:2603;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:2:". ";}i:2;i:149004;}i:2604;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:40:"http://wiki.commonjs.org/wiki/Promises/A";i:1;s:8:"Promises";}i:2;i:149006;}i:2605;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:346:" were designed to solve the problem of asynchronous programming. When we do asynchronous operations and parallel operations on a single threaded environment like browser based javascript, any subsequent follow up operations need to be ran as a callback. The problem comes when there are multiple subsequent follow ups, it forces us to write in a ";}i:2;i:149059;}i:2606;a:3:{i:0;s:13:"interwikilink";i:1;a:4:{i:0;s:29:"wp>Continuation-passing style";i:1;s:26:"continuation passing style";i:2;s:2:"wp";i:3;s:26:"Continuation-passing style";}i:2;i:149405;}i:2607;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:147:", essentially the code becomes a mountain of callbacks calling callbacks. This is error prone, ugly and difficult to maintain. Promises provide an ";}i:2;i:149465;}i:2608;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"API";}i:2;i:149612;}i:2609;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:39:" that abstracts away the callback mess.";}i:2;i:149615;}i:2610;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:149654;}i:2611;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:149654;}i:2612;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:336:"Interceptors are essentially a callback chain for an asynchronous operation which in this case is an XHR request. So we're essentially pushing an interceptor function to the array of interceptors, because there could be multiple interceptors. Each interceptor function returns a function that accepts a promise and returns the promise. ";}i:2;i:149656;}i:2613;a:3:{i:0;s:13:"interwikilink";i:1;a:4:{i:0;s:23:"wp>Futures and promises";i:1;s:94:"The promise variable represents the eventual future value that has not yet been fully computed";i:2;s:2:"wp";i:3;s:20:"Futures and promises";}i:2;i:149992;}i:2614;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:256:". The promise parameter is passed in from the previous returned promise from the previous interceptor function. The current returned promise will be passed to the next promise parameter in the next interceptor. This allows a clear chaining of interceptors.";}i:2;i:150114;}i:2615;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:150370;}i:2616;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:150370;}i:2617;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:19:"These promises are ";}i:2;i:150372;}i:2618;a:3:{i:0;s:18:"doublequoteopening";i:1;a:0:{}i:2;i:150391;}i:2619;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:8:"thenable";}i:2;i:150392;}i:2620;a:3:{i:0;s:18:"doublequoteclosing";i:1;a:0:{}i:2;i:150400;}i:2621;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:22:" meaning we can use a ";}i:2;i:150401;}i:2622;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:150423;}i:2623;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:6:"then()";}i:2;i:150425;}i:2624;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:150431;}i:2625;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:447:" function that accepts a success function parameter and fail function parameter. If a success function determines that its input is incorrect, in can reject the response, and so in the next promise, the control flow will jump to the fail function. A fail function can handle the response and then return a normal response indicating that it has handled the failure, so in the next promise, the control flow will jump back to the success function. ";}i:2;i:150433;}i:2626;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:65:"http://domenic.me/2012/10/14/youre-missing-the-point-of-promises/";i:1;s:154:"You can start to see that promises are not a mechanism for chaining up callback functions, but are also intended to provide an elegant control flow system";}i:2;i:150880;}i:2627;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:230:", so successes can throw errors which will be caught by the next failure which can handle it and pass it to the next success. If a success simply passes the success, than on the next control flow, it will stay on the success lane.";}i:2;i:151104;}i:2628;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:151334;}i:2629;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:151334;}i:2630;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:7:"In the ";}i:2;i:151336;}i:2631;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:151343;}i:2632;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:24:"ErrorResponse.Service.js";}i:2;i:151345;}i:2633;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:151369;}i:2634;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:279:" example, we're simply adding a message based on the status of the request, therefore we're not mutating the response in any way. So we're not jumping any lanes, that's why the success function simply returns back the response, and in the failure function, we return a rejection.";}i:2;i:151371;}i:2635;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:151650;}i:2636;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:151650;}i:2637;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:39:"All the functions that are part of the ";}i:2;i:151652;}i:2638;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:151691;}i:2639;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:6:"then()";}i:2;i:151693;}i:2640;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:151699;}i:2641;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:96:" in the promise will be evaluated one by one (synchronously) when the initial XHR handler calls ";}i:2;i:151701;}i:2642;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:151797;}i:2643;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:12:"$q.resolve()";}i:2;i:151799;}i:2644;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:151811;}i:2645;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:74:". Until then however, these functions are simply defined but not executed.";}i:2;i:151813;}i:2646;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:151887;}i:2647;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:151887;}i:2648;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:94:"There will be more on promises, continuation passing style and asynchronous operations in the ";}i:2;i:151889;}i:2649;a:3:{i:0;s:9:"locallink";i:1;a:2:{i:0;s:31:"events_asynchronous_programming";i:1;s:43:"Events and Asynchronous Programming section";}i:2;i:151983;}i:2650;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:55:", you just have to accept the way it's being used here.";}i:2;i:152063;}i:2651;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:152119;}i:2652;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:152119;}i:2653;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:14:"Authentication";i:1;i:2;i:2;i:152119;}i:2;i:152119;}i:2654;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:2;}i:2;i:152119;}i:2655;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:152119;}i:2656;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:385:"Authentication on the client side depends on your server side configuration of authentication. Supporters of single page applications usually recommend using Oauth 2.0 for your authentication schemes, as that allow multiple client consumers of your server side application, especially since session based cookies only work on the browser. In that case you should look into integrating ";}i:2;i:152147;}i:2657;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:51:"https://github.com/andreassolberg/jso/tree/version2";i:1;s:76:"JSO library, which is a javascript library for managing Oauth authentication";}i:2;i:152532;}i:2658;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:23:". You should wrap it's ";}i:2;i:152664;}i:2659;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"API";}i:2;i:152687;}i:2660;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:23:" in an Angular service.";}i:2;i:152690;}i:2661;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:152713;}i:2662;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:152713;}i:2663;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:137:"However if you're working on a session based cookie authentication system, client side authentication is simply a matter of intercepting ";}i:2;i:152715;}i:2664;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:4:"HTTP";}i:2;i:152852;}i:2665;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:57:" responses for their status code, we need to check for a ";}i:2;i:152856;}i:2666;a:3:{i:0;s:13:"interwikilink";i:1;a:4:{i:0;s:11:"wp>HTTP 403";i:1;s:15:"403 status code";i:2;s:2:"wp";i:3;s:8:"HTTP 403";}i:2;i:152913;}i:2667;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:142:". This means that the user tried to access a resource that needed authentication. Note that the 403 is not the same as a 401. 401 is used for ";}i:2;i:152944;}i:2668;a:3:{i:0;s:13:"interwikilink";i:1;a:4:{i:0;s:30:"wp>Basic access authentication";i:1;s:25:"HTTP based authentication";i:2;s:2:"wp";i:3;s:27:"Basic access authentication";}i:2;i:153086;}i:2669;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:204:". If you have a session based authentication system, so 401 is not suitable, you will need to respond with a 403 status code on the server. Once Angular detects this 403 code, you either save his current ";}i:2;i:153146;}i:2670;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"URL";}i:2;i:153350;}i:2671;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:717:" state, redirect to a login page, when they login, redirect back to where they were. However if you have more complex UI states, where one could be on a page where there are publicly available resources and authenticated resources present at the same time, you may need to save all the 403 requests, display a login modal box, and when the person logs in, resend all the 403 requests so that the person can keep working on the same page. One example would be like a dashboard in which someone clicks on a button that opens up some authenticated resource, this would show a login modal box, when the person logs in, the modal box disappears, the request is resent, and the resource comes back properly from the server.";}i:2;i:153353;}i:2672;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:154070;}i:2673;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:154070;}i:2674;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:37:"We'll attempt to do both styles here:";}i:2;i:154072;}i:2675;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:154110;}i:2676;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:154110;}i:2677;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:9:"BOM & DOM";i:1;i:2;i:2;i:154110;}i:2;i:154110;}i:2678;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:2;}i:2;i:154110;}i:2679;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:154110;}i:2680;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:17:"Using jQuery for ";}i:2;i:154133;}i:2681;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"DOM";}i:2;i:154150;}i:2682;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:23:" manipulation or jQLite";}i:2;i:154153;}i:2683;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:154176;}i:2684;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:154176;}i:2685;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:23:"But also talk about BOM";}i:2;i:154178;}i:2686;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:154201;}i:2687;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:154201;}i:2688;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:13:"Cookies.. etc";}i:2;i:154203;}i:2689;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:154216;}i:2690;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:154216;}i:2691;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:15:"Location object";}i:2;i:154218;}i:2692;a:3:{i:0;s:6:"entity";i:1;a:1:{i:0;s:3:"...";}i:2;i:154233;}i:2693;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:154236;}i:2694;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:154238;}i:2695;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:33:"Events & Asynchronous Programming";i:1;i:2;i:2;i:154238;}i:2;i:154238;}i:2696;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:2;}i:2;i:154238;}i:2697;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:154238;}i:2698;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:230:"Firstly Javascript is always synchronous. The event loop, is a long running queue of tasks to do. The only parts of javascript that is asynchronous is the I/O APIs exposed by the browser and the setTimeout and setInterval methods.";}i:2;i:154285;}i:2699;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:154515;}i:2700;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:154515;}i:2701;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:40:"Also Asynchronous NOT EQUAL concurrency.";}i:2;i:154517;}i:2702;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:154557;}i:2703;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:154557;}i:2704;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:32:"Also managing asynchronous code:";}i:2;i:154559;}i:2705;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:154591;}i:2706;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:154591;}i:2707;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:79:"1. Continuation Passing Style of Callbacks (usually when using APIs/SetTimeOut)";}i:2;i:154593;}i:2708;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:154672;}i:2709;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:154672;}i:2710;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:24:"2. Events (either using ";}i:2;i:154674;}i:2711;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"DOM";}i:2;i:154698;}i:2712;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:234:" based events (include the custom events.. etc), when the processing and handling needs to be distributed and isolated like Pub/Sub) OR using a custom event bus which simply keeps a list of callbacks to call when it receives an event.";}i:2;i:154701;}i:2713;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:154935;}i:2714;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:154935;}i:2715;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:35:"3. Using promises - Provides an an ";}i:2;i:154937;}i:2716;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"API";}i:2;i:154972;}i:2717;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:14:" to manage CPS";}i:2;i:154975;}i:2718;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:154989;}i:2719;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:154989;}i:2720;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:66:"4. Uses async.js (to manage callback chaining) - Provides another ";}i:2;i:154991;}i:2721;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"API";}i:2;i:155057;}i:2722;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:14:" to manage CPS";}i:2;i:155060;}i:2723;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:155074;}i:2724;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:155074;}i:2725;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:178:"5. Using setTimeout(fn, 0) or $timeout(fn, 0) to yield the function, or do bits and pieces code breaking up the execution of your large function to allow the browser to catch up)";}i:2;i:155076;}i:2726;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:155254;}i:2727;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:155254;}i:2728;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:95:"For true concurrency: look at web workers. The code is still executed synchronously in the end.";}i:2;i:155256;}i:2729;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:155351;}i:2730;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:155351;}i:2731;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:26:"Priority is important too!";}i:2;i:155353;}i:2732;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:155379;}i:2733;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:155379;}i:2734;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:49:"http://ejohn.org/blog/how-javascript-timers-work/";i:1;N;}i:2;i:155382;}i:2735;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:155431;}i:2736;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:155431;}i:2737;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:97:"http://stackoverflow.com/questions/4574940/settimeout-with-zero-delay-used-often-in-web-pages-why";i:1;N;}i:2;i:155433;}i:2738;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:155530;}i:2739;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:155530;}i:2740;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:80:"http://stackoverflow.com/questions/779379/why-is-settimeoutfn-0-sometimes-useful";i:1;N;}i:2;i:155532;}i:2741;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:155612;}i:2742;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:155612;}i:2743;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:90:"http://stackoverflow.com/questions/3294281/asynchronous-programming-in-javascript-not-ajax";i:1;N;}i:2;i:155614;}i:2744;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:155704;}i:2745;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:155704;}i:2746;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:120:"http://stackoverflow.com/questions/8982489/how-does-asynchronous-programming-work-in-a-single-threaded-programming-model";i:1;N;}i:2;i:155706;}i:2747;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:155826;}i:2748;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:155826;}i:2749;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:54:"http://www.html5rocks.com/en/tutorials/async/deferred/";i:1;N;}i:2;i:155828;}i:2750;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:155882;}i:2751;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:155882;}i:2752;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:18:"Links on promises:";}i:2;i:155884;}i:2753;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:155902;}i:2754;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:155902;}i:2755;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:127:"http://www.slideshare.net/domenicdenicola/callbacks-promises-and-coroutines-oh-my-the-evolution-of-asynchronicity-in-javascript";i:1;N;}i:2;i:155904;}i:2756;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:156031;}i:2757;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:156031;}i:2758;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:117:"http://stackoverflow.com/questions/6801283/what-are-the-differences-between-deferred-promise-and-future-in-javascript";i:1;N;}i:2;i:156033;}i:2759;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:3:"
'
";}i:2;i:156150;}i:2760;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:59:"http://flaviocopes.com/deferred-and-promises-in-javascript/";i:1;N;}i:2;i:156153;}i:2761;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:156212;}i:2762;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:156212;}i:2763;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:103:"http://blogs.msdn.com/b/ie/archive/2011/09/11/asynchronous-programming-in-javascript-with-promises.aspx";i:1;N;}i:2;i:156214;}i:2764;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:156317;}i:2765;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:156317;}i:2766;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:77:"https://github.com/kriskowal/uncommonjs/blob/master/promises/specification.md";i:1;N;}i:2;i:156319;}i:2767;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:156396;}i:2768;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:156396;}i:2769;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:58:"http://www.javascriptturnsmeon.com/promises-in-javascript/";i:1;N;}i:2;i:156398;}i:2770;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:156456;}i:2771;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:156456;}i:2772;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:60:"http://blog.thepete.net/blog/2011/07/02/javascript-promises/";i:1;N;}i:2;i:156458;}i:2773;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:156518;}i:2774;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:156518;}i:2775;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:60:"http://blog.danielpecos.com/2013/01/javascript-promises-101/";i:1;N;}i:2;i:156520;}i:2776;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:156580;}i:2777;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:156580;}i:2778;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:65:"http://domenic.me/2012/10/14/youre-missing-the-point-of-promises/";i:1;N;}i:2;i:156582;}i:2779;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:156647;}i:2780;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:156647;}i:2781;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:127:"http://www.slideshare.net/domenicdenicola/callbacks-promises-and-coroutines-oh-my-the-evolution-of-asynchronicity-in-javascript";i:1;N;}i:2;i:156649;}i:2782;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:156776;}i:2783;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:156776;}i:2784;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:103:"http://blogs.msdn.com/b/ie/archive/2011/09/11/asynchronous-programming-in-javascript-with-promises.aspx";i:1;N;}i:2;i:156778;}i:2785;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:0:"";}i:2;i:156881;}i:2786;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:156882;}i:2787;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:156882;}i:2788;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:4:"AJAX";i:1;i:2;i:2;i:156882;}i:2;i:156882;}i:2789;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:2;}i:2;i:156882;}i:2790;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:156882;}i:2791;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:4:"Raw ";}i:2;i:156900;}i:2792;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:4:"AJAX";}i:2;i:156904;}i:2793;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:15:" XHR open.. etc";}i:2;i:156908;}i:2794;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:156923;}i:2795;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:156923;}i:2796;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:27:"Long polling, short polling";}i:2;i:156925;}i:2797;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:156952;}i:2798;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:156954;}i:2799;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:12:"SEO for AJAX";i:1;i:3;i:2;i:156954;}i:2;i:156954;}i:2800;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:156954;}i:2801;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:156954;}i:2802;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:4:"HTML";}i:2;i:156979;}i:2803;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:10:" fragments";}i:2;i:156983;}i:2804;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:156993;}i:2805;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:156993;}i:2806;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:11:"Year of Moo";}i:2;i:156995;}i:2807;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:157006;}i:2808;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:157008;}i:2809;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:10:"HTML5 APIs";i:1;i:2;i:2;i:157008;}i:2;i:157008;}i:2810;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:2;}i:2;i:157008;}i:2811;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:157008;}i:2812;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:31:"Browser level (for other stuff)";}i:2;i:157032;}i:2813;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:157063;}i:2814;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:157063;}i:2815;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:26:"http://platform.html5.org/";i:1;s:18:"List of HTML5 APIs";}i:2;i:157065;}i:2816;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:157114;}i:2817;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:157116;}i:2818;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:19:"Client Side Storage";i:1;i:3;i:2;i:157116;}i:2;i:157116;}i:2819;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:157116;}i:2820;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:157116;}i:2821;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:161:"In the past before HTML5, the management of state/storage on the browser was limited to Browser Cache, Cookies, Headers, Query Parameters, or the Browser Daemon.";}i:2;i:157147;}i:2822;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:157308;}i:2823;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:157308;}i:2824;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:79:"However with HTML5, we have access to localStorage, IndexedDB, WebSQL and File ";}i:2;i:157310;}i:2825;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"API";}i:2;i:157389;}i:2826;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:".";}i:2;i:157392;}i:2827;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:157393;}i:2828;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:157395;}i:2829;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:21:"Concurrent Processing";i:1;i:3;i:2;i:157395;}i:2;i:157395;}i:2830;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:157395;}i:2831;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:157395;}i:2832;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:16:"Using WebWorkers";}i:2;i:157428;}i:2833;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:157445;}i:2834;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:157445;}i:2835;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:38:"Dependency Management & Script Loaders";i:1;i:2;i:2;i:157445;}i:2;i:157445;}i:2836;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:2;}i:2;i:157445;}i:2837;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:157445;}i:2838;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:71:"Dependency Injection in AngularJS, and structuring in terms of modules.";}i:2;i:157497;}i:2839;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:157568;}i:2840;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:157568;}i:2841;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:3:"AMD";}i:2;i:157570;}i:2842;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:157573;}i:2843;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:157573;}i:2844;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:20:"Require.js or HeadJS";}i:2;i:157575;}i:2845;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:157595;}i:2846;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:157595;}i:2847;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:84:"Performance of minification, so minification vs asynchronous! Can work with Angular.";}i:2;i:157597;}i:2848;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:157681;}i:2849;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:157681;}i:2850;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:47:"http://www.peterbe.com/plog/requirejs-vs-headjs";i:1;N;}i:2;i:157683;}i:2851;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:157730;}i:2852;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:157732;}i:2853;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:13:"Real Time Web";i:1;i:2;i:2;i:157732;}i:2;i:157732;}i:2854;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:2;}i:2;i:157732;}i:2855;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:157732;}i:2856;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:37:"Web Sockets using AutobahnJS and WAMP";}i:2;i:157759;}i:2857;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:157796;}i:2858;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:157796;}i:2859;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:40:"Operational Transformation using ShareJS";}i:2;i:157798;}i:2860;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:157838;}i:2861;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:157840;}i:2862;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:21:"Non-Browser Platforms";i:1;i:2;i:2;i:157840;}i:2;i:157840;}i:2863;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:2;}i:2;i:157840;}i:2864;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:157840;}i:2865;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:25:"Desktop: TideSDK or AppJS";}i:2;i:157875;}i:2866;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:157900;}i:2867;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:157900;}i:2868;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:32:"Mobile: Appcelerator or Phonegap";}i:2;i:157902;}i:2869;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:157934;}i:2870;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:157934;}i:2871;a:3:{i:0;s:12:"document_end";i:1;a:0:{}i:2;i:157934;}}