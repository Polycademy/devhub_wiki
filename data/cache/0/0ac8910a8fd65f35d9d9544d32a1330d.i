a:952:{i:0;a:3:{i:0;s:14:"document_start";i:1;a:0:{}i:2;i:0;}i:1;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:37:"Javascript - Client Side Architecture";i:1;i:1;i:2;i:1;}i:2;i:1;}i:2;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:1;}i:2;i:1;}i:3;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:1;}i:4;a:3:{i:0;s:13:"interwikilink";i:1;a:4:{i:0;s:13:"wp>JavaScript";i:1;s:10:"Javascript";i:2;s:2:"wp";i:3;s:10:"JavaScript";}i:2;i:54;}i:5;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:359:" is an interpreted programming language. It was designed to be executed on client side web browsers in order to provide dynamic functionality, alter the user interface dynamically, and provide asynchronous communication to the server. However the language has grown in popularity is now available across many platforms including server side development using ";}i:2;i:82;}i:6;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:18:"http://nodejs.org/";i:1;s:7:"Node.js";}i:2;i:441;}i:7;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:27:", mobile development using ";}i:2;i:471;}i:8;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:20:"http://phonegap.com/";i:1;s:8:"Phonegap";}i:2;i:498;}i:9;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:61:" and other HTML5 technologies, and desktop development using ";}i:2;i:531;}i:10;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:30:"https://github.com/appjs/appjs";i:1;s:5:"AppJS";}i:2;i:592;}i:11;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:5:" and ";}i:2;i:632;}i:12;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:50:"http://www.appcelerator.com/platform/titanium-sdk/";i:1;s:12:"Titanium SDK";}i:2;i:637;}i:13;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:145:". Therefore one can see that javascript is probably the only truly ubiquitous programming language, and it is definitely the language of the web.";}i:2;i:704;}i:14;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:849;}i:15;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:849;}i:16;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:247:"Javascript is a multi-paradigm language, that contains all of the features of a dynamically interpreted language such as weak typing. It can be written in an object oriented manner, imperative or in a functional manner. It's object inheritance is ";}i:2;i:851;}i:17;a:3:{i:0;s:13:"interwikilink";i:1;a:4:{i:0;s:30:"wp>Prototype-based programming";i:1;s:15:"prototype based";i:2;s:2:"wp";i:3;s:27:"Prototype-based programming";}i:2;i:1098;}i:18;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:87:", which means there's no such thing as a class. The syntax was inspired by C just like ";}i:2;i:1148;}i:19;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"PHP";}i:2;i:1235;}i:20;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:14:", however the ";}i:2;i:1238;}i:21;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:47:"http://javascript.crockford.com/javascript.html";i:1;s:32:"language is much more functional";}i:2;i:1252;}i:22;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:".";}i:2;i:1336;}i:23;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:1337;}i:24;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:1337;}i:25;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:41:"In traditional non-threaded environment, ";}i:2;i:1339;}i:26;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:40:"http://stackoverflow.com/a/748189/582917";i:1;s:30:"code is executed synchronously";}i:2;i:1380;}i:27;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:203:". In a multi-threaded environment, code can be executed in parallel. Javascript is mainly operated inside a browser which offers a single thread of execution, therefore javascript is not multi-threaded (";}i:2;i:1455;}i:28;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:54:"http://www.html5rocks.com/en/tutorials/workers/basics/";i:1;s:22:"except for Web Workers";}i:2;i:1658;}i:29;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:40:"). This presents a bit of a problem for ";}i:2;i:1739;}i:30;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"GUI";}i:2;i:1779;}i:31;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:137:" programming, which is what javascript is mainly used for in browsers. Any complex or long running process in javascript will freeze the ";}i:2;i:1782;}i:32;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"GUI";}i:2;i:1919;}i:33;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:209:" making it non responsive. For javascript to be dynamic and good at rendering GUIs, it needs to be asynchronous. But multi-threading is a complex programming paradigm and it is a bit of an overkill for simple ";}i:2;i:1922;}i:34;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"GUI";}i:2;i:2131;}i:35;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:89:" applications. Therefore browsers offered event driven asynchronous APIs such as XHR for ";}i:2;i:2134;}i:36;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:4:"AJAX";}i:2;i:2223;}i:37;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:434:" requests, and the javascript language itself can be event driven. This means that certain code blocks such as functions are bound to a particular event or signal, so the structure of the written code does not map directly to the flow of execution. The browser also offers an event handler that is running an event loop, this allows javascript to hook into the event loop through asynchronous callbacks. This basically means that the ";}i:2;i:2227;}i:38;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:87:"http://stackoverflow.com/questions/8963209/does-async-programming-means-multi-threading";i:1;s:116:"flow of execution can move on to another function or statement without waiting for the previous function to complete";}i:2;i:2661;}i:39;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:".";}i:2;i:2869;}i:40;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:2870;}i:41;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:2870;}i:42;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:104:"It is recommended while working through javascript, to practice them using the real time coding service ";}i:2;i:2872;}i:43;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:21:"http://beta.plnkr.co/";i:1;s:7:"Plunker";}i:2;i:2976;}i:44;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:168:". Also make sure to have your Firebug or Chrome web developer tools open to the console tab. You'll be able to see logs and write javascript directly into your browser.";}i:2;i:3009;}i:45;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:3177;}i:46;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:3179;}i:47;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:26:"Javascript Implementations";i:1;i:2;i:2;i:3179;}i:2;i:3179;}i:48;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:2;}i:2;i:3179;}i:49;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:3179;}i:50;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:103:"Javascript on the client side actually consists of three parts. The ECMAScript, Document Object Model (";}i:2;i:3219;}i:51;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"DOM";}i:2;i:3322;}i:52;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:37:") and the Browser Object Model (BOM).";}i:2;i:3325;}i:53;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:3362;}i:54;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:3362;}i:55;a:3:{i:0;s:13:"interwikilink";i:1;a:4:{i:0;s:13:"wp>ECMAScript";i:1;s:10:"ECMAScript";i:2;s:2:"wp";i:3;s:10:"ECMAScript";}i:2;i:3364;}i:56;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:416:" is the foundation of the javascript language, but it is independent from the browser environment. Think of it as the agreed upon constitution of how javascript interpreters should work. ECMAScript was created in order to provide interoperability between different browsers, or else every browser would have their own versions of client side scripting languages! At its core it specifies these aspects of javascript:";}i:2;i:3392;}i:57;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:3809;}i:58;a:3:{i:0;s:10:"listu_open";i:1;a:0:{}i:2;i:3809;}i:59;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:3809;}i:60;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:3809;}i:61;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:7:" Syntax";}i:2;i:3813;}i:62;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:3820;}i:63;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:3820;}i:64;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:3820;}i:65;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:3820;}i:66;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:6:" Types";}i:2;i:3824;}i:67;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:3830;}i:68;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:3830;}i:69;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:3830;}i:70;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:3830;}i:71;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:11:" Statements";}i:2;i:3834;}i:72;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:3845;}i:73;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:3845;}i:74;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:3845;}i:75;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:3845;}i:76;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:9:" Keywords";}i:2;i:3849;}i:77;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:3858;}i:78;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:3858;}i:79;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:3858;}i:80;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:3858;}i:81;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:15:" Reserved words";}i:2;i:3862;}i:82;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:3877;}i:83;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:3877;}i:84;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:3877;}i:85;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:3877;}i:86;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:10:" Operators";}i:2;i:3881;}i:87;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:3891;}i:88;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:3891;}i:89;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:3891;}i:90;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:3891;}i:91;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:8:" Objects";}i:2;i:3895;}i:92;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:3903;}i:93;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:3903;}i:94;a:3:{i:0;s:11:"listu_close";i:1;a:0:{}i:2;i:3903;}i:95;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:3903;}i:96;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:133:"ECMAScript is released in editions. Most modern browsers support ECMAScript 5th edition. However work is currently being done on the ";}i:2;i:3905;}i:97;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:46:"http://espadrine.github.com/New-In-A-Spec/es6/";i:1;s:25:"6th edition named Harmony";}i:2;i:4038;}i:98;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:160:" which may be fully supported by modern browsers in a year or two. You can find out the compatibility of different browsers for ES5 or ES6 via these two charts:";}i:2;i:4114;}i:99;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:4275;}i:100;a:3:{i:0;s:10:"listu_open";i:1;a:0:{}i:2;i:4275;}i:101;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:4275;}i:102;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:4275;}i:103;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:" ";}i:2;i:4279;}i:104;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:42:"http://kangax.github.com/es5-compat-table/";i:1;s:23:"ES5 Compatibility Chart";}i:2;i:4280;}i:105;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:4350;}i:106;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:4350;}i:107;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:4350;}i:108;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:4350;}i:109;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:" ";}i:2;i:4354;}i:110;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:46:"http://kangax.github.com/es5-compat-table/es6/";i:1;s:23:"ES6 Compatibility Chart";}i:2;i:4355;}i:111;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:4429;}i:112;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:4429;}i:113;a:3:{i:0;s:11:"listu_close";i:1;a:0:{}i:2;i:4429;}i:114;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:8:"imagebox";i:1;a:2:{i:0;i:1;i:1;a:11:{s:4:"type";s:13:"internalmedia";s:3:"src";s:41:":web_application_development:dom-demo.jpg";s:5:"title";s:0:"";s:5:"align";s:5:"right";s:5:"width";s:3:"200";s:6:"height";N;s:5:"cache";s:5:"cache";s:7:"linking";s:7:"details";s:1:"w";s:3:"200";s:6:"detail";s:141:"/lib/exe/detail.php?id=web_application_development%3Ajavascript_-_client_side_architecture&amp;media=web_application_development:dom-demo.jpg";s:5:"exist";b:1;}}i:2;i:1;i:3;s:50:"[{{ :web_application_development:dom-demo.jpg?200|";}i:2;i:4431;}i:115;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:8:"imagebox";i:1;a:2:{i:0;i:3;i:1;s:16:"Demostration of ";}i:2;i:3;i:3;s:16:"Demostration of ";}i:2;i:4481;}i:116;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"DOM";}i:2;i:4497;}i:117;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:8:"imagebox";i:1;a:2:{i:0;i:4;i:1;s:3:"}}]";}i:2;i:4;i:3;s:3:"}}]";}i:2;i:4500;}i:118;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:4500;}i:119;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:4:"The ";}i:2;i:4505;}i:120;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"DOM";}i:2;i:4509;}i:121;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:15:" refers to the ";}i:2;i:4512;}i:122;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"W3C";}i:2;i:4527;}i:123;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:21:" specification on an ";}i:2;i:4530;}i:124;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"API";}i:2;i:4551;}i:125;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:38:" that allows javascript to manipulate ";}i:2;i:4554;}i:126;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:4:"HTML";}i:2;i:4592;}i:127;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:38:". It was necessary to standardise the ";}i:2;i:4596;}i:128;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"DOM";}i:2;i:4634;}i:129;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:96:" across browsers or else the different browsers would have different ways of representing their ";}i:2;i:4637;}i:130;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:4:"HTML";}i:2;i:4733;}i:131;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:47:" programmatically. Unfortunately even with the ";}i:2;i:4737;}i:132;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"DOM";}i:2;i:4784;}i:133;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:128:", browsers behave differently, and hence is why we have the jQuery library that abstracts the granular details. Essentially the ";}i:2;i:4787;}i:134;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:4:"HTML";}i:2;i:4915;}i:135;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:122:" structure is converted into a hierarchical graph of nodes. These graphs look like upside down trees. You can inspect the ";}i:2;i:4919;}i:136;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:26:"https://getfirebug.com/dom";i:1;s:14:"DOM in Firebug";}i:2;i:5041;}i:137;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:11:" using the ";}i:2;i:5086;}i:138;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"DOM";}i:2;i:5097;}i:139;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:18:" panel, or in the ";}i:2;i:5100;}i:140;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:4:"HTML";}i:2;i:5118;}i:141;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:33:" side panel, which will give the ";}i:2;i:5122;}i:142;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"DOM";}i:2;i:5155;}i:143;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:19:" properties of any ";}i:2;i:5158;}i:144;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:4:"HTML";}i:2;i:5177;}i:145;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:29:" node/tag you are inspecting.";}i:2;i:5181;}i:146;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:5210;}i:147;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:5210;}i:148;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:4:"The ";}i:2;i:5212;}i:149;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"DOM";}i:2;i:5216;}i:150;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:61:" includes everything that would be required to represent the ";}i:2;i:5219;}i:151;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:4:"HTML";}i:2;i:5280;}i:152;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:24:", so if all you was the ";}i:2;i:5284;}i:153;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"DOM";}i:2;i:5308;}i:154;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:45:", it could easily be converted back into the ";}i:2;i:5311;}i:155;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:4:"HTML";}i:2;i:5356;}i:156;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:62:". That means the name, content, attributes and even styles of ";}i:2;i:5360;}i:157;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:4:"HTML";}i:2;i:5422;}i:158;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:59:" tags are all computed and encoded and accessible from the ";}i:2;i:5426;}i:159;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"DOM";}i:2;i:5485;}i:160;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:" ";}i:2;i:5488;}i:161;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"API";}i:2;i:5489;}i:162;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:6:". The ";}i:2;i:5492;}i:163;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"DOM";}i:2;i:5498;}i:164;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:73:" specifications have gone through 3 levels. Most modern browsers support ";}i:2;i:5501;}i:165;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"DOM";}i:2;i:5574;}i:166;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:15:" level 2. This ";}i:2;i:5577;}i:167;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"DOM";}i:2;i:5592;}i:168;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:21:" specification added:";}i:2;i:5595;}i:169;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:5617;}i:170;a:3:{i:0;s:10:"listu_open";i:1;a:0:{}i:2;i:5617;}i:171;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:5617;}i:172;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:5617;}i:173;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:" ";}i:2;i:5621;}i:174;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"DOM";}i:2;i:5622;}i:175;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:112:" Views — Describes interfaces to keep track of the various views of a document (the document before and after ";}i:2;i:5625;}i:176;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"CSS";}i:2;i:5737;}i:177;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:22:" styling, for example)";}i:2;i:5740;}i:178;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:5762;}i:179;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:5762;}i:180;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:5762;}i:181;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:5762;}i:182;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:" ";}i:2;i:5766;}i:183;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"DOM";}i:2;i:5767;}i:184;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:62:" Events — Describes interfaces for events and event handling";}i:2;i:5770;}i:185;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:5832;}i:186;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:5832;}i:187;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:5832;}i:188;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:5832;}i:189;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:" ";}i:2;i:5836;}i:190;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"DOM";}i:2;i:5837;}i:191;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:45:" Style — Describes interfaces to deal with ";}i:2;i:5840;}i:192;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"CSS";}i:2;i:5885;}i:193;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:26:"-based styling of elements";}i:2;i:5888;}i:194;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:5914;}i:195;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:5914;}i:196;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:5914;}i:197;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:5914;}i:198;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:" ";}i:2;i:5918;}i:199;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"DOM";}i:2;i:5919;}i:200;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:88:" Traversal and Range — Describes interfaces to traverse and manipulate a document tree";}i:2;i:5922;}i:201;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:6010;}i:202;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:6010;}i:203;a:3:{i:0;s:11:"listu_close";i:1;a:0:{}i:2;i:6010;}i:204;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:6010;}i:205;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:211:"The BOM refers to the APIs that the browser vendors expose to developers. Basically anytime you're manipulating or accessing a property of the browser itself would mean you're using the BOM. This could refer to:";}i:2;i:6012;}i:206;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:6224;}i:207;a:3:{i:0;s:10:"listu_open";i:1;a:0:{}i:2;i:6224;}i:208;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:6224;}i:209;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:6224;}i:210;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:122:" The window object, allowing the capability to pop up new browser windows, and to move, resize, and close browser windows.";}i:2;i:6228;}i:211;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:6350;}i:212;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:6350;}i:213;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:6350;}i:214;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:6350;}i:215;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:76:" The navigator object, which provides detailed information about the browser";}i:2;i:6354;}i:216;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:6430;}i:217;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:6430;}i:218;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:6430;}i:219;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:6430;}i:220;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:91:" The location object, which gives detailed information about the page loaded in the browser";}i:2;i:6434;}i:221;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:6525;}i:222;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:6525;}i:223;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:6525;}i:224;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:6525;}i:225;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:89:" The screen object, which gives detailed information about the user’s screen resolution";}i:2;i:6529;}i:226;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:6618;}i:227;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:6618;}i:228;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:6618;}i:229;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:6618;}i:230;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:20:" Support for cookies";}i:2;i:6622;}i:231;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:6642;}i:232;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:6642;}i:233;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:6642;}i:234;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:6642;}i:235;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:78:" Custom objects such as XMLHttpRequest and Internet Explorer’s ActiveXObject";}i:2;i:6646;}i:236;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:6724;}i:237;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:6724;}i:238;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:6724;}i:239;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:6724;}i:240;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:55:" And a number of other HTML5 APIs such as local storage";}i:2;i:6728;}i:241;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:6783;}i:242;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:6783;}i:243;a:3:{i:0;s:11:"listu_close";i:1;a:0:{}i:2;i:6783;}i:244;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:6783;}i:245;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:122:"There is no standard for BOM, so each browser may try to out compete other vendors by offering features others don't have.";}i:2;i:6785;}i:246;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:6907;}i:247;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:6909;}i:248;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:21:"Working in Javascript";i:1;i:2;i:2;i:6909;}i:2;i:6909;}i:249;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:2;}i:2;i:6909;}i:250;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:6909;}i:251;a:3:{i:0;s:11:"strong_open";i:1;a:0:{}i:2;i:6944;}i:252;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:15:"Console Logging";}i:2;i:6946;}i:253;a:3:{i:0;s:12:"strong_close";i:1;a:0:{}i:2;i:6961;}i:254;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:6963;}i:255;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:6963;}i:256;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:340:"Before we get started in javascript we have to learn how to debug our javascript code. Because javascript often fails silently it is difficult to debug. By using Firebug or related tools, we can inspect our javascript code and its variables during run time. You should start using these commands to log variables to your console. Check out ";}i:2;i:6965;}i:257;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:49:"https://getfirebug.com/wiki/index.php/Console_API";i:1;s:40:"Firebug's wiki for more console commands";}i:2;i:7305;}i:258;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:".";}i:2;i:7399;}i:259;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:7400;}i:260;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:7400;}i:261;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:42:"http://beta.plnkr.co/edit/iinTwz?p=preview";i:1;s:12:"Plunker Demo";}i:2;i:7402;}i:262;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:7461;}i:263;a:3:{i:0;s:4:"code";i:1;a:3:{i:0;s:384:"
var object = {};

console.log(object); //logs the object
console.error(object); //shows a error symbol
console.info(object); //shows an info symbol
console.warn(object); //shows a warning symbol
console.debug(object); //does the same as log
console.dir(object); //shows a  list of child objects, good for logging objects
console.table(object); //shows the object in a tabular format
";i:1;s:10:"javascript";i:2;N;}i:2;i:7468;}i:264;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:7468;}i:265;a:3:{i:0;s:11:"strong_open";i:1;a:0:{}i:2;i:7873;}i:266;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:10:"Use Strict";}i:2;i:7875;}i:267;a:3:{i:0;s:12:"strong_close";i:1;a:0:{}i:2;i:7885;}i:268;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:7887;}i:269;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:7887;}i:270;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:289:"Javascript is a very dynamic and loose language, and since it fails silently, it's easy to fall into traps of bad code. You can use the use strict mode in order to make your javascript fail more strictly and to keep you writing good code. Just put this at the top of any scripts you write.";}i:2;i:7889;}i:271;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:8178;}i:272;a:3:{i:0;s:4:"code";i:1;a:3:{i:0;s:15:"
'use strict';
";i:1;s:10:"javascript";i:2;N;}i:2;i:8185;}i:273;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:8185;}i:274;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:9:"Refer to ";}i:2;i:8221;}i:275;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:61:"http://ejohn.org/blog/ecmascript-5-strict-mode-json-and-more/";i:1;s:38:"John Resig's article on the use strict";}i:2;i:8230;}i:276;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:26:" to find out what it does.";}i:2;i:8334;}i:277;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:8360;}i:278;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:8360;}i:279;a:3:{i:0;s:11:"strong_open";i:1;a:0:{}i:2;i:8362;}i:280;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:15:"Other Bad Parts";}i:2;i:8364;}i:281;a:3:{i:0;s:12:"strong_close";i:1;a:0:{}i:2;i:8379;}i:282;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:8381;}i:283;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:8381;}i:284;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:64:"One thing that trips up javascript developers is the binding of ";}i:2;i:8383;}i:285;a:3:{i:0;s:18:"doublequoteopening";i:1;a:0:{}i:2;i:8447;}i:286;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:4:"this";}i:2;i:8448;}i:287;a:3:{i:0;s:18:"doublequoteclosing";i:1;a:0:{}i:2;i:8452;}i:288;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:189:" in objects. This is considered a confusing part of javascript as it was not developed to be OOP from the beginning. Refer to these slides for an explanation on the bad parts of javascript.";}i:2;i:8453;}i:289;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:8643;}i:290;a:3:{i:0;s:10:"listu_open";i:1;a:0:{}i:2;i:8643;}i:291;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:8643;}i:292;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:8643;}i:293;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:" ";}i:2;i:8647;}i:294;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:72:"http://johnkpaul.github.com/presentations/empirejs/javascript-bad-parts/";i:1;s:20:"Javascript Bad Parts";}i:2;i:8648;}i:295;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:8745;}i:296;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:8745;}i:297;a:3:{i:0;s:11:"listu_close";i:1;a:0:{}i:2;i:8745;}i:298;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:8745;}i:299;a:3:{i:0;s:11:"strong_open";i:1;a:0:{}i:2;i:8747;}i:300;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:19:"Shims and Polyfills";}i:2;i:8749;}i:301;a:3:{i:0;s:12:"strong_close";i:1;a:0:{}i:2;i:8768;}i:302;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:8770;}i:303;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:8770;}i:304;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:321:"Because the host environment that runs javascript could be different, front end developers often face the problem of adapting code for older browsers, and sometimes we even create polyfills for new features that current browsers don't support yet. Shims (or shivs) are just a generic name for any kind of interception of ";}i:2;i:8772;}i:305;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"API";}i:2;i:9093;}i:306;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:110:" calls, polyfills are code that provides a fallback for older browsers, they are usually implemented as shims.";}i:2;i:9096;}i:307;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:9206;}i:308;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:9206;}i:309;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:44:"The two most important shims you'll need is:";}i:2;i:9208;}i:310;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:9253;}i:311;a:3:{i:0;s:10:"listu_open";i:1;a:0:{}i:2;i:9253;}i:312;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:9253;}i:313;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:9253;}i:314;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:" ";}i:2;i:9257;}i:315;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:37:"https://github.com/kriskowal/es5-shim";i:1;s:8:"ES5 Shim";}i:2;i:9258;}i:316;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:39:" - ES5 features are usually missing in ";}i:2;i:9308;}i:317;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:2:"IE";}i:2;i:9347;}i:318;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:".";}i:2;i:9349;}i:319;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:9350;}i:320;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:9350;}i:321;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:9350;}i:322;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:9350;}i:323;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:" ";}i:2;i:9354;}i:324;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:38:"https://github.com/paulmillr/es6-shim/";i:1;s:8:"ES6 Shim";}i:2;i:9355;}i:325;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:46:" - ES6 features are almost missing everywhere.";}i:2;i:9406;}i:326;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:9452;}i:327;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:9452;}i:328;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:9452;}i:329;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:9452;}i:330;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:" ";}i:2;i:9456;}i:331;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:33:"http://bestiejs.github.com/json3/";i:1;s:11:"JSON 3 Shim";}i:2;i:9457;}i:332;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:22:" - JSON3 required for ";}i:2;i:9506;}i:333;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:2:"IE";}i:2;i:9528;}i:334;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:".";}i:2;i:9530;}i:335;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:9531;}i:336;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:9531;}i:337;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:9531;}i:338;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:9531;}i:339;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:" ";}i:2;i:9535;}i:340;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:66:"https://github.com/angular-ui/angular-ui/tree/master/common/ieshiv";i:1;s:7:"IE Shiv";}i:2;i:9536;}i:341;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:89:" - For AngularJS, and Angular UI, so you can have custom tag names working as directives.";}i:2;i:9614;}i:342;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:9703;}i:343;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:9703;}i:344;a:3:{i:0;s:11:"listu_close";i:1;a:0:{}i:2;i:9703;}i:345;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:9703;}i:346;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:140:"The above are just the basics. To work with HTML5 APIs, you'll need to consider your feature list and the browsers you want to support. The ";}i:2;i:9705;}i:347;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:73:"https://github.com/Modernizr/Modernizr/wiki/HTML5-Cross-browser-Polyfills";i:1;s:55:"Modernizr wiki has a large list of maintained polyfills";}i:2;i:9845;}i:348;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:27:" for all sorts of projects.";}i:2;i:9978;}i:349;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:10006;}i:350;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:10006;}i:351;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:17:"OOP in Javascript";i:1;i:2;i:2;i:10006;}i:2;i:10006;}i:352;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:2;}i:2;i:10006;}i:353;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:10006;}i:354;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:351:"In classical OOP languages, software is architected through a structure of classes that have properties and methods. Each class is instantiated and then calls upon classes its dependent on and uses them. Javascript however does have any concept of classes, instead it has prototypes. Note that if you want to know why we have to use OOP, refer to the ";}i:2;i:10037;}i:355;a:3:{i:0;s:12:"internallink";i:1;a:2:{i:0;s:62:"PHP - Server Side Architecture#object_oriented_programming_oop";i:1;s:31:"Server Side Architecture on OOP";}i:2;i:10388;}i:356;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:".";}i:2;i:10486;}i:357;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:10487;}i:358;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:10487;}i:359;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:353:"Prototype-based programming is a style of object-oriented programming in which classes are not present, and behavior reuse (known as inheritance in class-based languages) is accomplished through a process of decorating existing objects which serve as prototypes. This model is also known as class-less, prototype-oriented, or instance-based programming.";}i:2;i:10489;}i:360;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:10842;}i:361;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:10842;}i:362;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:180:"Javascript defines an object as an unordered collection of properties each of which contains a primitive value, object or function. It is the equivalent of an associative array in ";}i:2;i:10844;}i:363;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"PHP";}i:2;i:11024;}i:364;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:179:" (javascript actually does not have an associative array concept). Each property is identified by their key. This means objects in javascript is far more flexible than objects in ";}i:2;i:11027;}i:365;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"PHP";}i:2;i:11206;}i:366;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:185:". They can be enumerated and iterated, and have setters and getters at run time. Objects can be used as simple data structures, or as structures that contain methods and functions like ";}i:2;i:11209;}i:367;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"PHP";}i:2;i:11394;}i:368;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:148:"'s objects. Due to this flexibility, almost everything in javascript is an object, and the creation and manipulation of objects can take many forms.";}i:2;i:11397;}i:369;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:11545;}i:370;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:11545;}i:371;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:68:"You refer to these resources on OOP in javascript before continuing:";}i:2;i:11547;}i:372;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:11616;}i:373;a:3:{i:0;s:10:"listu_open";i:1;a:0:{}i:2;i:11616;}i:374;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:11616;}i:375;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:11616;}i:376;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:" ";}i:2;i:11620;}i:377;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:70:"http://killdream.github.com/blog/2011/10/understanding-javascript-oop/";i:1;s:28:"Understanding Javascript OOP";}i:2;i:11621;}i:378;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:11724;}i:379;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:11724;}i:380;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:11724;}i:381;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:11724;}i:382;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:" ";}i:2;i:11728;}i:383;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:94:"https://developer.mozilla.org/en-US/docs/JavaScript/Introduction_to_Object-Oriented_JavaScript";i:1;s:42:"Introduction to Object Oriented Javascript";}i:2;i:11729;}i:384;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:11870;}i:385;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:11870;}i:386;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:11870;}i:387;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:11870;}i:388;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:" ";}i:2;i:11874;}i:389;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:91:"http://net.tutsplus.com/tutorials/javascript-ajax/the-basics-of-object-oriented-javascript/";i:1;s:40:"The Basics of Object Oriented Javascript";}i:2;i:11875;}i:390;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:12011;}i:391;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:12011;}i:392;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:12011;}i:393;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:12011;}i:394;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:" ";}i:2;i:12015;}i:395;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:91:"http://stackoverflow.com/questions/9108925/how-is-almost-everything-in-javascript-an-object";i:1;s:37:"Everything in Javascript is an Object";}i:2;i:12016;}i:396;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:12149;}i:397;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:12149;}i:398;a:3:{i:0;s:11:"listu_close";i:1;a:0:{}i:2;i:12149;}i:399;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:12151;}i:400;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:15:"Object Creation";i:1;i:3;i:2;i:12151;}i:2;i:12151;}i:401;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:12151;}i:402;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:12151;}i:403;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:147:"Creating objects in javascript can take many forms. Each has their advantages and disadvantages. You'll have to choose the one that works the best.";}i:2;i:12178;}i:404;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:12325;}i:405;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:12325;}i:406;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:161:"The simplest way to create an object is the through the object literal style, also known as short hand syntax. This style is not unlike the associative array in ";}i:2;i:12327;}i:407;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"PHP";}i:2;i:12488;}i:408;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:211:". You would use this whenever you need to create a container for some data, or a throw away object. Javascript libraries often use objects to configure their settings too, in which you would have experienced in ";}i:2;i:12491;}i:409;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"PHP";}i:2;i:12702;}i:410;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:104:" with passing in associative arrays. Therefore this style is not intended for creating modularised code.";}i:2;i:12705;}i:411;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:12809;}i:412;a:3:{i:0;s:4:"code";i:1;a:3:{i:0;s:394:"
//OBJECT LITERAL STYLE

var object = {
    literalKey: 'Blah', //you can use literal keys, without quotes, but they must have no spaces in them
    'string key': 'Blahblah'
};

console.log(typeof object); //will show that it's an object


//OBJECT CONSTRUCTOR STYLE (equivalent)

var differentObject = new Object();

differentObject.name = 'I am a big object!';

console.log(differentObject);
";i:1;s:10:"javascript";i:2;N;}i:2;i:12816;}i:413;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:12816;}i:414;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:587:"In order to create objects in a classless programming language that is intended for modular code and code reuse, we can't use the object literal style. Instead we have the Constructor Pattern, Prototype Pattern, and Combination Constructor & Prototype Pattern. There are others such as Parasitic Constructor Pattern and  Durable Constructor Pattern, however they are specialised for particular purposes. Also note that in these examples we are using function expressions, as this is a better practice than function declarations, it prevents the functions from polluting the global scope.";}i:2;i:13231;}i:415;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:13818;}i:416;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:13820;}i:417;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:19:"Constructor Pattern";i:1;i:4;i:2;i:13820;}i:2;i:13820;}i:418;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:4;}i:2;i:13820;}i:419;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:13820;}i:420;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:73:"This constructor pattern allows to create reusable modular units of code.";}i:2;i:13849;}i:421;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:13922;}i:422;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:13922;}i:423;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:42:"http://beta.plnkr.co/edit/QTO6W1?p=preview";i:1;s:12:"Plunker Demo";}i:2;i:13924;}i:424;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:13983;}i:425;a:3:{i:0;s:4:"code";i:1;a:3:{i:0;s:735:"
'use strict'; //everytime you write javascript code, make sure to do this, it forces you to write good javascript

//Constructor Pattern

var Person = function(name, age, job){ //by convention constructors should be capitalised based on StudlyCaps
    //this refers to the newly instantiated object
    this.name = name;
    this.age = age;
    this.job = job;
    this.sayName = function(){
        console.log(this.name);
    };
}

//by "newing" the function, it executes the function, and binds "this" to the new variable, the variable becomes an object construct
var person1 = new Person('Roger', '21', 'Awesome');
var person2 = new Person('Dave', 43, 'Yeap');

person1.sayName();
person2.sayName();

console.log(typeof person1);
";i:1;s:10:"javascript";i:2;N;}i:2;i:13990;}i:426;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:14746;}i:427;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:17:"Prototype Pattern";i:1;i:4;i:2;i:14746;}i:2;i:14746;}i:428;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:4;}i:2;i:14746;}i:429;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:14746;}i:430;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:247:"However what happens to inheritance? After all one of the great advantages of OOP is the ability to have concrete classes inherit from abstract parent classes. This way you can share code between similar objects. Well in javascript we have to use ";}i:2;i:14773;}i:431;a:3:{i:0;s:13:"interwikilink";i:1;a:4:{i:0;s:18:"wp>Prototype-based";i:1;s:10:"prototypes";i:2;s:2:"wp";i:3;s:15:"Prototype-based";}i:2;i:15020;}i:432;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:243:" instead. Everytime you create a function, it contains a prototype property. By setting properties onto the prototype, and then constructing an object from that function, the properties on that prototype gets shared among all object instances.";}i:2;i:15053;}i:433;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:15296;}i:434;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:15296;}i:435;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:42:"http://beta.plnkr.co/edit/oM8QPa?p=preview";i:1;s:12:"Plunker Demo";}i:2;i:15298;}i:436;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:15357;}i:437;a:3:{i:0;s:4:"code";i:1;a:3:{i:0;s:570:"
'use strict';

//Prototype pattern 

var Person = function(){};

//all of these are shared among all object instances
Person.prototype.name = 'Nicholas';
Person.prototype.age = 29;
Person.prototype.job = 'Software Engineer';
Person.prototype.sayName = function(){
    console.log(this.name);
};

var person1 = new Person();
var person2 = new Person();

person1.sayName();
person2.sayName();

//is the two functions the same?
console.log(person1.sayName === person2.sayName); //in js, we use triple equals more often than double equals due to its weird type conversion!
";i:1;s:10:"javascript";i:2;N;}i:2;i:15364;}i:438;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:15364;}i:439;a:3:{i:0;s:11:"strong_open";i:1;a:0:{}i:2;i:15955;}i:440;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:43:"Prototype & Constructor Combination Pattern";}i:2;i:15957;}i:441;a:3:{i:0;s:12:"strong_close";i:1;a:0:{}i:2;i:16000;}i:442;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:16002;}i:443;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:16002;}i:444;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:317:"Understanding prototypes is crucial to understanding OOP in javascript. The below code example combines the unique instantiations of the constructor pattern with the shared methods of the prototype pattern. This pattern of combination is probably the most common form of object creation you'll see in javascript land.";}i:2;i:16004;}i:445;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:16321;}i:446;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:16321;}i:447;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:42:"http://beta.plnkr.co/edit/ZVo66w?p=preview";i:1;s:12:"Plunker Demo";}i:2;i:16323;}i:448;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:16382;}i:449;a:3:{i:0;s:4:"code";i:1;a:3:{i:0;s:827:"
'use strict';

//Prototype & Constructor combination pattern 

var Person = function(name, age, job){
    //these properties will be unique to each instance
    this.name = name;
    this.age = age;
    this.job = job;
};

//this is shared among all instances
Person.prototype.sayName = function(){
    console.log(this.name);
};

var person1 = new Person('Dave', 21, 'Super Developer');

person1.sayName();

console.log(person1);
//person1 object instance has a __proto__ property
console.log(person1.__proto__);
//it points to the Constructor's prototype
console.log(person1.__proto__ === Person.prototype); 

//the constructor function has a prototype
console.log(Person.prototype);
//the prototype has a constructor property pointing back to the constructor function
console.log(Person.prototype.constructor === Person); 
";i:1;s:10:"javascript";i:2;N;}i:2;i:16389;}i:450;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:16389;}i:451;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:50:"The question you should be asking is how does the ";}i:2;i:17237;}i:452;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:17287;}i:453;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:9:"sayName()";}i:2;i:17289;}i:454;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:17298;}i:455;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:35:" function still work? Where is the ";}i:2;i:17300;}i:456;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:17335;}i:457;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:4:"this";}i:2;i:17337;}i:458;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:17341;}i:459;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:47:" referring to? And how does it get the name of ";}i:2;i:17343;}i:460;a:3:{i:0;s:18:"doublequoteopening";i:1;a:0:{}i:2;i:17390;}i:461;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:4:"Dave";}i:2;i:17391;}i:462;a:3:{i:0;s:18:"doublequoteclosing";i:1;a:0:{}i:2;i:17395;}i:463;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:487:"? When a property is looked up inside an object, javascript searches on the object instance itself. If it is found, javascript stops searching. If it is not found, the search continues to its prototype, and looks through it to find the property. We can see that the above code demonstrates that there are multiple occurences of where javascript is searching, and finding a property on the instance (produced by the constructor), and sometimes finding the property on the prototype. When ";}i:2;i:17396;}i:464;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:17883;}i:465;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:18:"person1.sayName();";}i:2;i:17885;}i:466;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:17903;}i:467;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:49:" is called, that's accessing the prototype. When ";}i:2;i:17905;}i:468;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:17954;}i:469;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:9:"this.name";}i:2;i:17956;}i:470;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:17965;}i:471;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:24:" is accessed inside the ";}i:2;i:17967;}i:472;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:17991;}i:473;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:9:"sayName()";}i:2;i:17993;}i:474;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:18002;}i:475;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:156:" function, then it's accessing the object instance. You can start to see how javascript allows code reuse through the mixing of constructors and prototypes.";}i:2;i:18004;}i:476;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:18160;}i:477;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:18160;}i:478;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:226:"Because the object instances takes priority over the prototype, this allows method overriding. This is as simple as redeclaring a property with the same name onto the object instance. It shadows the property on the prototype. ";}i:2;i:18162;}i:479;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:18388;}i:480;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:18388;}i:481;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:42:"http://beta.plnkr.co/edit/yW9srh?p=preview";i:1;s:12:"Plunker Demo";}i:2;i:18390;}i:482;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:18449;}i:483;a:3:{i:0;s:4:"code";i:1;a:3:{i:0;s:1097:"
'use strict';

//demonstrating shadowing or method overriding

var Person = function(name, age, job){
    this.name = name;
    this.age = age;
    this.job = job;
};

//fallback method on the prototype
Person.prototype.sayName = function(){
    console.log(this.age); //says the age
};

var person1 = new Person('Dave', 21, 'Super Developer');

//overrides the prototype method
person1.sayName = function(){
    console.log(this.name);
}

//executes the object instance's method
person1.sayName(); //says the name!

//now how do we call the prototype method if it's been overwritten?
//By calling it via the __proto__ in the object instance or part of the constructor function
var o = { age: 15 };
person1.__proto__.sayName.call(o); //these are binding functions (will display 15)
//notice how we didn't need to use () to execute the function, the call and apply takes care of that
Person.prototype.sayName.apply(person1); //another binding function (will display 21)

//this will show nothing due to lack of binding, more on this in the understanding "this" section
Person.prototype.sayName();
";i:1;s:10:"javascript";i:2;N;}i:2;i:18456;}i:484;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:18456;}i:485;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:94:"Note that there is also a shorter way of defining multiple properties onto the prototype. See ";}i:2;i:19574;}i:486;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:42:"http://beta.plnkr.co/edit/lGGH9p?p=preview";i:1;s:47:"Plunker demo of short hand prototype definition";}i:2;i:19668;}i:487;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:66:". But make sure to be careful when iterating the object in a loop!";}i:2;i:19762;}i:488;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:19828;}i:489;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:19828;}i:490;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:116:"If you need to determine whether a property is part of the object instance or part of the prototype you can use the ";}i:2;i:19830;}i:491;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:19946;}i:492;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:16:"hasOwnProperty()";}i:2;i:19948;}i:493;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:19964;}i:494;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:33:" function. This is often used in ";}i:2;i:19966;}i:495;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:19999;}i:496;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:6:"for in";}i:2;i:20001;}i:497;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:20007;}i:498;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:" ";}i:2;i:20009;}i:499;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:111:"http://stackoverflow.com/questions/921789/how-to-loop-through-javascript-object-literal-with-objects-as-members";i:1;s:50:"loops that iterate through the object's properties";}i:2;i:20010;}i:500;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:65:" and you need to avoid the prototype's properties when iterating.";}i:2;i:20176;}i:501;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:20241;}i:502;a:3:{i:0;s:4:"code";i:1;a:3:{i:0;s:412:"
for(var key in object){ //notice the var operator inside the for loop, we want to avoid pollution!
    if(object.hasOwnProperty(key)){ //this will make sure that the iterated values are part of the object instance, not prototype! Unless of course you want it!
        
        var value = object[key]; //object properties can be accessed via array style syntax too!
        console.log(value);
        
    }
}
";i:1;s:10:"javascript";i:2;N;}i:2;i:20248;}i:503;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:20680;}i:504;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:40:"Understanding "this" Context and Binding";i:1;i:3;i:2;i:20680;}i:2;i:20680;}i:505;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:20680;}i:506;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:20680;}i:507;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:44:"A key concept in javascript OOP is that the ";}i:2;i:20732;}i:508;a:3:{i:0;s:18:"doublequoteopening";i:1;a:0:{}i:2;i:20776;}i:509;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:4:"this";}i:2;i:20777;}i:510;a:3:{i:0;s:18:"doublequoteclosing";i:1;a:0:{}i:2;i:20781;}i:511;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:183:" context changes based on where it's been invocated (called and executed), not where it's been declared (where it was written in the code). In classical OOP languages, the binding of ";}i:2;i:20782;}i:512;a:3:{i:0;s:18:"doublequoteopening";i:1;a:0:{}i:2;i:20965;}i:513;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:4:"this";}i:2;i:20966;}i:514;a:3:{i:0;s:18:"doublequoteclosing";i:1;a:0:{}i:2;i:20970;}i:515;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:270:" to the object context is implicit, it's always the immediate parent object. However in javascript this isn't always the case. In javascript, binding loss can occur whenever you're accessing a function through a reference rather than directly through its object context.";}i:2;i:20971;}i:516;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:21241;}i:517;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:21241;}i:518;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:39:"Consider these examples of binding the ";}i:2;i:21243;}i:519;a:3:{i:0;s:18:"doublequoteopening";i:1;a:0:{}i:2;i:21282;}i:520;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:4:"this";}i:2;i:21283;}i:521;a:3:{i:0;s:18:"doublequoteclosing";i:1;a:0:{}i:2;i:21287;}i:522;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:":";}i:2;i:21288;}i:523;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:21289;}i:524;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:21289;}i:525;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:42:"http://beta.plnkr.co/edit/p8m3ai?p=preview";i:1;s:12:"Plunker Demo";}i:2;i:21291;}i:526;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:21350;}i:527;a:3:{i:0;s:4:"code";i:1;a:3:{i:0;s:1686:"
//'use strict'; //this is commented out, as use strict would actually make this demonstration impossible, it tells you when you have binding loss, uncomment it to see it working!

//demonstration of binding sensitive code, be careful of these!

var name = 'I am in the window! You should not see me!';

var object = {
	name: 'Hi I am an object!',
	greet: function(){
		console.log('Message: ' + this.name);
	},
	timeoutMethod: function(){
		setTimeout(function(){
			console.log('Timeout Method: ' + this.name);
		}, 2000);
	},
	bindingTimeoutMethod: function(){
		setTimeout(this.funcToBeTimedOut, 3000);
	},
	funcToBeTimedOut: function(){
		console.log('Second Timeout Method ' + this.name);
	}
};
//"METHOD CALL"
object.greet(); //works

//"BASELESS FUNCTION CALL"
//executing the function outside of the object context
//the "this" loses its binding, it actually binds to window global!
var funcToBeExecutedOutside = object.greet;
funcToBeExecutedOutside(); //does not work

//"METHOD CALLBACK"
//still loses the binding
var anotherObject = {
	highFunc: function(callback){
		callback(); //executes object.greet();
	}
};
anotherObject.highFunc(object.greet);

//"USING TIMEOUT"
//also loses its binding
setTimeout(object.greet, 1000);
//even when it is inside the a method! (think about where this is been invocated, it's not inside the object context, its part of setTimeout!)
object.timeoutMethod();
//similar concept, calling a method that calls its own method, still fails
object.bindingTimeoutMethod();

//this one will still work, because it is still a "METHOD CALL"
var thirdObject = {
	thirdPartyMethod: function(){
		object.greet();
	}
};

thirdObject.thirdPartyMethod();
";i:1;s:10:"javascript";i:2;N;}i:2;i:21357;}i:528;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:21357;}i:529;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:79:"In order to solve this problem of binding loss, we need to explicitly bind the ";}i:2;i:23064;}i:530;a:3:{i:0;s:18:"doublequoteopening";i:1;a:0:{}i:2;i:23143;}i:531;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:4:"this";}i:2;i:23144;}i:532;a:3:{i:0;s:18:"doublequoteclosing";i:1;a:0:{}i:2;i:23148;}i:533;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:148:" back to the correct object context. There are several ways of doing this depending on your situation. The most common ways are the closure method, ";}i:2;i:23149;}i:534;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:91:"https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Function/apply";i:1;s:12:"apply method";}i:2;i:23297;}i:535;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:6:", and ";}i:2;i:23405;}i:536;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:90:"https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Function/call";i:1;s:11:"call method";}i:2;i:23411;}i:537;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:449:". The closure method works when you're writing a throw away anonymous function, and you have the ability to wrap it in another function while being side the object. The apply and call methods allow you to pass in parameters to the function, however you need to have the right context available. You should use the apply method whenever you don't know the number of parameters to the function, the parameters can then be dynamically accessed via the ";}i:2;i:23517;}i:538;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:100:"https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Functions_and_function_scope/arguments";i:1;s:18:"arguments variable";}i:2;i:23966;}i:539;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:24:" inside of the function.";}i:2;i:24089;}i:540;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:24113;}i:541;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:24113;}i:542;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:4:"The ";}i:2;i:24115;}i:543;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:90:"https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Function/bind";i:1;s:11:"bind method";}i:2;i:24119;}i:544;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:153:" in ES5 is far more flexible as it doesn't automatically execute your function allowing it to be used in callback situations. However this does not have ";}i:2;i:24225;}i:545;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:42:"http://kangax.github.com/es5-compat-table/";i:1;s:11:"IE8 support";}i:2;i:24378;}i:546;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:28:", so you'll need to use the ";}i:2;i:24436;}i:547;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:37:"https://github.com/kriskowal/es5-shim";i:1;s:8:"ES5 shim";}i:2;i:24464;}i:548;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:17:" in your scripts.";}i:2;i:24514;}i:549;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:24531;}i:550;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:24531;}i:551;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:121:"Note that in ES6 which currently is under development, there will be a new way of declaring functions that have implicit ";}i:2;i:24533;}i:552;a:3:{i:0;s:18:"doublequoteopening";i:1;a:0:{}i:2;i:24654;}i:553;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:4:"this";}i:2;i:24655;}i:554;a:3:{i:0;s:18:"doublequoteclosing";i:1;a:0:{}i:2;i:24659;}i:555;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:26:" binding. It's called the ";}i:2;i:24660;}i:556;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:49:"http://css.dzone.com/articles/javascript-fat-city";i:1;s:18:"fat arrow function";}i:2;i:24686;}i:557;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:".";}i:2;i:24758;}i:558;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:24759;}i:559;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:24759;}i:560;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:42:"http://beta.plnkr.co/edit/WejeTp?p=preview";i:1;s:12:"Plunker Demo";}i:2;i:24761;}i:561;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:24820;}i:562;a:3:{i:0;s:4:"code";i:1;a:3:{i:0;s:1933:"
'use strict'; //strict works now

//demonstration binding solutions

var name = 'I am in the window! You should not see me!';

var object = {
	name: 'Hi I am an object!',
	greet: function(parameter){
		console.log('Message: ' + this.name);
		if(typeof parameter !== 'undefined'){
			console.log(parameter);
		}
	},
	timeoutMethod: function(){
		//closure, fix the "this"
		var self = this;
		setTimeout(function(){
			console.log('Timeout Method: ' + self.name + ' (FROM CLOSURE)');
		}, 2000);
	},
	bindingTimeoutMethod: function(){
		//the first this works (implicit binding)
		//the second this is explicitly binded to the funcToBeTimedOut
		setTimeout(this.funcToBeTimedOut.bind(this), 3000);
	},
	funcToBeTimedOut: function(){
		console.log('Second Timeout Method ' + this.name + ' (BIND WITHIN METHOD)');
	}
};

var funcToBeExecutedOutside = object.greet;

//"APPLY METHOD"
//apply actually executes the function
funcToBeExecutedOutside.apply(object, ['FROM APPLY']);

//"CALL METHOD"
//call actually executes the function
funcToBeExecutedOutside.call(object, 'FROM CALL')

//"BIND METHOD" (ES5 syntax, no IE8 support, requires shim!)
//bind does not execute the function, allowing its use in callbacks
//notice the extra parantheses to execute and pass in parameters!
funcToBeExecutedOutside.bind(object)('FROM BIND');

//"BIND WITH CALLBACK"
var anotherObject = {
	highFunc: function(callback){
		callback('FROM CALLBACK BIND');
	}
};
anotherObject.highFunc(object.greet.bind(object)); //this requires bind! No extra parantheses, since we're passing it in as a callback

//"USING TIMEOUT"
//setTimeout cannot be used with call or apply! It needs bind
setTimeout(object.greet.bind(object), 1000, 'FROM TIMEOUT BIND');
//timeout has a third parameter available in modern browsers

//"CLOSURE METHOD" (see the function)
object.timeoutMethod();

//this is another bind, but inside the method call
object.bindingTimeoutMethod();
";i:1;s:10:"javascript";i:2;N;}i:2;i:24827;}i:563;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:24827;}i:564;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:96:"Remember that if you are using frameworks or libraries, sometimes they will explicitly bind the ";}i:2;i:26781;}i:565;a:3:{i:0;s:18:"doublequoteopening";i:1;a:0:{}i:2;i:26877;}i:566;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:4:"this";}i:2;i:26878;}i:567;a:3:{i:0;s:18:"doublequoteclosing";i:1;a:0:{}i:2;i:26882;}i:568;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:113:" to what they consider to be the most appropriate construct. This is especially true when it comes to events and ";}i:2;i:26883;}i:569;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"DOM";}i:2;i:26996;}i:570;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:141:" manipulation. Certain frameworks also offer a binding construct that you can use to abstract from browser differences. One example would be ";}i:2;i:26999;}i:571;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:35:"http://api.jquery.com/jQuery.proxy/";i:1;s:21:"jQuery's proxy method";}i:2;i:27140;}i:572;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:124:". This is no longer required with the introduction of ES5's bind method. However you may still see it out there in the wild.";}i:2;i:27201;}i:573;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:27325;}i:574;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:27327;}i:575;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:11:"Inheritance";i:1;i:3;i:2;i:27327;}i:2;i:27327;}i:576;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:27327;}i:577;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:27327;}i:578;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:313:"While we have learned how to create objects via the combination of constructor and prototype pattern. However that only works for one object linked to one prototype. In large applications, the inheritance chain could be much longer and wider. Therefore we have to understand the concept of inheritance a bit more.";}i:2;i:27350;}i:579;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:27663;}i:580;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:27665;}i:581;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:18:"Prototype Chaining";i:1;i:4;i:2;i:27665;}i:2;i:27665;}i:582;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:4;}i:2;i:27665;}i:583;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:27665;}i:584;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:223:"Prototype chaining is defined as the primary method of inheritance in ECMAScript. It is possible to assign the prototype of a constructor to an instance of another constructor, which could have it's own prototype. Think of ";}i:2;i:27693;}i:585;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:76:"http://johnkpaul.github.com/presentations/empirejs/javascript-bad-parts/#/11";i:1;s:75:"prototypes as omnipresent shadows that follow all the instantiations around";}i:2;i:27916;}i:586;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:".";}i:2;i:28072;}i:587;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:28073;}i:588;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:28073;}i:589;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:42:"http://beta.plnkr.co/edit/hY0TiP?p=preview";i:1;s:12:"Plunker Demo";}i:2;i:28075;}i:590;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:28134;}i:591;a:3:{i:0;s:4:"code";i:1;a:3:{i:0;s:1156:"
'use strict';

//prototype chaining demonstration

//parent object
var Animal = function(){
	this.weight = '100kg';
};

Animal.prototype.getWeight = function(){
	return this.weight;
};

//child object
var Pig = function(){
	this.colour = 'Pink';
};

//Pig now inherits a prototype that is actually the constructor instantiation of Animal
Pig.prototype = new Animal();

//we can add to the prototype in dynamic languages
Pig.prototype.getColour = function(){
	return this.colour;
}

var pig = new Pig();

//notice how both functions are in prototypes
console.log(pig.getWeight()); //from the parent
console.log(pig.getColour()); //from the child

//because they are inherited, the prototypes are "combined", therefore javascript only ever considers two areas when looking up properties, the object's instance, and the object's prototype!
console.log(Animal.prototype); //has the getWeight
console.log(Pig.prototype); //has the getWeight and getColour
console.log(pig.__proto__); //same

//protoypes can be overwritten
Pig.prototype.getWeight = function(){
    return '1000 kg';
};
    
var heavierPig = new Pig();
    
console.log(heavierPig.getWeight());
";i:1;s:10:"javascript";i:2;N;}i:2;i:28141;}i:592;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:28141;}i:593;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:64:"Remember that all objects in javascript inherit from the native ";}i:2;i:29318;}i:594;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:29382;}i:595;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:16:"Object.prototype";}i:2;i:29384;}i:596;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:29400;}i:597;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:46:". That's how you can get access to the native ";}i:2;i:29402;}i:598;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"API";}i:2;i:29448;}i:599;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:17:" methods such as ";}i:2;i:29451;}i:600;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:29468;}i:601;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:14:"hasOwnProperty";}i:2;i:29470;}i:602;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:29484;}i:603;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:2:", ";}i:2;i:29486;}i:604;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:29488;}i:605;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:8:"toString";}i:2;i:29490;}i:606;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:29498;}i:607;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:5:" and ";}i:2;i:29500;}i:608;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:29505;}i:609;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:7:"valueOf";}i:2;i:29507;}i:610;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:29514;}i:611;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:34:". You can find out more about the ";}i:2;i:29516;}i:612;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:93:"https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Object/prototype";i:1;s:38:"native object prototype methods on MDN";}i:2;i:29550;}i:613;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:3:" & ";}i:2;i:29686;}i:614;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:83:"https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Object";i:1;s:28:"native object methods on MDN";}i:2;i:29689;}i:615;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:39:". Similarly functions descend from the ";}i:2;i:29805;}i:616;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:29844;}i:617;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:18:"Function.prototype";}i:2;i:29846;}i:618;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:29864;}i:619;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:16:". Check out the ";}i:2;i:29866;}i:620;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:95:"https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Function/prototype";i:1;s:26:"native function API on MDN";}i:2;i:29882;}i:621;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:".";}i:2;i:30008;}i:622;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:30009;}i:623;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:30009;}i:624;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:23:"Because prototypes are ";}i:2;i:30011;}i:625;a:3:{i:0;s:18:"doublequoteopening";i:1;a:0:{}i:2;i:30034;}i:626;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:7:"shadows";}i:2;i:30035;}i:627;a:3:{i:0;s:18:"doublequoteclosing";i:1;a:0:{}i:2;i:30042;}i:628;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:186:" that are shared across all instances, if you need a unique instance property to be on the parent object, this becomes impossible, as it will affect all instances. Consider this example:";}i:2;i:30043;}i:629;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:30229;}i:630;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:30229;}i:631;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:42:"http://beta.plnkr.co/edit/Nq8f16?p=preview";i:1;s:12:"Plunker Demo";}i:2;i:30231;}i:632;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:30290;}i:633;a:3:{i:0;s:4:"code";i:1;a:3:{i:0;s:394:"
var SuperType = function(){
	this.colors = ['red', 'blue', 'green'];
};

var SubType = function(){};

SubType.prototype = new SuperType();

var instance1 = new SubType();

//this will be shared among all instances!
instance1.colors.push('black');

console.log(instance1.colors); //'red,blue,green,black'

var instance2 = new SubType();

console.log(instance2.colors); //'red,blue,green,black'
";i:1;s:10:"javascript";i:2;N;}i:2;i:30297;}i:634;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:30712;}i:635;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:33:"Parasitic Combination Inheritance";i:1;i:4;i:2;i:30712;}i:2;i:30712;}i:636;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:4;}i:2;i:30712;}i:637;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:30712;}i:638;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:117:"In order to have unique parent instances, and to have the ability to call the constructor of the parent (as we do in ";}i:2;i:30755;}i:639;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"PHP";}i:2;i:30872;}i:640;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:391:"), we need to separate the inheritance chain, so that constructors inherit from constructors, and prototypes inherit from prototypes. This means a child constructor could call the parent's constructor and apply unique values to the parent. Furthermore since the prototype is chained, we can still have sharable functions across instances. If we stop at this point, we'd essentially be doing ";}i:2;i:30875;}i:641;a:3:{i:0;s:18:"doublequoteopening";i:1;a:0:{}i:2;i:31266;}i:642;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:20:"Constructor Stealing";}i:2;i:31267;}i:643;a:3:{i:0;s:18:"doublequoteclosing";i:1;a:0:{}i:2;i:31287;}i:644;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:52:", which is similar to calling parent constructor in ";}i:2;i:31288;}i:645;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"PHP";}i:2;i:31340;}i:646;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:343:". However in order to link up prototypes, we would have to make the child prototype equal to the instantiation of the parent constructor. This is somewhat inefficient, as that leads us to executing the parent constructor twice, once when we steal the constructor, and a second time when we link up the prototype. We can employ a method called ";}i:2;i:31343;}i:647;a:3:{i:0;s:18:"doublequoteopening";i:1;a:0:{}i:2;i:31686;}i:648;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:33:"Parasitic Combination Inheritance";}i:2;i:31687;}i:649;a:3:{i:0;s:18:"doublequoteclosing";i:1;a:0:{}i:2;i:31720;}i:650;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:151:", in order to assign the parent prototype directly to the child's prototype. The below code example also demonstrates an augmentation of native object ";}i:2;i:31721;}i:651;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"API";}i:2;i:31872;}i:652;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:41:" in javascript, and also uses ES5 syntax.";}i:2;i:31875;}i:653;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:31916;}i:654;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:31916;}i:655;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:42:"http://beta.plnkr.co/edit/bpuD9W?p=preview";i:1;s:12:"Plunker Demo";}i:2;i:31918;}i:656;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:31977;}i:657;a:3:{i:0;s:4:"code";i:1;a:3:{i:0;s:1453:"
'use strict';

//parasitic combination inheritance
//this style most closely models the classical OOP inheritance style, and therefore has all the same power! Also needs ES5
//also perserves instanceof and isPrototypeOf chains

//adding an inherit method to the native Object (javascript is dynamic and flexible)
//Essentially it assigns the superType's prototype to the subType's prototype
Object.inherit = function(subType, superType){
	//creates a new empty object with the superType's prototype
	var prototype = Object.create(superType.prototype);
	//preserving the reverse chain from the prototype back to the constructor, in this case subType
	prototype.constructor = subType;
	//finally assigns the prototype to subType
	subType.prototype = prototype;
};

var Animal = function(weight = '100 kg'){
	this.weight = weight; //this is going to be added to the child instance
};

Animal.prototype.getWeight = function(){
	return this.weight;
};

var Pig = function(colour = 'Pink'){
	//executes the Animal constructor function, bringing in it's unique instance variables to the Pig's scope
	Animal.apply(this, ['1000 kg']);
	this.colour = colour;
};

//assigns Animal's prototype to Pig's prototype
Object.inherit(Pig, Animal);

//augment the prototype for Pig, but not for other animals (if any)
Pig.prototype.getColour = function(){
	return this.colour;
};

var pig = new Pig('Yellow');

console.log(pig.getColour());
console.log(pig.getWeight());
";i:1;s:10:"javascript";i:2;N;}i:2;i:31984;}i:658;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:33458;}i:659;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:26:"True Prototype Inheritance";i:1;i:4;i:2;i:33458;}i:2;i:33458;}i:660;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:4;}i:2;i:33458;}i:661;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:33458;}i:662;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:504:"All of the above styles are quite common to object and inheritance creation in javascript land. However all of them are essentially trying to provide classical class based OOP capability to a prototype based language. So that way developers from a classical OOP background can quickly grasp large scale application development in javascript. However all of that is unnecessary if we embrace true prototype based inheritance programming. This requires a shift in the way we think (and philosophise) about ";}i:2;i:33494;}i:663;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:56:"http://en.wikipedia.org/wiki/Prototype-based_programming";i:1;s:22:"objects in programming";}i:2;i:33998;}i:664;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:5:" and ";}i:2;i:34081;}i:665;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:45:"http://en.wikipedia.org/wiki/Prototype_theory";i:1;s:9:"real life";}i:2;i:34086;}i:666;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:2:". ";}i:2;i:34145;}i:667;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:47:"http://javascript.crockford.com/prototypal.html";i:1;s:61:"This style in javascript was popularised by Douglas Crockford";}i:2;i:34147;}i:668;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:72:", but it is also commonly used in less popular prototype languages. The ";}i:2;i:34260;}i:669;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:113:"http://stackoverflow.com/questions/879061/what-are-the-advantages-that-prototype-based-oo-has-over-class-based-oo";i:1;s:25:"advantages of this method";}i:2;i:34332;}i:670;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:198:" is that it's actually closer to how humans cognitively think about objects, possibly easier to learn if never exposed to class based OOP, and incredibly expressive. Oh and it's ridiculously simple.";}i:2;i:34475;}i:671;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:34673;}i:672;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:34673;}i:673;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:99:"We first need a object creator function that assigns a prototype and gives us back an empty object.";}i:2;i:34675;}i:674;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:34774;}i:675;a:3:{i:0;s:4:"code";i:1;a:3:{i:0;s:177:"
//takes an object, returns a new object but with a prototype assigned to the inserted object
function object(o){
    function F(){};
    F.prototype = o;
    return new F();
}
";i:1;s:10:"javascript";i:2;N;}i:2;i:34781;}i:676;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:34781;}i:677;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:101:"With the proliferation of ES5, you don't have to create your own helper function. You can simply use ";}i:2;i:34979;}i:678;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:35080;}i:679;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:15:"Object.create()";}i:2;i:35082;}i:680;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:35097;}i:681;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:131:", the first parameter being the object you want to be a prototype. You'll have noticed that we actually did use this method in the ";}i:2;i:35099;}i:682;a:3:{i:0;s:18:"doublequoteopening";i:1;a:0:{}i:2;i:35230;}i:683;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:33:"Combination Parasitic Inheritance";}i:2;i:35231;}i:684;a:3:{i:0;s:18:"doublequoteclosing";i:1;a:0:{}i:2;i:35264;}i:685;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:9:" pattern.";}i:2;i:35265;}i:686;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:35274;}i:687;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:35274;}i:688;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:689:"In class based languages, you often had to carefully plan out your taxonomy and relationships between abstract concepts. This often results in a plethora of interesting nouns that essentially lay downs contractual agreements in their relationships. Prototype supporters think that the practice is unnecessary, and instead you should start creating objects with behaviours as soon as possible, and then then later think about classification of similar objects. This is because prototype theory in cognitive science argues that categories of objects are not strictly concrete all the time, but instead there is a graded categorisation of objects which may have one or more focal points. See ";}i:2;i:35276;}i:689;a:3:{i:0;s:13:"interwikilink";i:1;a:4:{i:0;s:19:"wp>Prototype theory";i:1;s:49:"prototype theory for more interesting discussions";i:2;s:2:"wp";i:3;s:16:"Prototype theory";}i:2;i:35965;}i:690;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:284:". The point is, in programming, objects can simply inherit from other objects, not because those objects are hierarchical parents, but simply because they are related in some way, and these relationships aren't strictly inherited, some disappear and new ones appear when they need to.";}i:2;i:36038;}i:691;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:36322;}i:692;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:36322;}i:693;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:176:"You can see this happening in javascript. All objects have a prototype pointing back the native Object.prototype. This makes sense because they are all related semantically to ";}i:2;i:36324;}i:694;a:3:{i:0;s:18:"doublequoteopening";i:1;a:0:{}i:2;i:36500;}i:695;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:6:"object";}i:2;i:36501;}i:696;a:3:{i:0;s:18:"doublequoteclosing";i:1;a:0:{}i:2;i:36507;}i:697;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:620:". If you need a new object to contain modular code or conceptualise some sort of state or actor, you can either create ex-nihilo via the object literal syntax, or create extend it from a previous related object. The practice is bottom-up, there's no need to categorise everything from an abstraction down to concrete, just write concrete examples, and when you see relationships form between concrete examples, then depending on the concrete object you're writing, you can then inherit one from the other. When you need a wider generalisation, then just create higher abstract object and make both prototypes inherit it.";}i:2;i:36508;}i:698;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:37128;}i:699;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:37128;}i:700;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:6:"iframe";i:1;a:7:{s:3:"url";s:65:"http://www.docstoc.com/docs/document-preview.aspx?doc_id=27581648";s:5:"width";s:5:"427px";s:6:"height";s:5:"356px";s:3:"alt";N;s:6:"scroll";b:0;s:6:"border";b:0;s:5:"align";b:0;}i:2;i:5;i:3;s:103:"{{url>http://www.docstoc.com/docs/document-preview.aspx?doc_id=27581648 427px,356px noscroll noborder}}";}i:2;i:37130;}i:701;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:37233;}i:702;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:37233;}i:703;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:52:"Here's an example of using prototypical inheritance.";}i:2;i:37235;}i:704;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:37287;}i:705;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:37287;}i:706;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:42:"http://beta.plnkr.co/edit/QCUYSV?p=preview";i:1;s:12:"Plunker Demo";}i:2;i:37289;}i:707;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:37348;}i:708;a:3:{i:0;s:4:"code";i:1;a:3:{i:0;s:549:"
'use strict';

//animal prototype! (no need to use StudlyCaps since it's not a constructor function)
var animal = {
	weight: '100 kg',
	getWeight: function(){
		return this.weight;
	}
};

//pig is a prototype of animal
var pig1 = Object.create(animal);
pig1.colour = 'Pink';

var pig2 = Object.create(animal);
pig2.colour = 'Brown';

var wildPig = Object.create(pig2);
wildPig.tusks = true;

//the proto chain is being preserved, and it's overlapping!
console.log(wildPig);
console.log(wildPig.__proto__);
console.log(wildPig.__proto__.__proto__);
";i:1;s:10:"javascript";i:2;N;}i:2;i:37355;}i:709;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:37924;}i:710;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:36:"Functional Programming in Javascript";i:1;i:2;i:2;i:37924;}i:2;i:37924;}i:711;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:2;}i:2;i:37924;}i:712;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:37924;}i:713;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:24:"Talk about true closures";}i:2;i:37974;}i:714;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:37998;}i:715;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:37998;}i:716;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:23:"Higher order functions.";}i:2;i:38000;}i:717;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:38023;}i:718;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:38023;}i:719;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:55:"Anonymous function declaration and immediate execution.";}i:2;i:38025;}i:720;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:38086;}i:721;a:3:{i:0;s:4:"code";i:1;a:3:{i:0;s:244:"
//self-executing anonymous function enclosure
(function(parameter){
    console.log('I was declared and executed immediately! Here is my ' + parameter);
})('parameter'); //second set of parantheses can have parameters, or have actual commands
";i:1;s:10:"javascript";i:2;N;}i:2;i:38086;}i:722;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:38350;}i:723;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:17:"MVC in Javascript";i:1;i:2;i:2;i:38350;}i:2;i:38350;}i:724;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:2;}i:2;i:38350;}i:725;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:38350;}i:726;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:51:"Talk about AngularJS also the concept of templating";}i:2;i:38381;}i:727;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:38432;}i:728;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:38432;}i:729;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:18:"Installing Node.js";}i:2;i:38434;}i:730;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:38452;}i:731;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:38452;}i:732;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:62:"Will need understanding of below concepts before investigating";}i:2;i:38454;}i:733;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:38517;}i:734;a:3:{i:0;s:10:"listu_open";i:1;a:0:{}i:2;i:38517;}i:735;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:38517;}i:736;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:38517;}i:737;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:14:" Egghead.io - ";}i:2;i:38521;}i:738;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:18:"http://egghead.io/";i:1;N;}i:2;i:38535;}i:739;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:38553;}i:740;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:38553;}i:741;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:38553;}i:742;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:38553;}i:743;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:18:" Simpulton Blog - ";}i:2;i:38557;}i:744;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:44:"http://onehungrymind.com/category/angularjs/";i:1;N;}i:2;i:38575;}i:745;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:38619;}i:746;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:38619;}i:747;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:38619;}i:748;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:38619;}i:749;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:15:" Year of Moo - ";}i:2;i:38623;}i:750;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:44:"http://www.yearofmoo.com/tags/AngularJS.html";i:1;N;}i:2;i:38638;}i:751;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:38682;}i:752;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:38682;}i:753;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:38682;}i:754;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:38682;}i:755;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:43:" How does Data Binding work in AngularJS - ";}i:2;i:38686;}i:756;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:83:"http://stackoverflow.com/questions/9682092/databinding-in-angularjs/9693933#9693933";i:1;N;}i:2;i:38729;}i:757;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:38812;}i:758;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:38812;}i:759;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:38812;}i:760;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:38812;}i:761;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:57:" AngularJS step by step building a simple App tutorial - ";}i:2;i:38816;}i:762;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:34:"http://docs.angularjs.org/tutorial";i:1;N;}i:2;i:38873;}i:763;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:38907;}i:764;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:38907;}i:765;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:38907;}i:766;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:38907;}i:767;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:19:" AngularJS Guide - ";}i:2;i:38911;}i:768;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:32:"http://docs.angularjs.org/guide/";i:1;N;}i:2;i:38930;}i:769;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:38962;}i:770;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:38962;}i:771;a:3:{i:0;s:11:"listu_close";i:1;a:0:{}i:2;i:38962;}i:772;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:38962;}i:773;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:16:"Video tutorials:";}i:2;i:38964;}i:774;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:38980;}i:775;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:6:"vshare";i:1;a:8:{s:4:"site";s:7:"youtube";s:5:"video";s:51:"tKe25THBoF4&list=PLwwh-11EOGvME7nAKOD6zq9I4wAZtsp-a";s:5:"flash";s:131:"http://www.youtube.com/v/tKe25THBoF4%26list%3DPLwwh-11EOGvME7nAKOD6zq9I4wAZtsp-a?allowFullScreen=true&allowScriptAccess=always&fs=1";s:4:"vars";a:3:{s:15:"allowFullScreen";s:4:"true";s:17:"allowScriptAccess";s:6:"always";s:2:"fs";s:1:"1";}s:5:"align";i:3;s:5:"width";i:520;s:6:"height";i:406;s:5:"title";s:0:"";}i:2;i:5;i:3;s:71:"{{ youtube>tKe25THBoF4&list=PLwwh-11EOGvME7nAKOD6zq9I4wAZtsp-a?large }}";}i:2;i:38982;}i:776;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:39054;}i:777;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:7:"Modules";i:1;i:3;i:2;i:39054;}i:2;i:39054;}i:778;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:39054;}i:779;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:39054;}i:780;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:17:"AngularJS modules";}i:2;i:39073;}i:781;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:39090;}i:782;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:39090;}i:783;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:44:"https://gist.github.com/Mithrandir0x/3639232";i:1;N;}i:2;i:39092;}i:784;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:0:"";}i:2;i:39136;}i:785;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:39137;}i:786;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:39137;}i:787;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:7:"Routing";i:1;i:3;i:2;i:39137;}i:2;i:39137;}i:788;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:39137;}i:789;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:39137;}i:790;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:17:"AngularJS routing";}i:2;i:39156;}i:791;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:39173;}i:792;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:39175;}i:793;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:7:"Scoping";i:1;i:3;i:2;i:39175;}i:2;i:39175;}i:794;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:39175;}i:795;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:39175;}i:796;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:116:"http://stackoverflow.com/questions/13449821/in-angularjs-how-to-make-an-isolated-scope-inherit-from-ng-repeats-scope";i:1;N;}i:2;i:39194;}i:797;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:39310;}i:798;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:39310;}i:799;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:94:"http://stackoverflow.com/questions/11752977/angularjs-ng-model-scope-in-ng-repeat-is-undefined";i:1;N;}i:2;i:39312;}i:800;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:39406;}i:801;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:39406;}i:802;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:79:"http://stackoverflow.com/questions/12304728/how-can-i-tell-angularjs-to-refresh";i:1;N;}i:2;i:39408;}i:803;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:39487;}i:804;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:39487;}i:805;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:57:"http://jimhoskins.com/2012/12/17/angularjs-and-apply.html";i:1;N;}i:2;i:39489;}i:806;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:39546;}i:807;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:39546;}i:808;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:86:"https://github.com/angular/angular.js/wiki/The-Nuances-of-Scope-Prototypal-Inheritance";i:1;N;}i:2;i:39548;}i:809;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:39634;}i:810;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:39634;}i:811;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:61:"http://onehungrymind.com/notes-on-angularjs-scope-life-cycle/";i:1;N;}i:2;i:39636;}i:812;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:0:"";}i:2;i:39697;}i:813;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:39698;}i:814;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:39698;}i:815;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:11:"Controllers";i:1;i:3;i:2;i:39698;}i:2;i:39698;}i:816;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:39698;}i:817;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:39698;}i:818;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:49:"ANGULARJS page controllers vs partial controllers";}i:2;i:39721;}i:819;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:39770;}i:820;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:39772;}i:821;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:10:"Directives";i:1;i:3;i:2;i:39772;}i:2;i:39772;}i:822;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:39772;}i:823;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:39772;}i:824;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:23:"Isolate scope and stuff";}i:2;i:39794;}i:825;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:39817;}i:826;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:39817;}i:827;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:96:"http://stackoverflow.com/questions/13813254/how-do-i-conditionally-apply-css-styles-in-angularjs";i:1;N;}i:2;i:39819;}i:828;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:39915;}i:829;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:39915;}i:830;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:109:"http://stackoverflow.com/questions/7792652/what-is-the-best-way-to-conditionally-apply-a-class-with-angularjs";i:1;N;}i:2;i:39917;}i:831;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:40026;}i:832;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:40026;}i:833;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:85:"http://thesmithfam.org/blog/2012/12/17/communicating-between-directives-in-angularjs/";i:1;N;}i:2;i:40028;}i:834;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:40113;}i:835;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:40113;}i:836;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:70:"https://groups.google.com/forum/#!msg/angular/AjGgp8parNY/sU8Mi0vioScJ";i:1;N;}i:2;i:40115;}i:837;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:40185;}i:838;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:40185;}i:839;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:53:"http://onehungrymind.com/angularjs-directives-basics/";i:1;N;}i:2;i:40187;}i:840;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:40240;}i:841;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:40240;}i:842;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:56:"http://onehungrymind.com/angularjs-and-dom-manipulation/";i:1;N;}i:2;i:40242;}i:843;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:0:"";}i:2;i:40298;}i:844;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:40299;}i:845;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:40299;}i:846;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:10:"Templating";i:1;i:3;i:2;i:40299;}i:2;i:40299;}i:847;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:40299;}i:848;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:40299;}i:849;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:45:"Client side templates vs Serverside templates";}i:2;i:40321;}i:850;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:40366;}i:851;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:40366;}i:852;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:43:"Loading from server, or loading from client";}i:2;i:40368;}i:853;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:40411;}i:854;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:40413;}i:855;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:8:"Services";i:1;i:3;i:2;i:40413;}i:2;i:40413;}i:856;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:40413;}i:857;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:40413;}i:858;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:18:"AngularJS services";}i:2;i:40433;}i:859;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:40451;}i:860;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:40453;}i:861;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:9:"BOM & DOM";i:1;i:2;i:2;i:40453;}i:2;i:40453;}i:862;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:2;}i:2;i:40453;}i:863;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:40453;}i:864;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:17:"Using jQuery for ";}i:2;i:40476;}i:865;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"DOM";}i:2;i:40493;}i:866;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:23:" manipulation or jQLite";}i:2;i:40496;}i:867;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:40519;}i:868;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:40519;}i:869;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:23:"But also talk about BOM";}i:2;i:40521;}i:870;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:40544;}i:871;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:40544;}i:872;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:13:"Cookies.. etc";}i:2;i:40546;}i:873;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:40559;}i:874;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:40559;}i:875;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:15:"Location object";}i:2;i:40561;}i:876;a:3:{i:0;s:6:"entity";i:1;a:1:{i:0;s:3:"...";}i:2;i:40576;}i:877;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:40579;}i:878;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:40581;}i:879;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:21:"Events & Asynchronous";i:1;i:2;i:2;i:40581;}i:2;i:40581;}i:880;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:2;}i:2;i:40581;}i:881;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:40581;}i:882;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:22:"Asyncrhonous callbacks";}i:2;i:40616;}i:883;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:40638;}i:884;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:40638;}i:885;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:14:"Using promises";}i:2;i:40640;}i:886;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:40654;}i:887;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:40654;}i:888;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:90:"http://stackoverflow.com/questions/15207788/calling-a-function-when-ng-repeat-has-finished";i:1;N;}i:2;i:40656;}i:889;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:40746;}i:890;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:40746;}i:891;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:26:"http://jsfiddle.net/VxafF/";i:1;N;}i:2;i:40748;}i:892;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:0:"";}i:2;i:40774;}i:893;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:40775;}i:894;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:40775;}i:895;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:4:"AJAX";i:1;i:2;i:2;i:40775;}i:2;i:40775;}i:896;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:2;}i:2;i:40775;}i:897;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:40775;}i:898;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:30:"Using AngularJS resources and ";}i:2;i:40793;}i:899;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:4:"HTTP";}i:2;i:40823;}i:900;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:4:" get";}i:2;i:40827;}i:901;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:40831;}i:902;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:40831;}i:903;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:5:"Also ";}i:2;i:40833;}i:904;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:4:"HTTP";}i:2;i:40838;}i:905;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:14:"  Interceptors";}i:2;i:40842;}i:906;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:40856;}i:907;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:40856;}i:908;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:27:"Long polling, short polling";}i:2;i:40858;}i:909;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:40885;}i:910;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:40885;}i:911;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:4:"AJAX";}i:2;i:40887;}i:912;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:30:" authentication and validation";}i:2;i:40891;}i:913;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:40922;}i:914;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:40922;}i:915;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:10:"HTML5 APIs";i:1;i:2;i:2;i:40922;}i:2;i:40922;}i:916;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:2;}i:2;i:40922;}i:917;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:40922;}i:918;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:31:"Browser level (for other stuff)";}i:2;i:40946;}i:919;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:40977;}i:920;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:40977;}i:921;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:11:"Web Workers";}i:2;i:40979;}i:922;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:40990;}i:923;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:40992;}i:924;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:38:"Dependency Management & Script Loaders";i:1;i:2;i:2;i:40992;}i:2;i:40992;}i:925;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:2;}i:2;i:40992;}i:926;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:40992;}i:927;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:71:"Dependency Injection in AngularJS, and structuring in terms of modules.";}i:2;i:41044;}i:928;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:41115;}i:929;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:41115;}i:930;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:3:"AMD";}i:2;i:41117;}i:931;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:41120;}i:932;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:41120;}i:933;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:20:"Require.js or HeadJS";}i:2;i:41122;}i:934;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:41142;}i:935;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:41144;}i:936;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:13:"Real Time Web";i:1;i:2;i:2;i:41144;}i:2;i:41144;}i:937;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:2;}i:2;i:41144;}i:938;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:41144;}i:939;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:37:"Web Sockets using AutobahnJS and WAMP";}i:2;i:41171;}i:940;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:41208;}i:941;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:41208;}i:942;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:40:"Operational Transformation using ShareJS";}i:2;i:41210;}i:943;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:41250;}i:944;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:41252;}i:945;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:6:"Canvas";i:1;i:2;i:2;i:41252;}i:2;i:41252;}i:946;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:2;}i:2;i:41252;}i:947;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:41252;}i:948;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:23:"2D graphics and EaselJS";}i:2;i:41272;}i:949;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:41295;}i:950;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:41295;}i:951;a:3:{i:0;s:12:"document_end";i:1;a:0:{}i:2;i:41295;}}