
<h1 class="sectionedit1" id="javascript_-_client_side_architecture">Javascript - Client Side Architecture</h1>
<div class="level1">

<p>
<a href="http://en.wikipedia.org/wiki/JavaScript" class="interwiki iw_wp" title="http://en.wikipedia.org/wiki/JavaScript">Javascript</a> is an interpreted programming language. It was designed to be executed on client side web browsers in order to provide dynamic functionality, alter the user interface dynamically, and provide asynchronous communication to the server. However the language has grown in popularity is now available across many platforms including server side development using <a href="http://nodejs.org/" class="urlextern" title="http://nodejs.org/"  rel="nofollow">Node.js</a>, mobile development using <a href="http://phonegap.com/" class="urlextern" title="http://phonegap.com/"  rel="nofollow">Phonegap</a> and other HTML5 technologies, and desktop development using <a href="https://github.com/appjs/appjs" class="urlextern" title="https://github.com/appjs/appjs"  rel="nofollow">AppJS</a> and <a href="http://www.appcelerator.com/platform/titanium-sdk/" class="urlextern" title="http://www.appcelerator.com/platform/titanium-sdk/"  rel="nofollow">Titanium SDK</a>. Therefore one can see that javascript is probably the only truly ubiquitous programming language, and it is definitely the language of the web.
</p>

<p>
Javascript is a multi-paradigm language, that contains all of the features of a dynamically interpreted language such as weak typing. It can be written in an object oriented manner, imperative or in a functional manner. It&#039;s object inheritance is <a href="http://en.wikipedia.org/wiki/Prototype-based programming" class="interwiki iw_wp" title="http://en.wikipedia.org/wiki/Prototype-based programming">prototype based</a>, which means there&#039;s no such thing as a class. The syntax was inspired by C just like <abbr title="Hypertext Preprocessor">PHP</abbr>, however the <a href="http://javascript.crockford.com/javascript.html" class="urlextern" title="http://javascript.crockford.com/javascript.html"  rel="nofollow">language is much more functional</a>.
</p>

<p>
In traditional non-threaded environment, <a href="http://stackoverflow.com/a/748189/582917" class="urlextern" title="http://stackoverflow.com/a/748189/582917"  rel="nofollow">code is executed synchronously</a>. In a multi-threaded environment, code can be executed in parallel. Javascript is mainly operated inside a browser which offers a single thread of execution, therefore javascript is not multi-threaded (<a href="http://www.html5rocks.com/en/tutorials/workers/basics/" class="urlextern" title="http://www.html5rocks.com/en/tutorials/workers/basics/"  rel="nofollow">except for Web Workers</a>). This presents a bit of a problem for <abbr title="Graphical User Interface">GUI</abbr> programming, which is what javascript is mainly used for in browsers. Any complex or long running process in javascript will freeze the <abbr title="Graphical User Interface">GUI</abbr> making it non responsive. For javascript to be dynamic and good at rendering GUIs, it needs to be asynchronous. But multi-threading is a complex programming paradigm and it is a bit of an overkill for simple <abbr title="Graphical User Interface">GUI</abbr> applications. Therefore browsers offered event driven asynchronous APIs such as XHR for <abbr title="Asynchronous JavaScript and XML">AJAX</abbr> requests, and the javascript language itself can be event driven. This means that certain code blocks such as functions are bound to a particular event or signal, so the structure of the written code does not map directly to the flow of execution. The browser also offers an event handler that is running an event loop, this allows javascript to hook into the event loop through asynchronous callbacks. This basically means that the <a href="http://stackoverflow.com/questions/8963209/does-async-programming-means-multi-threading" class="urlextern" title="http://stackoverflow.com/questions/8963209/does-async-programming-means-multi-threading"  rel="nofollow">flow of execution can move on to another function or statement without waiting for the previous function to complete</a>.
</p>

<p>
It is recommended while working through javascript, to practice them using the real time coding service <a href="http://beta.plnkr.co/" class="urlextern" title="http://beta.plnkr.co/"  rel="nofollow">Plunker</a>. Also make sure to have your Firebug or Chrome web developer tools open to the console tab. You&#039;ll be able to see logs and write javascript directly into your browser.
</p>

</div>
<!-- EDIT1 SECTION "Javascript - Client Side Architecture" [1-3178] -->
<h2 class="sectionedit2" id="javascript_implementations">Javascript Implementations</h2>
<div class="level2">

<p>
Javascript on the client side actually consists of three parts. The ECMAScript, Document Object Model (<abbr title="Document Object Model">DOM</abbr>) and the Browser Object Model (BOM).
</p>

<p>
<a href="http://en.wikipedia.org/wiki/ECMAScript" class="interwiki iw_wp" title="http://en.wikipedia.org/wiki/ECMAScript">ECMAScript</a> is the foundation of the javascript language, but it is independent from the browser environment. Think of it as the agreed upon constitution of how javascript interpreters should work. ECMAScript was created in order to provide interoperability between different browsers, or else every browser would have their own versions of client side scripting languages! At its core it specifies these aspects of javascript:
</p>
<ul>
<li class="level1"><div class="li"> Syntax</div>
</li>
<li class="level1"><div class="li"> Types</div>
</li>
<li class="level1"><div class="li"> Statements</div>
</li>
<li class="level1"><div class="li"> Keywords</div>
</li>
<li class="level1"><div class="li"> Reserved words</div>
</li>
<li class="level1"><div class="li"> Operators</div>
</li>
<li class="level1"><div class="li"> Objects</div>
</li>
</ul>

<p>
ECMAScript is released in editions. Most modern browsers support ECMAScript 5th edition. However work is currently being done on the <a href="http://espadrine.github.com/New-In-A-Spec/es6/" class="urlextern" title="http://espadrine.github.com/New-In-A-Spec/es6/"  rel="nofollow">6th edition named Harmony</a> which may be fully supported by modern browsers in a year or two. You can find out the compatibility of different browsers for ES5 or ES6 via these two charts:
</p>
<ul>
<li class="level1"><div class="li"> <a href="http://kangax.github.com/es5-compat-table/" class="urlextern" title="http://kangax.github.com/es5-compat-table/"  rel="nofollow">ES5 Compatibility Chart</a></div>
</li>
<li class="level1"><div class="li"> <a href="http://kangax.github.com/es5-compat-table/es6/" class="urlextern" title="http://kangax.github.com/es5-compat-table/es6/"  rel="nofollow">ES6 Compatibility Chart</a></div>
</li>
</ul>
<div class="thumb2 tright" style="width:210px"><div class="thumbinner"><a href="/lib/exe/detail.php?id=web_application_development%3Ajavascript_-_client_side_architecture&amp;media=web_application_development:dom-demo.jpg" class="media" title="web_application_development:dom-demo.jpg"><img src="/lib/exe/fetch.php?w=200&amp;media=web_application_development:dom-demo.jpg" class="mediabox2" alt="" width="200" /></a><div class="thumbcaption"><div class="magnify"><a class="internal" title="Enlarge" href="/lib/exe/detail.php?id=web_application_development%3Ajavascript_-_client_side_architecture&amp;media=web_application_development:dom-demo.jpg"><img width="15" height="11" alt="" src="/lib/plugins/imagebox/magnify-clip.png"/></a></div>Demostration of <abbr title="Document Object Model">DOM</abbr></div></div></div>
<p>
The <abbr title="Document Object Model">DOM</abbr> refers to the <abbr title="World Wide Web Consortium">W3C</abbr> specification on an <abbr title="Application Programming Interface">API</abbr> that allows javascript to manipulate <abbr title="HyperText Markup Language">HTML</abbr>. It was necessary to standardise the <abbr title="Document Object Model">DOM</abbr> across browsers or else the different browsers would have different ways of representing their <abbr title="HyperText Markup Language">HTML</abbr> programmatically. Unfortunately even with the <abbr title="Document Object Model">DOM</abbr>, browsers behave differently, and hence is why we have the jQuery library that abstracts the granular details. Essentially the <abbr title="HyperText Markup Language">HTML</abbr> structure is converted into a hierarchical graph of nodes. These graphs look like upside down trees. You can inspect the <a href="https://getfirebug.com/dom" class="urlextern" title="https://getfirebug.com/dom"  rel="nofollow">DOM in Firebug</a> using the <abbr title="Document Object Model">DOM</abbr> panel, or in the <abbr title="HyperText Markup Language">HTML</abbr> side panel, which will give the <abbr title="Document Object Model">DOM</abbr> properties of any <abbr title="HyperText Markup Language">HTML</abbr> node/tag you are inspecting.
</p>

<p>
The <abbr title="Document Object Model">DOM</abbr> includes everything that would be required to represent the <abbr title="HyperText Markup Language">HTML</abbr>, so if all you was the <abbr title="Document Object Model">DOM</abbr>, it could easily be converted back into the <abbr title="HyperText Markup Language">HTML</abbr>. That means the name, content, attributes and even styles of <abbr title="HyperText Markup Language">HTML</abbr> tags are all computed and encoded and accessible from the <abbr title="Document Object Model">DOM</abbr> <abbr title="Application Programming Interface">API</abbr>. The <abbr title="Document Object Model">DOM</abbr> specifications have gone through 3 levels. Most modern browsers support <abbr title="Document Object Model">DOM</abbr> level 2. This <abbr title="Document Object Model">DOM</abbr> specification added:
</p>
<ul>
<li class="level1"><div class="li"> <abbr title="Document Object Model">DOM</abbr> Views — Describes interfaces to keep track of the various views of a document (the document before and after <abbr title="Cascading Style Sheets">CSS</abbr> styling, for example)</div>
</li>
<li class="level1"><div class="li"> <abbr title="Document Object Model">DOM</abbr> Events — Describes interfaces for events and event handling</div>
</li>
<li class="level1"><div class="li"> <abbr title="Document Object Model">DOM</abbr> Style — Describes interfaces to deal with <abbr title="Cascading Style Sheets">CSS</abbr>-based styling of elements</div>
</li>
<li class="level1"><div class="li"> <abbr title="Document Object Model">DOM</abbr> Traversal and Range — Describes interfaces to traverse and manipulate a document tree</div>
</li>
</ul>

<p>
The BOM refers to the APIs that the browser vendors expose to developers. Basically anytime you&#039;re manipulating or accessing a property of the browser itself would mean you&#039;re using the BOM. This could refer to:
</p>
<ul>
<li class="level1"><div class="li"> The window object, allowing the capability to pop up new browser windows, and to move, resize, and close browser windows.</div>
</li>
<li class="level1"><div class="li"> The navigator object, which provides detailed information about the browser</div>
</li>
<li class="level1"><div class="li"> The location object, which gives detailed information about the page loaded in the browser</div>
</li>
<li class="level1"><div class="li"> The screen object, which gives detailed information about the user’s screen resolution</div>
</li>
<li class="level1"><div class="li"> Support for cookies</div>
</li>
<li class="level1"><div class="li"> Custom objects such as XMLHttpRequest and Internet Explorer’s ActiveXObject</div>
</li>
<li class="level1"><div class="li"> And a number of other HTML5 APIs such as local storage</div>
</li>
</ul>

<p>
There is no standard for BOM, so each browser may try to out compete other vendors by offering features others don&#039;t have.
</p>

<p>
In the browser host environment, javascript is simply loaded via script tags similar to how <abbr title="Cascading Style Sheets">CSS</abbr> is loaded. These script tags can be placed anywhere in your <abbr title="HyperText Markup Language">HTML</abbr>, however it is recommended that they are placed in the footer of the body tag. This allows the <abbr title="HyperText Markup Language">HTML</abbr> to be loaded before javascript is loaded. There are exceptions for javascript scripts that need to change the <abbr title="HyperText Markup Language">HTML</abbr> before it is rendered such as Modernizr. You may need to concatenate and minify scripts in production. In other host environments, javascript may be loaded using file I/O such as Node.js.
</p>

</div>
<!-- EDIT2 SECTION "Javascript Implementations" [3179-7472] -->
<h2 class="sectionedit3" id="working_in_javascript">Working in Javascript</h2>
<div class="level2">

<p>
<strong>Console Logging</strong>
</p>

<p>
Before we get started in javascript we have to learn how to debug our javascript code. Because javascript often fails silently it is difficult to debug. By using Firebug or related tools, we can inspect our javascript code and its variables during run time. You should start using these commands to log variables to your console. Check out <a href="https://getfirebug.com/wiki/index.php/Console_API" class="urlextern" title="https://getfirebug.com/wiki/index.php/Console_API"  rel="nofollow">Firebug&#039;s wiki for more console commands</a>.
</p>

<p>
<a href="http://beta.plnkr.co/edit/iinTwz?p=preview" class="urlextern" title="http://beta.plnkr.co/edit/iinTwz?p=preview"  rel="nofollow">Plunker Demo</a>
</p>
<pre class="code javascript"><span class="kw1">var</span> object <span class="sy0">=</span> <span class="br0">&#123;</span><span class="br0">&#125;</span><span class="sy0">;</span>
&nbsp;
console.<span class="me1">log</span><span class="br0">&#40;</span>object<span class="br0">&#41;</span><span class="sy0">;</span> <span class="co1">//logs the object</span>
console.<span class="me1">error</span><span class="br0">&#40;</span>object<span class="br0">&#41;</span><span class="sy0">;</span> <span class="co1">//shows a error symbol</span>
console.<span class="me1">info</span><span class="br0">&#40;</span>object<span class="br0">&#41;</span><span class="sy0">;</span> <span class="co1">//shows an info symbol</span>
console.<span class="me1">warn</span><span class="br0">&#40;</span>object<span class="br0">&#41;</span><span class="sy0">;</span> <span class="co1">//shows a warning symbol</span>
console.<span class="me1">debug</span><span class="br0">&#40;</span>object<span class="br0">&#41;</span><span class="sy0">;</span> <span class="co1">//does the same as log</span>
console.<span class="me1">dir</span><span class="br0">&#40;</span>object<span class="br0">&#41;</span><span class="sy0">;</span> <span class="co1">//shows a  list of child objects, good for logging objects</span>
console.<span class="me1">table</span><span class="br0">&#40;</span>object<span class="br0">&#41;</span><span class="sy0">;</span> <span class="co1">//shows the object in a tabular format</span></pre>

<p>
<strong>Use Strict</strong>
</p>

<p>
Javascript is a very dynamic and loose language, and since it fails silently, it&#039;s easy to fall into traps of bad code. You can use the use strict mode in order to make your javascript fail more strictly and to keep you writing good code. Just put this at the top of any scripts you write.
</p>
<pre class="code javascript"><span class="st0">'use strict'</span><span class="sy0">;</span></pre>

<p>
Refer to <a href="http://ejohn.org/blog/ecmascript-5-strict-mode-json-and-more/" class="urlextern" title="http://ejohn.org/blog/ecmascript-5-strict-mode-json-and-more/"  rel="nofollow">John Resig&#039;s article on the use strict</a> to find out what it does.
</p>

<p>
<strong>Other Bad Parts</strong>
</p>

<p>
One thing that trips up javascript developers is the binding of “this” in objects. This is considered a confusing part of javascript as it was not developed to be OOP from the beginning. Refer to these slides for an explanation on the bad parts of javascript.
</p>
<ul>
<li class="level1"><div class="li"> <a href="http://johnkpaul.github.com/presentations/empirejs/javascript-bad-parts/" class="urlextern" title="http://johnkpaul.github.com/presentations/empirejs/javascript-bad-parts/"  rel="nofollow">Javascript Bad Parts</a></div>
</li>
</ul>

<p>
<strong>Shims and Polyfills</strong>
</p>

<p>
Because the host environment that runs javascript could be different, front end developers often face the problem of adapting code for older browsers, and sometimes we even create polyfills for new features that current browsers don&#039;t support yet. Shims (or shivs) are just a generic name for any kind of interception of <abbr title="Application Programming Interface">API</abbr> calls, polyfills are code that provides a fallback for older browsers, they are usually implemented as shims.
</p>

<p>
The two most important shims you&#039;ll need is:
</p>
<ul>
<li class="level1"><div class="li"> <a href="https://github.com/kriskowal/es5-shim" class="urlextern" title="https://github.com/kriskowal/es5-shim"  rel="nofollow">ES5 Shim</a> - ES5 features are usually missing in <abbr title="Internet Explorer">IE</abbr>.</div>
</li>
<li class="level1"><div class="li"> <a href="https://github.com/paulmillr/es6-shim/" class="urlextern" title="https://github.com/paulmillr/es6-shim/"  rel="nofollow">ES6 Shim</a> - ES6 features are almost missing everywhere.</div>
</li>
<li class="level1"><div class="li"> <a href="http://bestiejs.github.com/json3/" class="urlextern" title="http://bestiejs.github.com/json3/"  rel="nofollow">JSON 3 Shim</a> - JSON3 required for <abbr title="Internet Explorer">IE</abbr>.</div>
</li>
<li class="level1"><div class="li"> <a href="https://github.com/angular-ui/angular-ui/tree/master/common/ieshiv" class="urlextern" title="https://github.com/angular-ui/angular-ui/tree/master/common/ieshiv"  rel="nofollow">IE Shiv</a> - For AngularJS, and Angular UI, so you can have custom tag names working as directives.</div>
</li>
</ul>

<p>
The above are just the basics. To work with HTML5 APIs, you&#039;ll need to consider your feature list and the browsers you want to support. The <a href="https://github.com/Modernizr/Modernizr/wiki/HTML5-Cross-browser-Polyfills" class="urlextern" title="https://github.com/Modernizr/Modernizr/wiki/HTML5-Cross-browser-Polyfills"  rel="nofollow">Modernizr wiki has a large list of maintained polyfills</a> for all sorts of projects.
</p>

</div>
<!-- EDIT3 SECTION "Working in Javascript" [7473-10569] -->
<h2 class="sectionedit4" id="oop_in_javascript">OOP in Javascript</h2>
<div class="level2">

<p>
In classical OOP languages, software is architected through a structure of classes that have properties and methods. Each class is instantiated and then calls upon classes its dependent on and uses them. Javascript however does have any concept of classes, instead it has prototypes. Note that if you want to know why we have to use OOP, refer to the <a href="/doku.php?id=web_application_development:php_-_server_side_architecture#object_oriented_programming_oop" class="wikilink1" title="web_application_development:php_-_server_side_architecture">Server Side Architecture on OOP</a>.
</p>

<p>
Prototype-based programming is a style of object-oriented programming in which classes are not present, and behavior reuse (known as inheritance in class-based languages) is accomplished through a process of decorating existing objects which serve as prototypes. This model is also known as class-less, prototype-oriented, or instance-based programming.
</p>

<p>
Javascript defines an object as an unordered collection of properties each of which contains a primitive value, object or function. It is the equivalent of an associative array in <abbr title="Hypertext Preprocessor">PHP</abbr> (javascript actually does not have an associative array concept). Each property is identified by their key. This means objects in javascript is far more flexible than objects in <abbr title="Hypertext Preprocessor">PHP</abbr>. They can be enumerated and iterated, and have setters and getters at run time. Objects can be used as simple data structures, or as structures that contain methods and functions like <abbr title="Hypertext Preprocessor">PHP</abbr>&#039;s objects. Due to this flexibility, almost everything in javascript is an object, and the creation and manipulation of objects can take many forms.
</p>

<p>
You refer to these resources on OOP in javascript before continuing:
</p>
<ul>
<li class="level1"><div class="li"> <a href="http://killdream.github.com/blog/2011/10/understanding-javascript-oop/" class="urlextern" title="http://killdream.github.com/blog/2011/10/understanding-javascript-oop/"  rel="nofollow">Understanding Javascript OOP</a></div>
</li>
<li class="level1"><div class="li"> <a href="https://developer.mozilla.org/en-US/docs/JavaScript/Introduction_to_Object-Oriented_JavaScript" class="urlextern" title="https://developer.mozilla.org/en-US/docs/JavaScript/Introduction_to_Object-Oriented_JavaScript"  rel="nofollow">Introduction to Object Oriented Javascript</a></div>
</li>
<li class="level1"><div class="li"> <a href="http://net.tutsplus.com/tutorials/javascript-ajax/the-basics-of-object-oriented-javascript/" class="urlextern" title="http://net.tutsplus.com/tutorials/javascript-ajax/the-basics-of-object-oriented-javascript/"  rel="nofollow">The Basics of Object Oriented Javascript</a></div>
</li>
<li class="level1"><div class="li"> <a href="http://stackoverflow.com/questions/9108925/how-is-almost-everything-in-javascript-an-object" class="urlextern" title="http://stackoverflow.com/questions/9108925/how-is-almost-everything-in-javascript-an-object"  rel="nofollow">Everything in Javascript is an Object</a></div>
</li>
</ul>

</div>
<!-- EDIT4 SECTION "OOP in Javascript" [10570-12714] -->
<h3 class="sectionedit5" id="object_creation">Object Creation</h3>
<div class="level3">

<p>
Creating objects in javascript can take many forms. Each has their advantages and disadvantages. You&#039;ll have to choose the one that works the best.
</p>

<p>
The simplest way to create an object is the through the object literal style, also known as short hand syntax. This style is not unlike the associative array in <abbr title="Hypertext Preprocessor">PHP</abbr>. You would use this whenever you need to create a container for some data, or a throw away object. Javascript libraries often use objects to configure their settings too, in which you would have experienced in <abbr title="Hypertext Preprocessor">PHP</abbr> with passing in associative arrays. Therefore this style is not intended for creating modularised code.
</p>
<pre class="code javascript"><span class="co1">//OBJECT LITERAL STYLE</span>
&nbsp;
<span class="kw1">var</span> object <span class="sy0">=</span> <span class="br0">&#123;</span>
    literalKey<span class="sy0">:</span> <span class="st0">'Blah'</span><span class="sy0">,</span> <span class="co1">//you can use literal keys, without quotes, but they must have no spaces in them</span>
    <span class="st0">'string key'</span><span class="sy0">:</span> <span class="st0">'Blahblah'</span>
<span class="br0">&#125;</span><span class="sy0">;</span>
&nbsp;
console.<span class="me1">log</span><span class="br0">&#40;</span><span class="kw1">typeof</span> object<span class="br0">&#41;</span><span class="sy0">;</span> <span class="co1">//will show that it's an object</span>
&nbsp;
&nbsp;
<span class="co1">//OBJECT CONSTRUCTOR STYLE (equivalent)</span>
&nbsp;
<span class="kw1">var</span> differentObject <span class="sy0">=</span> <span class="kw1">new</span> <span class="kw4">Object</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
differentObject.<span class="me1">name</span> <span class="sy0">=</span> <span class="st0">'I am a big object!'</span><span class="sy0">;</span>
&nbsp;
console.<span class="me1">log</span><span class="br0">&#40;</span>differentObject<span class="br0">&#41;</span><span class="sy0">;</span></pre>

<p>
In order to create objects in a classless programming language that is intended for modular code and code reuse, we can&#039;t use the object literal style. Instead we have the Constructor Pattern, Prototype Pattern, and Combination Constructor &amp; Prototype Pattern. There are others such as Parasitic Constructor Pattern and  Durable Constructor Pattern, however they are specialised for particular purposes. Also note that in these examples we are using function expressions, as this is a better practice than function declarations, it prevents the functions from polluting the global scope.
</p>

</div>

<h4 id="constructor_pattern">Constructor Pattern</h4>
<div class="level4">

<p>
This constructor pattern allows to create reusable modular units of code.
</p>

<p>
<a href="http://beta.plnkr.co/edit/QTO6W1?p=preview" class="urlextern" title="http://beta.plnkr.co/edit/QTO6W1?p=preview"  rel="nofollow">Plunker Demo</a>
</p>
<pre class="code javascript"><span class="st0">'use strict'</span><span class="sy0">;</span> <span class="co1">//everytime you write javascript code, make sure to do this, it forces you to write good javascript</span>
&nbsp;
<span class="co1">//Constructor Pattern</span>
&nbsp;
<span class="kw1">var</span> Person <span class="sy0">=</span> <span class="kw1">function</span><span class="br0">&#40;</span>name<span class="sy0">,</span> age<span class="sy0">,</span> job<span class="br0">&#41;</span><span class="br0">&#123;</span> <span class="co1">//by convention constructors should be capitalised based on StudlyCaps</span>
    <span class="co1">//this refers to the newly instantiated object</span>
    <span class="kw1">this</span>.<span class="me1">name</span> <span class="sy0">=</span> name<span class="sy0">;</span>
    <span class="kw1">this</span>.<span class="me1">age</span> <span class="sy0">=</span> age<span class="sy0">;</span>
    <span class="kw1">this</span>.<span class="me1">job</span> <span class="sy0">=</span> job<span class="sy0">;</span>
    <span class="kw1">this</span>.<span class="me1">sayName</span> <span class="sy0">=</span> <span class="kw1">function</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#123;</span>
        console.<span class="me1">log</span><span class="br0">&#40;</span><span class="kw1">this</span>.<span class="me1">name</span><span class="br0">&#41;</span><span class="sy0">;</span>
    <span class="br0">&#125;</span><span class="sy0">;</span>
<span class="br0">&#125;</span>
&nbsp;
<span class="co1">//by &quot;newing&quot; the function, it executes the function, and binds &quot;this&quot; to the new variable, the variable becomes an object construct</span>
<span class="kw1">var</span> person1 <span class="sy0">=</span> <span class="kw1">new</span> Person<span class="br0">&#40;</span><span class="st0">'Roger'</span><span class="sy0">,</span> <span class="st0">'21'</span><span class="sy0">,</span> <span class="st0">'Awesome'</span><span class="br0">&#41;</span><span class="sy0">;</span>
<span class="kw1">var</span> person2 <span class="sy0">=</span> <span class="kw1">new</span> Person<span class="br0">&#40;</span><span class="st0">'Dave'</span><span class="sy0">,</span> <span class="nu0">43</span><span class="sy0">,</span> <span class="st0">'Yeap'</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
person1.<span class="me1">sayName</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
person2.<span class="me1">sayName</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
console.<span class="me1">log</span><span class="br0">&#40;</span><span class="kw1">typeof</span> person1<span class="br0">&#41;</span><span class="sy0">;</span></pre>

</div>

<h4 id="prototype_pattern">Prototype Pattern</h4>
<div class="level4">

<p>
However what happens to inheritance? After all one of the great advantages of OOP is the ability to have concrete classes inherit from abstract parent classes. This way you can share code between similar objects. Well in javascript we have to use <a href="http://en.wikipedia.org/wiki/Prototype-based" class="interwiki iw_wp" title="http://en.wikipedia.org/wiki/Prototype-based">prototypes</a> instead. Everytime you create a function, it contains a prototype property. By setting properties onto the prototype, and then constructing an object from that function, the properties on that prototype gets shared among all object instances.
</p>

<p>
<a href="http://beta.plnkr.co/edit/oM8QPa?p=preview" class="urlextern" title="http://beta.plnkr.co/edit/oM8QPa?p=preview"  rel="nofollow">Plunker Demo</a>
</p>
<pre class="code javascript"><span class="st0">'use strict'</span><span class="sy0">;</span>
&nbsp;
<span class="co1">//Prototype pattern </span>
&nbsp;
<span class="kw1">var</span> Person <span class="sy0">=</span> <span class="kw1">function</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#123;</span><span class="br0">&#125;</span><span class="sy0">;</span>
&nbsp;
<span class="co1">//all of these are shared among all object instances</span>
Person.<span class="kw1">prototype</span>.<span class="me1">name</span> <span class="sy0">=</span> <span class="st0">'Nicholas'</span><span class="sy0">;</span>
Person.<span class="kw1">prototype</span>.<span class="me1">age</span> <span class="sy0">=</span> <span class="nu0">29</span><span class="sy0">;</span>
Person.<span class="kw1">prototype</span>.<span class="me1">job</span> <span class="sy0">=</span> <span class="st0">'Software Engineer'</span><span class="sy0">;</span>
Person.<span class="kw1">prototype</span>.<span class="me1">sayName</span> <span class="sy0">=</span> <span class="kw1">function</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#123;</span>
    console.<span class="me1">log</span><span class="br0">&#40;</span><span class="kw1">this</span>.<span class="me1">name</span><span class="br0">&#41;</span><span class="sy0">;</span>
<span class="br0">&#125;</span><span class="sy0">;</span>
&nbsp;
<span class="kw1">var</span> person1 <span class="sy0">=</span> <span class="kw1">new</span> Person<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
<span class="kw1">var</span> person2 <span class="sy0">=</span> <span class="kw1">new</span> Person<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
person1.<span class="me1">sayName</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
person2.<span class="me1">sayName</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
<span class="co1">//is the two functions the same?</span>
console.<span class="me1">log</span><span class="br0">&#40;</span>person1.<span class="me1">sayName</span> <span class="sy0">===</span> person2.<span class="me1">sayName</span><span class="br0">&#41;</span><span class="sy0">;</span> <span class="co1">//in js, we use triple equals more often than double equals due to its weird type conversion!</span></pre>

<p>
<strong>Prototype &amp; Constructor Combination Pattern</strong>
</p>

<p>
Understanding prototypes is crucial to understanding OOP in javascript. The below code example combines the unique instantiations of the constructor pattern with the shared methods of the prototype pattern. This pattern of combination is probably the most common form of object creation you&#039;ll see in javascript land.
</p>

<p>
<a href="http://beta.plnkr.co/edit/ZVo66w?p=preview" class="urlextern" title="http://beta.plnkr.co/edit/ZVo66w?p=preview"  rel="nofollow">Plunker Demo</a>
</p>
<pre class="code javascript"><span class="st0">'use strict'</span><span class="sy0">;</span>
&nbsp;
<span class="co1">//Prototype &amp; Constructor combination pattern </span>
&nbsp;
<span class="kw1">var</span> Person <span class="sy0">=</span> <span class="kw1">function</span><span class="br0">&#40;</span>name<span class="sy0">,</span> age<span class="sy0">,</span> job<span class="br0">&#41;</span><span class="br0">&#123;</span>
    <span class="co1">//these properties will be unique to each instance</span>
    <span class="kw1">this</span>.<span class="me1">name</span> <span class="sy0">=</span> name<span class="sy0">;</span>
    <span class="kw1">this</span>.<span class="me1">age</span> <span class="sy0">=</span> age<span class="sy0">;</span>
    <span class="kw1">this</span>.<span class="me1">job</span> <span class="sy0">=</span> job<span class="sy0">;</span>
<span class="br0">&#125;</span><span class="sy0">;</span>
&nbsp;
<span class="co1">//this is shared among all instances</span>
Person.<span class="kw1">prototype</span>.<span class="me1">sayName</span> <span class="sy0">=</span> <span class="kw1">function</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#123;</span>
    console.<span class="me1">log</span><span class="br0">&#40;</span><span class="kw1">this</span>.<span class="me1">name</span><span class="br0">&#41;</span><span class="sy0">;</span>
<span class="br0">&#125;</span><span class="sy0">;</span>
&nbsp;
<span class="kw1">var</span> person1 <span class="sy0">=</span> <span class="kw1">new</span> Person<span class="br0">&#40;</span><span class="st0">'Dave'</span><span class="sy0">,</span> <span class="nu0">21</span><span class="sy0">,</span> <span class="st0">'Super Developer'</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
person1.<span class="me1">sayName</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
console.<span class="me1">log</span><span class="br0">&#40;</span>person1<span class="br0">&#41;</span><span class="sy0">;</span>
<span class="co1">//person1 object instance has a __proto__ property</span>
console.<span class="me1">log</span><span class="br0">&#40;</span>person1.<span class="kw3">__proto__</span><span class="br0">&#41;</span><span class="sy0">;</span>
<span class="co1">//it points to the Constructor's prototype</span>
console.<span class="me1">log</span><span class="br0">&#40;</span>person1.<span class="kw3">__proto__</span> <span class="sy0">===</span> Person.<span class="kw1">prototype</span><span class="br0">&#41;</span><span class="sy0">;</span> 
&nbsp;
<span class="co1">//the constructor function has a prototype</span>
console.<span class="me1">log</span><span class="br0">&#40;</span>Person.<span class="kw1">prototype</span><span class="br0">&#41;</span><span class="sy0">;</span>
<span class="co1">//the prototype has a constructor property pointing back to the constructor function</span>
console.<span class="me1">log</span><span class="br0">&#40;</span>Person.<span class="kw1">prototype</span>.<span class="me1">constructor</span> <span class="sy0">===</span> Person<span class="br0">&#41;</span><span class="sy0">;</span> </pre>

<p>
The question you should be asking is how does the <code>sayName()</code> function still work? Where is the <code>this</code> referring to? And how does it get the name of “Dave”? When a property is looked up inside an object, javascript searches on the object instance itself. If it is found, javascript stops searching. If it is not found, the search continues to its prototype, and looks through it to find the property. We can see that the above code demonstrates that there are multiple occurences of where javascript is searching, and finding a property on the instance (produced by the constructor), and sometimes finding the property on the prototype. When <code>person1.sayName();</code> is called, that&#039;s accessing the prototype. When <code>this.name</code> is accessed inside the <code>sayName()</code> function, then it&#039;s accessing the object instance. You can start to see how javascript allows code reuse through the mixing of constructors and prototypes.
</p>

<p>
Because the object instances takes priority over the prototype, this allows method overriding. This is as simple as redeclaring a property with the same name onto the object instance. It shadows the property on the prototype. 
</p>

<p>
<a href="http://beta.plnkr.co/edit/yW9srh?p=preview" class="urlextern" title="http://beta.plnkr.co/edit/yW9srh?p=preview"  rel="nofollow">Plunker Demo</a>
</p>
<pre class="code javascript"><span class="st0">'use strict'</span><span class="sy0">;</span>
&nbsp;
<span class="co1">//demonstrating shadowing or method overriding with &quot;private&quot; variables</span>
&nbsp;
<span class="kw1">var</span> Person <span class="sy0">=</span> <span class="kw1">function</span><span class="br0">&#40;</span>name<span class="sy0">,</span> age<span class="sy0">,</span> job<span class="br0">&#41;</span><span class="br0">&#123;</span>
    <span class="kw1">this</span>.<span class="me1">name</span> <span class="sy0">=</span> name<span class="sy0">;</span>
    <span class="kw1">this</span>.<span class="me1">age</span> <span class="sy0">=</span> age<span class="sy0">;</span>
    <span class="kw1">this</span>.<span class="me1">job</span> <span class="sy0">=</span> job<span class="sy0">;</span>
    <span class="kw1">var</span> privateVariable <span class="sy0">=</span> <span class="st0">'I am the equivalent of private variables'</span><span class="sy0">;</span>
    <span class="kw1">this</span>.<span class="me1">privelegedMethod</span> <span class="sy0">=</span> <span class="kw1">function</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#123;</span>
        <span class="kw1">return</span> privateVariable<span class="sy0">;</span>
    <span class="br0">&#125;</span>
<span class="br0">&#125;</span><span class="sy0">;</span>
&nbsp;
<span class="co1">//fallback method on the prototype</span>
Person.<span class="kw1">prototype</span>.<span class="me1">sayName</span> <span class="sy0">=</span> <span class="kw1">function</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#123;</span>
    console.<span class="me1">log</span><span class="br0">&#40;</span><span class="kw1">this</span>.<span class="me1">age</span><span class="br0">&#41;</span><span class="sy0">;</span> <span class="co1">//says the age</span>
<span class="br0">&#125;</span><span class="sy0">;</span>
&nbsp;
<span class="kw1">var</span> person1 <span class="sy0">=</span> <span class="kw1">new</span> Person<span class="br0">&#40;</span><span class="st0">'Dave'</span><span class="sy0">,</span> <span class="nu0">21</span><span class="sy0">,</span> <span class="st0">'Super Developer'</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
<span class="co1">//overrides the prototype method</span>
person1.<span class="me1">sayName</span> <span class="sy0">=</span> <span class="kw1">function</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#123;</span>
    console.<span class="me1">log</span><span class="br0">&#40;</span><span class="kw1">this</span>.<span class="me1">name</span><span class="br0">&#41;</span><span class="sy0">;</span>
    console.<span class="me1">log</span><span class="br0">&#40;</span><span class="kw1">this</span>.<span class="me1">privelegedMethod</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy0">;</span>
<span class="br0">&#125;</span>
&nbsp;
<span class="co1">//executes the object instance's method</span>
person1.<span class="me1">sayName</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span> <span class="co1">//says the name!</span>
&nbsp;
<span class="co1">//now how do we call the prototype method if it's been overwritten?</span>
<span class="co1">//By calling it via the __proto__ in the object instance or part of the constructor function</span>
<span class="kw1">var</span> o <span class="sy0">=</span> <span class="br0">&#123;</span> age<span class="sy0">:</span> <span class="nu0">15</span> <span class="br0">&#125;</span><span class="sy0">;</span>
person1.<span class="kw3">__proto__</span>.<span class="me1">sayName</span>.<span class="me1">call</span><span class="br0">&#40;</span>o<span class="br0">&#41;</span><span class="sy0">;</span> <span class="co1">//these are binding functions (will display 15)</span>
<span class="co1">//notice how we didn't need to use () to execute the function, the call and apply takes care of that</span>
Person.<span class="kw1">prototype</span>.<span class="me1">sayName</span>.<span class="me1">apply</span><span class="br0">&#40;</span>person1<span class="br0">&#41;</span><span class="sy0">;</span> <span class="co1">//another binding function (will display 21)</span>
&nbsp;
<span class="co1">//this will show nothing due to lack of binding, more on this in the understanding &quot;this&quot; section</span>
Person.<span class="kw1">prototype</span>.<span class="me1">sayName</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span></pre>

<p>
Note that there is also a shorter way of defining multiple properties onto the prototype. See <a href="http://beta.plnkr.co/edit/lGGH9p?p=preview" class="urlextern" title="http://beta.plnkr.co/edit/lGGH9p?p=preview"  rel="nofollow">Plunker demo of short hand prototype definition</a>. But make sure to be careful when iterating the object in a loop!
</p>

<p>
If you need to determine whether a property is part of the object instance or part of the prototype you can use the <code>hasOwnProperty()</code> function. This is often used in <code>for in</code> <a href="http://stackoverflow.com/questions/921789/how-to-loop-through-javascript-object-literal-with-objects-as-members" class="urlextern" title="http://stackoverflow.com/questions/921789/how-to-loop-through-javascript-object-literal-with-objects-as-members"  rel="nofollow">loops that iterate through the object&#039;s properties</a> and you need to avoid the prototype&#039;s properties when iterating.
</p>
<pre class="code javascript"><span class="kw1">for</span><span class="br0">&#40;</span><span class="kw1">var</span> key <span class="kw1">in</span> object<span class="br0">&#41;</span><span class="br0">&#123;</span> <span class="co1">//notice the var operator inside the for loop, we want to avoid pollution!</span>
    <span class="kw1">if</span><span class="br0">&#40;</span>object.<span class="kw3">hasOwnProperty</span><span class="br0">&#40;</span>key<span class="br0">&#41;</span><span class="br0">&#41;</span><span class="br0">&#123;</span> <span class="co1">//this will make sure that the iterated values are part of the object instance, not prototype! Unless of course you want it!</span>
&nbsp;
        <span class="kw1">var</span> value <span class="sy0">=</span> object<span class="br0">&#91;</span>key<span class="br0">&#93;</span><span class="sy0">;</span> <span class="co1">//object properties can be accessed via array style syntax too!</span>
        console.<span class="me1">log</span><span class="br0">&#40;</span>value<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
    <span class="br0">&#125;</span>
<span class="br0">&#125;</span></pre>

</div>
<!-- EDIT5 SECTION "Object Creation" [12715-21458] -->
<h3 class="sectionedit6" id="understanding_this_context_and_binding">Understanding &quot;this&quot; Context and Binding</h3>
<div class="level3">

<p>
A key concept in javascript OOP is that the “this” context changes based on where it&#039;s been invocated (called and executed), not where it&#039;s been declared (where it was written in the code). In classical OOP languages, the binding of “this” to the object context is implicit, it&#039;s always the immediate parent object. However in javascript this isn&#039;t always the case. In javascript, binding loss can occur whenever you&#039;re accessing a function through a reference rather than directly through its object context.
</p>

<p>
Consider these examples of binding the “this”:
</p>

<p>
<a href="http://beta.plnkr.co/edit/p8m3ai?p=preview" class="urlextern" title="http://beta.plnkr.co/edit/p8m3ai?p=preview"  rel="nofollow">Plunker Demo</a>
</p>
<pre class="code javascript"><span class="co1">//'use strict'; //this is commented out, as use strict would actually make this demonstration impossible, it tells you when you have binding loss, uncomment it to see it working!</span>
&nbsp;
<span class="co1">//demonstration of binding sensitive code, be careful of these!</span>
&nbsp;
<span class="kw1">var</span> name <span class="sy0">=</span> <span class="st0">'I am in the window! You should not see me!'</span><span class="sy0">;</span>
&nbsp;
<span class="kw1">var</span> object <span class="sy0">=</span> <span class="br0">&#123;</span>
	name<span class="sy0">:</span> <span class="st0">'Hi I am an object!'</span><span class="sy0">,</span>
	greet<span class="sy0">:</span> <span class="kw1">function</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#123;</span>
		console.<span class="me1">log</span><span class="br0">&#40;</span><span class="st0">'Message: '</span> <span class="sy0">+</span> <span class="kw1">this</span>.<span class="me1">name</span><span class="br0">&#41;</span><span class="sy0">;</span>
	<span class="br0">&#125;</span><span class="sy0">,</span>
	timeoutMethod<span class="sy0">:</span> <span class="kw1">function</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#123;</span>
		setTimeout<span class="br0">&#40;</span><span class="kw1">function</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#123;</span>
			console.<span class="me1">log</span><span class="br0">&#40;</span><span class="st0">'Timeout Method: '</span> <span class="sy0">+</span> <span class="kw1">this</span>.<span class="me1">name</span><span class="br0">&#41;</span><span class="sy0">;</span>
		<span class="br0">&#125;</span><span class="sy0">,</span> <span class="nu0">2000</span><span class="br0">&#41;</span><span class="sy0">;</span>
	<span class="br0">&#125;</span><span class="sy0">,</span>
	bindingTimeoutMethod<span class="sy0">:</span> <span class="kw1">function</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#123;</span>
		setTimeout<span class="br0">&#40;</span><span class="kw1">this</span>.<span class="me1">funcToBeTimedOut</span><span class="sy0">,</span> <span class="nu0">3000</span><span class="br0">&#41;</span><span class="sy0">;</span>
	<span class="br0">&#125;</span><span class="sy0">,</span>
	funcToBeTimedOut<span class="sy0">:</span> <span class="kw1">function</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#123;</span>
		console.<span class="me1">log</span><span class="br0">&#40;</span><span class="st0">'Second Timeout Method '</span> <span class="sy0">+</span> <span class="kw1">this</span>.<span class="me1">name</span><span class="br0">&#41;</span><span class="sy0">;</span>
	<span class="br0">&#125;</span>
<span class="br0">&#125;</span><span class="sy0">;</span>
<span class="co1">//&quot;METHOD CALL&quot;</span>
object.<span class="me1">greet</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span> <span class="co1">//works</span>
&nbsp;
<span class="co1">//&quot;BASELESS FUNCTION CALL&quot;</span>
<span class="co1">//executing the function outside of the object context</span>
<span class="co1">//the &quot;this&quot; loses its binding, it actually binds to window global!</span>
<span class="kw1">var</span> funcToBeExecutedOutside <span class="sy0">=</span> object.<span class="me1">greet</span><span class="sy0">;</span>
funcToBeExecutedOutside<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span> <span class="co1">//does not work</span>
&nbsp;
<span class="co1">//&quot;METHOD CALLBACK&quot;</span>
<span class="co1">//still loses the binding</span>
<span class="kw1">var</span> anotherObject <span class="sy0">=</span> <span class="br0">&#123;</span>
	highFunc<span class="sy0">:</span> <span class="kw1">function</span><span class="br0">&#40;</span>callback<span class="br0">&#41;</span><span class="br0">&#123;</span>
		callback<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span> <span class="co1">//executes object.greet();</span>
	<span class="br0">&#125;</span>
<span class="br0">&#125;</span><span class="sy0">;</span>
anotherObject.<span class="me1">highFunc</span><span class="br0">&#40;</span>object.<span class="me1">greet</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
<span class="co1">//&quot;USING TIMEOUT&quot;</span>
<span class="co1">//also loses its binding</span>
setTimeout<span class="br0">&#40;</span>object.<span class="me1">greet</span><span class="sy0">,</span> <span class="nu0">1000</span><span class="br0">&#41;</span><span class="sy0">;</span>
<span class="co1">//even when it is inside the a method! (think about where this is been invocated, it's not inside the object context, its part of setTimeout!)</span>
object.<span class="me1">timeoutMethod</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
<span class="co1">//similar concept, calling a method that calls its own method, still fails</span>
object.<span class="me1">bindingTimeoutMethod</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
<span class="co1">//this one will still work, because it is still a &quot;METHOD CALL&quot;</span>
<span class="kw1">var</span> thirdObject <span class="sy0">=</span> <span class="br0">&#123;</span>
	thirdPartyMethod<span class="sy0">:</span> <span class="kw1">function</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#123;</span>
		object.<span class="me1">greet</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
	<span class="br0">&#125;</span>
<span class="br0">&#125;</span><span class="sy0">;</span>
&nbsp;
thirdObject.<span class="me1">thirdPartyMethod</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span></pre>

<p>
In order to solve this problem of binding loss, we need to explicitly bind the “this” back to the correct object context. There are several ways of doing this depending on your situation. The most common ways are the closure method, <a href="https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Function/apply" class="urlextern" title="https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Function/apply"  rel="nofollow">apply method</a>, and <a href="https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Function/call" class="urlextern" title="https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Function/call"  rel="nofollow">call method</a>. The closure method works when you&#039;re writing a throw away anonymous function, and you have the ability to wrap it in another function while being side the object. The apply and call methods allow you to pass in parameters to the function, however you need to have the right context available. You should use the apply method whenever you don&#039;t know the number of parameters to the function, the parameters can then be dynamically accessed via the <a href="https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Functions_and_function_scope/arguments" class="urlextern" title="https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Functions_and_function_scope/arguments"  rel="nofollow">arguments variable</a> inside of the function.
</p>

<p>
The <a href="https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Function/bind" class="urlextern" title="https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Function/bind"  rel="nofollow">bind method</a> in ES5 is far more flexible as it doesn&#039;t automatically execute your function allowing it to be used in callback situations. However this does not have <a href="http://kangax.github.com/es5-compat-table/" class="urlextern" title="http://kangax.github.com/es5-compat-table/"  rel="nofollow">IE8 support</a>, so you&#039;ll need to use the <a href="https://github.com/kriskowal/es5-shim" class="urlextern" title="https://github.com/kriskowal/es5-shim"  rel="nofollow">ES5 shim</a> in your scripts.
</p>

<p>
Note that in ES6 which currently is under development, there will be a new way of declaring functions that have implicit “this” binding. It&#039;s called the <a href="http://css.dzone.com/articles/javascript-fat-city" class="urlextern" title="http://css.dzone.com/articles/javascript-fat-city"  rel="nofollow">fat arrow function</a>.
</p>

<p>
<a href="http://beta.plnkr.co/edit/WejeTp?p=preview" class="urlextern" title="http://beta.plnkr.co/edit/WejeTp?p=preview"  rel="nofollow">Plunker Demo</a>
</p>
<pre class="code javascript"><span class="st0">'use strict'</span><span class="sy0">;</span> <span class="co1">//strict works now</span>
&nbsp;
<span class="co1">//demonstration binding solutions</span>
&nbsp;
<span class="kw1">var</span> name <span class="sy0">=</span> <span class="st0">'I am in the window! You should not see me!'</span><span class="sy0">;</span>
&nbsp;
<span class="kw1">var</span> object <span class="sy0">=</span> <span class="br0">&#123;</span>
	name<span class="sy0">:</span> <span class="st0">'Hi I am an object!'</span><span class="sy0">,</span>
	greet<span class="sy0">:</span> <span class="kw1">function</span><span class="br0">&#40;</span>parameter<span class="br0">&#41;</span><span class="br0">&#123;</span>
		console.<span class="me1">log</span><span class="br0">&#40;</span><span class="st0">'Message: '</span> <span class="sy0">+</span> <span class="kw1">this</span>.<span class="me1">name</span><span class="br0">&#41;</span><span class="sy0">;</span>
		<span class="kw1">if</span><span class="br0">&#40;</span><span class="kw1">typeof</span> parameter <span class="sy0">!==</span> <span class="st0">'undefined'</span><span class="br0">&#41;</span><span class="br0">&#123;</span>
			console.<span class="me1">log</span><span class="br0">&#40;</span>parameter<span class="br0">&#41;</span><span class="sy0">;</span>
		<span class="br0">&#125;</span>
	<span class="br0">&#125;</span><span class="sy0">,</span>
	timeoutMethod<span class="sy0">:</span> <span class="kw1">function</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#123;</span>
		<span class="co1">//closure, fix the &quot;this&quot;</span>
		<span class="kw1">var</span> self <span class="sy0">=</span> <span class="kw1">this</span><span class="sy0">;</span>
		setTimeout<span class="br0">&#40;</span><span class="kw1">function</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#123;</span>
			console.<span class="me1">log</span><span class="br0">&#40;</span><span class="st0">'Timeout Method: '</span> <span class="sy0">+</span> self.<span class="me1">name</span> <span class="sy0">+</span> <span class="st0">' (FROM CLOSURE)'</span><span class="br0">&#41;</span><span class="sy0">;</span>
		<span class="br0">&#125;</span><span class="sy0">,</span> <span class="nu0">2000</span><span class="br0">&#41;</span><span class="sy0">;</span>
	<span class="br0">&#125;</span><span class="sy0">,</span>
	bindingTimeoutMethod<span class="sy0">:</span> <span class="kw1">function</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#123;</span>
		<span class="co1">//the first this works (implicit binding)</span>
		<span class="co1">//the second this is explicitly binded to the funcToBeTimedOut</span>
		setTimeout<span class="br0">&#40;</span><span class="kw1">this</span>.<span class="me1">funcToBeTimedOut</span>.<span class="me1">bind</span><span class="br0">&#40;</span><span class="kw1">this</span><span class="br0">&#41;</span><span class="sy0">,</span> <span class="nu0">3000</span><span class="br0">&#41;</span><span class="sy0">;</span>
	<span class="br0">&#125;</span><span class="sy0">,</span>
	funcToBeTimedOut<span class="sy0">:</span> <span class="kw1">function</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#123;</span>
		console.<span class="me1">log</span><span class="br0">&#40;</span><span class="st0">'Second Timeout Method '</span> <span class="sy0">+</span> <span class="kw1">this</span>.<span class="me1">name</span> <span class="sy0">+</span> <span class="st0">' (BIND WITHIN METHOD)'</span><span class="br0">&#41;</span><span class="sy0">;</span>
	<span class="br0">&#125;</span>
<span class="br0">&#125;</span><span class="sy0">;</span>
&nbsp;
<span class="kw1">var</span> funcToBeExecutedOutside <span class="sy0">=</span> object.<span class="me1">greet</span><span class="sy0">;</span>
&nbsp;
<span class="co1">//&quot;APPLY METHOD&quot;</span>
<span class="co1">//apply actually executes the function</span>
funcToBeExecutedOutside.<span class="me1">apply</span><span class="br0">&#40;</span>object<span class="sy0">,</span> <span class="br0">&#91;</span><span class="st0">'FROM APPLY'</span><span class="br0">&#93;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
<span class="co1">//&quot;CALL METHOD&quot;</span>
<span class="co1">//call actually executes the function</span>
funcToBeExecutedOutside.<span class="me1">call</span><span class="br0">&#40;</span>object<span class="sy0">,</span> <span class="st0">'FROM CALL'</span><span class="br0">&#41;</span>
&nbsp;
<span class="co1">//&quot;BIND METHOD&quot; (ES5 syntax, no IE8 support, requires shim!)</span>
<span class="co1">//bind does not execute the function, allowing its use in callbacks</span>
<span class="co1">//notice the extra parantheses to execute and pass in parameters!</span>
funcToBeExecutedOutside.<span class="me1">bind</span><span class="br0">&#40;</span>object<span class="br0">&#41;</span><span class="br0">&#40;</span><span class="st0">'FROM BIND'</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
<span class="co1">//&quot;BIND WITH CALLBACK&quot;</span>
<span class="kw1">var</span> anotherObject <span class="sy0">=</span> <span class="br0">&#123;</span>
	highFunc<span class="sy0">:</span> <span class="kw1">function</span><span class="br0">&#40;</span>callback<span class="br0">&#41;</span><span class="br0">&#123;</span>
		callback<span class="br0">&#40;</span><span class="st0">'FROM CALLBACK BIND'</span><span class="br0">&#41;</span><span class="sy0">;</span>
	<span class="br0">&#125;</span>
<span class="br0">&#125;</span><span class="sy0">;</span>
anotherObject.<span class="me1">highFunc</span><span class="br0">&#40;</span>object.<span class="me1">greet</span>.<span class="me1">bind</span><span class="br0">&#40;</span>object<span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy0">;</span> <span class="co1">//this requires bind! No extra parantheses, since we're passing it in as a callback</span>
&nbsp;
<span class="co1">//&quot;USING TIMEOUT&quot;</span>
<span class="co1">//setTimeout cannot be used with call or apply! It needs bind</span>
setTimeout<span class="br0">&#40;</span>object.<span class="me1">greet</span>.<span class="me1">bind</span><span class="br0">&#40;</span>object<span class="br0">&#41;</span><span class="sy0">,</span> <span class="nu0">1000</span><span class="sy0">,</span> <span class="st0">'FROM TIMEOUT BIND'</span><span class="br0">&#41;</span><span class="sy0">;</span>
<span class="co1">//timeout has a third parameter available in modern browsers</span>
&nbsp;
<span class="co1">//&quot;CLOSURE METHOD&quot; (see the function)</span>
object.<span class="me1">timeoutMethod</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
<span class="co1">//this is another bind, but inside the method call</span>
object.<span class="me1">bindingTimeoutMethod</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span></pre>

<p>
Remember that if you are using frameworks or libraries, sometimes they will explicitly bind the “this” to what they consider to be the most appropriate construct. This is especially true when it comes to events and <abbr title="Document Object Model">DOM</abbr> manipulation. Certain frameworks also offer a binding construct that you can use to abstract from browser differences. One example would be <a href="http://api.jquery.com/jQuery.proxy/" class="urlextern" title="http://api.jquery.com/jQuery.proxy/"  rel="nofollow">jQuery&#039;s proxy method</a>. This is no longer required with the introduction of ES5&#039;s bind method. However you may still see it out there in the wild.
</p>

</div>
<!-- EDIT6 SECTION "Understanding this Context and Binding" [21459-28105] -->
<h3 class="sectionedit7" id="inheritance">Inheritance</h3>
<div class="level3">

<p>
While we have learned how to create objects via the combination of constructor and prototype pattern. However that only works for one object linked to one prototype. In large applications, the inheritance chain could be much longer and wider. Therefore we have to understand the concept of inheritance a bit more.
</p>

</div>

<h4 id="prototype_chaining">Prototype Chaining</h4>
<div class="level4">

<p>
Prototype chaining is defined as the primary method of inheritance in ECMAScript. It is possible to assign the prototype of a constructor to an instance of another constructor, which could have it&#039;s own prototype. Think of <a href="http://johnkpaul.github.com/presentations/empirejs/javascript-bad-parts/#/11" class="urlextern" title="http://johnkpaul.github.com/presentations/empirejs/javascript-bad-parts/#/11"  rel="nofollow">prototypes as omnipresent shadows that follow all the instantiations around</a>.
</p>

<p>
<a href="http://beta.plnkr.co/edit/hY0TiP?p=preview" class="urlextern" title="http://beta.plnkr.co/edit/hY0TiP?p=preview"  rel="nofollow">Plunker Demo</a>
</p>
<pre class="code javascript"><span class="st0">'use strict'</span><span class="sy0">;</span>
&nbsp;
<span class="co1">//prototype chaining demonstration</span>
&nbsp;
<span class="co1">//parent object</span>
<span class="kw1">var</span> Animal <span class="sy0">=</span> <span class="kw1">function</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#123;</span>
	<span class="kw1">this</span>.<span class="me1">weight</span> <span class="sy0">=</span> <span class="st0">'100kg'</span><span class="sy0">;</span>
<span class="br0">&#125;</span><span class="sy0">;</span>
&nbsp;
Animal.<span class="kw1">prototype</span>.<span class="me1">getWeight</span> <span class="sy0">=</span> <span class="kw1">function</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#123;</span>
	<span class="kw1">return</span> <span class="kw1">this</span>.<span class="me1">weight</span><span class="sy0">;</span>
<span class="br0">&#125;</span><span class="sy0">;</span>
&nbsp;
<span class="co1">//child object</span>
<span class="kw1">var</span> Pig <span class="sy0">=</span> <span class="kw1">function</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#123;</span>
	<span class="kw1">this</span>.<span class="me1">colour</span> <span class="sy0">=</span> <span class="st0">'Pink'</span><span class="sy0">;</span>
<span class="br0">&#125;</span><span class="sy0">;</span>
&nbsp;
<span class="co1">//Pig now inherits a prototype that is actually the constructor instantiation of Animal</span>
Pig.<span class="kw1">prototype</span> <span class="sy0">=</span> <span class="kw1">new</span> Animal<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
<span class="co1">//we can add to the prototype in dynamic languages</span>
Pig.<span class="kw1">prototype</span>.<span class="me1">getColour</span> <span class="sy0">=</span> <span class="kw1">function</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#123;</span>
	<span class="kw1">return</span> <span class="kw1">this</span>.<span class="me1">colour</span><span class="sy0">;</span>
<span class="br0">&#125;</span>
&nbsp;
<span class="kw1">var</span> pig <span class="sy0">=</span> <span class="kw1">new</span> Pig<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
<span class="co1">//notice how both functions are in prototypes</span>
console.<span class="me1">log</span><span class="br0">&#40;</span>pig.<span class="me1">getWeight</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy0">;</span> <span class="co1">//from the parent</span>
console.<span class="me1">log</span><span class="br0">&#40;</span>pig.<span class="me1">getColour</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy0">;</span> <span class="co1">//from the child</span>
&nbsp;
<span class="co1">//because they are inherited, the prototypes are &quot;combined&quot;, therefore javascript only ever considers two areas when looking up properties, the object's instance, and the object's prototype!</span>
console.<span class="me1">log</span><span class="br0">&#40;</span>Animal.<span class="kw1">prototype</span><span class="br0">&#41;</span><span class="sy0">;</span> <span class="co1">//has the getWeight</span>
console.<span class="me1">log</span><span class="br0">&#40;</span>Pig.<span class="kw1">prototype</span><span class="br0">&#41;</span><span class="sy0">;</span> <span class="co1">//has the getWeight and getColour</span>
console.<span class="me1">log</span><span class="br0">&#40;</span>pig.<span class="kw3">__proto__</span><span class="br0">&#41;</span><span class="sy0">;</span> <span class="co1">//same</span>
&nbsp;
<span class="co1">//protoypes can be overwritten</span>
Pig.<span class="kw1">prototype</span>.<span class="me1">getWeight</span> <span class="sy0">=</span> <span class="kw1">function</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#123;</span>
    <span class="kw1">return</span> <span class="st0">'1000 kg'</span><span class="sy0">;</span>
<span class="br0">&#125;</span><span class="sy0">;</span>
&nbsp;
<span class="kw1">var</span> heavierPig <span class="sy0">=</span> <span class="kw1">new</span> Pig<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
console.<span class="me1">log</span><span class="br0">&#40;</span>heavierPig.<span class="me1">getWeight</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy0">;</span></pre>

<p>
Remember that all objects in javascript inherit from the native <code>Object.prototype</code>. That&#039;s how you can get access to the native <abbr title="Application Programming Interface">API</abbr> methods such as <code>hasOwnProperty</code>, <code>toString</code> and <code>valueOf</code>. You can find out more about the <a href="https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Object/prototype" class="urlextern" title="https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Object/prototype"  rel="nofollow">native object prototype methods on MDN</a> &amp; <a href="https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Object" class="urlextern" title="https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Object"  rel="nofollow">native object methods on MDN</a>. Similarly functions descend from the <code>Function.prototype</code>. Check out the <a href="https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Function/prototype" class="urlextern" title="https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Function/prototype"  rel="nofollow">native function API on MDN</a>.
</p>

<p>
Because prototypes are “shadows” that are shared across all instances, if you need a unique instance property to be on the parent object, this becomes impossible, as it will affect all instances. Consider this example:
</p>

<p>
<a href="http://beta.plnkr.co/edit/Nq8f16?p=preview" class="urlextern" title="http://beta.plnkr.co/edit/Nq8f16?p=preview"  rel="nofollow">Plunker Demo</a>
</p>
<pre class="code javascript"><span class="kw1">var</span> SuperType <span class="sy0">=</span> <span class="kw1">function</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#123;</span>
	<span class="kw1">this</span>.<span class="me1">colors</span> <span class="sy0">=</span> <span class="br0">&#91;</span><span class="st0">'red'</span><span class="sy0">,</span> <span class="st0">'blue'</span><span class="sy0">,</span> <span class="st0">'green'</span><span class="br0">&#93;</span><span class="sy0">;</span>
<span class="br0">&#125;</span><span class="sy0">;</span>
&nbsp;
<span class="kw1">var</span> SubType <span class="sy0">=</span> <span class="kw1">function</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#123;</span><span class="br0">&#125;</span><span class="sy0">;</span>
&nbsp;
SubType.<span class="kw1">prototype</span> <span class="sy0">=</span> <span class="kw1">new</span> SuperType<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
<span class="kw1">var</span> instance1 <span class="sy0">=</span> <span class="kw1">new</span> SubType<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
<span class="co1">//this will be shared among all instances!</span>
instance1.<span class="me1">colors</span>.<span class="me1">push</span><span class="br0">&#40;</span><span class="st0">'black'</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
console.<span class="me1">log</span><span class="br0">&#40;</span>instance1.<span class="me1">colors</span><span class="br0">&#41;</span><span class="sy0">;</span> <span class="co1">//'red,blue,green,black'</span>
&nbsp;
<span class="kw1">var</span> instance2 <span class="sy0">=</span> <span class="kw1">new</span> SubType<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
console.<span class="me1">log</span><span class="br0">&#40;</span>instance2.<span class="me1">colors</span><span class="br0">&#41;</span><span class="sy0">;</span> <span class="co1">//'red,blue,green,black'</span></pre>

</div>

<h4 id="parasitic_combination_inheritance">Parasitic Combination Inheritance</h4>
<div class="level4">

<p>
In order to have unique parent instances, and to have the ability to call the constructor of the parent (as we do in <abbr title="Hypertext Preprocessor">PHP</abbr>), we need to separate the inheritance chain, so that constructors inherit from constructors, and prototypes inherit from prototypes. This means a child constructor could call the parent&#039;s constructor and apply unique values to the parent. Furthermore since the prototype is chained, we can still have sharable functions across instances. If we stop at this point, we&#039;d essentially be doing “Constructor Stealing”, which is similar to calling parent constructor in <abbr title="Hypertext Preprocessor">PHP</abbr>. However in order to link up prototypes, we would have to make the child prototype equal to the instantiation of the parent constructor. This is somewhat inefficient, as that leads us to executing the parent constructor twice, once when we steal the constructor, and a second time when we link up the prototype. We can employ a method called “Parasitic Combination Inheritance”, in order to assign the parent prototype directly to the child&#039;s prototype. The below code example also demonstrates an augmentation of native object <abbr title="Application Programming Interface">API</abbr> in javascript, and also uses ES5 syntax.
</p>

<p>
<a href="http://beta.plnkr.co/edit/bpuD9W?p=preview" class="urlextern" title="http://beta.plnkr.co/edit/bpuD9W?p=preview"  rel="nofollow">Plunker Demo</a>
</p>
<pre class="code javascript"><span class="st0">'use strict'</span><span class="sy0">;</span>
&nbsp;
<span class="co1">//parasitic combination inheritance</span>
<span class="co1">//this style most closely models the classical OOP inheritance style, and therefore has all the same power! Also needs ES5</span>
<span class="co1">//also perserves instanceof and isPrototypeOf chains</span>
&nbsp;
<span class="co1">//adding an inherit method to the native Object (javascript is dynamic and flexible)</span>
<span class="co1">//Essentially it assigns the superType's prototype to the subType's prototype</span>
<span class="kw4">Object</span>.<span class="me1">inherit</span> <span class="sy0">=</span> <span class="kw1">function</span><span class="br0">&#40;</span>subType<span class="sy0">,</span> superType<span class="br0">&#41;</span><span class="br0">&#123;</span>
	<span class="co1">//creates a new empty object with the superType's prototype</span>
	<span class="kw1">var</span> <span class="kw1">prototype</span> <span class="sy0">=</span> <span class="kw4">Object</span>.<span class="me1">create</span><span class="br0">&#40;</span>superType.<span class="kw1">prototype</span><span class="br0">&#41;</span><span class="sy0">;</span>
	<span class="co1">//preserving the reverse chain from the prototype back to the constructor, in this case subType</span>
	<span class="kw1">prototype</span>.<span class="me1">constructor</span> <span class="sy0">=</span> subType<span class="sy0">;</span>
	<span class="co1">//finally assigns the prototype to subType</span>
	subType.<span class="kw1">prototype</span> <span class="sy0">=</span> <span class="kw1">prototype</span><span class="sy0">;</span>
<span class="br0">&#125;</span><span class="sy0">;</span>
&nbsp;
<span class="kw1">var</span> Animal <span class="sy0">=</span> <span class="kw1">function</span><span class="br0">&#40;</span>weight <span class="sy0">=</span> <span class="st0">'100 kg'</span><span class="br0">&#41;</span><span class="br0">&#123;</span>
	<span class="kw1">this</span>.<span class="me1">weight</span> <span class="sy0">=</span> weight<span class="sy0">;</span> <span class="co1">//this is going to be added to the child instance</span>
<span class="br0">&#125;</span><span class="sy0">;</span>
&nbsp;
Animal.<span class="kw1">prototype</span>.<span class="me1">getWeight</span> <span class="sy0">=</span> <span class="kw1">function</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#123;</span>
	<span class="kw1">return</span> <span class="kw1">this</span>.<span class="me1">weight</span><span class="sy0">;</span>
<span class="br0">&#125;</span><span class="sy0">;</span>
&nbsp;
<span class="kw1">var</span> Pig <span class="sy0">=</span> <span class="kw1">function</span><span class="br0">&#40;</span>colour <span class="sy0">=</span> <span class="st0">'Pink'</span><span class="br0">&#41;</span><span class="br0">&#123;</span>
	<span class="co1">//executes the Animal constructor function, bringing in it's unique instance variables to the Pig's scope</span>
	Animal.<span class="me1">apply</span><span class="br0">&#40;</span><span class="kw1">this</span><span class="sy0">,</span> <span class="br0">&#91;</span><span class="st0">'1000 kg'</span><span class="br0">&#93;</span><span class="br0">&#41;</span><span class="sy0">;</span>
	<span class="kw1">this</span>.<span class="me1">colour</span> <span class="sy0">=</span> colour<span class="sy0">;</span>
<span class="br0">&#125;</span><span class="sy0">;</span>
&nbsp;
<span class="co1">//assigns Animal's prototype to Pig's prototype</span>
<span class="kw4">Object</span>.<span class="me1">inherit</span><span class="br0">&#40;</span>Pig<span class="sy0">,</span> Animal<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
<span class="co1">//augment the prototype for Pig, but not for other animals (if any)</span>
Pig.<span class="kw1">prototype</span>.<span class="me1">getColour</span> <span class="sy0">=</span> <span class="kw1">function</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#123;</span>
	<span class="kw1">return</span> <span class="kw1">this</span>.<span class="me1">colour</span><span class="sy0">;</span>
<span class="br0">&#125;</span><span class="sy0">;</span>
&nbsp;
<span class="kw1">var</span> pig <span class="sy0">=</span> <span class="kw1">new</span> Pig<span class="br0">&#40;</span><span class="st0">'Yellow'</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
console.<span class="me1">log</span><span class="br0">&#40;</span>pig.<span class="me1">getColour</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy0">;</span>
console.<span class="me1">log</span><span class="br0">&#40;</span>pig.<span class="me1">getWeight</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy0">;</span></pre>

</div>

<h4 id="true_prototype_inheritance">True Prototype Inheritance</h4>
<div class="level4">

<p>
All of the above styles are quite common to object and inheritance creation in javascript land. However all of them are essentially trying to provide classical class based OOP capability to a prototype based language. So that way developers from a classical OOP background can quickly grasp large scale application development in javascript. However all of that is unnecessary if we embrace true prototype based inheritance programming. This requires a shift in the way we think (and philosophise) about <a href="http://en.wikipedia.org/wiki/Prototype-based_programming" class="urlextern" title="http://en.wikipedia.org/wiki/Prototype-based_programming"  rel="nofollow">objects in programming</a> and <a href="http://en.wikipedia.org/wiki/Prototype_theory" class="urlextern" title="http://en.wikipedia.org/wiki/Prototype_theory"  rel="nofollow">real life</a>. <a href="http://javascript.crockford.com/prototypal.html" class="urlextern" title="http://javascript.crockford.com/prototypal.html"  rel="nofollow">This style in javascript was popularised by Douglas Crockford</a>, but it is also commonly used in less popular prototype languages. The <a href="http://stackoverflow.com/questions/879061/what-are-the-advantages-that-prototype-based-oo-has-over-class-based-oo" class="urlextern" title="http://stackoverflow.com/questions/879061/what-are-the-advantages-that-prototype-based-oo-has-over-class-based-oo"  rel="nofollow">advantages of this method</a> is that it&#039;s actually closer to how humans cognitively think about objects, possibly easier to learn if never exposed to class based OOP, and incredibly expressive. Oh and it&#039;s ridiculously simple.
</p>

<p>
We first need a object creator function that assigns a prototype and gives us back an empty object.
</p>
<pre class="code javascript"><span class="co1">//takes an object, returns a new object but with a prototype assigned to the inserted object</span>
<span class="kw1">function</span> object<span class="br0">&#40;</span>o<span class="br0">&#41;</span><span class="br0">&#123;</span>
    <span class="kw1">function</span> F<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#123;</span><span class="br0">&#125;</span><span class="sy0">;</span>
    F.<span class="kw1">prototype</span> <span class="sy0">=</span> o<span class="sy0">;</span>
    <span class="kw1">return</span> <span class="kw1">new</span> F<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
<span class="br0">&#125;</span></pre>

<p>
With the proliferation of ES5, you don&#039;t have to create your own helper function. You can simply use <code>Object.create()</code>, the first parameter being the object you want to be a prototype. You&#039;ll have noticed that we actually did use this method in the “Combination Parasitic Inheritance” pattern.
</p>

<p>
In class based languages, you often had to carefully plan out your taxonomy and relationships between abstract concepts. This often results in a plethora of interesting nouns that essentially lay downs contractual agreements in their relationships. Prototype supporters think that the practice is unnecessary, and instead you should start creating objects with behaviours as soon as possible, and then then later think about classification of similar objects. This is because prototype theory in cognitive science argues that categories of objects are not strictly concrete all the time, but instead there is a graded categorisation of objects which may have one or more focal points. See <a href="http://en.wikipedia.org/wiki/Prototype theory" class="interwiki iw_wp" title="http://en.wikipedia.org/wiki/Prototype theory">prototype theory for more interesting discussions</a>. The point is, in programming, objects can simply inherit from other objects, not because those objects are hierarchical parents, but simply because they are related in some way, and these relationships aren&#039;t strictly inherited, some disappear and new ones appear when they need to.
</p>

<p>
You can see this happening in javascript. All objects have a prototype pointing back the native Object.prototype. This makes sense because they are all related semantically to “object”. If you need a new object to contain modular code or conceptualise some sort of state or actor, you can either create ex-nihilo via the object literal syntax, or create extend it from a previous related object. The practice is bottom-up, there&#039;s no need to categorise everything from an abstraction down to concrete, just write concrete examples, and when you see relationships form between concrete examples, then depending on the concrete object you&#039;re writing, you can then inherit one from the other. When you need a wider generalisation, then just create higher abstract object and make both prototypes inherit it.
</p>

<p>
<iframe title="" src="http://www.docstoc.com/docs/document-preview.aspx?doc_id=27581648" style="width:427px; height:356px" frameborder="0" scrolling="no"></iframe>
</p>

<p>
Here&#039;s an example of using prototypical inheritance.
</p>

<p>
<a href="http://beta.plnkr.co/edit/QCUYSV?p=preview" class="urlextern" title="http://beta.plnkr.co/edit/QCUYSV?p=preview"  rel="nofollow">Plunker Demo</a>
</p>
<pre class="code javascript"><span class="st0">'use strict'</span><span class="sy0">;</span>
&nbsp;
<span class="co1">//animal prototype! (no need to use StudlyCaps since it's not a constructor function)</span>
<span class="kw1">var</span> animal <span class="sy0">=</span> <span class="br0">&#123;</span>
	weight<span class="sy0">:</span> <span class="st0">'100 kg'</span><span class="sy0">,</span>
	getWeight<span class="sy0">:</span> <span class="kw1">function</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#123;</span>
		<span class="kw1">return</span> <span class="kw1">this</span>.<span class="me1">weight</span><span class="sy0">;</span>
	<span class="br0">&#125;</span>
<span class="br0">&#125;</span><span class="sy0">;</span>
&nbsp;
<span class="co1">//pig is a prototype of animal</span>
<span class="kw1">var</span> pig1 <span class="sy0">=</span> <span class="kw4">Object</span>.<span class="me1">create</span><span class="br0">&#40;</span>animal<span class="br0">&#41;</span><span class="sy0">;</span>
pig1.<span class="me1">colour</span> <span class="sy0">=</span> <span class="st0">'Pink'</span><span class="sy0">;</span>
&nbsp;
<span class="kw1">var</span> pig2 <span class="sy0">=</span> <span class="kw4">Object</span>.<span class="me1">create</span><span class="br0">&#40;</span>animal<span class="br0">&#41;</span><span class="sy0">;</span>
pig2.<span class="me1">colour</span> <span class="sy0">=</span> <span class="st0">'Brown'</span><span class="sy0">;</span>
&nbsp;
<span class="kw1">var</span> wildPig <span class="sy0">=</span> <span class="kw4">Object</span>.<span class="me1">create</span><span class="br0">&#40;</span>pig2<span class="br0">&#41;</span><span class="sy0">;</span>
wildPig.<span class="me1">tusks</span> <span class="sy0">=</span> <span class="kw2">true</span><span class="sy0">;</span>
&nbsp;
<span class="co1">//the proto chain is being preserved, and it's overlapping!</span>
console.<span class="me1">log</span><span class="br0">&#40;</span>wildPig<span class="br0">&#41;</span><span class="sy0">;</span>
console.<span class="me1">log</span><span class="br0">&#40;</span>wildPig.<span class="kw3">__proto__</span><span class="br0">&#41;</span><span class="sy0">;</span>
console.<span class="me1">log</span><span class="br0">&#40;</span>wildPig.<span class="kw3">__proto__</span>.<span class="kw3">__proto__</span><span class="br0">&#41;</span><span class="sy0">;</span></pre>

</div>
<!-- EDIT7 SECTION "Inheritance" [28106-38702] -->
<h2 class="sectionedit8" id="functional_programming_in_javascript">Functional Programming in Javascript</h2>
<div class="level2">

<p>
Javascript is a very <a href="http://eloquentjavascript.net/chapter6.html" class="urlextern" title="http://eloquentjavascript.net/chapter6.html"  rel="nofollow">functional language</a>, its functions are very flexible, and because it&#039;s architecture is often event driven and asynchronous, it often uses callbacks. You&#039;ve also seen how it uses functions to create objects. All functions in javascript are naturally closures, they access variables outside of its own scope. I usually refer to this as “functions can access things upwards, but cannot access things downwards”. So a high level function can access variables inside of its functions. Another recommended practice is to always use functional expressions rather than function declarations. This is because using the <code>var</code> operator keeps the function within the local scope, that way you don&#039;t pollute the global scope. This section will discuss several important aspects of functions in javascript.
</p>

</div>
<!-- EDIT8 SECTION "Functional Programming in Javascript" [38703-39617] -->
<h3 class="sectionedit9" id="anonymous_self-executing_function_enclosure">Anonymous Self-Executing Function Enclosure</h3>
<div class="level3">

<p>
Sometimes you&#039;ll need to create a functional scope and execute it immediately. This mainly because only functions create an explicit scope in a javascript. By creating a function, you can scope all of your variable names so they won&#039;t conflict with other people&#039;s code. While this is useful, sometimes the code needs to execute, so instead of creating a functional expression and then executing it, we can just execute it as it was created.
</p>
<pre class="code javascript"><span class="co1">//self-executing anonymous function enclosure</span>
&nbsp;
<span class="co1">//you need to wrap the anonymous function with two parantheses, then add another two parantheses!</span>
<span class="br0">&#40;</span><span class="kw1">function</span><span class="br0">&#40;</span>parameter<span class="br0">&#41;</span><span class="br0">&#123;</span>
&nbsp;
    <span class="kw1">var</span> nameThatCannotConflict <span class="sy0">=</span> <span class="st0">'Blah!'</span><span class="sy0">;</span>
    console.<span class="me1">log</span><span class="br0">&#40;</span><span class="st0">'I was declared and executed immediately! Here is my '</span> <span class="sy0">+</span> parameter<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
<span class="br0">&#125;</span><span class="br0">&#41;</span><span class="br0">&#40;</span><span class="st0">'parameter'</span><span class="br0">&#41;</span><span class="sy0">;</span>
<span class="co1">//second set of parantheses can have parameters, or have actual commands</span></pre>

<p>
The above style is often used in jQuery plugins, since many different authors would be using similar names for their variables!
</p>

</div>
<!-- EDIT9 SECTION "Anonymous Self-Executing Function Enclosure" [39618-40660] -->
<h3 class="sectionedit10" id="functional_scope_and_block_scoping">Functional Scope and Block Scoping</h3>
<div class="level3">

<p>
The block expressions in javascript such as <code>for</code> and <code>if</code> do not create scopes. However sometimes we&#039;ll need block scopes when each iteration of the block expression has something unique. We can also use self-executing anonymous function enclosures to simulate block expression scope. The below code shows how block expressions can confuse novice developers.
</p>

<p>
<a href="http://beta.plnkr.co/edit/AFBt5e?p=preview" class="urlextern" title="http://beta.plnkr.co/edit/AFBt5e?p=preview"  rel="nofollow">Plunker Demo</a>
</p>
<pre class="code javascript"><span class="st0">'use strict'</span><span class="sy0">;</span>
&nbsp;
<span class="co1">//Demonstration of function scoping vs the lack of block scoping</span>
&nbsp;
<span class="co1">//In this example, we want to be able to log 1, 2, 3, but we'll see that we cannot!</span>
<span class="kw1">var</span> arr <span class="sy0">=</span> <span class="br0">&#91;</span><span class="nu0">1</span><span class="sy0">,</span><span class="nu0">2</span><span class="sy0">,</span><span class="nu0">3</span><span class="br0">&#93;</span><span class="sy0">;</span>
<span class="kw1">var</span> out <span class="sy0">=</span> <span class="br0">&#91;</span><span class="br0">&#93;</span><span class="sy0">;</span>
&nbsp;
<span class="co1">//the for loop is a block expression, it has no scope</span>
<span class="kw1">for</span><span class="br0">&#40;</span><span class="kw1">var</span> i <span class="sy0">=</span> <span class="nu0">0</span><span class="sy0">;</span> i<span class="sy0">&lt;</span>arr.<span class="me1">length</span><span class="sy0">;</span>i<span class="sy0">++</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
	<span class="kw1">var</span> item <span class="sy0">=</span> arr<span class="br0">&#91;</span>i<span class="br0">&#93;</span><span class="sy0">;</span> <span class="co1">//therefore when the loop finishes, it will be as if item has been defined outside</span>
	<span class="co1">//here we push a callback function into the out array</span>
	out.<span class="me1">push</span><span class="br0">&#40;</span><span class="kw1">function</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#123;</span>
		console.<span class="me1">log</span><span class="br0">&#40;</span>item<span class="br0">&#41;</span><span class="sy0">;</span> <span class="co1">//this will access item which is defined outside of its scope</span>
	<span class="br0">&#125;</span><span class="br0">&#41;</span><span class="sy0">;</span>
<span class="br0">&#125;</span>
&nbsp;
console.<span class="me1">log</span><span class="br0">&#40;</span>item<span class="sy0">,</span> <span class="st0">'&lt;- This is the item after the loop finishes!'</span><span class="br0">&#41;</span><span class="sy0">;</span> <span class="co1">//the fact that I can access item, means that for did not scope that item</span>
console.<span class="me1">log</span><span class="br0">&#40;</span>out<span class="sy0">,</span> <span class="st0">'&lt;- This is the array of functions!'</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
<span class="co1">//the forEach is the ES5 command which executes a callback on each item of the array, the func is automatically injected from the javascript</span>
out.<span class="me1">forEach</span><span class="br0">&#40;</span><span class="kw1">function</span><span class="br0">&#40;</span>func<span class="br0">&#41;</span><span class="br0">&#123;</span>
	func<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span> <span class="co1">//the executes the callback on each array</span>
<span class="br0">&#125;</span><span class="br0">&#41;</span><span class="sy0">;</span></pre>

<p>
Because the block expression has no scope, the item variable remains at 3 when the callback is called. In order to avoid this problem, we have to wrap the block scope&#039;s code inside an anonymous self-executing function enclosure. Note that once ES6 takes place, we can simply use the <code>let</code> operator to automatically make a variable block scoped, however at this moment, it is not very well supported.
</p>

<p>
<a href="http://beta.plnkr.co/edit/1GgFPd?p=preview" class="urlextern" title="http://beta.plnkr.co/edit/1GgFPd?p=preview"  rel="nofollow">Plunker Demo</a>
</p>
<pre class="code javascript"><span class="st0">'use strict'</span><span class="sy0">;</span>
&nbsp;
<span class="co1">//Using an anonymous function or let to provide block scoping</span>
&nbsp;
<span class="co1">//In this example, we want to be able to log 1, 2, 3, but we'll see that we cannot!</span>
<span class="kw1">var</span> arr <span class="sy0">=</span> <span class="br0">&#91;</span><span class="nu0">1</span><span class="sy0">,</span><span class="nu0">2</span><span class="sy0">,</span><span class="nu0">3</span><span class="br0">&#93;</span><span class="sy0">;</span>
<span class="kw1">var</span> out <span class="sy0">=</span> <span class="br0">&#91;</span><span class="br0">&#93;</span><span class="sy0">;</span>
&nbsp;
<span class="co1">//the for loop is a block expression, it has no scope</span>
<span class="kw1">for</span><span class="br0">&#40;</span><span class="kw1">var</span> i <span class="sy0">=</span> <span class="nu0">0</span><span class="sy0">;</span> i<span class="sy0">&lt;</span>arr.<span class="me1">length</span><span class="sy0">;</span>i<span class="sy0">++</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
	<span class="br0">&#40;</span><span class="kw1">function</span><span class="br0">&#40;</span>item<span class="br0">&#41;</span><span class="br0">&#123;</span>
		out.<span class="me1">push</span><span class="br0">&#40;</span><span class="kw1">function</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#123;</span>
		   console.<span class="me1">log</span><span class="br0">&#40;</span>item<span class="br0">&#41;</span><span class="sy0">;</span> 
		<span class="br0">&#125;</span><span class="br0">&#41;</span><span class="sy0">;</span>
	<span class="br0">&#125;</span><span class="br0">&#41;</span><span class="br0">&#40;</span>arr<span class="br0">&#91;</span>i<span class="br0">&#93;</span><span class="br0">&#41;</span><span class="sy0">;</span>
<span class="br0">&#125;</span>
&nbsp;
out.<span class="me1">forEach</span><span class="br0">&#40;</span><span class="kw1">function</span><span class="br0">&#40;</span>func<span class="br0">&#41;</span><span class="br0">&#123;</span>
	func<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
<span class="br0">&#125;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
<span class="co1">//using &quot;let&quot; in ES6 also works (notice that it requires version=1.7 in the script tag!)</span>
<span class="kw1">var</span> arr2 <span class="sy0">=</span> <span class="br0">&#91;</span><span class="nu0">1</span><span class="sy0">,</span> <span class="nu0">2</span><span class="sy0">,</span> <span class="nu0">3</span><span class="br0">&#93;</span><span class="sy0">;</span>
<span class="kw1">var</span> out <span class="sy0">=</span> <span class="br0">&#91;</span><span class="br0">&#93;</span><span class="sy0">;</span>
&nbsp;
<span class="kw1">for</span><span class="br0">&#40;</span><span class="kw1">var</span> i <span class="sy0">=</span> <span class="nu0">0</span><span class="sy0">;</span> i <span class="sy0">&lt;</span> arr2.<span class="me1">length</span><span class="sy0">;</span> i<span class="sy0">++</span><span class="br0">&#41;</span><span class="br0">&#123;</span>
	let item <span class="sy0">=</span> arr2<span class="br0">&#91;</span>i<span class="br0">&#93;</span><span class="sy0">;</span> <span class="co1">//can't really be used right now! No shims available</span>
	out.<span class="me1">push</span><span class="br0">&#40;</span><span class="kw1">function</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#123;</span>
		console.<span class="me1">log</span><span class="br0">&#40;</span>item<span class="br0">&#41;</span><span class="sy0">;</span>
	<span class="br0">&#125;</span><span class="br0">&#41;</span><span class="sy0">;</span>
<span class="br0">&#125;</span>
&nbsp;
out.<span class="me1">forEach</span><span class="br0">&#40;</span><span class="kw1">function</span><span class="br0">&#40;</span>func<span class="br0">&#41;</span><span class="br0">&#123;</span>
	func<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
<span class="br0">&#125;</span><span class="br0">&#41;</span><span class="sy0">;</span></pre>

</div>
<!-- EDIT10 SECTION "Functional Scope and Block Scoping" [40661-43376] -->
<h3 class="sectionedit11" id="using_higher_order_functions">Using Higher Order Functions</h3>
<div class="level3">

<p>
As we learned in <abbr title="Hypertext Preprocessor">PHP</abbr>, higher order functions are functions that either accept a callback function as a parameter, and/or return back a function to be used. You&#039;re going to use higher order functions often when programming for events, because you need to pass callback functions into the event handlers! One of the advantages of this ability is that it provides a more expressive functional alternative to loops. There&#039;s a number of higher order functional constructs for arrays that allow you to pass callbacks in, instead of looping.
</p>

<p>
<a href="http://beta.plnkr.co/edit/7TPJ6o?p=preview" class="urlextern" title="http://beta.plnkr.co/edit/7TPJ6o?p=preview"  rel="nofollow">Plunker Demo</a>
</p>
<pre class="code javascript"><span class="st0">'use strict'</span><span class="sy0">;</span>
&nbsp;
<span class="co1">//demonstrating using functions instead of loops</span>
&nbsp;
<span class="co1">//instead of iterating through an array, we can use forEach, map and filter functions</span>
<span class="kw1">var</span> array <span class="sy0">=</span> <span class="br0">&#91;</span><span class="st0">'one'</span><span class="sy0">,</span> <span class="st0">'two'</span><span class="sy0">,</span> <span class="st0">'three'</span><span class="br0">&#93;</span><span class="sy0">;</span>
&nbsp;
<span class="kw1">for</span><span class="br0">&#40;</span><span class="kw1">var</span> i <span class="sy0">=</span> <span class="nu0">0</span><span class="sy0">;</span> i <span class="sy0">&lt;</span> array.<span class="me1">length</span><span class="sy0">;</span> i<span class="sy0">++</span><span class="br0">&#41;</span><span class="br0">&#123;</span>
	<span class="kw1">if</span><span class="br0">&#40;</span>array<span class="br0">&#91;</span>i<span class="br0">&#93;</span> <span class="sy0">===</span> <span class="st0">'two'</span><span class="br0">&#41;</span><span class="br0">&#123;</span>
		array<span class="br0">&#91;</span>i<span class="br0">&#93;</span> <span class="sy0">=</span> array<span class="br0">&#91;</span>i<span class="br0">&#93;</span>.<span class="me1">toUpperCase</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
	<span class="br0">&#125;</span>
<span class="br0">&#125;</span>
console.<span class="me1">log</span><span class="br0">&#40;</span>array<span class="sy0">,</span> <span class="st0">'&lt;- LOOPING'</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
<span class="co1">//forEach method (runs a function when it encounters each value)</span>
<span class="kw1">var</span> array <span class="sy0">=</span> <span class="br0">&#91;</span><span class="st0">'one'</span><span class="sy0">,</span> <span class="st0">'two'</span><span class="sy0">,</span> <span class="st0">'three'</span><span class="br0">&#93;</span><span class="sy0">;</span>
array.<span class="me1">forEach</span><span class="br0">&#40;</span><span class="kw1">function</span><span class="br0">&#40;</span>value<span class="sy0">,</span> index<span class="sy0">,</span> originalArray<span class="br0">&#41;</span><span class="br0">&#123;</span>
	<span class="kw1">if</span><span class="br0">&#40;</span>value <span class="sy0">===</span> <span class="st0">'two'</span><span class="br0">&#41;</span><span class="br0">&#123;</span>
		array<span class="br0">&#91;</span>index<span class="br0">&#93;</span> <span class="sy0">=</span> value.<span class="me1">toUpperCase</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
	<span class="br0">&#125;</span>
<span class="br0">&#125;</span><span class="br0">&#41;</span><span class="sy0">;</span>
console.<span class="me1">log</span><span class="br0">&#40;</span>array<span class="sy0">,</span> <span class="st0">'&lt;- FOREACH METHOD'</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
<span class="co1">//map method (returns a new array and mutates the value)</span>
<span class="kw1">var</span> array <span class="sy0">=</span> <span class="br0">&#91;</span><span class="st0">'one'</span><span class="sy0">,</span> <span class="st0">'two'</span><span class="sy0">,</span> <span class="st0">'three'</span><span class="br0">&#93;</span><span class="sy0">;</span>
array <span class="sy0">=</span> array.<span class="me1">map</span><span class="br0">&#40;</span><span class="kw1">function</span><span class="br0">&#40;</span>value<span class="sy0">,</span> index<span class="sy0">,</span> originalArray<span class="br0">&#41;</span><span class="br0">&#123;</span>
	<span class="kw1">if</span><span class="br0">&#40;</span>value <span class="sy0">===</span> <span class="st0">'two'</span><span class="br0">&#41;</span><span class="br0">&#123;</span>
		value <span class="sy0">=</span> <span class="st0">'TWO'</span><span class="sy0">;</span>
	<span class="br0">&#125;</span>
	<span class="kw1">return</span> value<span class="sy0">;</span>
<span class="br0">&#125;</span><span class="br0">&#41;</span>.<span class="me1">join</span><span class="br0">&#40;</span><span class="st0">','</span><span class="br0">&#41;</span><span class="sy0">;</span> <span class="co1">//cool use of joins by mapping out an array and then joining into a string!</span>
console.<span class="me1">log</span><span class="br0">&#40;</span>array<span class="sy0">,</span> <span class="st0">'&lt;- MAP METHOD'</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
<span class="co1">//filter method</span>
<span class="kw1">var</span> array <span class="sy0">=</span> <span class="br0">&#91;</span><span class="st0">'one'</span><span class="sy0">,</span> <span class="st0">'two'</span><span class="sy0">,</span> <span class="st0">'three'</span><span class="br0">&#93;</span><span class="sy0">;</span>
array <span class="sy0">=</span> array.<span class="me1">filter</span><span class="br0">&#40;</span><span class="kw1">function</span><span class="br0">&#40;</span>value<span class="sy0">,</span> index<span class="sy0">,</span> originalArray<span class="br0">&#41;</span><span class="br0">&#123;</span>
	<span class="kw1">if</span><span class="br0">&#40;</span>value <span class="sy0">===</span> <span class="st0">'two'</span><span class="br0">&#41;</span><span class="br0">&#123;</span>
		<span class="kw1">return</span> <span class="kw2">false</span><span class="sy0">;</span>
	<span class="br0">&#125;</span>
	<span class="kw1">return</span> <span class="kw2">true</span><span class="sy0">;</span>
<span class="br0">&#125;</span><span class="br0">&#41;</span><span class="sy0">;</span>
console.<span class="me1">log</span><span class="br0">&#40;</span>array<span class="sy0">,</span> <span class="st0">'&lt;- FILTER METHOD'</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
<span class="co1">//reduce method (iterates through two values at a time</span>
<span class="kw1">var</span> array <span class="sy0">=</span> <span class="br0">&#91;</span><span class="st0">'one'</span><span class="sy0">,</span> <span class="st0">'two'</span><span class="sy0">,</span> <span class="st0">'three'</span><span class="br0">&#93;</span><span class="sy0">;</span>
array <span class="sy0">=</span> array.<span class="me1">reduce</span><span class="br0">&#40;</span><span class="kw1">function</span><span class="br0">&#40;</span>prev<span class="sy0">,</span> next<span class="sy0">,</span> index<span class="sy0">,</span> originalArray<span class="br0">&#41;</span><span class="br0">&#123;</span>
	<span class="kw1">if</span><span class="br0">&#40;</span>next <span class="sy0">===</span> <span class="st0">'two'</span><span class="br0">&#41;</span><span class="br0">&#123;</span>
		next <span class="sy0">=</span> next.<span class="me1">toUpperCase</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
	<span class="br0">&#125;</span>
	<span class="kw1">return</span> prev <span class="sy0">+</span> next<span class="sy0">;</span>
<span class="br0">&#125;</span><span class="br0">&#41;</span><span class="sy0">;</span>
console.<span class="me1">log</span><span class="br0">&#40;</span>array<span class="sy0">,</span> <span class="st0">'&lt;- REDUCE METHOD'</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
<span class="co1">//you can combine all of these methods together via method chaining</span>
<span class="kw1">var</span> array <span class="sy0">=</span> <span class="br0">&#91;</span><span class="st0">'one'</span><span class="sy0">,</span> <span class="st0">'two'</span><span class="sy0">,</span> <span class="st0">'three'</span><span class="br0">&#93;</span><span class="sy0">;</span>
array <span class="sy0">=</span> array.<span class="me1">map</span><span class="br0">&#40;</span><span class="kw1">function</span><span class="br0">&#40;</span>value<span class="br0">&#41;</span><span class="br0">&#123;</span>
	<span class="kw1">if</span><span class="br0">&#40;</span>value <span class="sy0">===</span> <span class="st0">'two'</span><span class="br0">&#41;</span><span class="br0">&#123;</span>
		<span class="kw1">return</span> <span class="st0">'TWO'</span><span class="sy0">;</span>
	<span class="br0">&#125;</span>
	<span class="kw1">return</span> value<span class="sy0">;</span> <span class="co1">//without this it'll be almost like filtering</span>
<span class="br0">&#125;</span><span class="br0">&#41;</span>.<span class="me1">filter</span><span class="br0">&#40;</span><span class="kw1">function</span><span class="br0">&#40;</span>value<span class="br0">&#41;</span><span class="br0">&#123;</span>
	<span class="kw1">if</span><span class="br0">&#40;</span>value <span class="sy0">===</span> <span class="st0">'three'</span><span class="br0">&#41;</span><span class="br0">&#123;</span>
		<span class="kw1">return</span> <span class="kw2">false</span><span class="sy0">;</span>
	<span class="br0">&#125;</span>
	<span class="kw1">return</span> <span class="kw2">true</span><span class="sy0">;</span>
<span class="br0">&#125;</span><span class="br0">&#41;</span>.<span class="me1">reduce</span><span class="br0">&#40;</span><span class="kw1">function</span><span class="br0">&#40;</span>prev<span class="sy0">,</span> next<span class="br0">&#41;</span><span class="br0">&#123;</span>
	<span class="kw1">if</span><span class="br0">&#40;</span>next <span class="sy0">===</span> <span class="st0">'one'</span><span class="br0">&#41;</span><span class="br0">&#123;</span>
		next <span class="sy0">=</span> <span class="st0">'oNe'</span><span class="sy0">;</span>
	<span class="br0">&#125;</span>
	<span class="kw1">return</span> prev <span class="sy0">+</span> next<span class="sy0">;</span>
<span class="br0">&#125;</span><span class="sy0">,</span> <span class="st0">''</span><span class="br0">&#41;</span><span class="sy0">;</span> <span class="co1">//second parameter to reduce is initial value, if you want to start &quot;next&quot; at the first elemnt of array</span>
console.<span class="me1">log</span><span class="br0">&#40;</span>array<span class="sy0">,</span> <span class="st0">'&lt;- COMBINED METHOD'</span><span class="br0">&#41;</span><span class="sy0">;</span></pre>

<p>
More interesting applications of functional programming in javascript can be acquired in these sources:
</p>
<ul>
<li class="level1"><div class="li"> <a href="http://dailyjs.com/2012/09/14/functional-programming/" class="urlextern" title="http://dailyjs.com/2012/09/14/functional-programming/"  rel="nofollow">Daily JS demonstrations of partial application, composition and flipping</a>.</div>
</li>
<li class="level1"><div class="li"> <a href="http://cjohansen.no/talks/2012/sdc-functional/#1" class="urlextern" title="http://cjohansen.no/talks/2012/sdc-functional/#1"  rel="nofollow">Slides on Functional Programming</a></div>
</li>
<li class="level1"><div class="li"> <a href="http://osteele.com/sources/javascript/functional/" class="urlextern" title="http://osteele.com/sources/javascript/functional/"  rel="nofollow">Oliver Steele&#039;s Functional JS Library</a></div>
</li>
<li class="level1"><div class="li"> <a href="https://github.com/caolan/async" class="urlextern" title="https://github.com/caolan/async"  rel="nofollow">Library for simplifying asynchronous callbacks</a></div>
</li>
</ul>

</div>
<!-- EDIT11 SECTION "Using Higher Order Functions" [43377-46547] -->
<h2 class="sectionedit12" id="mvc_in_javascript">MVC in Javascript</h2>
<div class="level2">

<p>
As developers realised javascript was more and more important to the development of the web, they started to face architectural issues when they wanted to build large scale client side applications. So developers decided to apply the battle tested MVC architecture to the client side. MVC on the client side is quite different from MVC on the server side. The formulations of MVC on the server side are quite similar, however front end developers faced problems translating those concepts to the client side, and so the implementations of MVC differs across different client side frameworks.
</p>

<p>
The particular framework that Polycademy recommends is <a href="http://angularjs.org/" class="urlextern" title="http://angularjs.org/"  rel="nofollow">AngularJS</a>. This client side framework is produced and maintained by Google. It considers itself an MV* framework, essentially “MV whatever”. Before we launch into AngularJS, let&#039;s try to understand Angular&#039;s architectural philosophy.
</p>

</div>

<h4 id="models_services">Models &amp; Services</h4>
<div class="level4">

<p>
In AngularJS, the concept of a <a href="http://docs.angularjs.org/guide/dev_guide.mvc.understanding_model" class="urlextern" title="http://docs.angularjs.org/guide/dev_guide.mvc.understanding_model"  rel="nofollow">model can refer to two things</a>. Most often it refers to any object that contains useful data that is then displayed to the user for viewing or further modification. In order for these models to display, the model objects have to attached to the “scope” of the controller and view. However models on the server side is where to access and mutate application state, they are not just variables of data. Similarly in AngularJS, there are <a href="http://docs.angularjs.org/guide/dev_guide.services" class="urlextern" title="http://docs.angularjs.org/guide/dev_guide.services"  rel="nofollow">&quot;services&quot; that act as our mediators, accessors and mutators of state</a>. However in the case of client side applications, this state is usually stored on the server side, which is then accessed via a RESTful <abbr title="Application Programming Interface">API</abbr>. Therefore models in AngularJS could be simple variables, a layer that mediates a RESTful <abbr title="Application Programming Interface">API</abbr>, or a layer that mediates data storage on the client, or some other complex business logic that doesn&#039;t involve user interface changes.
</p>

</div>

<h4 id="views_templates_directives_filters">Views, Templates, Directives &amp; Filters</h4>
<div class="level4">

<p>
On the client side, everything can be considered the view. However with the growing complexity of client side applications, we have to make the distinction clearer. <a href="http://docs.angularjs.org/guide/dev_guide.mvc.understanding_view" class="urlextern" title="http://docs.angularjs.org/guide/dev_guide.mvc.understanding_view"  rel="nofollow">The view in AngularJS is live rendering of the DOM</a>. It is live because it&#039;s not just static <abbr title="Document Object Model">DOM</abbr> which is simple read from, but the <abbr title="Document Object Model">DOM</abbr> can actively change based on user, browser or server sent events. Furthermore it&#039;s the final rendering because it&#039;s after the controller has matched the models with their templates, and after AngularJS renders your directives and applies your filters.
</p>

<p>
AngularJS has two unique concepts called <a href="http://docs.angularjs.org/guide/directive" class="urlextern" title="http://docs.angularjs.org/guide/directive"  rel="nofollow">directives</a> and <a href="http://docs.angularjs.org/guide/dev_guide.templates.filters" class="urlextern" title="http://docs.angularjs.org/guide/dev_guide.templates.filters"  rel="nofollow">filters</a>.
</p>

<p>
You can think of directives as extensions to <abbr title="HyperText Markup Language">HTML</abbr>. They are like reusable user interface components. Directives is where you place your <abbr title="Document Object Model">DOM</abbr> manipulations such as jQuery and other logic to handle user inputted events. They are like as if you had control over the <abbr title="HyperText Markup Language">HTML</abbr> standard and started adding in custom <abbr title="HyperText Markup Language">HTML</abbr> tags that you needed for your web application. The usage of directives and enhancing the <abbr title="HyperText Markup Language">HTML</abbr> itself comes from AngularJS&#039;s philosophy of declarative programming when building UI and imperative programming when building business logic. This may seem to conflict “unobtrusive javascript” movement, however as you start working in AngularJS, you start to see how this philosophy not only improves testability, but also makes the <abbr title="HyperText Markup Language">HTML</abbr> a self-documenting document on how the end user interface, whereas before you would never know if clicking on a certain <abbr title="HyperText Markup Language">HTML</abbr> tag would cause some other <abbr title="HyperText Markup Language">HTML</abbr> to appear or disappear. This is one of the best concepts that AngularJS has brought into the world.
</p>

<p>
Filters simply format data for display. They don&#039;t fit in the directive space, because they aren&#039;t user interface changes, but subtly change the display of model data. Such as for example to turn letters into uppercase, or to localise currencies.
</p>

<p>
AngularJS also doesn&#039;t have a preference on how you structure your templates. It is possible for you to store your templates on the server and lazy load them over the wire, or to store them on the client side as template scripts, or to embed them in your directive code. Polycademy suggests you store the templates on the client side as template scripts. You often don&#039;t need to lazy load templates, because templates are often empty <abbr title="HyperText Markup Language">HTML</abbr>, when you strip away all the data from the <abbr title="HyperText Markup Language">HTML</abbr>, you&#039;re not left with much. The overhead of loading all the templates up front will be less the time taken to download the templates each time you visit a page. Of course there are caching solutions, but such a solution takes up implementation time. Now of course if your templates are large and numerous, then you may choose to build an <abbr title="Application Programming Interface">API</abbr> to load up templates from the server. By having all of your templates on the client side on one page load, your site becomes far more responsive, and approaches being a true single page application!
</p>

</div>

<h4 id="controllers_scopes">Controllers &amp; Scopes</h4>
<div class="level4">

<p>
In AngularJS, <a href="http://docs.angularjs.org/guide/dev_guide.mvc.understanding_controller" class="urlextern" title="http://docs.angularjs.org/guide/dev_guide.mvc.understanding_controller"  rel="nofollow">controllers bind model variables acquired or mutated from services to templates</a>. Controllers aren&#039;t resources or pages on the client side, but rather a section of dynamic user interface. If you can draw a box around certain dynamically changing sections of the page and give semantic meaning, then it can be considered “controllable”. This basically means inside your <abbr title="HyperText Markup Language">HTML</abbr>, you would specify a certain containing to be the controller of all the nested tags. You can have a main controller for the entire page state, multiple controllers side by side, controllers nested in parent controllers or no controllers at all if the page isn&#039;t dynamic.
</p>

<p>
The key to understanding AngularJS controllers is understanding <a href="http://docs.angularjs.org/guide/scope" class="urlextern" title="http://docs.angularjs.org/guide/scope"  rel="nofollow">scopes</a>. In other client side frameworks, these are often called the “view model”. The scope is simply an object that is available to all elements, directives and filters that are within the <abbr title="HyperText Markup Language">HTML</abbr> tag specified as the controller. It provides the glue that binds the changes in model data to the changes on the user interface. <a href="http://stackoverflow.com/a/9693933/582917" class="urlextern" title="http://stackoverflow.com/a/9693933/582917"  rel="nofollow">One of the unique aspects of AngularJS is bidirectional data binding</a>. This means as data changes on the user interface either via user events or browser events, these changes get reflected in the controller, model and services, and vice versa. This allows <a href="http://docs.angularjs.org/guide/dev_guide.templates.databinding" class="urlextern" title="http://docs.angularjs.org/guide/dev_guide.templates.databinding"  rel="nofollow">real time updating and propagation of model changes across all layers of the AngularJS application</a>. This is a very powerful tool, allowing you create truly responsive client side applications, there can multiple layers of application respond to change events. One common application of this is having forms self-validate in real time, and having the data get interpreted which may trigger user interface changes such as suggestions to what they are typing.
</p>

<p>
Polycademy is currently preparing an AngularJS + Codeigniter seed application. This is basically a full boilerplate and architecture ready set of files that has all the necessary configuration and third party libraries installed. You&#039;ll be able to just clone it and start coding immediately. It will avoid repeat configuration. When this is ready, you&#039;ll see it a link here.
</p>

<p>
To start getting deeper into AngularJS, you should read/watch/refer to all of these resources:
</p>
<ul>
<li class="level1"><div class="li"> <a href="http://docs.angularjs.org/guide/concepts" class="urlextern" title="http://docs.angularjs.org/guide/concepts"  rel="nofollow">AngularJS Conceptual Guide</a> - You should read the rest of the guide while you&#039;re at it, but make sure to do the tutorials at the same time.</div>
</li>
<li class="level1"><div class="li"> <a href="http://egghead.io/" class="urlextern" title="http://egghead.io/"  rel="nofollow">Egghead.io</a> - Short video tutorials working on the core features of AngularJS.</div>
</li>
<li class="level1"><div class="li"> <a href="http://docs.angularjs.org/tutorial" class="urlextern" title="http://docs.angularjs.org/tutorial"  rel="nofollow">Official AngularJS Tutorial Application</a> - This tutorial takes you through building a simple AngularJS application involving page changes, services, and AngularJS&#039;s integrated test driven development. You will need to install Node.js to run tests.</div>
</li>
<li class="level1"><div class="li"> <a href="http://onehungrymind.com/category/angularjs/" class="urlextern" title="http://onehungrymind.com/category/angularjs/"  rel="nofollow">Simpulton&#039;s Blog &amp; Videos</a></div>
</li>
<li class="level1"><div class="li"> <a href="http://www.yearofmoo.com/tags/AngularJS.html" class="urlextern" title="http://www.yearofmoo.com/tags/AngularJS.html"  rel="nofollow">Year of Moo&#039;s AngularJS articles</a></div>
</li>
</ul>

<p>
Here are several youtube videos regarding AngularJS that you also complete watching.
</p>
<div class="vshare__center"><!--[if !IE]> -->
<object width="520" height="406" type="application/x-shockwave-flash" data="http://www.youtube.com/v/tKe25THBoF4%26list%3DPLwwh-11EOGvME7nAKOD6zq9I4wAZtsp-a?allowFullScreen=true&amp;allowScriptAccess=always&amp;fs=1">
<!-- <![endif]-->
<!--[if IE]>
<object width="520" height="406" classid="clsid:D27CDB6E-AE6D-11cf-96B8-444553540000">
    <param name="movie" value="http://www.youtube.com/v/tKe25THBoF4%26list%3DPLwwh-11EOGvME7nAKOD6zq9I4wAZtsp-a?allowFullScreen=true&amp;allowScriptAccess=always&amp;fs=1" />
<!--><!-- -->
  <param name="allowFullScreen" value="true" />
  <param name="allowScriptAccess" value="always" />
  <param name="fs" value="1" />
  <param name="FlashVars" value="allowFullScreen=true&amp;allowScriptAccess=always&amp;fs=1" />
The <a href="http://www.adobe.com/products/flashplayer/">Adobe Flash Plugin</a> is needed to display this content.
</object>
<!-- <![endif]-->
</div>
</div>
<!-- EDIT12 SECTION "MVC in Javascript" [46548-55070] -->
<h3 class="sectionedit13" id="modules">Modules</h3>
<div class="level3">

<p>
<a href="http://docs.angularjs.org/guide/module" class="urlextern" title="http://docs.angularjs.org/guide/module"  rel="nofollow">AngularJS structures its code under modules</a>. These are the not same as <a href="http://wiki.ecmascript.org/doku.php?id=harmony:modules" class="urlextern" title="http://wiki.ecmascript.org/doku.php?id=harmony:modules"  rel="nofollow">modules that are coming into ES6</a>. Instead they act more like namespaces or packages. AngularJS is a fully dependency injected framework. By structuring your controllers, services and directives as modules, they can then be available to be dependency injected anywhere in your code. This means that modules is how AngularJS wires up and bootstraps all of the dependencies. Kind of like an IOC container. Furthermore this opens up opportunities to share AngularJS libraries with fellow AngularJS developers. For example check out the <a href="http://ngmodules.org/" class="urlextern" title="http://ngmodules.org/"  rel="nofollow">AngularJS Modules aggregator</a>.
</p>

<p>
One key consideration is that unlike server side code, when you deploy your client side application in production, they are all deployed into one document, either minified or imported into the <abbr title="HyperText Markup Language">HTML</abbr> document. So modules in AngularJS have nothing to do with script loading, you can still integrate <a href="http://headjs.com/" class="urlextern" title="http://headjs.com/"  rel="nofollow">Head.JS</a> or <a href="http://requirejs.org/" class="urlextern" title="http://requirejs.org/"  rel="nofollow">Require.JS</a> if need be.
</p>

<p>
It&#039;s important to read the AngularJS guide on <a href="http://docs.angularjs.org/guide/concepts#module" class="urlextern" title="http://docs.angularjs.org/guide/concepts#module"  rel="nofollow">how modules configure the dependency injector</a>, and refer to the <a href="http://docs.angularjs.org/api/angular.Module" class="urlextern" title="http://docs.angularjs.org/api/angular.Module"  rel="nofollow">module API in the documentation</a> before continuing.
</p>

<p>
AngularJS doesn&#039;t really specify how you should structure your development files, they simply suggest that you put all of your components as part of modules. Here is our recommendation on structuring your client side application. Note that it doesn&#039;t consider where to put your partial templates, that is left up to you. We recommend embedding them in your <abbr title="HyperText Markup Language">HTML</abbr> that is first loaded by your server, refer to the template section for further information.
</p>
<pre class="code">  root/js
    |
    |----app.js
    |
    |----controllers
    |       |
    |       |----This is where your place your page controllers
    |       |
    |       |----Blog.Controllers.js (page controller)
    |       |
    |       |----Header.Controllers.js (sectional controller)
    |
    |----directives
    |       |
    |       |----This is where you put reusable directive code
    |       |
    |       |----Fade.Directive.js
    |       |
    |       |----EqualiseHeight.Directive.js
    |
    |----filters
    |       |
    |       |----This is where you put reusable filter code
    |       |
    |       |----Currency.Filter.js
    |
    |----services
    |       |
    |       |----This is where you put shared services
    |       |
    |       |----Blog.Service.js
    |       |
    |       |----ErrorResponse.Service.js
    |
    |----vendor
            |
            |----AngularJS Libraries
            |
            |----jQuery Libraries
            |
            |----Bootstrap Libraries
            |
            |----Modernizr
            |
            |----es5 shim
            |
            |----es6 shim
            |
            |----ieshiv
            |
            |----JSON3</pre>

<p>
Our <code>app.js</code> is equivalent to our front controller. This is where we configure all of our dependencies, our page level routing, single page <abbr title="Uniform Resource Locator">URL</abbr> structure “deep linking”, and any initial configuration and constants such as handling CSRF.
</p>

<p>
Each page on our web application can have its own page level controller. These are not the same as RESTful resources, but simply user interface constructs. If we were using AngularJS on a mobile application, then the controllers may be completely different! The controllers directory is also where we place any sectional controllers that don&#039;t correspond to any particular page. Any subsections of a page can be considered sub controllers, and these can be placed inside the page controller&#039;s script file.
</p>

<p>
The directives will contain reusable directive code, they don&#039;t contain any template files. Notice how we name them, they don&#039;t refer to any kind of data or page, but particular behaviour of our user interface. Directives can often be used in multiple places.
</p>

<p>
Filters will contain any reusable filter code.
</p>

<p>
Services should have the same name as our RESTful resources on the server. This is where we put the intermediary layer to communicate with external resources. The services section can also contain any kind of business logic that don&#039;t involve user interface changes.
</p>

<p>
Please note that module names are StudlyCaps. The names of the controllers, services, and filters are also StudlyCaps. The only exception is directives need to be camelcased. However all of their filenames will be StudlyCaps.
</p>

<p>
The vendor directory is where we place all of our third party code. It is recommended to use their CDNs to load the scripts instead of from your own server if they provide it. Make sure to always use their minified version, and if they don&#039;t have a minified version, you can minify it yourself using the <a href="http://refresh-sf.com/yui/" class="urlextern" title="http://refresh-sf.com/yui/"  rel="nofollow">online YUI service</a>.
</p>

<p>
Inside of each of those script files, we register them as a module, and we also declare any dependencies.
</p>
<dl class="file">
<dt><a href="/doku.php?do=export_code&amp;id=web_application_development:javascript_-_client_side_architecture&amp;codeblock=19" title="Download Snippet" class="mediafile mf_js">app.js</a></dt>
<dd><pre class="code file javascript"><span class="st0">'use strict'</span><span class="sy0">;</span>
&nbsp;
<span class="co1">//here's an example of app.js registering itself as a module, and then declaring all of its dependencies!</span>
<span class="co1">//you may notice some modules as part of AngularJS itself</span>
&nbsp;
<span class="coMULTI">/* ==========================================================================
   BOOTSTRAPPER (notice the cascading dependencies, AngularJS uses the order you defined to configure the injector!)
   ========================================================================== */</span>
&nbsp;
<span class="co1">//app is an module that is dependent on several top level modules</span>
<span class="kw1">var</span> app <span class="sy0">=</span> angular.<span class="me1">module</span><span class="br0">&#40;</span><span class="st0">'App'</span><span class="sy0">,</span> <span class="br0">&#91;</span>
	<span class="st0">'Controllers'</span><span class="sy0">,</span>
	<span class="st0">'Filters'</span><span class="sy0">,</span>
	<span class="st0">'Services'</span><span class="sy0">,</span>
	<span class="st0">'Directives'</span><span class="sy0">,</span>
	<span class="st0">'ngResource'</span><span class="sy0">,</span> <span class="co1">//for RESTful resources</span>
	<span class="st0">'ngCookies'</span> <span class="co1">//for manipulation of cookies</span>
<span class="br0">&#93;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
<span class="co1">//Define all the page level controllers (Application Logic)</span>
angular.<span class="me1">module</span><span class="br0">&#40;</span><span class="st0">'Controllers'</span><span class="sy0">,</span> <span class="br0">&#91;</span><span class="br0">&#93;</span><span class="br0">&#41;</span><span class="sy0">;</span>
<span class="co1">//Define all shared filters (UI Filtering)</span>
angular.<span class="me1">module</span><span class="br0">&#40;</span><span class="st0">'Filters'</span><span class="sy0">,</span> <span class="br0">&#91;</span><span class="br0">&#93;</span><span class="br0">&#41;</span><span class="sy0">;</span>
<span class="co1">//Define all shared services (Interaction with Backend)</span>
angular.<span class="me1">module</span><span class="br0">&#40;</span><span class="st0">'Services'</span><span class="sy0">,</span> <span class="br0">&#91;</span><span class="br0">&#93;</span><span class="br0">&#41;</span><span class="sy0">;</span>
<span class="co1">//Define all shared directives (UI Logic)</span>
angular.<span class="me1">module</span><span class="br0">&#40;</span><span class="st0">'Directives'</span><span class="sy0">,</span> <span class="br0">&#91;</span><span class="br0">&#93;</span><span class="br0">&#41;</span><span class="sy0">;</span></pre>
</dd></dl>

<p>
Here&#039;s an excerpt out of a typical page controller module.
</p>
<dl class="file">
<dt><a href="/doku.php?do=export_code&amp;id=web_application_development:javascript_-_client_side_architecture&amp;codeblock=20" title="Download Snippet" class="mediafile mf_js">Courses.Controllers.js</a></dt>
<dd><pre class="code file javascript"><span class="st0">'use strict'</span><span class="sy0">;</span>
&nbsp;
<span class="coMULTI">/**
 * This controller is bound the Controllers module
 * It is possible to have multiple controllers on this module, however they should be sub controllers that are nested inside the CoursesIndexCtrl
 */</span>
&nbsp;
angular.<span class="me1">module</span><span class="br0">&#40;</span><span class="st0">'Controllers'</span><span class="br0">&#41;</span>
    .<span class="me1">controller</span><span class="br0">&#40;</span><span class="st0">'CoursesIndexCtrl'</span><span class="sy0">,</span> <span class="br0">&#91;</span> <span class="co1">//&lt;- actual name of the controller, not the module</span>
        <span class="co1">//this part is for dependency injection, we're injecting $scope service and CoursesServ service into this controller's function. The CoursesServ has been dependency injected, because in our app.js bootstrapping process, we added in the Courses.Service module to injector globally!</span>
        <span class="st0">'$scope'</span><span class="sy0">,</span>
        <span class="st0">'CoursesServ'</span><span class="sy0">,</span>
        <span class="kw1">function</span><span class="br0">&#40;</span>$scope<span class="sy0">,</span> CoursesServ<span class="br0">&#41;</span><span class="br0">&#123;</span>
&nbsp;
            <span class="co1">//start doing magic here!</span>
            <span class="co1">//add models to the scope</span>
&nbsp;
        <span class="br0">&#125;</span>
    <span class="br0">&#93;</span><span class="br0">&#41;</span><span class="sy0">;</span></pre>
</dd></dl>

<p>
Here&#039;s an excerpt from the Courses.Service.js.
</p>
<dl class="file">
<dt><a href="/doku.php?do=export_code&amp;id=web_application_development:javascript_-_client_side_architecture&amp;codeblock=21" title="Download Snippet" class="mediafile mf_js">Courses.Service.js</a></dt>
<dd><pre class="code file javascript"><span class="st0">'use strict'</span><span class="sy0">;</span>
&nbsp;
angular.<span class="me1">module</span><span class="br0">&#40;</span><span class="st0">'Services'</span><span class="br0">&#41;</span>
    .<span class="me1">factory</span><span class="br0">&#40;</span><span class="st0">'CoursesServ'</span><span class="sy0">,</span> <span class="br0">&#91;</span>
        <span class="st0">'$resource'</span><span class="sy0">,</span>
        <span class="kw1">function</span><span class="br0">&#40;</span>$resource<span class="br0">&#41;</span><span class="br0">&#123;</span>
            <span class="kw1">return</span> $resource<span class="br0">&#40;</span>
                <span class="st0">'api/courses/:id'</span><span class="sy0">,</span>
                <span class="br0">&#123;</span><span class="br0">&#125;</span><span class="sy0">,</span>
                <span class="br0">&#123;</span>
                    update<span class="sy0">:</span> <span class="br0">&#123;</span>
                        method<span class="sy0">:</span> <span class="st0">'PUT'</span><span class="sy0">,</span> <span class="co1">//THIS METHOD DOESN'T EXIST BY DEFAULT</span>
                    <span class="br0">&#125;</span>
                <span class="br0">&#125;</span>
            <span class="br0">&#41;</span><span class="sy0">;</span>
        <span class="br0">&#125;</span>
    <span class="br0">&#93;</span><span class="br0">&#41;</span><span class="sy0">;</span></pre>
</dd></dl>

<p>
Modules is also how AngularJS configures itself. That is you can hook into AngularJS&#039;s processing during its config phase, and after everything&#039;s been loaded in its run phase. You can do this in any module as long as it has been specified as a dependent module on the main <code>app.js</code> module. For example, here is the ErrorResponse.Service module that intercepts <abbr title="Hyper Text Transfer Protocol">HTTP</abbr> responses and inspects their <abbr title="Hyper Text Transfer Protocol">HTTP</abbr> status code and then creates a corresponding message for various errors.
</p>
<dl class="file">
<dt><a href="/doku.php?do=export_code&amp;id=web_application_development:javascript_-_client_side_architecture&amp;codeblock=22" title="Download Snippet" class="mediafile mf_js">Error.Response.js</a></dt>
<dd><pre class="code file javascript"><span class="st0">'use strict'</span><span class="sy0">;</span>
&nbsp;
<span class="coMULTI">/**
 * Response Handler for Error Codes across all HTTP requests to show an alert box!
 */</span>
angular.<span class="me1">module</span><span class="br0">&#40;</span><span class="st0">'Services'</span><span class="br0">&#41;</span>
    .<span class="me1">config</span><span class="br0">&#40;</span><span class="br0">&#91;</span>
        <span class="st0">'$provide'</span><span class="sy0">,</span>
        <span class="st0">'$httpProvider'</span><span class="sy0">,</span>
        <span class="kw1">function</span><span class="br0">&#40;</span>$provide<span class="sy0">,</span> $httpProvider<span class="br0">&#41;</span><span class="br0">&#123;</span>
&nbsp;
            <span class="co1">//model variable...</span>
            <span class="kw1">var</span> httpMessages <span class="sy0">=</span> <span class="br0">&#91;</span><span class="br0">&#93;</span><span class="sy0">;</span>
&nbsp;
            <span class="co1">//bind the httpMessages array to the httpMessages key so it can be dependency injected</span>
            $provide.<span class="me1">value</span><span class="br0">&#40;</span><span class="st0">'httpMessages'</span><span class="sy0">,</span> httpMessages<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
            $httpProvider.<span class="me1">responseInterceptors</span>.<span class="me1">push</span><span class="br0">&#40;</span><span class="br0">&#91;</span><span class="st0">'$q'</span><span class="sy0">,</span> <span class="kw1">function</span><span class="br0">&#40;</span>$q<span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp;
                <span class="kw1">return</span> <span class="kw1">function</span><span class="br0">&#40;</span>promise<span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp;
                    <span class="kw1">return</span> promise.<span class="me1">then</span><span class="br0">&#40;</span>
                        <span class="kw1">function</span><span class="br0">&#40;</span>successResponse<span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp;
                            <span class="co1">//we only want to show anything that wasn't a GET based request</span>
                            <span class="co1">//these allow you show messages, you don't have to show these types though (because usually not required)</span>
&nbsp;
                            <span class="kw1">switch</span><span class="br0">&#40;</span>successResponse.<span class="me1">config</span>.<span class="me1">method</span>.<span class="me1">toUpperCase</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="br0">&#123;</span>
                                <span class="kw1">case</span> <span class="st0">'GET'</span><span class="sy0">:</span>
                                    httpMessages.<span class="me1">push</span><span class="br0">&#40;</span><span class="br0">&#123;</span>
                                        message<span class="sy0">:</span> <span class="st0">'Successfully Received'</span><span class="sy0">,</span>
                                        type<span class="sy0">:</span> <span class="st0">'success'</span>
                                    <span class="br0">&#125;</span><span class="br0">&#41;</span><span class="sy0">;</span>
                                    <span class="kw1">break</span><span class="sy0">;</span>
                                <span class="kw1">case</span> <span class="st0">'POST'</span><span class="sy0">:</span>
                                    httpMessages.<span class="me1">push</span><span class="br0">&#40;</span><span class="br0">&#123;</span>
                                        message<span class="sy0">:</span> <span class="st0">'Successfully Posted'</span><span class="sy0">,</span>
                                        type<span class="sy0">:</span> <span class="st0">'success'</span>
                                    <span class="br0">&#125;</span><span class="br0">&#41;</span><span class="sy0">;</span>
                                    <span class="kw1">break</span><span class="sy0">;</span>
                                <span class="kw1">case</span> <span class="st0">'PUT'</span><span class="sy0">:</span>
                                    httpMessages.<span class="me1">push</span><span class="br0">&#40;</span><span class="br0">&#123;</span>
                                        message<span class="sy0">:</span> <span class="st0">'Successfully Updated'</span><span class="sy0">,</span>
                                        type<span class="sy0">:</span> <span class="st0">'success'</span>
                                    <span class="br0">&#125;</span><span class="br0">&#41;</span><span class="sy0">;</span>
                                    <span class="kw1">break</span><span class="sy0">;</span>
                                <span class="kw1">case</span> <span class="st0">'DELETE'</span><span class="sy0">:</span>
                                    httpMessages.<span class="me1">push</span><span class="br0">&#40;</span><span class="br0">&#123;</span>
                                        message<span class="sy0">:</span> <span class="st0">'Sucessfully Deleted'</span><span class="sy0">,</span>
                                        type<span class="sy0">:</span> <span class="st0">'success'</span>
                                    <span class="br0">&#125;</span><span class="br0">&#41;</span><span class="sy0">;</span>
                                    <span class="kw1">break</span><span class="sy0">;</span>
                            <span class="br0">&#125;</span>
&nbsp;
&nbsp;
                            <span class="kw1">return</span> successResponse<span class="sy0">;</span>
&nbsp;
                        <span class="br0">&#125;</span><span class="sy0">,</span>
                        <span class="kw1">function</span><span class="br0">&#40;</span>failureResponse<span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp;
                            <span class="kw1">switch</span><span class="br0">&#40;</span>failureResponse.<span class="me1">status</span><span class="br0">&#41;</span><span class="br0">&#123;</span>
                                <span class="kw1">case</span> <span class="nu0">400</span><span class="sy0">:</span> <span class="co1">//show validation error messages then!</span>
                                    httpMessages.<span class="me1">push</span><span class="br0">&#40;</span><span class="br0">&#123;</span>
                                        message<span class="sy0">:</span> <span class="st0">'Validation failed, try tweaking your submission.'</span><span class="sy0">,</span>
                                        type<span class="sy0">:</span> <span class="st0">'failure'</span>
                                    <span class="br0">&#125;</span><span class="br0">&#41;</span><span class="sy0">;</span>
                                    <span class="kw1">break</span><span class="sy0">;</span>
                                <span class="kw1">case</span> <span class="nu0">401</span><span class="sy0">:</span> <span class="co1">//for ionauth authentication, will need to redirect to login screen, or modal box</span>
                                    httpMessages.<span class="me1">push</span><span class="br0">&#40;</span><span class="br0">&#123;</span>
                                        message<span class="sy0">:</span> <span class="st0">'Unauthorised request, try logging in.'</span><span class="sy0">,</span>
                                        type<span class="sy0">:</span> <span class="st0">'failure'</span>
                                    <span class="br0">&#125;</span><span class="br0">&#41;</span><span class="sy0">;</span>
                                    <span class="kw1">break</span><span class="sy0">;</span>
                                <span class="kw1">case</span> <span class="nu0">403</span><span class="sy0">:</span> <span class="co1">//returned by server for resources the user should not be able to access directly</span>
                                    httpMessages.<span class="me1">push</span><span class="br0">&#40;</span><span class="br0">&#123;</span>
                                        message<span class="sy0">:</span> <span class="st0">'You can<span class="es0">\'</span>t access this.'</span><span class="sy0">,</span>
                                        type<span class="sy0">:</span> <span class="st0">'failure'</span>
                                    <span class="br0">&#125;</span><span class="br0">&#41;</span><span class="sy0">;</span>
                                    <span class="kw1">break</span><span class="sy0">;</span>
                                <span class="kw1">case</span> <span class="nu0">404</span><span class="sy0">:</span>
                                    httpMessages.<span class="me1">push</span><span class="br0">&#40;</span><span class="br0">&#123;</span>
                                        message<span class="sy0">:</span> <span class="st0">'404, sorry could not find what you were looking for.'</span><span class="sy0">,</span>
                                        type<span class="sy0">:</span> <span class="st0">'failure'</span>
                                    <span class="br0">&#125;</span><span class="br0">&#41;</span><span class="sy0">;</span>
                                    <span class="kw1">break</span><span class="sy0">;</span>
                                <span class="kw1">case</span> <span class="nu0">405</span><span class="sy0">:</span>
                                    httpMessages.<span class="me1">push</span><span class="br0">&#40;</span><span class="br0">&#123;</span>
                                        message<span class="sy0">:</span> <span class="st0">'The requested method was incompatible with the requested resource.'</span><span class="sy0">,</span>
                                        type<span class="sy0">:</span> <span class="st0">'failure'</span>
                                    <span class="br0">&#125;</span><span class="br0">&#41;</span><span class="sy0">;</span>
                                    <span class="kw1">break</span><span class="sy0">;</span>
                                <span class="kw1">case</span> <span class="nu0">500</span><span class="sy0">:</span>
                                    httpMessages.<span class="me1">push</span><span class="br0">&#40;</span><span class="br0">&#123;</span>
                                        message<span class="sy0">:</span> <span class="st0">'There was a server error, try again later, or contact the owners.'</span><span class="sy0">,</span>
                                        type<span class="sy0">:</span> <span class="st0">'failure'</span>
                                    <span class="br0">&#125;</span><span class="br0">&#41;</span><span class="sy0">;</span>
                                    <span class="kw1">break</span><span class="sy0">;</span>
                                <span class="kw1">default</span><span class="sy0">:</span>
                                    httpMessages.<span class="me1">push</span><span class="br0">&#40;</span><span class="br0">&#123;</span>
                                        message<span class="sy0">:</span> failureResponse.<span class="me1">status</span> <span class="sy0">+</span> <span class="st0">' General error processing the request'</span><span class="sy0">,</span>
                                        type<span class="sy0">:</span> <span class="st0">'failure'</span>
                                    <span class="br0">&#125;</span><span class="br0">&#41;</span><span class="sy0">;</span>
                            <span class="br0">&#125;</span>
&nbsp;
                            <span class="kw1">return</span> $q.<span class="me1">reject</span><span class="br0">&#40;</span>failureResponse<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
                        <span class="br0">&#125;</span>
                    <span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
                <span class="br0">&#125;</span><span class="sy0">;</span>
&nbsp;
            <span class="br0">&#125;</span><span class="br0">&#93;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
        <span class="br0">&#125;</span>
    <span class="br0">&#93;</span><span class="br0">&#41;</span><span class="sy0">;</span></pre>
</dd></dl>

</div>
<!-- EDIT13 SECTION "Modules" [55071-68856] -->
<h3 class="sectionedit14" id="routing">Routing</h3>
<div class="level3">

<p>
One of the core features of single page applications is client side routing. This means the client side javascript handles the page loading and <abbr title="Uniform Resource Locator">URL</abbr> changes. Originally this was limited due to the lack of history management provided by browsers in <abbr title="Asynchronous JavaScript and XML">AJAX</abbr> applications, however with HTML5&#039;s history <abbr title="Application Programming Interface">API</abbr>, client side javascript can tap into the history of browsers, and manage the page state through the URLs itself. Therefore the URLs could change live based on the state of the page. This allowed <a href="http://en.wikipedia.org/wiki/Deep linking#Deep_linking_and_web_technologies" class="interwiki iw_wp" title="http://en.wikipedia.org/wiki/Deep linking#Deep_linking_and_web_technologies">deep linking</a> and enhanced user experience as people could copy and share states of <abbr title="Asynchronous JavaScript and XML">AJAX</abbr> enhanced applications. AngularJS provides this powerful functionality as part of the framework. However there are still problems to resolve on the server side either in security, and in routing requests so they could be handled by the client. Furthermore SEO was still an issue as search engine robots could not run javascript, this will be investigated at a later time.
</p>

</div>

<h4 id="base_tag">Base Tag</h4>
<div class="level4">

<p>
The first thing to setup is the <abbr title="HyperText Markup Language">HTML</abbr> <code>&lt;base /&gt;</code> tag which provides a reference <abbr title="Uniform Resource Locator">URL</abbr> for all the relative links in your web application. This simplifies the job of maintaining relative URLs for AngularJS. If you did not have this base tag pointing to the root <abbr title="Uniform Resource Locator">URL</abbr> of your web application, then any relative URLs in your <abbr title="Asynchronous JavaScript and XML">AJAX</abbr> requests inside javascript would be relative to the current <abbr title="Uniform Resource Locator">URL</abbr> state of the user. Imagine if I needed to access <code>api/blog</code> in an XHR request, if the end user&#039;s <abbr title="Uniform Resource Locator">URL</abbr> state was at <code><a href="http://example.com/some/random/page" class="urlextern" title="http://example.com/some/random/page"  rel="nofollow">http://example.com/some/random/page</a></code>, then the resolve <abbr title="Uniform Resource Locator">URL</abbr> would be <code><a href="http://example.com/some/random/page/api/blog" class="urlextern" title="http://example.com/some/random/page/api/blog"  rel="nofollow">http://example.com/some/random/page/api/blog</a></code>. It&#039;s quite unlikely that your <abbr title="Application Programming Interface">API</abbr> would be accessible in that manner.
</p>

<p>
To start using the base tag, you need to place inside of your <code>&lt;head&gt;&lt;/head&gt;</code> tags, and inside the <code>href</code> attribute, you need to place the <abbr title="Uniform Resource Locator">URL</abbr> to your web application. In the case of Codeigniter, both <code>base_url()</code> and <code>site_url()</code> functions will suffice.
</p>
<pre class="code html4strict"><span class="sc2">&lt;<a href="http://december.com/html/4/element/head.html"><span class="kw2">head</span></a>&gt;</span>
    <span class="sc2">&lt;<a href="http://december.com/html/4/element/base.html"><span class="kw2">base</span></a> <span class="kw3">href</span><span class="sy0">=</span><span class="st0">&quot;&lt;?= base_url() ?&gt;</span></span>&quot; /&gt;
<span class="sc2">&lt;<span class="sy0">/</span><a href="http://december.com/html/4/element/head.html"><span class="kw2">head</span></a>&gt;</span></pre>

<p>
Now if I needed to link relatively, I can simply name the link without any preceding slashes. If I wanted to go to the home page, I would simply have nothing inside my <code>href</code> attribute. Absolute links still work, just write them from <code>http://</code> onwards. Note that the base tag does not affect links inside <abbr title="Cascading Style Sheets">CSS</abbr>. It simply affects links inside the <abbr title="HyperText Markup Language">HTML</abbr> and javascript.
</p>
<pre class="code html4strict"><span class="sc2">&lt;<a href="http://december.com/html/4/element/ul.html"><span class="kw2">ul</span></a> <span class="kw3">class</span><span class="sy0">=</span><span class="st0">&quot;nav&quot;</span>&gt;</span>
    <span class="sc2">&lt;<a href="http://december.com/html/4/element/li.html"><span class="kw2">li</span></a>&gt;&lt;<a href="http://december.com/html/4/element/a.html"><span class="kw2">a</span></a> <span class="kw3">href</span><span class="sy0">=</span><span class="st0">&quot;&quot;</span>&gt;</span>home<span class="sc2">&lt;<span class="sy0">/</span><a href="http://december.com/html/4/element/a.html"><span class="kw2">a</span></a>&gt;&lt;<span class="sy0">/</span><a href="http://december.com/html/4/element/li.html"><span class="kw2">li</span></a>&gt;</span>
    <span class="sc2">&lt;<a href="http://december.com/html/4/element/li.html"><span class="kw2">li</span></a>&gt;&lt;<a href="http://december.com/html/4/element/a.html"><span class="kw2">a</span></a> <span class="kw3">href</span><span class="sy0">=</span><span class="st0">&quot;courses&quot;</span>&gt;</span>courses<span class="sc2">&lt;<span class="sy0">/</span><a href="http://december.com/html/4/element/a.html"><span class="kw2">a</span></a>&gt;&lt;<span class="sy0">/</span><a href="http://december.com/html/4/element/li.html"><span class="kw2">li</span></a>&gt;</span>
    <span class="sc2">&lt;<a href="http://december.com/html/4/element/li.html"><span class="kw2">li</span></a>&gt;&lt;<a href="http://december.com/html/4/element/a.html"><span class="kw2">a</span></a> <span class="kw3">href</span><span class="sy0">=</span><span class="st0">&quot;partners&quot;</span>&gt;</span>partners<span class="sc2">&lt;<span class="sy0">/</span><a href="http://december.com/html/4/element/a.html"><span class="kw2">a</span></a>&gt;&lt;<span class="sy0">/</span><a href="http://december.com/html/4/element/li.html"><span class="kw2">li</span></a>&gt;</span>
    <span class="sc2">&lt;<a href="http://december.com/html/4/element/li.html"><span class="kw2">li</span></a>&gt;&lt;<a href="http://december.com/html/4/element/a.html"><span class="kw2">a</span></a> <span class="kw3">href</span><span class="sy0">=</span><span class="st0">&quot;http://codeforaustralia.com.au&quot;</span>&gt;</span>code for australia<span class="sc2">&lt;<span class="sy0">/</span><a href="http://december.com/html/4/element/a.html"><span class="kw2">a</span></a>&gt;&lt;<span class="sy0">/</span><a href="http://december.com/html/4/element/li.html"><span class="kw2">li</span></a>&gt;</span>
    <span class="sc2">&lt;<a href="http://december.com/html/4/element/li.html"><span class="kw2">li</span></a>&gt;&lt;<a href="http://december.com/html/4/element/a.html"><span class="kw2">a</span></a> <span class="kw3">href</span><span class="sy0">=</span><span class="st0">&quot;http://phpbounce.aws.af.cm/&quot;</span>&gt;</span>php bounce<span class="sc2">&lt;<span class="sy0">/</span><a href="http://december.com/html/4/element/a.html"><span class="kw2">a</span></a>&gt;&lt;<span class="sy0">/</span><a href="http://december.com/html/4/element/li.html"><span class="kw2">li</span></a>&gt;</span>
    <span class="sc2">&lt;<a href="http://december.com/html/4/element/li.html"><span class="kw2">li</span></a>&gt;&lt;<a href="http://december.com/html/4/element/a.html"><span class="kw2">a</span></a> <span class="kw3">href</span><span class="sy0">=</span><span class="st0">&quot;http://polycademy.eventbrite.com.au/&quot;</span>&gt;</span>events<span class="sc2">&lt;<span class="sy0">/</span><a href="http://december.com/html/4/element/a.html"><span class="kw2">a</span></a>&gt;&lt;<span class="sy0">/</span><a href="http://december.com/html/4/element/li.html"><span class="kw2">li</span></a>&gt;</span>
    <span class="sc2">&lt;<a href="http://december.com/html/4/element/li.html"><span class="kw2">li</span></a>&gt;&lt;<a href="http://december.com/html/4/element/a.html"><span class="kw2">a</span></a> <span class="kw3">href</span><span class="sy0">=</span><span class="st0">&quot;blog&quot;</span>&gt;</span>blog<span class="sc2">&lt;<span class="sy0">/</span><a href="http://december.com/html/4/element/a.html"><span class="kw2">a</span></a>&gt;&lt;<span class="sy0">/</span><a href="http://december.com/html/4/element/li.html"><span class="kw2">li</span></a>&gt;</span>
<span class="sc2">&lt;<span class="sy0">/</span><a href="http://december.com/html/4/element/ul.html"><span class="kw2">ul</span></a>&gt;</span></pre>

<p>
One key problem to keep track of is the hash (#) links. These don&#039;t play nicely with the base tag. If you have a hash link, on the page, they will always go to the base url. You can solve this by always prefixing it with the current <abbr title="Uniform Resource Locator">URL</abbr> or <abbr title="Uniform Resource Locator">URL</abbr> segment by using Codeigniter&#039;s <abbr title="Uniform Resource Locator">URL</abbr> functions or javascript to interpret the current location.
</p>

</div>

<h4 id="client_routing_config">Client Routing Config</h4>
<div class="level4">

<p>
When single page applications and client side routing first started getting popular, developers used <a href="http://www.webmonkey.com/2011/02/gawker-learns-the-hard-way-why-hash-bang-urls-are-evil/" class="urlextern" title="http://www.webmonkey.com/2011/02/gawker-learns-the-hard-way-why-hash-bang-urls-are-evil/"  rel="nofollow">hash bang URLs in order allow javascript to change the URL</a> without reloading the page. However this is no longer required with the the introduction of the history <abbr title="Application Programming Interface">API</abbr>. We can now have URLs that change with javascript and look completely the same as normal URLs. Assuming we have the base tag setup, here is what we would do inside our <code>app.js</code> front controller to get HTML5 URLs.
</p>
<pre class="code javascript"><span class="coMULTI">/* ==========================================================================
   ROUTER
   ========================================================================== */</span>
&nbsp;
<span class="co1">//Define all routes here and which page level controller should handle them</span>
app.<span class="me1">config</span><span class="br0">&#40;</span>
    <span class="br0">&#91;</span>
        <span class="st0">'$routeProvider'</span><span class="sy0">,</span> <span class="co1">//used for routing</span>
        <span class="st0">'$locationProvider'</span><span class="sy0">,</span> <span class="co1">//used to manipulate the URL</span>
        <span class="kw1">function</span><span class="br0">&#40;</span>$routeProvider<span class="sy0">,</span> $locationProvider<span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp;
            <span class="co1">//HTML5 Mode URLs</span>
            <span class="co1">//there are two commands here, one to make html5mode true, and the second to set the hashPrefix for the hashbang fallback, so it will be #! for the urls in legacy browsers</span>
            $locationProvider.<span class="me1">html5Mode</span><span class="br0">&#40;</span><span class="kw2">true</span><span class="br0">&#41;</span>.<span class="me1">hashPrefix</span><span class="br0">&#40;</span><span class="st0">'!'</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
            <span class="co1">//Routing</span>
            <span class="co1">//this is chained up, and it's cascading, so when it hits '/' it goes to home, if nothing, go back to home</span>
            $routeProvider
                .<span class="me1">when</span><span class="br0">&#40;</span>
                    <span class="st0">'/'</span><span class="sy0">,</span>
                    <span class="br0">&#123;</span>
                        templateUrl<span class="sy0">:</span> <span class="st0">'home_index.html'</span><span class="sy0">,</span> <span class="co1">//the templateUrl can be loaded with the controller, this only works when you are using the &quot;ng-view&quot; directive in your HTML</span>
                        controller<span class="sy0">:</span> <span class="st0">'HomeIndexCtrl'</span>
                    <span class="br0">&#125;</span>
                <span class="br0">&#41;</span>
                .<span class="me1">when</span><span class="br0">&#40;</span>
                    <span class="st0">'/blog'</span><span class="sy0">,</span>
                    <span class="br0">&#123;</span>
                        templateUrl<span class="sy0">:</span> <span class="st0">'blog_index.html'</span><span class="sy0">,</span>
                        controller<span class="sy0">:</span> <span class="st0">'BlogIndexCtrl'</span>
                    <span class="br0">&#125;</span>
                <span class="br0">&#41;</span>
                .<span class="me1">otherwise</span><span class="br0">&#40;</span>
                    <span class="br0">&#123;</span>
                        redirectTo<span class="sy0">:</span> <span class="st0">'/'</span>
                    <span class="br0">&#125;</span>
                <span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
        <span class="br0">&#125;</span>
    <span class="br0">&#93;</span>
<span class="br0">&#41;</span><span class="sy0">;</span></pre>

<p>
However remember that older browsers don&#039;t have the history <abbr title="Application Programming Interface">API</abbr>, AngularJS intelligently rewrites your links with hash bangs so you don&#039;t have to worry about it. Refer to the <a href="http://docs.angularjs.org/guide/dev_guide.services.$location" class="urlextern" title="http://docs.angularjs.org/guide/dev_guide.services.$location"  rel="nofollow">documentation on $location service</a> for more information.
</p>

<p>
The routing only works when you have the <code>ng-view</code> directive setup in your <abbr title="HyperText Markup Language">HTML</abbr>. This would usually be placed between the header and footer templates. In the case of Codeigniter, and if you are using Polycademy&#039;s CiTemplating class, the <code>ng-view</code> directive would be placed in your index view of your home controller.
</p>
<dl class="file">
<dt><a href="/doku.php?do=export_code&amp;id=web_application_development:javascript_-_client_side_architecture&amp;codeblock=26" title="Download Snippet" class="mediafile mf_php">index_view.php</a></dt>
<dd><pre class="code file php"><span class="sy0">&lt;</span>div <span class="kw2">class</span><span class="sy0">=</span><span class="st0">&quot;main&quot;</span><span class="sy0">&gt;</span>
    <span class="sy0">&lt;</span>div <span class="kw2">class</span><span class="sy0">=</span><span class="st0">&quot;container&quot;</span><span class="sy0">&gt;</span>
        <span class="sy0">&lt;</span>div ng<span class="sy0">-</span>view<span class="sy0">&gt;&lt;/</span>div<span class="sy0">&gt;</span>
    <span class="sy0">&lt;/</span>div<span class="sy0">&gt;</span>
<span class="sy0">&lt;/</span>div<span class="sy0">&gt;</span></pre>
</dd></dl>

<p>
The client side template that you specified in the <code>templateUrl</code> would be injected as a child to the tags where <code>ng-view</code> is placed.
</p>

</div>

<h4 id="server_side_routing">Server Side Routing</h4>
<div class="level4">

<p>
So far we&#039;ve managed to make AngularJS responsive to links and make <abbr title="Uniform Resource Locator">URL</abbr> changes automatically without reloading the page. However a problem arises, if someone were to save their current <abbr title="Uniform Resource Locator">URL</abbr> at a some point outside of the home page, close the browser, reopen it and navigate to that <abbr title="Uniform Resource Locator">URL</abbr> directly from their browser, where would that browser go? If you&#039;re handling routing on the client side, and that javascript is only loaded on the home page, then the browser would go no where but hit a 404. What we need to do is make the server point to home page whenever someone requests a <abbr title="Uniform Resource Locator">URL</abbr>. Those extra <abbr title="Uniform Resource Locator">URL</abbr> segments would remain when the javascript gets loaded and AngularJS would interpret it and then navigate to the correct page state. Of course we don&#039;t want to rout requests to the home page, or else we couldn&#039;t have a server <abbr title="Application Programming Interface">API</abbr>, we need to keep some routes open for direct access.
</p>

<p>
To implement this on an Apache <abbr title="Hypertext Preprocessor">PHP</abbr> server, we need an .htaccess file that makes all requests that don&#039;t look for files or directories to a <abbr title="Hypertext Preprocessor">PHP</abbr> front controller. We already have done this during the server side programming. Next we need to configure our server routing to make all requests go to the home controller except for requests which hit the <abbr title="Application Programming Interface">API</abbr>. This can be easily achieved with the Pigeon routing library. Therefore your <code>config/routes.php</code> file will start to look like this:
</p>
<pre class="code php">Pigeon<span class="sy0">::</span><span class="me2">map</span><span class="br0">&#40;</span><span class="kw2">function</span><span class="br0">&#40;</span><span class="re0">$r</span><span class="br0">&#41;</span><span class="br0">&#123;</span>   
&nbsp;
    <span class="co1">//Route all API requests to the correct controller/method</span>
    <span class="co1">//this acts as the gate keeper prefix, there is no required change in our controllers</span>
    <span class="re0">$r</span><span class="sy0">-&gt;</span><span class="me1">route</span><span class="br0">&#40;</span><span class="st_h">'api'</span><span class="sy0">,</span> <span class="kw4">false</span><span class="sy0">,</span> <span class="kw2">function</span><span class="br0">&#40;</span><span class="re0">$r</span><span class="br0">&#41;</span><span class="br0">&#123;</span>
&nbsp;
        <span class="co1">//setup your RESTful resources</span>
        <span class="re0">$r</span><span class="sy0">-&gt;</span><span class="me1">resources</span><span class="br0">&#40;</span><span class="st_h">'courses'</span><span class="br0">&#41;</span><span class="sy0">;</span>
        <span class="re0">$r</span><span class="sy0">-&gt;</span><span class="me1">resources</span><span class="br0">&#40;</span><span class="st_h">'applications'</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
        <span class="co1">//remove the migrations in production</span>
        <span class="re0">$r</span><span class="sy0">-&gt;</span><span class="me1">get</span><span class="br0">&#40;</span><span class="st_h">'migrate'</span><span class="sy0">,</span> <span class="st_h">'migrate/index'</span><span class="br0">&#41;</span><span class="sy0">;</span>
        <span class="re0">$r</span><span class="sy0">-&gt;</span><span class="me1">get</span><span class="br0">&#40;</span><span class="st_h">'migrate/revert'</span><span class="sy0">,</span> <span class="st_h">'migrate/revert'</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
    <span class="br0">&#125;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
    <span class="co1">//everything else can go to the home controller and index method (while preserving all URL segments, that's what the parantheses and hash does)</span>
    <span class="re0">$r</span><span class="sy0">-&gt;</span><span class="me1">route</span><span class="br0">&#40;</span><span class="st_h">'(.*)'</span><span class="sy0">,</span> <span class="st_h">'home#index'</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
<span class="br0">&#125;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
<span class="re0">$route</span> <span class="sy0">=</span> Pigeon<span class="sy0">::</span><span class="me2">draw</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
<span class="re0">$route</span><span class="br0">&#91;</span><span class="st_h">'default_controller'</span><span class="br0">&#93;</span> <span class="sy0">=</span> <span class="st_h">'home'</span><span class="sy0">;</span>
<span class="re0">$route</span><span class="br0">&#91;</span><span class="st_h">'404_override'</span><span class="br0">&#93;</span> <span class="sy0">=</span> <span class="st_h">''</span><span class="sy0">;</span></pre>

<p>
Now on the client side, when someone accesses:
</p>
<pre class="code">() means it&#039;s interpreted by the server
[] means it&#039;s interpreted by the client
http://example.com/ =&gt; (Home/Index) &amp; [/]
http://example.com/some/other/page =&gt; (Home/Index) &amp; [/Some/Other/Page]
http://example.com/api/courses =&gt; (Courses/Index)
http://example.com/api/applications =&gt; (Applications/Index)</pre>

<p>
This allows your AngularJS to handle UI page states, and leaves your server open up its <abbr title="Application Programming Interface">API</abbr> to any client.
</p>

</div>

<h4 id="csrf_problem">CSRF Problem</h4>
<div class="level4">

<p>
Codeigniter natively only inspects POST requests for its CSRF code. It also expects that the CSRF code would be inside a form encoded data called <code>application/x-www-form-urlencoded</code>. There are several problems with this in the single page application world. Firstly we use POST, PUT and DELETE for RESTful resources. CSRF should be checked on all three of those requests except GET. Secondly AngularJS and many other client side frameworks send and receive data based on JSON. If we are sending forms and data from the client to server and back using the JSON format, the CSRF checked in Codeigniter would fail because the JSON mimetype of <code>application/json</code> is not the same as <code>application/x-www-form-urlencoded</code>, Codeigniter would not be able to find the CSRF token.
</p>

<p>
To solve this problem we have to change the way CSRF is interpreted on the server to include POST, PUT and DELETE <abbr title="Hyper Text Transfer Protocol">HTTP</abbr> methods and also to check for the CSRF code outside of a form encoded hidden input. AngularJS recommends us to use an <abbr title="Hyper Text Transfer Protocol">HTTP</abbr> header message called <code>X-XSRF-TOKEN</code> instead. This should be included on every requests to the server, and its value will be checked against the CSRF token in the cookie. Let&#039;s first change the CSRF checker on Codeigniter, we can extend the native library by writing a <code>MY_Security.php</code> class inside the <code>application/core</code>. This class would be provided to you on Polycademy&#039;s Angular Codeigniter seed repository.
</p>
<dl class="file">
<dt><a href="/doku.php?do=export_code&amp;id=web_application_development:javascript_-_client_side_architecture&amp;codeblock=29" title="Download Snippet" class="mediafile mf_php">MY_Security.php</a></dt>
<dd><pre class="code file php"><span class="kw2">&lt;?php</span>
&nbsp;
<span class="kw2">class</span> MY_Security <span class="kw2">extends</span> CI_Security<span class="br0">&#123;</span>
&nbsp;
    <span class="co1">//overriding the normal csrf_verify, this gets automatically called in the Input library's constructor</span>
    <span class="co1">//verifying on POST and PUT and DELETE</span>
    <span class="kw2">public</span> <span class="kw2">function</span> csrf_verify<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#123;</span>
&nbsp;
        <span class="co1">//If it is GET, ignore the rest Watch out for CORS support!, You may need to let OPTIONS go through to!</span>
        <span class="kw1">if</span><span class="br0">&#40;</span><a href="http://www.php.net/strtoupper"><span class="kw3">strtoupper</span></a><span class="br0">&#40;</span><span class="re0">$_SERVER</span><span class="br0">&#91;</span><span class="st_h">'REQUEST_METHOD'</span><span class="br0">&#93;</span><span class="br0">&#41;</span> <span class="sy0">==</span> <span class="st_h">'GET'</span><span class="br0">&#41;</span><span class="br0">&#123;</span>
            <span class="kw1">return</span> <span class="re0">$this</span><span class="sy0">-&gt;</span><span class="me1">csrf_set_cookie</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
        <span class="br0">&#125;</span>
&nbsp;
        <span class="co1">// Check if URI has been whitelisted from CSRF checks</span>
        <span class="kw1">if</span><span class="br0">&#40;</span><span class="re0">$exclude_uris</span> <span class="sy0">=</span> config_item<span class="br0">&#40;</span><span class="st_h">'csrf_exclude_uris'</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="br0">&#123;</span>
            <span class="re0">$uri</span> <span class="sy0">=</span> load_class<span class="br0">&#40;</span><span class="st_h">'URI'</span><span class="sy0">,</span> <span class="st_h">'core'</span><span class="br0">&#41;</span><span class="sy0">;</span>
            <span class="kw1">if</span><span class="br0">&#40;</span><a href="http://www.php.net/in_array"><span class="kw3">in_array</span></a><span class="br0">&#40;</span><span class="re0">$uri</span><span class="sy0">-&gt;</span><span class="me1">uri_string</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">,</span> <span class="re0">$exclude_uris</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="br0">&#123;</span>
                <span class="kw1">return</span> <span class="re0">$this</span><span class="sy0">;</span>
            <span class="br0">&#125;</span>
        <span class="br0">&#125;</span>
&nbsp;
        <span class="co1">//COOKIE needs to exist and at least either POST or SERVER needs to exist and at least one of the POST or SERVER must match the COOKIE</span>
        <span class="kw1">if</span><span class="br0">&#40;</span>
            <span class="br0">&#40;</span>
                <span class="sy0">!</span><a href="http://www.php.net/isset"><span class="kw3">isset</span></a><span class="br0">&#40;</span><span class="re0">$_COOKIE</span><span class="br0">&#91;</span><span class="re0">$this</span><span class="sy0">-&gt;</span>_csrf_cookie_name<span class="br0">&#93;</span><span class="br0">&#41;</span> <span class="co1">//if cookie doesnt exist</span>
                OR
                <span class="br0">&#40;</span>
                    <span class="sy0">!</span><a href="http://www.php.net/isset"><span class="kw3">isset</span></a><span class="br0">&#40;</span><span class="re0">$_POST</span><span class="br0">&#91;</span><span class="re0">$this</span><span class="sy0">-&gt;</span>_csrf_token_name<span class="br0">&#93;</span><span class="br0">&#41;</span> <span class="co1">//or if both POST and SERVER doesnt exist</span>
                    AND
                    <span class="sy0">!</span><a href="http://www.php.net/isset"><span class="kw3">isset</span></a><span class="br0">&#40;</span><span class="re0">$_SERVER</span><span class="br0">&#91;</span><span class="st_h">'HTTP_X_XSRF_TOKEN'</span><span class="br0">&#93;</span><span class="br0">&#41;</span>
                <span class="br0">&#41;</span>
            <span class="br0">&#41;</span>
            AND
            <span class="br0">&#40;</span>
                <span class="br0">&#40;</span><span class="re0">$_POST</span><span class="br0">&#91;</span><span class="re0">$this</span><span class="sy0">-&gt;</span>_csrf_token_name<span class="br0">&#93;</span> <span class="sy0">!==</span> <span class="re0">$_COOKIE</span><span class="br0">&#91;</span><span class="re0">$this</span><span class="sy0">-&gt;</span>_csrf_cookie_name<span class="br0">&#93;</span><span class="br0">&#41;</span> <span class="co1">//and if both did not match</span>
                AND
                <span class="br0">&#40;</span><span class="re0">$_SERVER</span><span class="br0">&#91;</span><span class="st_h">'HTTP_X_XSRF_TOKEN'</span><span class="br0">&#93;</span> <span class="sy0">!==</span> <span class="re0">$_COOKIE</span><span class="br0">&#91;</span><span class="re0">$this</span><span class="sy0">-&gt;</span>_csrf_cookie_name<span class="br0">&#93;</span><span class="br0">&#41;</span>
            <span class="br0">&#41;</span>
        <span class="br0">&#41;</span><span class="br0">&#123;</span>
&nbsp;
            <span class="re0">$this</span><span class="sy0">-&gt;</span><span class="me1">csrf_show_error</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
        <span class="br0">&#125;</span>
&nbsp;
        <span class="co1">// We kill this since we're done and we don't want to polute the _POST array</span>
        <a href="http://www.php.net/unset"><span class="kw3">unset</span></a><span class="br0">&#40;</span><span class="re0">$_POST</span><span class="br0">&#91;</span><span class="re0">$this</span><span class="sy0">-&gt;</span>_csrf_token_name<span class="br0">&#93;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
        <span class="kw1">if</span><span class="br0">&#40;</span>config_item<span class="br0">&#40;</span><span class="st_h">'csrf_regenerate'</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="br0">&#123;</span>
            <a href="http://www.php.net/unset"><span class="kw3">unset</span></a><span class="br0">&#40;</span><span class="re0">$_COOKIE</span><span class="br0">&#91;</span><span class="re0">$this</span><span class="sy0">-&gt;</span>_csrf_cookie_name<span class="br0">&#93;</span><span class="br0">&#41;</span><span class="sy0">;</span>
            <span class="re0">$this</span><span class="sy0">-&gt;</span>_csrf_hash <span class="sy0">=</span> <span class="st_h">''</span><span class="sy0">;</span>
        <span class="br0">&#125;</span>
&nbsp;
        <span class="re0">$this</span><span class="sy0">-&gt;</span>_csrf_set_hash<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
        <span class="re0">$this</span><span class="sy0">-&gt;</span><span class="me1">csrf_set_cookie</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
        log_message<span class="br0">&#40;</span><span class="st_h">'debug'</span><span class="sy0">,</span> <span class="st_h">'CSRF token verified'</span><span class="br0">&#41;</span><span class="sy0">;</span>
        <span class="kw1">return</span> <span class="re0">$this</span><span class="sy0">;</span>
&nbsp;
    <span class="br0">&#125;</span>
&nbsp;
<span class="br0">&#125;</span></pre>
</dd></dl>

<p>
Next in our <code>app.js</code> front controller, we have to take the CSRF token that comes from the server in the form of a cookie, create an X-XSRF-TOKEN header message with the value of the CSRF token. We can try and find it by rummaging through the cookie data, or we can get <abbr title="Hypertext Preprocessor">PHP</abbr> to tell javascript what the cookie is called and hence how to find the CSRF token. This can be achieved by placing an embedded script inside our footer partial, that creates a global object, we can run Codeigniter commands that gives the CSRF cookie name to javascript.
</p>
<pre class="code html4strict"><span class="sc-1">&lt;!-- Pass in PHP variables to Javascript --&gt;</span>
<span class="sc2">&lt;<a href="http://december.com/html/4/element/script.html"><span class="kw2">script</span></a>&gt;</span>
    var serverVars = {
        baseUrl: '<span class="sc2">&lt;?<span class="sy0">=</span> base_url<span class="br0">&#40;</span><span class="br0">&#41;</span> ?&gt;</span>',
        csrfCookieName: '<span class="sc2">&lt;?<span class="sy0">=</span> $this-&gt;</span>config-&gt;item('cookie_prefix') . $this-&gt;config-&gt;item('csrf_cookie_name') ?&gt;'
    };
<span class="sc2">&lt;<span class="sy0">/</span><a href="http://december.com/html/4/element/script.html"><span class="kw2">script</span></a>&gt;</span></pre>

<p>
In our javascript, we need to watch any change in the cookie&#039;s CSRF value. This is because the CSRF value may be regenerated on each request. That is what the <code>$watch</code> service gives us.
</p>
<pre class="code javascript"><span class="coMULTI">/* ==========================================================================
   GLOBAL FEATURES
   ========================================================================== */</span>
&nbsp;
app.<span class="me1">run</span><span class="br0">&#40;</span><span class="br0">&#91;</span>
    <span class="st0">'$rootScope'</span><span class="sy0">,</span>
    <span class="st0">'$cookies'</span><span class="sy0">,</span>
    <span class="st0">'$http'</span><span class="sy0">,</span>
    <span class="kw1">function</span><span class="br0">&#40;</span>$rootScope<span class="sy0">,</span> $cookies<span class="sy0">,</span> $http<span class="br0">&#41;</span><span class="br0">&#123;</span>
&nbsp;
        <span class="co1">//XSRF INTEGRATION</span>
&nbsp;
        <span class="co1">//this $watch has two callback parameters, one to watch, second to setup the X-XSRF-TOKEN</span>
        $rootScope.$watch<span class="br0">&#40;</span>
            <span class="kw1">function</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#123;</span>
                <span class="kw1">return</span> $cookies<span class="br0">&#91;</span>serverVars.<span class="me1">csrfCookieName</span><span class="br0">&#93;</span><span class="sy0">;</span> <span class="co1">//notice the usage of csrfCookieName from serverVars</span>
            <span class="br0">&#125;</span><span class="sy0">,</span>
            <span class="kw1">function</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#123;</span>
                $http.<span class="me1">defaults</span>.<span class="me1">headers</span>.<span class="me1">common</span><span class="br0">&#91;</span><span class="st0">'X-XSRF-TOKEN'</span><span class="br0">&#93;</span> <span class="sy0">=</span> $cookies<span class="br0">&#91;</span>serverVars.<span class="me1">csrfCookieName</span><span class="br0">&#93;</span><span class="sy0">;</span>
            <span class="br0">&#125;</span>
        <span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
    <span class="br0">&#125;</span>
<span class="br0">&#93;</span><span class="br0">&#41;</span><span class="sy0">;</span></pre>

</div>
<!-- EDIT14 SECTION "Routing" [68857-83265] -->
<h3 class="sectionedit15" id="scoping">Scoping</h3>
<div class="level3">

<p>
The scope is responsible for detecting changes to the model section and provides the execution context for expressions inside of the <abbr title="HyperText Markup Language">HTML</abbr>. It&#039;s part of AngularJS&#039;s bidirectional binding. The scopes are nested in a hierarchical structure which closely follow the <abbr title="Document Object Model">DOM</abbr> structure. When you setup a controller using <code>ng-controller</code>, that setups a scope. Certain directives also create scopes, however there are nuances to the way the scope operates and inherits from the parent scope. Furthermore as soon as you declare <code>ng-app</code> on a particular tag, AngularJS creates a <code>$rootScope</code> from which all other scopes are inherit from. Here&#039;s an example, if you have <abbr title="HyperText Markup Language">HTML</abbr> like so:
</p>

<p>
<a href="http://plnkr.co/edit/28R71g7ICtXan6Gp2XOW?p=preview" class="urlextern" title="http://plnkr.co/edit/28R71g7ICtXan6Gp2XOW?p=preview"  rel="nofollow">Plunker Demo</a>
</p>
<pre class="code html4strict"><span class="sc2">&lt;<a href="http://december.com/html/4/element/body.html"><span class="kw2">body</span></a>&gt;</span>
    <span class="sc2">&lt;<a href="http://december.com/html/4/element/div.html"><span class="kw2">div</span></a> ng-controller<span class="sy0">=</span><span class="st0">&quot;GreetCtrl&quot;</span>&gt;</span>Hello {{name}}!<span class="sc2">&lt;<span class="sy0">/</span><a href="http://december.com/html/4/element/div.html"><span class="kw2">div</span></a>&gt;</span>
    <span class="sc2">&lt;<a href="http://december.com/html/4/element/div.html"><span class="kw2">div</span></a> ng-controller<span class="sy0">=</span><span class="st0">&quot;ListCtrl&quot;</span>&gt;</span>
        <span class="sc2">&lt;<a href="http://december.com/html/4/element/ol.html"><span class="kw2">ol</span></a>&gt;</span>
            <span class="sc2">&lt;<a href="http://december.com/html/4/element/li.html"><span class="kw2">li</span></a> ng-repeat<span class="sy0">=</span><span class="st0">&quot;name in names&quot;</span>&gt;</span>{{name}}<span class="sc2">&lt;<span class="sy0">/</span><a href="http://december.com/html/4/element/li.html"><span class="kw2">li</span></a>&gt;</span>
        <span class="sc2">&lt;<span class="sy0">/</span><a href="http://december.com/html/4/element/ol.html"><span class="kw2">ol</span></a>&gt;</span>
    <span class="sc2">&lt;<span class="sy0">/</span><a href="http://december.com/html/4/element/div.html"><span class="kw2">div</span></a>&gt;</span>
<span class="sc2">&lt;<span class="sy0">/</span><a href="http://december.com/html/4/element/body.html"><span class="kw2">body</span></a>&gt;</span></pre>

<p>
And javascript like so:
</p>
<pre class="code javascript"><span class="kw1">function</span> GreetCtrl<span class="br0">&#40;</span>$scope<span class="br0">&#41;</span> <span class="br0">&#123;</span>
    $scope.<span class="me1">name</span> <span class="sy0">=</span> <span class="st0">'World'</span><span class="sy0">;</span>
<span class="br0">&#125;</span>
&nbsp;
<span class="kw1">function</span> ListCtrl<span class="br0">&#40;</span>$scope<span class="br0">&#41;</span> <span class="br0">&#123;</span>
    $scope.<span class="me1">names</span> <span class="sy0">=</span> <span class="br0">&#91;</span><span class="st0">'Igor'</span><span class="sy0">,</span> <span class="st0">'Misko'</span><span class="sy0">,</span> <span class="st0">'Vojta'</span><span class="br0">&#93;</span><span class="sy0">;</span>
<span class="br0">&#125;</span></pre>

<p>
Then the scopes operate in this manner. Check the highlighted scopes. Each controller created a scope, and in the <code>ng-repeat</code> directive, each line created a scope.
</p>

<p>
<a href="/lib/exe/detail.php?id=web_application_development%3Ajavascript_-_client_side_architecture&amp;media=web_application_development:concepts-scope.png" class="media" title="web_application_development:concepts-scope.png"><img src="/lib/exe/fetch.php?w=500&amp;media=web_application_development:concepts-scope.png" class="mediacenter" alt="" width="500" /></a>
</p>

<p>
Scopes are very powerful, they are not only used to establish contexts inside the <abbr title="HyperText Markup Language">HTML</abbr>, but to watch mutations of data, broadcast and handle events, run functions outside of AngularJS context and allow child to parent communication. The usage of scopes will be demonstrated over the course of writing controllers and directives, however this section will point to some common misunderstandings:
</p>

<p>
1. Confusion over how child scopes can changes values on the parent scope:
</p>

<p>
Scopes are objects that can contain primitive properties or reference types such as objects and arrays. Scope inheritance is based on prototypical inheritance that is happening behind the scenes. Therefore it&#039;s important to understand how scope properties are created and accessed and modified. This often causes confusion because if you set a property on a scope, and you actually want to change a property on the parent (which is in the child scope&#039;s prototype), it may sometimes simply create that property on the child which shadows the property on the parent. The problem comes from a misunderstanding of how properties are accessed. The resource below will go into detail over how to resolve this problem:
</p>
<ul>
<li class="level1"><div class="li"> <a href="https://github.com/angular/angular.js/wiki/The-Nuances-of-Scope-Prototypal-Inheritance" class="urlextern" title="https://github.com/angular/angular.js/wiki/The-Nuances-of-Scope-Prototypal-Inheritance"  rel="nofollow">The Nuances of Scope Prototypical Inheritance</a> - Here is a <a href="http://beta.plnkr.co/edit/7H4ZZKhcfm2OLodz6FVS?p=preview" class="urlextern" title="http://beta.plnkr.co/edit/7H4ZZKhcfm2OLodz6FVS?p=preview"  rel="nofollow">Plunker Demo showing one of the nuances of scope inheritance</a>.</div>
</li>
</ul>

<p>
2. Confusion about why running a AngularJS function inside a callback of a third party function, or native javascript function doesn&#039;t update the scope bindings:
</p>

<p>
Sometimes you need get AngularJS to update its scope properties or run some sort of function defined inside AngularJS, but it will be executed in the context of a native javascript function such as <code>setTimeout</code> or in a third party library such as a jQuery event binding callback. If you just try to run the function, you may get binding loss, but also the scope bindings just may not activate. If you&#039;re meeting this problem you need to learn how to use the <code>$scope.$apply</code> method. The resources below discuss this method:
</p>
<ul>
<li class="level1"><div class="li"> <a href="https://github.com/angular/angular.js/wiki/When-to-use-%24scope.%24apply%28%29" class="urlextern" title="https://github.com/angular/angular.js/wiki/When-to-use-%24scope.%24apply%28%29"  rel="nofollow">When to use scope.$apply</a></div>
</li>
<li class="level1"><div class="li"> <a href="http://jimhoskins.com/2012/12/17/angularjs-and-apply.html" class="urlextern" title="http://jimhoskins.com/2012/12/17/angularjs-and-apply.html"  rel="nofollow">In depth explanation of scope.$apply</a></div>
</li>
<li class="level1"><div class="li"> <a href="http://stackoverflow.com/questions/12304728/how-can-i-tell-angularjs-to-refresh" class="urlextern" title="http://stackoverflow.com/questions/12304728/how-can-i-tell-angularjs-to-refresh"  rel="nofollow">Application of scope.$apply</a></div>
</li>
<li class="level1"><div class="li"> <a href="http://jsfiddle.net/vojtajina/U7Bz9/" class="urlextern" title="http://jsfiddle.net/vojtajina/U7Bz9/"  rel="nofollow">jsFiddle for Infinite Scroll</a> - this example shows an application of using <code>$scope.$apply</code> inside a jQuery bind callback.</div>
</li>
<li class="level1"><div class="li"> <a href="https://coderwall.com/p/ngisma" class="urlextern" title="https://coderwall.com/p/ngisma"  rel="nofollow">Safe Apply Helper</a> &amp; <a href="http://stackoverflow.com/questions/13639717/does-the-scope-and-phase-workaround-always-work-as-expected-in-angularjs" class="urlextern" title="http://stackoverflow.com/questions/13639717/does-the-scope-and-phase-workaround-always-work-as-expected-in-angularjs"  rel="nofollow">Checking the digest phase in apply</a></div>
</li>
</ul>

<p>
Scopes have various other nuances and applications, but we&#039;ll get to there in the later sections. Here are some resources on scopes you need to understand as well.
</p>
<ul>
<li class="level1"><div class="li"> <a href="http://onehungrymind.com/notes-on-angularjs-scope-life-cycle/" class="urlextern" title="http://onehungrymind.com/notes-on-angularjs-scope-life-cycle/"  rel="nofollow">Scope Life Cycle</a></div>
</li>
<li class="level1"><div class="li"> <a href="http://docs.angularjs.org/guide/scope" class="urlextern" title="http://docs.angularjs.org/guide/scope"  rel="nofollow">Official documentation on scopes</a></div>
</li>
<li class="level1"><div class="li"> <a href="http://stackoverflow.com/a/14177235/582917" class="urlextern" title="http://stackoverflow.com/a/14177235/582917"  rel="nofollow">ng-repeat and using it with scopes</a></div>
</li>
<li class="level1"><div class="li"> <a href="http://stackoverflow.com/a/13457410/582917" class="urlextern" title="http://stackoverflow.com/a/13457410/582917"  rel="nofollow">Directives and scopes</a></div>
</li>
</ul>

</div>
<!-- EDIT15 SECTION "Scoping" [83266-88030] -->
<h3 class="sectionedit16" id="controllers">Controllers</h3>
<div class="level3">

<p>
In <a href="http://docs.angularjs.org/guide/dev_guide.mvc.understanding_controller" class="urlextern" title="http://docs.angularjs.org/guide/dev_guide.mvc.understanding_controller"  rel="nofollow">AngularJS controllers</a> are used to designate sections of your user interface and manage the scope object in that particular section of the interface. In doing so, the controllers also access shared services in order to acquire data from the external third parties or your own RESTful resources. Therefore controllers can represent whole pages, sections of a page, or subsections of a page. Any time you need some sort of dynamic functionality on the page and it can be semantically separate from the other sections of the page, you need a controller. Controller hence determine the page state.
</p>

<p>
Assuming the seed application layout, inside your <code>js/controllers</code> directory, each file inside there would be a module. Each module would contain at least one controller. That controller can be considered the page level controller. Any controllers that would be nested inside a particular page would be appended to the module. Let&#039;s start with an example. Assuming we have a page we want to represent called “Blog” which is a page level module/controller and we want that controller to be accessible from an <abbr title="Uniform Resource Locator">URL</abbr> state such as <code>example.com/blog</code>. Then we need to create a file called <code>Blog.Controllers.js</code> inside our controllers directory.
</p>
<dl class="file">
<dt><a href="/doku.php?do=export_code&amp;id=web_application_development:javascript_-_client_side_architecture&amp;codeblock=34" title="Download Snippet" class="mediafile mf_js">Blog.Controllers.js</a></dt>
<dd><pre class="code file javascript"><span class="st0">'use strict'</span><span class="sy0">;</span>
&nbsp;
<span class="co1">//whenever there's a [] in the 2nd parameter, it means the module is created, here there's no [], so it's attaching itself to the Controllers module</span>
angular.<span class="me1">module</span><span class="br0">&#40;</span><span class="st0">'Controllers'</span><span class="br0">&#41;</span>
    .<span class="me1">controller</span><span class="br0">&#40;</span><span class="st0">'BlogIndexCtrl'</span><span class="sy0">,</span> <span class="br0">&#91;</span> <span class="co1">//&lt;- BlogIndexCtrl is actual name of the controller</span>
        <span class="st0">'$scope'</span><span class="sy0">,</span>
        <span class="kw1">function</span><span class="br0">&#40;</span>$scope<span class="br0">&#41;</span><span class="br0">&#123;</span>
            <span class="co1">//the $scope here would be available to all elements that are the children of BlogIndexCtrl</span>
            $scope.<span class="me1">data</span> <span class="sy0">=</span> <span class="st0">'Hello World!'</span><span class="sy0">;</span>
        <span class="br0">&#125;</span>
    <span class="br0">&#93;</span><span class="br0">&#41;</span>
    .<span class="me1">controller</span><span class="br0">&#40;</span><span class="st0">'BlogMobileCtrl'</span><span class="sy0">,</span> <span class="br0">&#91;</span> <span class="co1">//this part is optional, imagine a different kind of Blog State that may be used conditionally from the routes</span>
        <span class="st0">'$scope'</span><span class="sy0">,</span>
        <span class="kw1">function</span><span class="br0">&#40;</span>$scope<span class="br0">&#41;</span><span class="br0">&#123;</span>
            $scope.<span class="me1">data</span> <span class="sy0">=</span> <span class="st0">'I am a different controller!'</span><span class="sy0">;</span>
        <span class="br0">&#125;</span>
    <span class="br0">&#93;</span><span class="br0">&#41;</span>
    .<span class="me1">controller</span><span class="br0">&#40;</span><span class="st0">'BlogSubCtrl'</span><span class="sy0">,</span> <span class="br0">&#91;</span> <span class="co1">//&lt;- this also demonstrates a controller that is part of the Blog.Controllers.Mobile, so this could be a sub controller that is nested inside 'BlogMobileCtrl'</span>
        <span class="st0">'$scope'</span><span class="sy0">,</span>
        <span class="kw1">function</span><span class="br0">&#40;</span>$scope<span class="br0">&#41;</span><span class="br0">&#123;</span>
            $scope.<span class="me1">data</span> <span class="sy0">=</span> <span class="st0">'I am a different controller!'</span><span class="sy0">;</span>
        <span class="br0">&#125;</span>
    <span class="br0">&#93;</span><span class="br0">&#41;</span><span class="sy0">;</span>    </pre>
</dd></dl>

<p>
If we want one of the controllers to be “routable” (accessible from the <abbr title="Uniform Resource Locator">URL</abbr> state), then we need add the controller&#039;s name to one of our routes. Of course make sure to add the page level module as a dependency to the controllers modules in the bootstrapping process in <code>app.js</code>.
</p>
<pre class="code javascript">$routeProvider
    .<span class="me1">when</span><span class="br0">&#40;</span>
        <span class="st0">'/blog'</span><span class="sy0">,</span>
        <span class="br0">&#123;</span>
            templateUrl<span class="sy0">:</span> <span class="st0">'blog_index.html'</span><span class="sy0">,</span> <span class="co1">//&lt;- don't worry about this yet, this comes from an embedded template</span>
            controller<span class="sy0">:</span> <span class="st0">'BlogIndexCtrl'</span> <span class="co1">//&lt;- here is our controller that is being routed to when the URL is at &quot;/blog&quot;</span>
        <span class="br0">&#125;</span>
    <span class="br0">&#41;</span><span class="sy0">;</span></pre>

<p>
In our <abbr title="HyperText Markup Language">HTML</abbr>, we can setup a template with the <code>BlogIndexCtrl</code> managing it. The below file is a partial template that gets embedded in footer partial. Find out about it in the templates section.
</p>
<pre class="code html4strict"><span class="sc2">&lt;<a href="http://december.com/html/4/element/script.html"><span class="kw2">script</span></a> <span class="kw3">type</span><span class="sy0">=</span><span class="st0">&quot;text/ng-template&quot;</span> <span class="kw3">id</span><span class="sy0">=</span><span class="st0">&quot;blog_index.html&quot;</span>&gt;</span>
    <span class="sc2">&lt;<a href="http://december.com/html/4/element/p.html"><span class="kw2">p</span></a>&gt;</span>Hi the scope's data is here {{data}}<span class="sc2">&lt;<span class="sy0">/</span><a href="http://december.com/html/4/element/p.html"><span class="kw2">p</span></a>&gt;</span>
<span class="sc2">&lt;<span class="sy0">/</span><a href="http://december.com/html/4/element/script.html"><span class="kw2">script</span></a>&gt;</span></pre>

<p>
Notice that we do not need to use the <code>ng-controller</code> directive to bind the controller to the template. This is because it is implicitly done inside the routing, when we said that <code>BlogIndexCtrl</code> is matched to <code>blog_index.html</code>. However if we wanted to make a certain controller a sub controller that is nested inside <code>BlogIndexCtrl</code> then we would have to explicitly write that directive like so:
</p>
<pre class="code html4strict"><span class="sc2">&lt;<a href="http://december.com/html/4/element/script.html"><span class="kw2">script</span></a> <span class="kw3">type</span><span class="sy0">=</span><span class="st0">&quot;text/ng-template&quot;</span> <span class="kw3">id</span><span class="sy0">=</span><span class="st0">&quot;nested_index.html&quot;</span>&gt;</span>
    <span class="sc-1">&lt;!-- This is assuming you have a controller that has these sub controllers! --&gt;</span>
    <span class="sc2">&lt;<a href="http://december.com/html/4/element/div.html"><span class="kw2">div</span></a>&gt;</span>NESTED INDEX CTRL: {{data}}<span class="sc2">&lt;<span class="sy0">/</span><a href="http://december.com/html/4/element/div.html"><span class="kw2">div</span></a>&gt;</span>
    <span class="sc2">&lt;<a href="http://december.com/html/4/element/div.html"><span class="kw2">div</span></a> ng-controller<span class="sy0">=</span><span class="st0">&quot;NestedSubCtrl&quot;</span>&gt;</span>SUB CTRL: {{data}}<span class="sc2">&lt;<span class="sy0">/</span><a href="http://december.com/html/4/element/div.html"><span class="kw2">div</span></a>&gt;</span>
    <span class="sc2">&lt;<a href="http://december.com/html/4/element/div.html"><span class="kw2">div</span></a> ng-controller<span class="sy0">=</span><span class="st0">&quot;NestedSub2Ctrl&quot;</span>&gt;</span>SUB CTRL2: {{data}}<span class="sc2">&lt;<span class="sy0">/</span><a href="http://december.com/html/4/element/div.html"><span class="kw2">div</span></a>&gt;</span>
<span class="sc2">&lt;<span class="sy0">/</span><a href="http://december.com/html/4/element/script.html"><span class="kw2">script</span></a>&gt;</span></pre>

<p>
Finally remember that not all controller modules inside the <code>js/controllers</code> directory need to be a particular page. They can just be sections of a page. For example, the headers and footers of a page may be shared across many pages. Then you can make them top level modules inside the <code>js/controllers</code> directory.
</p>

<p>
All of the above may be a bit confusing, since there&#039;s a lot of interlinking parts that need to come together to work. Check out this <a href="http://beta.plnkr.co/edit/XZs1zNLpZubPBjnULJ3n?p=preview" class="urlextern" title="http://beta.plnkr.co/edit/XZs1zNLpZubPBjnULJ3n?p=preview"  rel="nofollow">Plunker demo with a working configuration of nested controllers</a>. It won&#039;t match your file/directory structure because everything needs to be in files. However you can see what the end result may look like.
</p>

</div>

<h4 id="communication_between_controllers">Communication between Controllers</h4>
<div class="level4">

<p>
You will need to eventually <a href="http://stackoverflow.com/questions/11252780/whats-the-correct-way-to-communicate-between-controllers-in-angularjs" class="urlextern" title="http://stackoverflow.com/questions/11252780/whats-the-correct-way-to-communicate-between-controllers-in-angularjs"  rel="nofollow">communicate between different controllers depending on an external event or some third party service or your own RESTful resources</a>. There are two ways to communicate between controllers. The recommended way is through services. Services are meant to be shared across controllers, this philosophy is similar to the operation of models in the traditional server side MVC, where controllers call upon models to do work. You should look at the services section to find out more.
</p>

<p>
<strong>Shared Service Method</strong>
</p>

<p>
This example shows how to use shared services along with the <code>$watch</code> function to allow messaging between controllers. The <code>$watch</code> service observes changes in a model variable and then runs a function when it changes. This is probably the most common method, however <a href="http://eburley.github.com/2013/01/31/angularjs-watch-pub-sub-best-practices.html" class="urlextern" title="http://eburley.github.com/2013/01/31/angularjs-watch-pub-sub-best-practices.html"  rel="nofollow">sometimes it won&#039;t solve your problem when you have more complicated messaging needs</a>.
</p>
<ul>
<li class="level1"><div class="li"> <a href="http://beta.plnkr.co/edit/X8txKfVBotWTDfD9au8x?p=preview" class="urlextern" title="http://beta.plnkr.co/edit/X8txKfVBotWTDfD9au8x?p=preview"  rel="nofollow">Plunker Demo of Shared Services &amp; $watch</a></div>
</li>
</ul>

<p>
<strong>Event Method</strong>
</p>

<p>
The second way of communicating between controllers is to construct a publish/subscribe event bus system. The simple way would be to use <code>$scope.broadcast</code>, <code>$scope.emit</code> and <code>$scope.on</code> to send and capture events. You can basically broad cast and event from one controller, and catch and handle it in another controller. First thing to understand is what those functions do. Please note that these functions also exist on the <code>$rootScope</code> too.
</p>
<ul>
<li class="level1"><div class="li"> <a href="http://docs.angularjs.org/api/ng.$rootScope.Scope#$broadcast" class="urlextern" title="http://docs.angularjs.org/api/ng.$rootScope.Scope#$broadcast"  rel="nofollow">&quot;$scope.broadcast&quot;</a> creates an event that is propagated to the child scopes. That could be inside a controller or a directive.</div>
</li>
<li class="level1"><div class="li"> <a href="http://docs.angularjs.org/api/ng.$rootScope.Scope#$emit" class="urlextern" title="http://docs.angularjs.org/api/ng.$rootScope.Scope#$emit"  rel="nofollow">&quot;$scope.emit&quot;</a> creates an event that is propagated to the parent scopes. That could be a controller or the run configuration of <code>ng-app</code>.</div>
</li>
<li class="level1"><div class="li"> <a href="http://docs.angularjs.org/api/ng.$rootScope.Scope#$on" class="urlextern" title="http://docs.angularjs.org/api/ng.$rootScope.Scope#$on"  rel="nofollow">&quot;$scope.on&quot;</a> listens for an event and runs a callback handler function accordingly.</div>
</li>
</ul>

<p>
As you can see the hierarchy of scopes matter when deciding to broadcast, emit or listen to an event. A common question would be how to communicate between sibling controllers. There are three possible configurations in using these scope event functions:
</p>
<ol>
<li class="level1"><div class="li"> Use a shared service to always broadcast down from the <code>$rootScope</code>. This is demonstrated by <a href="http://onehungrymind.com/angularjs-communicating-between-controllers/" class="urlextern" title="http://onehungrymind.com/angularjs-communicating-between-controllers/"  rel="nofollow">Simpulton in his video on communicating between controllers</a>.</div>
</li>
<li class="level1"><div class="li"> Construct a ping pong configuration between child controllers and the <code>ng-app</code> run configuration. Child scopes emit events, the <code>$rootScope</code> in the <code>ng-app</code> run section broadcasts it back to all listeners. <a href="http://jsfiddle.net/VxafF/" class="urlextern" title="http://jsfiddle.net/VxafF/"  rel="nofollow">This is demonstrated in this jsFiddle</a>.</div>
</li>
<li class="level1"><div class="li"> Just do it ad-hoc. Emit when you need to communicate to the parent, and broadcast when you need to communicate to the child.</div>
</li>
</ol>

<p>
The disadvantage of using the broadcast, is that the event propagation cannot be cancelled. That is, if you were to emit an event, a listener could handle the event and then stop propagation. However if an event is broadcasted to children, then all children will get it.
</p>

<p>
Here&#039;s a <a href="http://beta.plnkr.co/edit/ZU0XNK?p=preview" class="urlextern" title="http://beta.plnkr.co/edit/ZU0XNK?p=preview"  rel="nofollow">Plunker demo showing these event methods in action</a>. Pay attention to the console, and play around with how the messages are sent, plus make sure to check out the <code>event</code> and <code>arg</code> parameters that can be displayed in the handler function.
</p>

<p>
<strong>Event Bus Method</strong>
</p>

<p>
Broadcasting, emitting and handling up and down the scopes is actually somewhat inefficient, especially when you have many events happening. Therefore you will need a dedicated event bus that abstracts this process, there are several third party libraries that make this possible. However they may or may not be implemented as an AngularJS service, therefore possibly bypassing the dependency injection. These libraries will not be using the AngularJS <code>$scope.broadcast</code>, <code>$scope.emit</code> or <code>$scope.on</code>, instead they implement their own handlers:
</p>
<ul>
<li class="level1"><div class="li"> <a href="http://jsfiddle.net/ThomasBurleson/sv7D5/" class="urlextern" title="http://jsfiddle.net/ThomasBurleson/sv7D5/"  rel="nofollow">jQuery Event Bus + AngularJS Service integration</a> - This one relies on jQuery to handle the events. however it integrates the code into an AngularJS service. Here&#039;s the <a href="http://fiddle.jshell.net/ThomasBurleson/sv7D5/show/" class="urlextern" title="http://fiddle.jshell.net/ThomasBurleson/sv7D5/show/"  rel="nofollow">full explanation</a>.</div>
</li>
<li class="level1"><div class="li"> The <a href="http://radio.uxder.com/index.html" class="urlextern" title="http://radio.uxder.com/index.html"  rel="nofollow">Radio.js</a> is third party library that doesn&#039;t have any dependencies, it&#039;s has a simple <abbr title="Application Programming Interface">API</abbr> to allow you to send and capture events. However it will introduce a global variable into your AngularJS code since it&#039;s not integrated as an AngularJS service. However it may be possible to create a service wrapper around this third party library.</div>
</li>
</ul>

</div>
<!-- EDIT16 SECTION "Controllers" [88031-97888] -->
<h3 class="sectionedit17" id="directives">Directives</h3>
<div class="level3">

<p>
In following with AngularJS&#039;s declarative philosophy in building user interfaces, <a href="http://docs.angularjs.org/guide/directive" class="urlextern" title="http://docs.angularjs.org/guide/directive"  rel="nofollow">AngularJS introduced a concept called directives</a>. These are essentially behaviour extensions to the <abbr title="HyperText Markup Language">HTML</abbr> that allow complex user interface manipulation. This is where you would place your jQuery code. When you&#039;re constructing directives, you are also constructing a domain specific language for your application&#039;s user interface. Directives are declaratively invoked from the <abbr title="HyperText Markup Language">HTML</abbr> itself as a custom tag, <abbr title="HyperText Markup Language">HTML</abbr> attribute or even a comment, and they are imperatively constructed inside the javascript. AngularJS already packages a number of core directives, which can be found in their <a href="http://docs.angularjs.org/api/" class="urlextern" title="http://docs.angularjs.org/api/"  rel="nofollow">API documentation</a>. In fact the very way AngularJS binds itself to the <abbr title="Document Object Model">DOM</abbr> is through directives, so even when you need to call a controller you&#039;re still using the <code>ng-controller</code> directive, and when you&#039;re binding a whole application, then you&#039;re using the <code>ng-app</code> directive. The usage of <code>{{}}</code> to display model variables is actually an <a href="http://docs.angularjs.org/api/ng.$interpolate" class="urlextern" title="http://docs.angularjs.org/api/ng.$interpolate"  rel="nofollow">interpolate directive</a>.
</p>

<p>
In order for directives to manipulate the <abbr title="Document Object Model">DOM</abbr>, they need to be first binded to a particular <abbr title="Document Object Model">DOM</abbr> element. Then when that <abbr title="Document Object Model">DOM</abbr> element comes into existence either on first page load, or via programmatic insertion from another directive, the directive specified in your AngularJS code then gets executed. There are a number of options to configure how the directive works, either between other directives, between parent and child scopes, or within which phase of compilation it will work.
</p>
<pre class="code javascript"><span class="co1">//THIS IS PSEUDO CODE, but shows you all the options and configuration of a directive</span>
&nbsp;
angular.<span class="me1">module</span><span class="br0">&#40;</span><span class="st0">'Directives'</span><span class="br0">&#41;</span>
    .<span class="me1">directive</span><span class="br0">&#40;</span><span class="st0">'directiveName'</span><span class="sy0">,</span> <span class="br0">&#91;</span> <span class="co1">//&lt;- Actual directive name is always camelcased</span>
        <span class="st0">'$someService'</span><span class="sy0">,</span>
        <span class="st0">'$anotherService'</span><span class="sy0">,</span>
        <span class="kw1">function</span><span class="br0">&#40;</span>$someService<span class="sy0">,</span> $anotherService<span class="br0">&#41;</span> <span class="br0">&#123;</span> <span class="co1">//&lt;- Directive's factory function, can be dependency injected with services</span>
&nbsp;
            <span class="co1">//any code here is not binded to a particular directive, but would be executed on the first instantiation of the directive</span>
&nbsp;
            <span class="co1">//we need to return a &quot;directive definition object&quot; that configures the directive</span>
            <span class="kw1">return</span> <span class="br0">&#123;</span>
                name<span class="sy0">:</span> <span class="st0">''</span><span class="sy0">,</span> <span class="co1">//&lt;- name of the directive, never used</span>
                priority<span class="sy0">:</span> <span class="nu0">0</span><span class="sy0">,</span> <span class="co1">//&lt;- user when there are multiple directives on the same element, and you need to specify the order of activation</span>
                terminal<span class="sy0">:</span> <span class="kw2">true</span><span class="sy0">,</span> <span class="co1">//&lt;- takes the all directives on the elemnt with the same priority number and makes them the last to be activated</span>
                template<span class="sy0">:</span> <span class="st0">'&lt;div&gt;&lt;/div&gt;'</span><span class="sy0">,</span> <span class="co1">//&lt;- you can create templates straight in the directive</span>
                templateUrl<span class="sy0">:</span> <span class="st0">'directive.html'</span><span class="sy0">,</span> <span class="co1">//&lt;- this can query a template over the internet, or from an embedded template, directives can act as reusable widgets</span>
                replace<span class="sy0">:</span> <span class="kw2">false</span><span class="sy0">,</span> <span class="co1">//&lt;- boolean for replacing the original element with the directive delcaration</span>
                transclude<span class="sy0">:</span> <span class="kw2">false</span><span class="sy0">,</span> <span class="co1">//&lt;- boolean for moving the original element's content into the template's ng-transclude, used in reusable widgets</span>
                restrict<span class="sy0">:</span> <span class="st0">'A'</span><span class="sy0">,</span> <span class="co1">//&lt;- determines how the directive can be declared</span>
                scope<span class="sy0">:</span> <span class="br0">&#123;</span> <span class="co1">//&lt;- defines the scope of the directive, by default it is false, but can be true for prototypical scope, or {} for isolate scope</span>
                    localName<span class="sy0">:</span> <span class="sy0">@</span>externalName<span class="sy0">,</span> <span class="co1">//&lt;- here's the guest list for the isolate scope</span>
                    localBind<span class="sy0">:</span> <span class="sy0">=</span>externalName<span class="sy0">,</span>
                    localExp<span class="sy0">:</span> <span class="sy0">&amp;</span>externalName
                <span class="br0">&#125;</span><span class="sy0">,</span>
                controller<span class="sy0">:</span> <span class="kw1">function</span><span class="br0">&#40;</span>$scope<span class="sy0">,</span> $element<span class="sy0">,</span> $attrs<span class="sy0">,</span> $transclude<span class="br0">&#41;</span><span class="br0">&#123;</span>
                    <span class="co1">//this is a &quot;directive controller&quot;, can be used to allow interdirective communication, this controller will only be binded to each directive instantiation, not the same as ng-controller, since that is only accessible via scope inheritance</span>
                <span class="br0">&#125;</span><span class="sy0">,</span>
                require<span class="sy0">:</span> <span class="br0">&#91;</span><span class="st0">'?^directiveName'</span><span class="sy0">,</span> <span class="st0">'requiredDirective'</span><span class="sy0">,</span> <span class="st0">'^parentDirective'</span><span class="br0">&#93;</span><span class="sy0">,</span> <span class="co1">//&lt;- goes with directive controllers, specifies a contract that it needs other directives to ALSO include the controller function, and parameter in their compile/linking functions</span>
                compile<span class="sy0">:</span> <span class="kw1">function</span><span class="br0">&#40;</span>element<span class="sy0">,</span> attrs<span class="sy0">,</span> transclude<span class="br0">&#41;</span> <span class="br0">&#123;</span>
                    <span class="co1">//this function is executed BEFORE the directive is compiled and linked to the scope</span>
                    <span class="co1">//it would replace the link: property</span>
                    <span class="co1">//the element here refers to the original element where the directive was declared</span>
                    <span class="kw1">return</span> <span class="br0">&#123;</span>
                        pre<span class="sy0">:</span> <span class="kw1">function</span><span class="br0">&#40;</span>scope<span class="sy0">,</span> iElement<span class="sy0">,</span> iAttrs<span class="sy0">,</span> controller<span class="br0">&#41;</span> <span class="br0">&#123;</span><span class="br0">&#125;</span><span class="sy0">,</span> <span class="co1">//just before the linking</span>
                        post<span class="sy0">:</span> <span class="kw1">function</span><span class="br0">&#40;</span>scope<span class="sy0">,</span> iElement<span class="sy0">,</span> iAttrs<span class="sy0">,</span> controller<span class="br0">&#41;</span> <span class="br0">&#123;</span><span class="br0">&#125;</span> <span class="co1">//the same as the link: function defined below</span>
                    <span class="br0">&#125;</span>
                <span class="br0">&#125;</span><span class="sy0">,</span>
                link<span class="sy0">:</span> <span class="kw1">function</span><span class="br0">&#40;</span>scope<span class="sy0">,</span> element<span class="sy0">,</span> attrs<span class="br0">&#41;</span> <span class="br0">&#123;</span><span class="br0">&#125;</span> <span class="co1">//this is what you would 90% of the time, you can actually manipulate the DOM in the inside here</span>
            <span class="br0">&#125;</span><span class="sy0">;</span>
&nbsp;
        <span class="br0">&#125;</span>
    <span class="br0">&#93;</span><span class="br0">&#41;</span><span class="sy0">;</span></pre>

<p>
The above psuedo code shows all the possible configuration options of a directive. In most cases you won&#039;t need to use so many options, as directives usually deal with just manipulating the final compiled scope variables and expressions, and manipulating any <abbr title="Document Object Model">DOM</abbr> using jQuery. Therefore the a common directive can be written like so with just a scope and link definition.
</p>
<pre class="code javascript">angular.<span class="me1">module</span><span class="br0">&#40;</span><span class="st0">'Directives'</span><span class="br0">&#41;</span>
    .<span class="me1">directive</span><span class="br0">&#40;</span><span class="st0">'camelCasedDirectiveNameDir'</span><span class="sy0">,</span> <span class="br0">&#91;</span> <span class="co1">//&lt;- this is optional since no dependencies to be injected, but still used for convention</span>
        <span class="kw1">function</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#123;</span>
            <span class="co1">//here i can return the directive definition object</span>
            <span class="kw1">return</span><span class="br0">&#123;</span>
                scope<span class="sy0">:</span> <span class="br0">&#123;</span><span class="br0">&#125;</span><span class="sy0">,</span>
                link<span class="sy0">:</span> <span class="kw1">function</span><span class="br0">&#40;</span>scope<span class="sy0">,</span> element<span class="sy0">,</span> attributes<span class="br0">&#41;</span><span class="br0">&#123;</span>
                    <span class="co1">//at this point the DOM has been compiled, the scope is attached, and you can start manipulating things</span>
                    <span class="co1">//scope is the scope of the directive, it could be the containing, controller's scope if it scope: false, it could be it's own scope if {}, it could be a prototypical scope if scope: true</span>
                    <span class="co1">//element is the DOM element that you placed the directive on, except that it's also wrapped in jQlite, or jQuery if you have it loaded</span>
                    <span class="co1">//attributes is an object listing all the attributes on the DOM element that the directive is attached to.</span>
                <span class="br0">&#125;</span>
            <span class="br0">&#125;</span><span class="sy0">;</span>
        <span class="br0">&#125;</span>
    <span class="br0">&#93;</span><span class="br0">&#41;</span><span class="sy0">;</span></pre>

<p>
A directive is attached to a <abbr title="Document Object Model">DOM</abbr> element just by writing it as an attribute, class, comment or tag name. It is recommended to attach it as an attribute as this is the most compatible for older browsers, and also matches the <abbr title="HyperText Markup Language">HTML</abbr> <abbr title="specification">spec</abbr>.
</p>
<pre class="code html4strict"><span class="sc2">&lt;<a href="http://december.com/html/4/element/div.html"><span class="kw2">div</span></a> camel-cased-directive-name-<span class="kw3">dir</span><span class="sy0">=</span><span class="st0">&quot;parameterToGoIntoTheDirective&quot;</span> another-directive-can-be-attached-too-dir&gt;</span>
<span class="sc-1">&lt;!-- It is possible to have data and child elements in here too, they would need to be transcluded. --&gt;</span>
<span class="sc2">&lt;<span class="sy0">/</span><a href="http://december.com/html/4/element/div.html"><span class="kw2">div</span></a>&gt;</span></pre>

<p>
For detailed explanation of each of those options see the “Writing directives (long version)” section of the <a href="http://docs.angularjs.org/guide/directive" class="urlextern" title="http://docs.angularjs.org/guide/directive"  rel="nofollow">directive documentation</a>. This section will focus on common use cases of directives and their demonstration. For purposes of demonstration, any Plunker demos won&#039;t follow the embedded template convention, this is because Plunker cannot refer back to embedded templates in their directives, but when you write it in your own application, you should separate your templates from your javascript.
</p>

</div>

<h4 id="building_reusable_directives">Building Reusable Directives</h4>
<div class="level4">

<p>
As you build larger and large client side applications. You&#039;ll start to realise that an user interface state cannot be handled by one single controller or view file. There could be a section that deals with notifications, another that deals with chat, another that deals with information summary. The view state will need to be broken down via a separation of responsibilities. Directives can be used to build reusable widgets so you can have maintainable and scalable view states. Note that there is another native directive that allows you to bring in templates into your view state without a custom directive, it&#039;s called <a href="http://docs.angularjs.org/api/ng.directive:ngInclude" class="urlextern" title="http://docs.angularjs.org/api/ng.directive:ngInclude"  rel="nofollow">&quot;ng-include</a>, however it&#039;s not as flexible as a custom directive.
</p>

<p>
In order to implement this, we first need to have a template for the widget. Then we attach a directive to a <abbr title="Document Object Model">DOM</abbr> element that will contain the template when it is compiled. Then we configure the directive to reference the template, and then we can manipulate it using the scope, jQuery or otherwise.
</p>

<p>
Here&#039;s the the template that will be reused, it can be embedded into the <abbr title="HyperText Markup Language">HTML</abbr> or offloaded to be requested on demand:
</p>
<pre class="code html4strict"><span class="sc2">&lt;<a href="http://december.com/html/4/element/script.html"><span class="kw2">script</span></a> <span class="kw3">type</span><span class="sy0">=</span><span class="st0">&quot;text/ng-template&quot;</span> <span class="kw3">id</span><span class="sy0">=</span><span class="st0">&quot;directive_widget.html&quot;</span>&gt;</span>
    <span class="sc2">&lt;<a href="http://december.com/html/4/element/div.html"><span class="kw2">div</span></a> <span class="kw3">class</span><span class="sy0">=</span><span class="st0">&quot;widget&quot;</span>&gt;</span>
        <span class="sc2">&lt;<a href="http://december.com/html/4/element/p.html"><span class="kw2">p</span></a>&gt;</span>I'm a little widget!<span class="sc2">&lt;<span class="sy0">/</span><a href="http://december.com/html/4/element/p.html"><span class="kw2">p</span></a>&gt;</span>
        <span class="sc2">&lt;<a href="http://december.com/html/4/element/ul.html"><span class="kw2">ul</span></a>&gt;</span>
            <span class="sc2">&lt;<a href="http://december.com/html/4/element/li.html"><span class="kw2">li</span></a>&gt;</span>Items to be displayed!<span class="sc2">&lt;<span class="sy0">/</span><a href="http://december.com/html/4/element/li.html"><span class="kw2">li</span></a>&gt;</span>
        <span class="sc2">&lt;<span class="sy0">/</span><a href="http://december.com/html/4/element/ul.html"><span class="kw2">ul</span></a>&gt;</span>
    <span class="sc2">&lt;<span class="sy0">/</span><a href="http://december.com/html/4/element/div.html"><span class="kw2">div</span></a>&gt;</span>
<span class="sc2">&lt;<span class="sy0">/</span><a href="http://december.com/html/4/element/script.html"><span class="kw2">script</span></a>&gt;</span></pre>

<p>
Here&#039;s the widget directive code:
</p>
<pre class="code javascript"><span class="st0">'use strict'</span><span class="sy0">;</span>
&nbsp;
angular.<span class="me1">module</span><span class="br0">&#40;</span><span class="st0">'Directives'</span><span class="br0">&#41;</span>
    .<span class="me1">directive</span><span class="br0">&#40;</span><span class="st0">'widgetDir'</span><span class="sy0">,</span> <span class="br0">&#91;</span>
        <span class="kw1">function</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#123;</span>
            <span class="kw1">return</span> <span class="br0">&#123;</span>
                templateUrl<span class="sy0">:</span> <span class="st0">'directive_widget.html'</span><span class="sy0">,</span> <span class="co1">//&lt;- this can refer to the embedded template</span>
                link<span class="sy0">:</span> <span class="kw1">function</span><span class="br0">&#40;</span>scope<span class="sy0">,</span> element<span class="sy0">,</span> attributes<span class="br0">&#41;</span><span class="br0">&#123;</span>
                    console.<span class="me1">log</span><span class="br0">&#40;</span>scope<span class="br0">&#41;</span><span class="sy0">;</span> <span class="co1">//&lt;- since there's no scope defined, this scope will actually point to the containing controller's scope</span>
                    console.<span class="me1">log</span><span class="br0">&#40;</span>element<span class="br0">&#41;</span><span class="sy0">;</span> <span class="co1">//&lt;- DOM element with jQuery wrapped</span>
                    console.<span class="me1">log</span><span class="br0">&#40;</span>attributes<span class="br0">&#41;</span><span class="sy0">;</span> <span class="co1">//Attributes object</span>
                <span class="br0">&#125;</span>
            <span class="br0">&#125;</span><span class="sy0">;</span>
        <span class="br0">&#125;</span>
    <span class="br0">&#93;</span><span class="br0">&#41;</span><span class="sy0">;</span></pre>

<p>
Then it&#039;s possible to use this widget and have the template come out by doing this:
</p>
<pre class="code html4strict"><span class="sc2">&lt;<a href="http://december.com/html/4/element/div.html"><span class="kw2">div</span></a> widget-<span class="kw3">dir</span><span class="sy0">=</span><span class="st0">&quot;Something&quot;</span>&gt;&lt;<span class="sy0">/</span><a href="http://december.com/html/4/element/div.html"><span class="kw2">div</span></a>&gt;</span> <span class="sc-1">&lt;!-- the &quot;Something&quot; will be inside the attributes object --&gt;</span></pre>

<p>
Now that widget&#039;s template will be placed whenever you add <code>widget-dir</code> on any <abbr title="Document Object Model">DOM</abbr> element. The template will be inserted inside of it. Try using jQuery to manipulate the template&#039;s own elements. Notice that since you didn&#039;t define scope, the scope actually points to the nearest containing controller&#039;s scope. This won&#039;t be very useful for reusable directives, so you should actually create a prototypical scope by setting <code>scope: true</code> or isolate scope <code>scope: {}</code>, that way the directives won&#039;t step on each others shoes and it won&#039;t overwrite or accidentally change the parent scope properties. Also note that if you don&#039;t have jQuery loaded before AngularJS, the <a href="http://docs.angularjs.org/api/angular.element" class="urlextern" title="http://docs.angularjs.org/api/angular.element"  rel="nofollow">element is a jQlite wrapped object instead</a>, check out the Angular documentation on jQlite and <code>angular.element</code> to find out more.
</p>

<p>
Here is a <a href="http://beta.plnkr.co/edit/F6JrOGtT3QJB841Cii0r?p=preview" class="urlextern" title="http://beta.plnkr.co/edit/F6JrOGtT3QJB841Cii0r?p=preview"  rel="nofollow">Plunker Demo demonstrating using directives with jQuery</a>, which integrates a number of nuances regarding <code>scope.$apply</code> and <code>angular.element</code>.
</p>

</div>

<h4 id="using_scope_in_directives">Using scope in Directives</h4>
<div class="level4">

<p>
One of the most confusing parts of writing directives is managing the scope of the directive, and because there may be multiple directives one <abbr title="Document Object Model">DOM</abbr> element, one directive&#039;s scope will affect other directive&#039;s scope.
</p>

<p>
By default, if you don&#039;t configure the scope property in the directive definition object, the scope will be false. This means in the linking function, the scope refers to the parent containing controller&#039;s scope. This make it easy to modify model properties in the parent, however it&#039;s not very flexible, since if you define anything on the scope, it may step on the parent&#039;s scope and inadvertently overwrite some model properties of the same name. This means it&#039;s not very good for reusable or modular directives. This configuration was demonstrated in the building reusable directive section above.
</p>

<p>
The scope configuration allows two other styles. The first is simply <code>scope: true</code>, this creates a scope that prototypically inherits from the parent scope. This scope operates in the same manner as a child controller&#039;s scope. Now any model properties defined in the directive will be defined on the directive&#039;s scope rather in the parent. Furthermore if multiple directives on the same element request a new scope, only one new scope is created. In order to communicate with the parent, you&#039;ll have to be aware of the <a href="https://github.com/angular/angular.js/wiki/The-Nuances-of-Scope-Prototypal-Inheritance" class="urlextern" title="https://github.com/angular/angular.js/wiki/The-Nuances-of-Scope-Prototypal-Inheritance"  rel="nofollow">nuances of scope inheritance</a>. This is slightly better than no scope, however if you read properties from the parent, then you&#039;re hard coupling the directive to the parent&#039;s scope, in that the directive would not work without having a parent provide certain properties. Furthermore, you may still accidentally read and change (via reference access) properties from the parent scope even when you didn&#039;t intend it.
</p>

<p>
The final style is the <a href="http://onehungrymind.com/angularjs-sticky-notes-pt-2-isolated-scope/" class="urlextern" title="http://onehungrymind.com/angularjs-sticky-notes-pt-2-isolated-scope/"  rel="nofollow">isolate scope</a>. It can be set as an empty object, or as an object hash. It it was <code>scope: {}</code>, then it creates an empty isolate scope. This scope does not prototypically inherit from the parent&#039;s scope. This is best choice for creating reusable directives that have to be usable anywhere in the <abbr title="Document Object Model">DOM</abbr> regardless of external circumstances. Note that each directive on the same element that requests an isolate scope get their own isolate scope.
</p>

<p>
However sometimes you still need to allow the outside world to configure or add properties to the directive. Sometimes you need a provide a callback that is defined in the parent to the directive. This often happens when you need to link a UI or <abbr title="Document Object Model">DOM</abbr> transformation (directive&#039;s job) to a model or service activation (controller&#039;s job). One example would be infinite scroll, where the directive will check for the scroll event, and activate the controller&#039;s service to retrieve more result rows from the server <abbr title="Application Programming Interface">API</abbr>. This means you need an object hash. The object hash can accept key to value properties, in which the key represents the local value you want defined as a model variable in the directive&#039;s scope, and the value represents the external model variable from outside the directive. You may see something similar to:
</p>
<pre class="code javascript">scope<span class="sy0">:</span> <span class="br0">&#123;</span>
    localProp<span class="sy0">:</span> <span class="sy0">@,</span> <span class="co1">//assuming localProp is the same name as the external property</span>
    localProp2<span class="sy0">:</span> <span class="sy0">=,</span>
    localProp3<span class="sy0">:</span> <span class="sy0">&amp;,</span>
    localProp4<span class="sy0">:</span> <span class="sy0">@</span>externalProp <span class="co1">//assuming that external property has a different name from local property</span>
<span class="br0">&#125;</span>
<span class="co1">//now all for local properties will be accessible inside the directive's scope, such as scope.localProp</span></pre>

<p>
Refer to this <a href="http://beta.plnkr.co/edit/WK1lvOCxz8HeMDRr56vd?p=preview" class="urlextern" title="http://beta.plnkr.co/edit/WK1lvOCxz8HeMDRr56vd?p=preview"  rel="nofollow">Plunker Demo</a> which demonstrates how the model variables are bound using the three types of isolate scope hashing. Open up your console and see the logging working. Then refer to this sticky notes <a href="http://jsfiddle.net/simpulton/VJ94U/" class="urlextern" title="http://jsfiddle.net/simpulton/VJ94U/"  rel="nofollow">Fiddle example</a> of wiring up nested directives with a controller. It even demonstrates using the directive controller instead of a linking function. Though both could have been used.
</p>

<p>
All of these properties in the object hash have to be defined on the attributes of the directive attached <abbr title="Document Object Model">DOM</abbr> element. In javascript they will be written as camel case, but in the attribute, they are always written with dashes. So if <code>localProp</code> would be <code>local-prop</code> on the <abbr title="Document Object Model">DOM</abbr> element.
</p>
<pre class="code html4strict"><span class="sc2">&lt;<a href="http://december.com/html/4/element/div.html"><span class="kw2">div</span></a> widget local-prop<span class="sy0">=</span><span class="st0">&quot;some parameter&quot;</span>&gt;&lt;<span class="sy0">/</span><a href="http://december.com/html/4/element/div.html"><span class="kw2">div</span></a>&gt;</span></pre>

<p>
The &#039;@&#039; hash is designed for one-directional binding. This means either a primitive string or number is provided to the directive, often for some sort of basic configuration. The &#039;@&#039; hash can also be used to bring in interpolated model properties of the parent scope. Whatever you do the &#039;@&#039; attribute will not be reflected in any other scopes. In order to retrieve the value of the &#039;@&#039; hash, you can&#039;t just access them from <code>scope</code> in the linking function. This is because the process of interpolation hasn&#039;t been done yet. You&#039;ll need to either get it from the <code>attributes</code> object if it was a primitive, or you&#039;ll need to use <code>attributes.$observe</code> to parse the interpolation. Furthermore in order to set the directive&#039;s attribute, you can&#039;t just set it from the attributes object, but you need to use <code>attributes.$set</code> (this can be useful if you&#039;re using <abbr title="Document Object Model">DOM</abbr> attributes to do inter-directive communication).
</p>
<pre class="code javascript"><span class="co1">//if our html was like this</span>
<span class="coMULTI">/*
&lt;div widget attribute=&quot;some primitive string&quot; interpolated-attribute=&quot;{{interpolatedModel}}&quot;&gt;&lt;/div&gt;
*/</span>
<span class="co1">//assuming object hash:</span>
<span class="coMULTI">/*
scope: {
    attribute: '@',
    interpolatedAttribute: '@'
};
*/</span>
<span class="co1">//then in order to access it in the linking function</span>
<span class="kw1">function</span><span class="br0">&#40;</span>scope<span class="sy0">,</span> element<span class="sy0">,</span> attributes<span class="br0">&#41;</span><span class="br0">&#123;</span>
    console.<span class="me1">log</span><span class="br0">&#40;</span>scope.<span class="me1">attribute</span><span class="br0">&#41;</span><span class="sy0">;</span> <span class="co1">//won't work</span>
    console.<span class="me1">log</span><span class="br0">&#40;</span>attributes.<span class="me1">attribute</span><span class="br0">&#41;</span><span class="sy0">;</span> <span class="co1">//works</span>
&nbsp;
    attributes.$observe<span class="br0">&#40;</span><span class="st0">'interpolatedAttribute'</span><span class="sy0">,</span> <span class="kw1">function</span><span class="br0">&#40;</span>value<span class="br0">&#41;</span><span class="br0">&#123;</span>
        <span class="co1">//value now contains the interpolated {{interpolatedModel}}</span>
        <span class="co1">//this also runs everytime the interpolation changes</span>
        console.<span class="me1">log</span><span class="br0">&#40;</span><span class="st0">'Observe got activated, new value: '</span> <span class="sy0">+</span> value<span class="br0">&#41;</span><span class="sy0">;</span>
    <span class="br0">&#125;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
    <span class="co1">//now it is one way binding, so if the interpolatedModel changed in the controller, then the directive would get it, but if it got changed in the directive, the controller will not get it, but the $observe will still activate!</span>
&nbsp;
    attributes.$set<span class="br0">&#40;</span><span class="st0">'interpolatedAttribute'</span><span class="sy0">,</span> <span class="st0">'new value!'</span><span class="br0">&#41;</span><span class="sy0">;</span>
<span class="br0">&#125;</span></pre>

<p>
The most often used is the &#039;=&#039; hash. This setups bi-directional binding. If the model changes in the controller, it is propagated to the directive. If it is changed in the directive, it is propagated to the controller. You don&#039;t have to use the attributes object to access or change it. It can be done straight from <code>scope</code>. Furthermore you don&#039;t have to worry about scope inheritance. This binding doesn&#039;t come from prototypical inheritance, but is directly bound. On the <abbr title="Document Object Model">DOM</abbr> attributes, it is bound without the need of the interpolate directive <code>{{}}</code>.
</p>
<pre class="code javascript"><span class="co1">//assuming HTML</span>
<span class="coMULTI">/*
&lt;div widget bidirectional=&quot;data&quot;&gt;&lt;/div&gt;
*/</span>
<span class="co1">//assuming scope</span>
<span class="coMULTI">/*
scope: {
    bidirectional: '='
}
*/</span>
<span class="kw1">function</span><span class="br0">&#40;</span>scope<span class="sy0">,</span> element<span class="sy0">,</span> attributes<span class="br0">&#41;</span><span class="br0">&#123;</span>
    console.<span class="me1">log</span><span class="br0">&#40;</span>scope.<span class="me1">bidirectional</span><span class="br0">&#41;</span><span class="sy0">;</span>
    scope.<span class="me1">bidirectional</span> <span class="sy0">=</span> <span class="st0">'new value to be propagated!'</span><span class="sy0">;</span>
<span class="br0">&#125;</span></pre>

<p>
The more complicated version is the &#039;&amp;&#039; hash which allows functions to be bound to the directive&#039;s isolate scope. This will allow you run parent scope&#039;s functions from inside the directive. Now originally if you didn&#039;t use isolate scope, you could simply access the function from the attributes object and execute from your directive. This <a href="http://jsfiddle.net/vojtajina/U7Bz9/" class="urlextern" title="http://jsfiddle.net/vojtajina/U7Bz9/"  rel="nofollow">infinite scroll directive example</a> uses just the attributes object. It also uses <code>$scope.apply</code> but that&#039;s only due to the fact that <code>bind</code> is a jQuery function. However we&#039;re building reusable directives, so we need to be a bit more stringent. The number one confusion in using the &#039;&amp;&#039; hash, is the way parameters are passed into the functions. You can&#039;t just pass it into the function. You need to have a parameter name declared the attribute <abbr title="Document Object Model">DOM</abbr>, and when you pass in a variable, it needs to be in the form of an object map.
</p>
<pre class="code javascript"><span class="co1">//assuming HTML</span>
<span class="coMULTI">/*
&lt;div widget expression=&quot;doSomething(param)&quot;&gt;&lt;/div&gt;
*/</span>
<span class="co1">//assuming scope</span>
<span class="coMULTI">/*
scope: {
    expression: '&amp;'
}
*/</span>
<span class="co1">//also assuming parent controller</span>
<span class="coMULTI">/*
function($scope){
    $scope.doSomething(input){
        console.log(input);
    };
    $scope.param = 'Some default parameters!';
}
*/</span>
<span class="kw1">function</span><span class="br0">&#40;</span>scope<span class="sy0">,</span> element<span class="sy0">,</span> attributes<span class="br0">&#41;</span><span class="br0">&#123;</span>
    scope.<span class="me1">doSomething</span><span class="br0">&#40;</span><span class="st0">'Something I want to pass in'</span><span class="br0">&#41;</span><span class="sy0">;</span> <span class="co1">//doesn't work</span>
    scope.<span class="me1">doSomething</span><span class="br0">&#40;</span><span class="br0">&#123;</span>param<span class="sy0">:</span> <span class="st0">'something I want to pass in!'</span><span class="br0">&#125;</span><span class="br0">&#41;</span><span class="sy0">;</span> <span class="co1">//works</span>
    scope.<span class="me1">doSomething</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span> <span class="co1">//also works, uses the default parameter in the parent container!</span>
<span class="br0">&#125;</span></pre>

<p>
Try experimenting with these object hashes. Remember to always use isolate scopes when you&#039;re building robust reusable directives. Eventually you could even share your directives with other developers.
</p>

</div>

<h4 id="transclusion_compile">Transclusion &amp; Compile</h4>
<div class="level4">

<p>
Using transclusion to build insertable widgets, and then manipulating them in the compile function
</p>

<p>
Also using the replace, as an alternative to transclusion
</p>

</div>

<h4 id="interdirective_communication">Interdirective Communication</h4>
<div class="level4">

<p>
Can use the intercontroller communication style, or directive controllers
</p>

<p>
<a href="http://stackoverflow.com/questions/12546945/difference-between-the-controller-and-link-functions-when-defining-an-angula?lq=1" class="urlextern" title="http://stackoverflow.com/questions/12546945/difference-between-the-controller-and-link-functions-when-defining-an-angula?lq=1"  rel="nofollow">http://stackoverflow.com/questions/12546945/difference-between-the-controller-and-link-functions-when-defining-an-angula?lq=1</a>
</p>

<p>
<a href="http://thesmithfam.org/blog/2012/12/17/communicating-between-directives-in-angularjs/" class="urlextern" title="http://thesmithfam.org/blog/2012/12/17/communicating-between-directives-in-angularjs/"  rel="nofollow">http://thesmithfam.org/blog/2012/12/17/communicating-between-directives-in-angularjs/</a>
</p>

<p>
<a href="https://groups.google.com/forum/#!msg/angular/AjGgp8parNY/sU8Mi0vioScJ" class="urlextern" title="https://groups.google.com/forum/#!msg/angular/AjGgp8parNY/sU8Mi0vioScJ"  rel="nofollow">https://groups.google.com/forum/#!msg/angular/AjGgp8parNY/sU8Mi0vioScJ</a>
</p>

<p>
<a href="http://onehungrymind.com/angularjs-directives-basics/" class="urlextern" title="http://onehungrymind.com/angularjs-directives-basics/"  rel="nofollow">http://onehungrymind.com/angularjs-directives-basics/</a>
</p>

<p>
<a href="http://onehungrymind.com/angularjs-and-dom-manipulation/" class="urlextern" title="http://onehungrymind.com/angularjs-and-dom-manipulation/"  rel="nofollow">http://onehungrymind.com/angularjs-and-dom-manipulation/</a>
</p>

<p>
<a href="http://www.bennadel.com/blog/2446-Using-Controllers-In-Directives-In-AngularJS.htm" class="urlextern" title="http://www.bennadel.com/blog/2446-Using-Controllers-In-Directives-In-AngularJS.htm"  rel="nofollow">http://www.bennadel.com/blog/2446-Using-Controllers-In-Directives-In-AngularJS.htm</a>
</p>

<p>
<a href="http://www.bennadel.com/blog/2447-Exploring-Directive-Controllers-Compiling-Linking-And-Priority-In-AngularJS.htm" class="urlextern" title="http://www.bennadel.com/blog/2447-Exploring-Directive-Controllers-Compiling-Linking-And-Priority-In-AngularJS.htm"  rel="nofollow">http://www.bennadel.com/blog/2447-Exploring-Directive-Controllers-Compiling-Linking-And-Priority-In-AngularJS.htm</a>
</p>

<p>
<a href="http://www.codinginsight.com/angularjs-directives/" class="urlextern" title="http://www.codinginsight.com/angularjs-directives/"  rel="nofollow">http://www.codinginsight.com/angularjs-directives/</a>
</p>

</div>

<h4 id="conditional_directives">Conditional Directives</h4>
<div class="level4">

<p>
These are native directives in AngularJS that allows us to apply conditional logic to our <abbr title="Document Object Model">DOM</abbr>.
</p>

<p>
Using:
</p>

<p>
ng-switch
</p>

<p>
ng-show
</p>

<p>
ng-repeat
</p>

<p>
ng-if (from Angular UI)
</p>

<p>
<a href="http://stackoverflow.com/questions/13813254/how-do-i-conditionally-apply-css-styles-in-angularjs" class="urlextern" title="http://stackoverflow.com/questions/13813254/how-do-i-conditionally-apply-css-styles-in-angularjs"  rel="nofollow">http://stackoverflow.com/questions/13813254/how-do-i-conditionally-apply-css-styles-in-angularjs</a>
</p>

<p>
<a href="http://stackoverflow.com/questions/7792652/what-is-the-best-way-to-conditionally-apply-a-class-with-angularjs" class="urlextern" title="http://stackoverflow.com/questions/7792652/what-is-the-best-way-to-conditionally-apply-a-class-with-angularjs"  rel="nofollow">http://stackoverflow.com/questions/7792652/what-is-the-best-way-to-conditionally-apply-a-class-with-angularjs</a>
</p>

</div>

<h4 id="inspiration">Inspiration</h4>
<div class="level4">

<p>
There are a number of pre-made directives for AngularJS that developers have released open source. You can find inspiration for interesting directives and perhaps integrate them into your application. Here are various sources of directives:
</p>
<ul>
<li class="level1"><div class="li"> <a href="http://deansofer.com/posts/view/14/AngularJs-Tips-and-Tricks-UPDATED" class="urlextern" title="http://deansofer.com/posts/view/14/AngularJs-Tips-and-Tricks-UPDATED"  rel="nofollow">AngularJS Tips &amp; Tricks</a></div>
</li>
<li class="level1"><div class="li"> <a href="https://github.com/andreev-artem/angular_experiments" class="urlextern" title="https://github.com/andreev-artem/angular_experiments"  rel="nofollow">Angular Experiments</a></div>
</li>
<li class="level1"><div class="li"> <a href="http://angular-ui.github.com/" class="urlextern" title="http://angular-ui.github.com/"  rel="nofollow">Angular UI</a></div>
</li>
<li class="level1"><div class="li"> <a href="http://angular-ui.github.com/bootstrap/" class="urlextern" title="http://angular-ui.github.com/bootstrap/"  rel="nofollow">Angular UI Strap</a> - For Twitter Bootstrap directives</div>
</li>
<li class="level1"><div class="li"> <a href="https://github.com/petebacondarwin/AngularJS-Directives-Presentation" class="urlextern" title="https://github.com/petebacondarwin/AngularJS-Directives-Presentation"  rel="nofollow">AngularJS Directives Presentation</a></div>
</li>
</ul>

</div>
<!-- EDIT17 SECTION "Directives" [97889-119869] -->
<h3 class="sectionedit18" id="templating">Templating</h3>
<div class="level3">

<p>
Client side templates vs Serverside templates
</p>

<p>
Loading from server, or loading from client
</p>

<p>
Structure on the server side, and load them using Template::partial
</p>

</div>
<!-- EDIT18 SECTION "Templating" [119870-120051] -->
<h3 class="sectionedit19" id="services">Services</h3>
<div class="level3">

<p>
AngularJS services
</p>

<p>
<a href="https://gist.github.com/Mithrandir0x/3639232" class="urlextern" title="https://gist.github.com/Mithrandir0x/3639232"  rel="nofollow">https://gist.github.com/Mithrandir0x/3639232</a>
</p>

<p>
Remember that $resource works with objects, it will always expect either an object to come back, or an array of objects (if it is $resource.query). You cannot have array of arrays, and array of primitives won&#039;t work either. However this can be overwritten, and you can use the $http service instead if you need more granular control.
</p>

<p>
Also <abbr title="Hyper Text Transfer Protocol">HTTP</abbr> intercepting + intercepting for redirection!
</p>

</div>
<!-- EDIT19 SECTION "Services" [120052-120527] -->
<h2 class="sectionedit20" id="authentication">Authentication</h2>
<div class="level2">

<p>
<a href="http://www.espeo.pl/2012/02/26/authentication-in-angularjs-application" class="urlextern" title="http://www.espeo.pl/2012/02/26/authentication-in-angularjs-application"  rel="nofollow">http://www.espeo.pl/2012/02/26/authentication-in-angularjs-application</a>
</p>

<p>
<a href="https://github.com/andreassolberg/jso/tree/version2" class="urlextern" title="https://github.com/andreassolberg/jso/tree/version2"  rel="nofollow">https://github.com/andreassolberg/jso/tree/version2</a>
</p>

</div>
<!-- EDIT20 SECTION "Authentication" [120528-120680] -->
<h2 class="sectionedit21" id="bom_dom">BOM &amp; DOM</h2>
<div class="level2">

<p>
Using jQuery for <abbr title="Document Object Model">DOM</abbr> manipulation or jQLite
</p>

<p>
But also talk about BOM
</p>

<p>
Cookies.. etc
</p>

<p>
Location object…
</p>

</div>
<!-- EDIT21 SECTION "BOM & DOM" [120681-120808] -->
<h2 class="sectionedit22" id="events_asynchronous">Events &amp; Asynchronous</h2>
<div class="level2">

<p>
Asyncrhonous callbacks
</p>

<p>
Using promises
</p>

<p>
<a href="http://stackoverflow.com/questions/15207788/calling-a-function-when-ng-repeat-has-finished" class="urlextern" title="http://stackoverflow.com/questions/15207788/calling-a-function-when-ng-repeat-has-finished"  rel="nofollow">http://stackoverflow.com/questions/15207788/calling-a-function-when-ng-repeat-has-finished</a>
</p>

<p>
<a href="http://jsfiddle.net/VxafF/" class="urlextern" title="http://jsfiddle.net/VxafF/"  rel="nofollow">http://jsfiddle.net/VxafF/</a>
</p>

</div>
<!-- EDIT22 SECTION "Events & Asynchronous" [120809-121002] -->
<h2 class="sectionedit23" id="ajax">AJAX</h2>
<div class="level2">

<p>
Using AngularJS resources and <abbr title="Hyper Text Transfer Protocol">HTTP</abbr> get
</p>

<p>
Also <abbr title="Hyper Text Transfer Protocol">HTTP</abbr>  Interceptors
</p>

<p>
Long polling, short polling
</p>

<p>
<abbr title="Asynchronous JavaScript and XML">AJAX</abbr> authentication and validation
</p>

</div>
<!-- EDIT23 SECTION "AJAX" [121003-121149] -->
<h2 class="sectionedit24" id="html5_apis">HTML5 APIs</h2>
<div class="level2">

<p>
Browser level (for other stuff)
</p>

<p>
Web Workers
</p>

<p>
<a href="http://platform.html5.org/" class="urlextern" title="http://platform.html5.org/"  rel="nofollow">List of HTML5 APIs</a>
</p>

</div>
<!-- EDIT24 SECTION "HTML5 APIs" [121150-121270] -->
<h2 class="sectionedit25" id="dependency_management_script_loaders">Dependency Management &amp; Script Loaders</h2>
<div class="level2">

<p>
Dependency Injection in AngularJS, and structuring in terms of modules.
</p>

<p>
AMD
</p>

<p>
Require.js or HeadJS
</p>

<p>
Performance of minification, so minification vs asynchronous! Can work with Angular.
</p>

<p>
<a href="http://www.peterbe.com/plog/requirejs-vs-headjs" class="urlextern" title="http://www.peterbe.com/plog/requirejs-vs-headjs"  rel="nofollow">http://www.peterbe.com/plog/requirejs-vs-headjs</a>
</p>

</div>
<!-- EDIT25 SECTION "Dependency Management & Script Loaders" [121271-121556] -->
<h2 class="sectionedit26" id="real_time_web">Real Time Web</h2>
<div class="level2">

<p>
Web Sockets using AutobahnJS and WAMP
</p>

<p>
Operational Transformation using ShareJS
</p>

</div>
<!-- EDIT26 SECTION "Real Time Web" [121557-121664] -->
<h2 class="sectionedit27" id="canvas">Canvas</h2>
<div class="level2">

<p>
2D graphics and EaselJS and Kinetic.<abbr title="JavaScript">JS</abbr>
</p>

<p>
Also usage of D3.
</p>

</div>
<!-- EDIT27 SECTION "Canvas" [121665-121743] -->
<h2 class="sectionedit28" id="webgl">WebGL</h2>
<div class="level2">

<p>
Using three.js!
</p>

</div>
<!-- EDIT28 SECTION "WebGL" [121744-] -->