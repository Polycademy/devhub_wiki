//assume autoloading is setup
&nbsp;
//ok so this file is in Guzzle/Url directory
namespace Guzzle\Url;
&nbsp;
//we're importing something we want to use
use Guzzle\Cookie\CookieParser;
&nbsp;
//here we're importing, but we're aliasing it too!
use Guzzle\Message as Awesome;
&nbsp;
//here we're importing a directory, just imagine that it is a directory and not a file
use Guzzle\Directory;
&nbsp;
class Mapper{
&nbsp;
    public function __construct(){
&nbsp;
        //there's never any need to specify filename extensions, the classes and files are the same name.
&nbsp;
        //this works, because we imported the file (remember that class names should match file names)
        //it first looks at the current namespace, then the imported namespace
        //this is called an unqualified name
        $cookie_parser = new CookieParser; 
&nbsp;
        //this may work, it's not imported, so the current namespace gets appended
        //it will only work if there was a Guzzle/Url/UrlParser.php
        //this is also called an unqualified name
        $url_parser = new UrlParser;
&nbsp;
        //this is called a qualified name, the current namespace gets appended to it
        //it becomes Guzzle\Url\Another\Parser.php
        $another_parser = new Another\Parser;
&nbsp;
        //this is called a FULLY qualified name, it does not append any of the current namespaces, and it does not recognise imported namespaces. It's like an absolute path.
        $absolute_parser = new \Other\Cool\Parser;
&nbsp;
        //this uses an alias, and resolves to Guzzle\Message\Awesome\Parsing.php
        $aliased_parser = new Awesome\Parsing;
&nbsp;
        //this is not an alias, instead it points to the Directory import. So it resolves as Guzzle\Directory\SuperParser;
        $directory_parser = new Directory\SuperParser;
        //therefore if the use keyword points to a directory and not to a specific file, all of those files become fair game. However you need to use the last namespace directory and prefix all class initialisations
&nbsp;
    }
&nbsp;
}