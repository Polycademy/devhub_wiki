<span class="co1">//assuming HTML</span>
<span class="coMULTI">/*
&lt;div widget expression=&quot;doSomething(param)&quot;&gt;&lt;/div&gt;
*/</span>
<span class="co1">//assuming scope</span>
<span class="coMULTI">/*
scope: {
    expression: '&amp;'
}
*/</span>
<span class="co1">//also assuming parent controller</span>
<span class="coMULTI">/*
function($scope){
    $scope.doSomething(input){
        console.log(input);
    };
    $scope.param = 'Some default parameters!';
}
*/</span>
<span class="kw1">function</span><span class="br0">&#40;</span>scope<span class="sy0">,</span> element<span class="sy0">,</span> attributes<span class="br0">&#41;</span><span class="br0">&#123;</span>
    scope.<span class="me1">doSomething</span><span class="br0">&#40;</span><span class="st0">'Something I want to pass in'</span><span class="br0">&#41;</span><span class="sy0">;</span> <span class="co1">//doesn't work</span>
    scope.<span class="me1">doSomething</span><span class="br0">&#40;</span><span class="br0">&#123;</span>param<span class="sy0">:</span> <span class="st0">'something I want to pass in!'</span><span class="br0">&#125;</span><span class="br0">&#41;</span><span class="sy0">;</span> <span class="co1">//works</span>
    scope.<span class="me1">doSomething</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span> <span class="co1">//also works, uses the default parameter in the parent container!</span>
<span class="br0">&#125;</span>