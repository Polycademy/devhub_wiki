<span class="st0">'use strict'</span><span class="sy0">;</span>
&nbsp;
<span class="co1">//this is our page level module, it can define a dependent module, which we call the Index module of Blog.Controllers, that module could be the default page of Blog</span>
angular.<span class="me1">module</span><span class="br0">&#40;</span><span class="st0">'Blog.Controllers'</span><span class="sy0">,</span> <span class="br0">&#91;</span><span class="st0">'Blog.Controllers.Index'</span><span class="br0">&#93;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
<span class="co1">//the reason we abstract the Index from the Blog.Controllers, is that because you may wish to have an hierarchical structuring of your blog state</span>
angular.<span class="me1">module</span><span class="br0">&#40;</span><span class="st0">'Blog.Controllers.Index'</span><span class="sy0">,</span> <span class="br0">&#91;</span><span class="br0">&#93;</span><span class="br0">&#41;</span> <span class="co1">//whenever there's a [] in the 2nd parameter, it means the module is created</span>
    .<span class="me1">controller</span><span class="br0">&#40;</span><span class="st0">'BlogIndexCtrl'</span><span class="sy0">,</span> <span class="br0">&#91;</span> <span class="co1">//&lt;- BlogIndexCtrl is actual name of the controller</span>
        <span class="st0">'$scope'</span><span class="sy0">,</span>
        <span class="kw1">function</span><span class="br0">&#40;</span>$scope<span class="br0">&#41;</span><span class="br0">&#123;</span>
            <span class="co1">//the $scope here would be available to all elements that are the children of BlogIndexCtrl</span>
            $scope.<span class="me1">data</span> <span class="sy0">=</span> <span class="st0">'Hello World!'</span><span class="sy0">;</span>
        <span class="br0">&#125;</span>
    <span class="br0">&#93;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
<span class="co1">//this part is optional, imagine a different kind of Blog State that may be used conditionally from the routes</span>
angular.<span class="me1">module</span><span class="br0">&#40;</span><span class="st0">'Blog.Controllers.Mobile'</span><span class="sy0">,</span> <span class="br0">&#91;</span><span class="br0">&#93;</span><span class="br0">&#41;</span>
    .<span class="me1">controller</span><span class="br0">&#40;</span><span class="st0">'BlogMobileCtrl'</span><span class="sy0">,</span> <span class="br0">&#91;</span>
        <span class="st0">'$scope'</span><span class="sy0">,</span>
        <span class="kw1">function</span><span class="br0">&#40;</span>$scope<span class="br0">&#41;</span><span class="br0">&#123;</span>
            $scope.<span class="me1">data</span> <span class="sy0">=</span> <span class="st0">'I am a different controller!'</span><span class="sy0">;</span>
        <span class="br0">&#125;</span>
    <span class="br0">&#93;</span><span class="br0">&#41;</span>
    .<span class="me1">controller</span><span class="br0">&#40;</span><span class="st0">'BlogSubCtrl'</span><span class="sy0">,</span> <span class="br0">&#91;</span> <span class="co1">//&lt;- this also demonstrates a controller that is part of the Blog.Controllers.Mobile, so this could be a sub controller that is nested inside 'BlogMobileCtrl'</span>
        <span class="st0">'$scope'</span><span class="sy0">,</span>
        <span class="kw1">function</span><span class="br0">&#40;</span>$scope<span class="br0">&#41;</span><span class="br0">&#123;</span>
            $scope.<span class="me1">another</span> <span class="sy0">=</span> <span class="st0">'A sub controller'</span><span class="sy0">;</span>
        <span class="br0">&#125;</span><span class="sy0">;</span>
    <span class="br0">&#93;</span><span class="br0">&#41;</span><span class="sy0">;</span>