<span class="kw2">&lt;?php</span>
&nbsp;
<span class="co1">//the first thing to do is to setup your file descriptor specification</span>
<span class="co1">//the spec is the file descriptor integer corresponding to an array of the method of passing data and the access mode</span>
<span class="co1">//instead of a pipe you can also use a file or socket connection</span>
<span class="re0">$descriptor_spec</span> <span class="sy0">=</span> <a href="http://www.php.net/array"><span class="kw3">array</span></a><span class="br0">&#40;</span>
    <span class="nu0">0</span> <span class="sy0">=&gt;</span> <a href="http://www.php.net/array"><span class="kw3">array</span></a><span class="br0">&#40;</span><span class="st_h">'pipe'</span><span class="sy0">,</span> <span class="st_h">'r'</span><span class="br0">&#41;</span><span class="sy0">,</span> <span class="co1">//STDIN read mode</span>
    <span class="nu0">1</span> <span class="sy0">=&gt;</span> <a href="http://www.php.net/array"><span class="kw3">array</span></a><span class="br0">&#40;</span><span class="st_h">'pipe'</span><span class="sy0">,</span> <span class="st_h">'w'</span><span class="br0">&#41;</span><span class="sy0">,</span> <span class="co1">//STDOUT write mode</span>
    <span class="nu0">2</span> <span class="sy0">=&gt;</span> <a href="http://www.php.net/array"><span class="kw3">array</span></a><span class="br0">&#40;</span><span class="st_h">'pipe'</span><span class="sy0">,</span> <span class="st_h">'w'</span><span class="br0">&#41;</span><span class="sy0">,</span> <span class="co1">//STDERR write mode</span>
<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
<span class="co1">//any command line options to the binary would be appended to the $cmd variable, not piped to STDIN</span>
<span class="re0">$cmd</span> <span class="sy0">=</span> <span class="st_h">'php'</span><span class="sy0">;</span> <span class="co1">//we're going to dynamically execute a PHP script, make sure php is in your PATH variables</span>
&nbsp;
<span class="co1">//proc_open also has the third parameter of current working directory, the default would be the working directory of your the php file that is being executed</span>
<span class="co1">//pipes is passed by reference, we'll be using it to inject data into the IO streams</span>
<span class="re0">$process</span> <span class="sy0">=</span> <a href="http://www.php.net/proc_open"><span class="kw3">proc_open</span></a><span class="br0">&#40;</span><span class="re0">$cmd</span><span class="sy0">,</span> <span class="re0">$descriptor_spec</span><span class="sy0">,</span> <span class="re0">$pipes</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
<span class="kw1">if</span><span class="br0">&#40;</span><a href="http://www.php.net/is_resource"><span class="kw3">is_resource</span></a><span class="br0">&#40;</span><span class="re0">$process</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="br0">&#123;</span>
&nbsp;
    <span class="co1">//pass data into the STDIN stream, the php binary will accept this as input, it will be expecting php code</span>
    <a href="http://www.php.net/fwrite"><span class="kw3">fwrite</span></a><span class="br0">&#40;</span><span class="re0">$pipes</span><span class="br0">&#91;</span><span class="nu0">0</span><span class="br0">&#93;</span><span class="sy0">,</span> <span class="st_h">'&lt;?php echo \'I am a php script that has been executed directly by the binary!\' ?&gt;'</span><span class="br0">&#41;</span><span class="sy0">;</span>
    <a href="http://www.php.net/fclose"><span class="kw3">fclose</span></a><span class="br0">&#40;</span><span class="re0">$pipes</span><span class="br0">&#91;</span><span class="nu0">0</span><span class="br0">&#93;</span><span class="br0">&#41;</span><span class="sy0">;</span> <span class="co1">//we need to close the connection or else the script cannot end</span>
&nbsp;
    <span class="co1">//extract the data out of STDOUT</span>
    <span class="re0">$output</span> <span class="sy0">=</span> <a href="http://www.php.net/stream_get_contents"><span class="kw3">stream_get_contents</span></a><span class="br0">&#40;</span><span class="re0">$pipes</span><span class="br0">&#91;</span><span class="nu0">1</span><span class="br0">&#93;</span><span class="br0">&#41;</span><span class="sy0">;</span>
    <a href="http://www.php.net/fclose"><span class="kw3">fclose</span></a><span class="br0">&#40;</span><span class="re0">$pipes</span><span class="br0">&#91;</span><span class="nu0">1</span><span class="br0">&#93;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
    <span class="co1">//extract data out of STDERR (php binary will pass any php errors to STDERR and STDOUT)</span>
    <span class="re0">$errors</span> <span class="sy0">=</span> <a href="http://www.php.net/stream_get_contents"><span class="kw3">stream_get_contents</span></a><span class="br0">&#40;</span><span class="re0">$pipes</span><span class="br0">&#91;</span><span class="nu0">2</span><span class="br0">&#93;</span><span class="br0">&#41;</span><span class="sy0">;</span>
    <a href="http://www.php.net/fclose"><span class="kw3">fclose</span></a><span class="br0">&#40;</span><span class="re0">$pipes</span><span class="br0">&#91;</span><span class="nu0">2</span><span class="br0">&#93;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
    <span class="co1">//same as the return_value from exec(), if it's 0, that means the command worked (note that STDERR is errors recorded from the program itself, whereas exit_code would be the command line giving you back an error)</span>
    <span class="re0">$exit_code</span> <span class="sy0">=</span> <a href="http://www.php.net/proc_close"><span class="kw3">proc_close</span></a><span class="br0">&#40;</span><span class="re0">$process</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
<span class="br0">&#125;</span>
&nbsp;
<span class="kw1">if</span><span class="br0">&#40;</span><span class="re0">$exit_code</span> <span class="sy0">==</span> <span class="nu0">0</span><span class="br0">&#41;</span><span class="br0">&#123;</span>
    <span class="co1">//command worked</span>
    <span class="kw1">if</span><span class="br0">&#40;</span><a href="http://www.php.net/empty"><span class="kw3">empty</span></a><span class="br0">&#40;</span><span class="re0">$errors</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="br0">&#123;</span>
        <span class="co1">//means the php binary did not spit out php errors</span>
        <a href="http://www.php.net/var_dump"><span class="kw3">var_dump</span></a><span class="br0">&#40;</span><span class="re0">$output</span><span class="br0">&#41;</span><span class="sy0">;</span>
    <span class="br0">&#125;</span><span class="kw1">else</span><span class="br0">&#123;</span>
        <a href="http://www.php.net/var_dump"><span class="kw3">var_dump</span></a><span class="br0">&#40;</span><span class="re0">$errors</span><span class="br0">&#41;</span><span class="sy0">;</span>
    <span class="br0">&#125;</span>
<span class="br0">&#125;</span><span class="kw1">else</span><span class="br0">&#123;</span>
    <a href="http://www.php.net/var_dump"><span class="kw3">var_dump</span></a><span class="br0">&#40;</span><span class="re0">$exit_code</span><span class="br0">&#41;</span><span class="sy0">;</span>
<span class="br0">&#125;</span>		
<span class="co1">//demonstrate redirection of IO streams (actually IO redirection is already done via the descriptorspec)</span>