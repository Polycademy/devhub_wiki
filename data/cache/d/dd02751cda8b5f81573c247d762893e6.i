a:2028:{i:0;a:3:{i:0;s:14:"document_start";i:1;a:0:{}i:2;i:0;}i:1;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:30:"PHP - Server Side Architecture";i:1;i:1;i:2;i:1;}i:2;i:1;}i:2;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:1;}i:2;i:1;}i:3;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:1;}i:4;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"PHP";}i:2;i:47;}i:5;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:80:" is a server side scripting language. It is a dynamic and interpreted language. ";}i:2;i:50;}i:6;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"PHP";}i:2;i:130;}i:7;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:69:" is not compiled. It runs through an interpreter, which is usually a ";}i:2;i:133;}i:8;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"PHP";}i:2;i:202;}i:9;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:99:" processor module that is integrated into a web server. For our purposes, that would be the Apache ";}i:2;i:205;}i:10;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:4:"HTTP";}i:2;i:304;}i:11;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:23:" server which includes ";}i:2;i:308;}i:12;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:331;}i:13;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:7:"mod_php";}i:2;i:333;}i:14;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:340;}i:15;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:26:" as the processor module. ";}i:2;i:342;}i:16;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"PHP";}i:2;i:368;}i:17;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:20:" can also be ran as ";}i:2;i:371;}i:18;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"CGI";}i:2;i:391;}i:19;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:35:", but that is not as common as the ";}i:2;i:394;}i:20;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:429;}i:21;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:7:"mod_php";}i:2;i:431;}i:22;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:438;}i:23;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:64:" method. It started out being an embedded scripting language to ";}i:2;i:440;}i:24;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:4:"HTML";}i:2;i:504;}i:25;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:314:", but grew into a full fledged programming language. It includes its own command line interface and can run as a stand alone server (but only used for development). It is single threaded and share nothing, meaning that it doesn't natively support concurrent processing and it doesn't share data between processes. ";}i:2;i:508;}i:26;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"PHP";}i:2;i:822;}i:27;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:105:" is currently the most widely used web programming language powering Wikipedia, Facebook, Digg and more. ";}i:2;i:825;}i:28;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:930;}i:29;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:930;}i:30;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:44:"While going through this article, try using ";}i:2;i:932;}i:31;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:26:"http://phpbounce.aws.af.cm";i:1;s:9:"PHPBounce";}i:2;i:976;}i:32;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:78:" to quickly test out your code if you don't have a chance to run a web server.";}i:2;i:1016;}i:33;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:1094;}i:34;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:1096;}i:35;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:33:"Object Oriented Programming (OOP)";i:1;i:2;i:2;i:1096;}i:2;i:1096;}i:36;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:2;}i:2;i:1096;}i:37;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:1096;}i:38;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:23:"There four fundamental ";}i:2;i:1143;}i:39;a:3:{i:0;s:13:"interwikilink";i:1;a:4:{i:0;s:23:"wp>Programming paradigm";i:1;s:21:"programming paradigms";i:2;s:2:"wp";i:3;s:20:"Programming paradigm";}i:2;i:1166;}i:40;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:74:". They are object-oriented, imperative, functional and logic programming. ";}i:2;i:1215;}i:41;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"PHP";}i:2;i:1289;}i:42;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:161:" can support multiple paradigms, namely procedural (imperative) and object oriented. It incorporates aspects of functional, but developers don't architect their ";}i:2;i:1292;}i:43;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"PHP";}i:2;i:1453;}i:44;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:76:" applications in a functional way. The most common programming paradigm for ";}i:2;i:1456;}i:45;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"PHP";}i:2;i:1532;}i:46;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:20:" is object oriented.";}i:2;i:1535;}i:47;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:1555;}i:48;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:1555;}i:49;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:823:"Object oriented simply means that we try to separate our programming into logical units of code. Each unit of code is an object. Each object can have multiple data properties that describe the object and multiple functions called methods. When we normally start programming, we naturally start in a procedural manner, specifying a list of tasks and subroutines before getting an end result. However in OOP, each object is an independent unit of code capable of receiving input, processing data and returning output. Each object can call on other objects, be dependent on external objects, or extended from parent objects. Each object has a distinct role. The decision of how granular we want when separating code into objects depends on the complexity of the unit of code. If you can find yourself doing multiple different ";}i:2;i:1557;}i:50;a:3:{i:0;s:13:"emphasis_open";i:1;a:0:{}i:2;i:2380;}i:51;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:5:"types";}i:2;i:2382;}i:52;a:3:{i:0;s:14:"emphasis_close";i:1;a:0:{}i:2;i:2387;}i:53;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:70:" of tasks in one subroutine, then it's probably time to separate each ";}i:2;i:2389;}i:54;a:3:{i:0;s:13:"emphasis_open";i:1;a:0:{}i:2;i:2459;}i:55;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:4:"type";}i:2;i:2461;}i:56;a:3:{i:0;s:14:"emphasis_close";i:1;a:0:{}i:2;i:2465;}i:57;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:204:" of functionality into different objects or different object methods. Objects should be created with one single responsibility, one way to check if an object is doing too many things is checking how many ";}i:2;i:2467;}i:58;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:2671;}i:59;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:2:"if";}i:2;i:2673;}i:60;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:2675;}i:61;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:4:" or ";}i:2;i:2677;}i:62;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:2681;}i:63;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:6:"switch";}i:2;i:2683;}i:64;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:2689;}i:65;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:66:" statements that are used to branch off logic. This is called the ";}i:2;i:2691;}i:66;a:3:{i:0;s:13:"interwikilink";i:1;a:4:{i:0;s:34:"wp>Single responsibility principle";i:1;s:31:"Single Responsibility Principle";i:2;s:2:"wp";i:3;s:31:"Single responsibility principle";}i:2;i:2757;}i:67;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:2827;}i:68;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:2827;}i:69;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:120:"In order to create objects, we actually first specify a class. Classes are blueprints for objects. Objects are actually ";}i:2;i:2829;}i:70;a:3:{i:0;s:13:"emphasis_open";i:1;a:0:{}i:2;i:2949;}i:71;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:9:"instances";}i:2;i:2951;}i:72;a:3:{i:0;s:14:"emphasis_close";i:1;a:0:{}i:2;i:2960;}i:73;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:307:" of classes. So a single class can be used to create multiple objects. Note that the words objects and classes are used interchangeably. However when people say class it usually refers to the creation of the class, whereas when people refer to object, it usually refers to instantiated context of the class.";}i:2;i:2962;}i:74;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:3269;}i:75;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:3269;}i:76;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:106:"It's important to note that by convention we name our classes with capitalised first letters and the rest ";}i:2;i:3271;}i:77;a:3:{i:0;s:13:"interwikilink";i:1;a:4:{i:0;s:12:"wp>CamelCase";i:1;s:11:"camel cased";i:2;s:2:"wp";i:3;s:9:"CamelCase";}i:2;i:3377;}i:78;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:458:". Except when we're naming interfaces or abstracts. Furthermore we put each class into its own single file, so there's never two classes in one file. The file name should also match the name of the class including the capitalisations. This file naming convention however is not applied when we're using models, views or controllers in Codeigniter. The reason for this is due to a mismatch of conventions between the PSR autoloading standards and Codeigniter.";}i:2;i:3405;}i:79;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:3863;}i:80;a:3:{i:0;s:4:"code";i:1;a:3:{i:0;s:156:"
//a class of Elephant, classes are usually capitalised
class Elephant{}

//$elephant is an object instance of the Elephant class
$elephant = new Elephant;
";i:1;s:3:"php";i:2;N;}i:2;i:3870;}i:81;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:3870;}i:82;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:86:"OOP has four main concepts: encapsulation, abstraction, inheritance and polymorphism. ";}i:2;i:4040;}i:83;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:4126;}i:84;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:4128;}i:85;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:13:"Encapsulation";i:1;i:3;i:2;i:4128;}i:2;i:4128;}i:86;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:4128;}i:87;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:4128;}i:88;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:411:"OOP arose from the need to modularise and separate the functionality of software as software grew in complexity. The OOP approach encourages encapsulation which means we should place units of data inside objects which can only be accessed and manipulated through the object's methods. The methods act as intermediaries between different objects. You should never access data properties from the object directly.";}i:2;i:4153;}i:89;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:4564;}i:90;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:4564;}i:91;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:222:"The motivation for encapsulation is discipline and abstraction. By encapsulating the data properties and thus the state of the object, we're hiding the implementation details of the object, but instead providing an method ";}i:2;i:4566;}i:92;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"API";}i:2;i:4788;}i:93;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:205:" that external objects can access. This helps with the abstraction process by providing a consistent way of accessing objects. This discipline is also useful when software development takes place in teams.";}i:2;i:4791;}i:94;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:4996;}i:95;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:4996;}i:96;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:184:"Furthermore since the data properties are hidden, and only the names of methods are accessible, we can change the implementation details of the object without worrying of breaking the ";}i:2;i:4998;}i:97;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"API";}i:2;i:5182;}i:98;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:19:" for other objects.";}i:2;i:5185;}i:99;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:5204;}i:100;a:3:{i:0;s:4:"code";i:1;a:3:{i:0;s:928:"
class Elephant{

    //encapsulated private data property of $_colour. The private makes it only accessible within the object's instance using $this. This underscore is only a convention of prefixing private or protected variables.
    private $_colour;
    
    //public accessor method that sets the $_colour and echos it
    public function set_colour($colour){
        
        $this->_colour = $colour;
        echo $colour;
        
        //did you know that we can dynamically create object instance variables too? This only gets created when set_colour is called from the instance
        $this->hue = $colour;
        
    }
  
}

$red_elephant = new Elephant;
//we can access the public method that acts as the intermediary to the private data property
$red_elephant->set_colour('red');

//second object instantiation
$green_elephant = new Elephant;
$green_elephant->set_colour('green');
echo $green_elephant->hue;
";i:1;s:3:"php";i:2;N;}i:2;i:5211;}i:101;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:6152;}i:102;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:11:"Abstraction";i:1;i:3;i:2;i:6152;}i:2;i:6152;}i:103;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:6152;}i:104;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:6152;}i:105;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:332:"Encapsulation is actually technique of a more generic concept called abstraction. Objects should be abstracted. This means that the concrete implementation details should be hidden and abstracted away, so that only contextually important methods are available at a particular perspective. Here's a couple examples: the concept of a ";}i:2;i:6175;}i:106;a:3:{i:0;s:18:"doublequoteopening";i:1;a:0:{}i:2;i:6507;}i:107;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:4:"List";}i:2;i:6508;}i:108;a:3:{i:0;s:18:"doublequoteclosing";i:1;a:0:{}i:2;i:6512;}i:109;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:22:" is an abstraction of ";}i:2;i:6513;}i:110;a:3:{i:0;s:18:"doublequoteopening";i:1;a:0:{}i:2;i:6535;}i:111;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:10:"Fruit List";}i:2;i:6536;}i:112;a:3:{i:0;s:18:"doublequoteclosing";i:1;a:0:{}i:2;i:6546;}i:113;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:4:" or ";}i:2;i:6547;}i:114;a:3:{i:0;s:18:"doublequoteopening";i:1;a:0:{}i:2;i:6551;}i:115;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:8:"Car List";}i:2;i:6552;}i:116;a:3:{i:0;s:18:"doublequoteclosing";i:1;a:0:{}i:2;i:6560;}i:117;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:19:". The concept of a ";}i:2;i:6561;}i:118;a:3:{i:0;s:18:"doublequoteopening";i:1;a:0:{}i:2;i:6580;}i:119;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:12:"Living Thing";}i:2;i:6581;}i:120;a:3:{i:0;s:18:"doublequoteclosing";i:1;a:0:{}i:2;i:6593;}i:121;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:22:" is an abstraction of ";}i:2;i:6594;}i:122;a:3:{i:0;s:18:"doublequoteopening";i:1;a:0:{}i:2;i:6616;}i:123;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:7:"Animals";}i:2;i:6617;}i:124;a:3:{i:0;s:18:"doublequoteclosing";i:1;a:0:{}i:2;i:6624;}i:125;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:28:" which is an abstraction of ";}i:2;i:6625;}i:126;a:3:{i:0;s:18:"doublequoteopening";i:1;a:0:{}i:2;i:6653;}i:127;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:3:"Dog";}i:2;i:6654;}i:128;a:3:{i:0;s:18:"doublequoteclosing";i:1;a:0:{}i:2;i:6657;}i:129;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:17:". The concept of ";}i:2;i:6658;}i:130;a:3:{i:0;s:18:"doublequoteopening";i:1;a:0:{}i:2;i:6675;}i:131;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:6:"People";}i:2;i:6676;}i:132;a:3:{i:0;s:18:"doublequoteclosing";i:1;a:0:{}i:2;i:6682;}i:133;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:33:" is an abstraction of the person ";}i:2;i:6683;}i:134;a:3:{i:0;s:18:"doublequoteopening";i:1;a:0:{}i:2;i:6716;}i:135;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:5:"Roger";}i:2;i:6717;}i:136;a:3:{i:0;s:18:"doublequoteclosing";i:1;a:0:{}i:2;i:6722;}i:137;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:5:" and ";}i:2;i:6723;}i:138;a:3:{i:0;s:18:"doublequoteopening";i:1;a:0:{}i:2;i:6728;}i:139;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:7:"Matthew";}i:2;i:6729;}i:140;a:3:{i:0;s:18:"doublequoteclosing";i:1;a:0:{}i:2;i:6736;}i:141;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:122:". When constructing an object, the available object properties should be relevant to the context of which it is used. All ";}i:2;i:6737;}i:142;a:3:{i:0;s:18:"doublequoteopening";i:1;a:0:{}i:2;i:6859;}i:143;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:6:"People";}i:2;i:6860;}i:144;a:3:{i:0;s:18:"doublequoteclosing";i:1;a:0:{}i:2;i:6866;}i:145;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:40:" may have heights and weights, but only ";}i:2;i:6867;}i:146;a:3:{i:0;s:18:"doublequoteopening";i:1;a:0:{}i:2;i:6907;}i:147;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:5:"Roger";}i:2;i:6908;}i:148;a:3:{i:0;s:18:"doublequoteclosing";i:1;a:0:{}i:2;i:6913;}i:149;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:22:" has a preference for ";}i:2;i:6914;}i:150;a:3:{i:0;s:18:"doublequoteopening";i:1;a:0:{}i:2;i:6936;}i:151;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:13:"Action Movies";}i:2;i:6937;}i:152;a:3:{i:0;s:18:"doublequoteclosing";i:1;a:0:{}i:2;i:6950;}i:153;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:10:" and only ";}i:2;i:6951;}i:154;a:3:{i:0;s:18:"doublequoteopening";i:1;a:0:{}i:2;i:6961;}i:155;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:7:"Matthew";}i:2;i:6962;}i:156;a:3:{i:0;s:18:"doublequoteclosing";i:1;a:0:{}i:2;i:6969;}i:157;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:21:" has a tattoo saying ";}i:2;i:6970;}i:158;a:3:{i:0;s:18:"doublequoteopening";i:1;a:0:{}i:2;i:6991;}i:159;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:11:"I'm Awesome";}i:2;i:6992;}i:160;a:3:{i:0;s:18:"doublequoteclosing";i:1;a:0:{}i:2;i:7003;}i:161;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:27:". So when I'm defining the ";}i:2;i:7004;}i:162;a:3:{i:0;s:18:"doublequoteopening";i:1;a:0:{}i:2;i:7031;}i:163;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:6:"People";}i:2;i:7032;}i:164;a:3:{i:0;s:18:"doublequoteclosing";i:1;a:0:{}i:2;i:7038;}i:165;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:145:" object, it should not have properties of movie preferences or tattoos, those are not contextually relevant to how I would perceive or represent ";}i:2;i:7039;}i:166;a:3:{i:0;s:18:"doublequoteopening";i:1;a:0:{}i:2;i:7184;}i:167;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:6:"People";}i:2;i:7185;}i:168;a:3:{i:0;s:18:"doublequoteclosing";i:1;a:0:{}i:2;i:7191;}i:169;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:24:" as an abstract concept.";}i:2;i:7192;}i:170;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:7216;}i:171;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:7216;}i:172;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:200:"Abstraction is achieved by encapsulating concrete implementation details, but it can also be achieved by leaving concrete implementation details later to extend the abstract class as the parent class.";}i:2;i:7218;}i:173;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:7419;}i:174;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:7419;}i:175;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:11:"Inheritance";i:1;i:3;i:2;i:7419;}i:2;i:7419;}i:176;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:7419;}i:177;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:7419;}i:178;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:292:"Inheritance can be used to establish an abstract hierarchy of concepts and objects. At the same time because we're not rewriting the parent class's code, we enhance code reuse. Essentially child classes can inherit from parent classes, so that it inherits its parent's properties and methods.";}i:2;i:7442;}i:179;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:7734;}i:180;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:7734;}i:181;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:98:"Methods specified in the parent classes can be overwritten by child classes unless finalised with ";}i:2;i:7736;}i:182;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:7834;}i:183;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:6:"final ";}i:2;i:7836;}i:184;a:3:{i:0;s:13:"emphasis_open";i:1;a:0:{}i:2;i:7842;}i:185;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:5:"scope";}i:2;i:7844;}i:186;a:3:{i:0;s:14:"emphasis_close";i:1;a:0:{}i:2;i:7849;}i:187;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:10:" function ";}i:2;i:7851;}i:188;a:3:{i:0;s:13:"emphasis_open";i:1;a:0:{}i:2;i:7861;}i:189;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:4:"name";}i:2;i:7863;}i:190;a:3:{i:0;s:14:"emphasis_close";i:1;a:0:{}i:2;i:7867;}i:191;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:2:"{}";}i:2;i:7869;}i:192;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:7871;}i:193;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:2:". ";}i:2;i:7873;}i:194;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"PHP";}i:2;i:7875;}i:195;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:182:" also does not support multiple inheritance, so a child can only inherit from one parent. However there are different strategies to overcome this. Classes can also chain inheritance.";}i:2;i:7878;}i:196;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:8060;}i:197;a:3:{i:0;s:4:"code";i:1;a:3:{i:0;s:936:"
class Animal{

    //private scoped variables will not be accessible in the child classes
    private $_exists = true;
    
    //protected scoped variables are accessible in the child class but not outside of the class
    protected $_breathing_noise = 'breathing';
    
    public function breathe(){
        echo $this->_breathing_noise;
    }
    
}

//Elephant is a child of the abstract parent Animal class
class Elephant extends Animal{
    
    private $_colour;
    
    public function set_colour($colour){
        //$this can access this class and the parent's class when the object is instantiated
        $this->_colour = $colour;
        echo $colour;
    }
    
    public function set_breathing($noise){
        $this->_breathing_noise = $noise;
    }
    
}
     
$elephant = new Elephant;
$elephant->set_colour('red');
$elephant->set_breathing('HRRUMPH!');
$elephant->breathe(); //look accessing the parent's method!
";i:1;s:3:"php";i:2;N;}i:2;i:8067;}i:198;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:9017;}i:199;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:12:"Polymorphism";i:1;i:3;i:2;i:9017;}i:2;i:9017;}i:200;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:9017;}i:201;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:9017;}i:202;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:349:"Simply put polymorphism is simply that classes can have different functionality and yet share the same interface. Essentially you would be able to call a method that has a name, that is shared by classes which occupy the same abstraction level, but have different functionality. The point is so that you can write less code by not having to specify ";}i:2;i:9041;}i:203;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:9390;}i:204;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:2:"if";}i:2;i:9392;}i:205;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:9394;}i:206;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:137:" statements to switch functionality based on some context. This also means when you're working in teams you can establish a standard for ";}i:2;i:9396;}i:207;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"API";}i:2;i:9533;}i:208;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:29:" methods for similar classes.";}i:2;i:9536;}i:209;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:9565;}i:210;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:9565;}i:211;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:219:"An example would be a button. Everybody knows how to interact with a button. You either press it or you don't. But what the button does, who knows? So all buttons should have the same interface, such as a method called ";}i:2;i:9567;}i:212;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:9786;}i:213;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:5:"press";}i:2;i:9788;}i:214;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:9793;}i:215;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:".";}i:2;i:9795;}i:216;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:9796;}i:217;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:9796;}i:218;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:76:"Polymorphism is supported by two extra constructs: Interfaces and Abstracts.";}i:2;i:9798;}i:219;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:9874;}i:220;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:9876;}i:221;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:10:"Interfaces";i:1;i:4;i:2;i:9876;}i:2;i:9876;}i:222;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:4;}i:2;i:9876;}i:223;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:9876;}i:224;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:465:"Interfaces are contracts that objects implement. An object can implement multiple interfaces. An interface is simply an empty class with named methods, but no implementation details inside the methods. Any class that implements an interface will have to create concrete methods that match the empty methods in the interface, it they don't, it will cause a fatal error. By using interfaces you're guaranteeing that your implemented objects will have a set of public ";}i:2;i:9896;}i:225;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"API";}i:2;i:10361;}i:226;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:9:" methods.";}i:2;i:10364;}i:227;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:10373;}i:228;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:10373;}i:229;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:203:"Interfaces support polymorphism because different objects can implement the same interface. If we take the button example, there could be a button interface, which red button and green button implements.";}i:2;i:10375;}i:230;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:10578;}i:231;a:3:{i:0;s:4:"code";i:1;a:3:{i:0;s:791:"
//We usually prefix our interfaces with i, and class names are usually camelcased
interface iButton{
    
    public function press();
    
    public function change_colour();
    
}

class RedButton implements iButton{

    public function press(){
        echo 'Alert! RED BUTTON PRESSED!';
    }
    
    public function change_colour(){
        echo 'Flash RED and ORANGE!';
    }

}

class GreenButton implements iButton{

    public function press(){
        echo 'Warning! GREEN BUTTON PRESSED!';
    }
    
    public function change_colour(){
        echo 'Flash GREEN and BROWN!';
    }

}

//now we can expect the same API methods, and hence polymorphic method! Same name, different functionality.
$red = new RedButton;
$red->press();
$green = new GreenButton;
$green->press();
";i:1;s:3:"php";i:2;N;}i:2;i:10585;}i:232;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:10585;}i:233;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:109:"Interfaces can also include constants which are accessible statically in their implementing objects. See the ";}i:2;i:11390;}i:234;a:3:{i:0;s:9:"locallink";i:1;a:2:{i:0;s:15:"using_libraries";i:1;s:15:"Using Libraries";}i:2;i:11499;}i:235;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:150:" section for more on static classes. Interfaces can also be extended, this allows interfaces to occupy multiple levels of abstraction. You can have a ";}i:2;i:11535;}i:236;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:11685;}i:237;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:22:"interface iLivingThing";}i:2;i:11687;}i:238;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:11709;}i:239;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:28:" which is an abstraction of ";}i:2;i:11711;}i:240;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:11739;}i:241;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:17:"interface iAnimal";}i:2;i:11741;}i:242;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:11758;}i:243;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:".";}i:2;i:11760;}i:244;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:11761;}i:245;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:11761;}i:246;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:108:"Interfaces are most commonly used with type hints to enforce type checking when injecting dependencies. See ";}i:2;i:11763;}i:247;a:3:{i:0;s:12:"internallink";i:1;a:2:{i:0;s:21:"PHP - Design Patterns";i:1;N;}i:2;i:11871;}i:248;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:46:" for more information on dependency injection.";}i:2;i:11896;}i:249;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:11942;}i:250;a:3:{i:0;s:4:"code";i:1;a:3:{i:0;s:1094:"
interface iAdd{

    //interfaces can also demand parameters
    public function add($one, $two);

}

class Calculator implements iAdd{

    public function add($one, $two){
        $result = $one + $two;
        return $result;
    }

}


class Calculation{

    //the iAdd type hint here forces the $calculator to be any object that implements the iAdd interface, because Calculation is expecting the add method which is guaranteed by the iAdd interface
    //__construct methods are called as soon as the class is instantiated, its parameters dictate parameters that are passed during object instantiation
    public function __construct(iAdd $calculator, $one, $two){
        $result = $calculator->add($one, $two);
        echo $result;
    }
    
}

//if I passed in an object that didn't implement the iAdd interface, the typehint would cause a fatal error
//you may notice that this object instantiation has parentheses "()", these are used when there is a __construct method, which is called as soon as the object is instantiated
$calculation = new Calculation(new Calculator, 5, 6);
";i:1;s:3:"php";i:2;N;}i:2;i:11949;}i:251;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:11949;}i:252;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:600:"The practice of using interfaces with type hinting and dependency injection is important, as it modularises the dependencies of classes. The Calculation class depends on an object that implements the iAdd interface. It doesn't care what the passed in object is, as long as it has the methods specified in the interface, because it's expecting to use those methods. Therefore, this also loosens the dependency coupling, allowing us to swap out the Calculator object with a different object with different implementation details as long as it preserves the polymorphic method names and expected output.";}i:2;i:13057;}i:253;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:13657;}i:254;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:13657;}i:255;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:60:"This practice is quite useful when you need to abstract the ";}i:2;i:13659;}i:256;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"API";}i:2;i:13719;}i:257;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:311:" (the way you use something) away from the concrete implementation (what the something is). One example would be if you're using a class that needs to store data into a database. That class should not care what kind of database it is, and how it stores its data as long as it has access to a set of predictable ";}i:2;i:13722;}i:258;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"API";}i:2;i:14033;}i:259;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:390:" methods. If you hard coded the database dependency and decided to change the database some time later, then you would have to change all the method calls, which is not good for maintenance. By using an interface, you avoid all of that by simply swapping out the database class and implementing the interface. Of course this only works if you abide by type hinting and dependency injection.";}i:2;i:14036;}i:260;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:14426;}i:261;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:14426;}i:262;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:189:"Note that objects can implement multiple interfaces, this just makes the instantiation of the object more strict, in that they have to implement all the methods specified in the interfaces.";}i:2;i:14428;}i:263;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:14617;}i:264;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:14619;}i:265;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:9:"Abstracts";i:1;i:4;i:2;i:14619;}i:2;i:14619;}i:266;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:4;}i:2;i:14619;}i:267;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:14619;}i:268;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:607:"Abstracts are interfaces that allow concrete implementations of their methods, however classes extend abstracts instead of implementing them, this means only one abstract can be used for each object. You might then think why can't we just use a normal class and have children that extend it. Well you could, but in programming, it's good to be explicit. Think of abstracts as a strict possessive parent class that must have children, and then forces its children to do things their way. But at the same time, it provides shared methods to their children to use. Hence abstracts are never used by themselves.";}i:2;i:14638;}i:269;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:15245;}i:270;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:15245;}i:271;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:204:"Developers use abstracts to provide a boilerplate classes. Abstract methods which are the ones that children are forced to implement have to be either scoped at protected or public. Private wouldn't work.";}i:2;i:15247;}i:272;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:15451;}i:273;a:3:{i:0;s:4:"code";i:1;a:3:{i:0;s:985:"
//abstracts are classes, that's why we still have a class operator, furthermore we prefix abstracts with a little a
abstract class aArmor{

    //shared variable
    //variables or properties cannot be abstracted, they are considered concrete implementation details
    protected $_weight;
    
    //shared method
    public function set_weight($kg){
        $this->_weight = $kg;
    }
    
    //this is what will have to be implemented by the children
    abstract public function armor_rating();
    
}

class ChineseArmor extends aArmor{

    public function __construct($weight){
        $this->set_weight($weight);
    }
    
    
    //implemented functions have to be at the same or less restrictive scoping, public is the least restrictive!
    public function armor_rating(){
        echo 'Over 10,000!';
    }
    
    public function get_weight(){
        echo $this->_weight;
    }

}

$armor = new ChineseArmor('100 Kg');
$armor->armor_rating();
$armor->get_weight();
";i:1;s:3:"php";i:2;N;}i:2;i:15458;}i:274;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:15458;}i:275;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:151:"Abstracts can also be type hinted, in fact all objects can be type hinted, so you can use them in the same way as interfaces with dependency injection.";}i:2;i:16457;}i:276;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:16608;}i:277;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:16608;}i:278;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:43:"Abstracts can also be used with interfaces.";}i:2;i:16610;}i:279;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:16653;}i:280;a:3:{i:0;s:4:"code";i:1;a:3:{i:0;s:1228:"
interface iPhysicalObject{

    //abstracts do not need to implement this, only the final concrete child class
    public function weight();

}

abstract class aArmor implements iPhysicalObject{

    //shared function
    public function armor_rating(){
        //abstracts can reference weight method even though it doesn't exist yet, because it has been guranteed by the interface
        $rating = 10 * $this->weight();
        return $rating;
    }
    
    abstract public function blacksmith();

}


class ChineseArmor extends aArmor{

    //defined by interface
    public function weight(){
        return 100;
    }
    
    //defined by abstract
    public function blacksmith(){
        echo 'The Yellow Dragon!';
    }
    
    public function protection(){
        $protection = $this->armor_rating();
        //if the armor was created by the The Yellow Dragon! we add a bonus of 1000
        if($this->blacksmith() == 'The Yellow Dragon!'){
            $protection + 1000;
        }
        return $protection;
    }

}


class Fight{

    public function __construct(aArmor $armor){
        if($armor->protection() > 100){
            echo 'You won!';
        }
    }

}

$battle = new Fight(new ChineseArmor);
";i:1;s:3:"php";i:2;N;}i:2;i:16660;}i:281;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:17901;}i:282;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:27:"Model View Controller (MVC)";i:1;i:2;i:2;i:17901;}i:2;i:17901;}i:283;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:2;}i:2;i:17901;}i:284;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:17901;}i:285;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:406:"The model view controller pattern is an architecture pattern that separates software applications into three areas. The model is the business logic and application data. The view is the presentational user interface of the data. The controller is what binds the model's data to the view inputs, and it also routs user input requests to the appropriate interactions. The central ideas of the MVC pattern is ";}i:2;i:17942;}i:286;a:3:{i:0;s:13:"interwikilink";i:1;a:4:{i:0;s:13:"wp>Code reuse";i:1;s:17:"code re-usability";i:2;s:2:"wp";i:3;s:10:"Code reuse";}i:2;i:18348;}i:287;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:2:", ";}i:2;i:18383;}i:288;a:3:{i:0;s:13:"interwikilink";i:1;a:4:{i:0;s:25:"wp>Separation of concerns";i:1;s:22:"separation of concerns";i:2;s:2:"wp";i:3;s:22:"Separation of concerns";}i:2;i:18385;}i:289;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:5:" and ";}i:2;i:18437;}i:290;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:96:"http://www.slideshare.net/damiansromek/thin-controllers-fat-models-proper-code-structure-for-mvc";i:1;s:29:"thin controllers - fat models";}i:2;i:18442;}i:291;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:".";}i:2;i:18572;}i:292;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:18573;}i:293;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:18573;}i:294;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:44:"MVC architecture is usually placed behind a ";}i:2;i:18575;}i:295;a:3:{i:0;s:13:"interwikilink";i:1;a:4:{i:0;s:27:"wp>Front Controller pattern";i:1;s:16:"front controller";i:2;s:2:"wp";i:3;s:24:"Front Controller pattern";}i:2;i:18619;}i:296;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:317:". These front controllers essentially establish the workflow and middleware for every request and response. The front controller may include a router, or the router may be part of the middleware. The router routs requests to the appropriate controller which then calls upon its models and views to produce a response.";}i:2;i:18667;}i:297;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:18984;}i:298;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:18984;}i:299;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:333:"Codeigniter is an MVC framework. The code you write is separated into models, views and controllers. We also further separate our code into libraries, packages and helpers, but that's for later. Codeigniter also includes a front controller which is the index.php at your project root. Codeigniter automatically routs requests in the ";}i:2;i:18986;}i:300;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"URL";}i:2;i:19319;}i:301;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:102:" to the controller with a matching name, however this can be customised in the routes.php. The Apache ";}i:2;i:19322;}i:302;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:4:"HTTP";}i:2;i:19424;}i:303;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:281:" server actually sends all requests to the index.php, the index.php then calls upon the rest of the architecture and produces a response. No other files in Codeigniter is accessed directly. This gives an easy way to hook into the request and response flow and introduce middleware.";}i:2;i:19428;}i:304;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:19709;}i:305;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:19709;}i:306;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:376:"Note that there is a many to many relationship between models, controllers and views. One controller may call upon multiple models and multiple views. Models don't call controllers or views, and views don't call controllers or models. They simply return data to the controller that called them. Therefore models and views can have multiple controllers that interact with them.";}i:2;i:19711;}i:307;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:20087;}i:308;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:20087;}i:309;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:334:"Interfaces, abstracts and further inheritance can be applied to Codeigniter's models, views and controllers. However this practice is uncommon. I recommend you to use only these features in libraries or packages, and follow Codeigniter extension suggestions in their userguide if you need customised functionality in the architecture.";}i:2;i:20089;}i:310;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:20423;}i:311;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:20423;}i:312;a:3:{i:0;s:13:"internalmedia";i:1;a:7:{i:0;s:45:":web_application_development:appflowchart.gif";i:1;s:0:"";i:2;s:6:"center";i:3;N;i:4;N;i:5;s:5:"cache";i:6;s:7:"details";}i:2;i:20425;}i:313;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:20477;}i:314;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:20479;}i:315;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:5:"Model";i:1;i:3;i:2;i:20479;}i:2;i:20479;}i:316;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:20479;}i:317;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:20479;}i:318;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:690:"Your models is where your business logic and application data resides. Your models should contain the bulk of your operations and processing. Models also contain accessors and mutators to your database if any. It's important to understand that models aren't just for storing state, but also the operations on the behaviour of your system. If you were writing a Chess game, not only would the storage of the chess board state be via the model, but also the rule checking algorithms and artificial intelligence. Once this business logic finds itself needed in other areas, that's when you abstract it into its own package or library. That way it can be called and executed in multiple models.";}i:2;i:20496;}i:319;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:21186;}i:320;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:21186;}i:321;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:114:"Models return processed data to the controller. Models don't need to know where it gets called, just that it does.";}i:2;i:21188;}i:322;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:21302;}i:323;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:21302;}i:324;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:417:"Models can also perform data validation, but data validation that involves simply input filtering for security purposes should be left to the controller, because that's metaphorically the gate to your software fortress. However if the data validation requires business logic to be performed, such as checks against the database, then the it should be placed in the model. However opinions may vary on this suggestion.";}i:2;i:21304;}i:325;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:21721;}i:326;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:21721;}i:327;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:26:"Example Codeigniter Model:";}i:2;i:21723;}i:328;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:21749;}i:329;a:3:{i:0;s:4:"code";i:1;a:3:{i:0;s:1189:"
//by convention we suffix the model with _model and all models extend the CI_Model from Codeigniter
class Blog_model extends CI_Model {

    public function __construct(){
        //when the model gets loaded into the controller, it calls the parent __construct method. This __construct method is actually from CI_Model. This way when we instantiate this object, we also instantiate the parent.
        
        //CI_Model's __construct() is not implicitly called because we method overrided it with this child class's __construct. Therefore in order to setup the parent's class, we need to call it with parent::__construct(). If this model did not have __construct, then the parent's __construct would be automatically called.
        parent::__construct();
        
        //here is where you load any dependencies as well, either through CI's loader or through autoloading
        
    }
    
    public function get_article($id){
        
        //code to get an article out of the database using $id
        
    }
    
    public function add_article($data){
    
        //code to add the article data to the database
    
    }
    
    //more accessors and mutators here...

}
";i:1;s:3:"php";i:2;N;}i:2;i:21756;}i:330;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:22959;}i:331;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:4:"CRUD";i:1;i:4;i:2;i:22959;}i:2;i:22959;}i:332;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:4;}i:2;i:22959;}i:333;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:22959;}i:334;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:15:"CRUD refers to ";}i:2;i:22973;}i:335;a:3:{i:0;s:13:"interwikilink";i:1;a:4:{i:0;s:34:"wp>Create, read, update and delete";i:1;s:29:"Create Read Update and Delete";i:2;s:2:"wp";i:3;s:31:"Create, read, update and delete";}i:2;i:22988;}i:336;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:104:". These are the four basic functions of any model when interacting with a database. You should read the ";}i:2;i:23056;}i:337;a:3:{i:0;s:9:"locallink";i:1;a:2:{i:0;s:8:"database";i:1;s:16:"Database Section";}i:2;i:23160;}i:338;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:222:" before proceeding. If you're using models to interface with a database, the convention is to name your model after the table name you're using. In each model class, there will be four public methods corresponding to CRUD.";}i:2;i:23190;}i:339;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:23412;}i:340;a:3:{i:0;s:4:"file";i:1;a:3:{i:0;s:2073:"

class User_model extends CI_Model{

    public function __construct(){
    
        //this will become available as $this->db..etc
        $this->load->database();
    
    }
    
    //you can name these functions using other terms or even terms closer to HTTP if you prefer
    
    //the parameters here would be passed in from the controller, they would be acquired from the input library
    //we could have as separate parameters, or a single array object
    public function create($username, $password, $email){
        
        $data = array(
            'username' => $username, //perhaps make it lowercase?
            'password' => password_hash($password), //password_hash is not a defined function anywhere yet, I'm setting here so you remember that passwords need to be hashed and salted before inputting it into the database. See the security section on passwords. THIS IS IMPORTANT!
            'email'    => $email,
        );
        
        $query = $this->db->insert('user', $data); 
        
        if(!$query){
        
            //some error occurred? We should log the database error
            //the below only works if $db['default']['db_debug'] = FALSE in the database configuration (so that it doesn't display straight to the user
            
            $msg = $this->db->_error_message();
            $num = $this->db->_error_number();
            $last_query = $this->db->last_query();
            
            log_message('error', 'Problem Inserting to user table: ' . $msg . ' (' . $num . '), using this query: "' . $last_query . '"'); 
            
            return false;
            
        }
        
        //it worked! return the last insert_id!
        return $this->db->insert_id();
    
    }
    
    public function read($id){
    
    }
    
    public function update($id, $data){
    
    }
    
    public function delete($id){
    
    }
    
    //the above are not the only methods you would have, but are just the bare minimum, perhaps you need a method that gets all the listings, not just one entry...

}

";i:1;s:3:"php";i:2;s:14:"user_model.php";}i:2;i:23419;}i:341;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:23419;}i:342;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:133:"You may notice eventually that CRUD is simply one of the many configurations of these four operations at different abstraction levels";}i:2;i:25521;}i:343;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:25655;}i:344;a:3:{i:0;s:10:"table_open";i:1;a:3:{i:0;i:3;i:1;i:5;i:2;i:25656;}i:2;i:25655;}i:345;a:3:{i:0;s:13:"tablerow_open";i:1;a:0:{}i:2;i:25655;}i:346;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;s:4:"left";i:2;i:1;}i:2;i:25655;}i:347;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:9:"         ";}i:2;i:25657;}i:348;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:25666;}i:349;a:3:{i:0;s:16:"tableheader_open";i:1;a:3:{i:0;i:1;i:1;s:4:"left";i:2;i:1;}i:2;i:25666;}i:350;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:" ";}i:2;i:25667;}i:351;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"SQL";}i:2;i:25668;}i:352;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:13:"             ";}i:2;i:25671;}i:353;a:3:{i:0;s:17:"tableheader_close";i:1;a:0:{}i:2;i:25684;}i:354;a:3:{i:0;s:16:"tableheader_open";i:1;a:3:{i:0;i:1;i:1;s:4:"left";i:2;i:1;}i:2;i:25684;}i:355;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:" ";}i:2;i:25685;}i:356;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:4:"HTTP";}i:2;i:25686;}i:357;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:15:" (RESTful)     ";}i:2;i:25690;}i:358;a:3:{i:0;s:17:"tableheader_close";i:1;a:0:{}i:2;i:25705;}i:359;a:3:{i:0;s:14:"tablerow_close";i:1;a:0:{}i:2;i:25706;}i:360;a:3:{i:0;s:13:"tablerow_open";i:1;a:0:{}i:2;i:25706;}i:361;a:3:{i:0;s:16:"tableheader_open";i:1;a:3:{i:0;i:1;i:1;s:4:"left";i:2;i:1;}i:2;i:25706;}i:362;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:9:" Create  ";}i:2;i:25708;}i:363;a:3:{i:0;s:17:"tableheader_close";i:1;a:0:{}i:2;i:25717;}i:364;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;s:4:"left";i:2;i:1;}i:2;i:25717;}i:365;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:17:" INSERT          ";}i:2;i:25718;}i:366;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:25735;}i:367;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;s:4:"left";i:2;i:1;}i:2;i:25735;}i:368;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:20:" POST               ";}i:2;i:25736;}i:369;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:25756;}i:370;a:3:{i:0;s:14:"tablerow_close";i:1;a:0:{}i:2;i:25757;}i:371;a:3:{i:0;s:13:"tablerow_open";i:1;a:0:{}i:2;i:25757;}i:372;a:3:{i:0;s:16:"tableheader_open";i:1;a:3:{i:0;i:1;i:1;s:4:"left";i:2;i:1;}i:2;i:25757;}i:373;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:9:" Read    ";}i:2;i:25759;}i:374;a:3:{i:0;s:17:"tableheader_close";i:1;a:0:{}i:2;i:25768;}i:375;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;s:4:"left";i:2;i:1;}i:2;i:25768;}i:376;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:17:" SELECT          ";}i:2;i:25769;}i:377;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:25786;}i:378;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;s:4:"left";i:2;i:1;}i:2;i:25786;}i:379;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:20:" GET                ";}i:2;i:25787;}i:380;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:25807;}i:381;a:3:{i:0;s:14:"tablerow_close";i:1;a:0:{}i:2;i:25808;}i:382;a:3:{i:0;s:13:"tablerow_open";i:1;a:0:{}i:2;i:25808;}i:383;a:3:{i:0;s:16:"tableheader_open";i:1;a:3:{i:0;i:1;i:1;s:4:"left";i:2;i:1;}i:2;i:25808;}i:384;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:9:" Update  ";}i:2;i:25810;}i:385;a:3:{i:0;s:17:"tableheader_close";i:1;a:0:{}i:2;i:25819;}i:386;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;s:4:"left";i:2;i:1;}i:2;i:25819;}i:387;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:17:" UPDATE          ";}i:2;i:25820;}i:388;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:25837;}i:389;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;s:4:"left";i:2;i:1;}i:2;i:25837;}i:390;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:20:" PUT                ";}i:2;i:25838;}i:391;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:25858;}i:392;a:3:{i:0;s:14:"tablerow_close";i:1;a:0:{}i:2;i:25859;}i:393;a:3:{i:0;s:13:"tablerow_open";i:1;a:0:{}i:2;i:25859;}i:394;a:3:{i:0;s:16:"tableheader_open";i:1;a:3:{i:0;i:1;i:1;s:4:"left";i:2;i:1;}i:2;i:25859;}i:395;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:9:" Delete  ";}i:2;i:25861;}i:396;a:3:{i:0;s:17:"tableheader_close";i:1;a:0:{}i:2;i:25870;}i:397;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;s:4:"left";i:2;i:1;}i:2;i:25870;}i:398;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:17:" DELETE          ";}i:2;i:25871;}i:399;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:25888;}i:400;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;s:4:"left";i:2;i:1;}i:2;i:25888;}i:401;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:20:" DELETE             ";}i:2;i:25889;}i:402;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:25909;}i:403;a:3:{i:0;s:14:"tablerow_close";i:1;a:0:{}i:2;i:25910;}i:404;a:3:{i:0;s:11:"table_close";i:1;a:1:{i:0;i:25910;}i:2;i:25910;}i:405;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:25911;}i:406;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:4:"View";i:1;i:3;i:2;i:25911;}i:2;i:25911;}i:407;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:25911;}i:408;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:25911;}i:409;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:64:"Your view is where your user interface code lies. Remember that ";}i:2;i:25927;}i:410;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:4:"HTML";}i:2;i:25991;}i:411;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:5:" and ";}i:2;i:25995;}i:412;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"CSS";}i:2;i:26000;}i:413;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:59:" markup you did while in the Web Design section? Well that ";}i:2;i:26003;}i:414;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:4:"HTML";}i:2;i:26062;}i:415;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:71:" markup is going to be cutup into independent layouts in the view. The ";}i:2;i:26066;}i:416;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"CSS";}i:2;i:26137;}i:417;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:98:", Javascript and other assets actually remain where they are. The view is also where we implement ";}i:2;i:26140;}i:418;a:3:{i:0;s:9:"locallink";i:1;a:2:{i:0;s:10:"templating";i:1;s:10:"templating";}i:2;i:26238;}i:419;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:322:", which is the practice of modularising user interfaces into reusable components so they can be swapped in and out with other user interface elements. In order to pull in dynamic data, we actually place variables inside the views which will be injected from the controller after the controller has the data from the model.";}i:2;i:26264;}i:420;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:26586;}i:421;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:26586;}i:422;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:77:"By convention we suffix views files with _view. So any file names would like ";}i:2;i:26588;}i:423;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:26665;}i:424;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:13:"home_view.php";}i:2;i:26667;}i:425;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:26680;}i:426;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:".";}i:2;i:26682;}i:427;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:26683;}i:428;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:26683;}i:429;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:25:"Example Codeigniter View:";}i:2;i:26685;}i:430;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:26710;}i:431;a:3:{i:0;s:4:"code";i:1;a:3:{i:0;s:194:"
<?php defined('BASEPATH') OR exit('No direct script access allowed'); ?>
<html>
    <head>
        <title>Example Page!</title>
    </head>
    <body>
        <p>Hello!</p>
    </body>
</html>
";i:1;s:11:"html4strict";i:2;N;}i:2;i:26717;}i:432;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:26925;}i:433;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:10:"Controller";i:1;i:3;i:2;i:26925;}i:2;i:26925;}i:434;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:26925;}i:435;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:26925;}i:436;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:120:"The controller is the manager of the model and view. In Codeigniter the name of the controller corresponds to the first ";}i:2;i:26947;}i:437;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"URL";}i:2;i:27067;}i:438;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:21:" segment. The second ";}i:2;i:27070;}i:439;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"URL";}i:2;i:27091;}i:440;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:60:" segment is executed as a corresponding method. Any further ";}i:2;i:27094;}i:441;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"URL";}i:2;i:27154;}i:442;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:333:" segments are passed the methods as parameters. Controllers are meant to be thin and simply call upon models and pass in parameters, afterwards it binds the returned data to the view and at the same time responds back to the client with the finished data. The only business logic that controllers should have is any input filtering, ";}i:2;i:27157;}i:443;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:4:"HTTP";}i:2;i:27490;}i:444;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:33:" routing tasks, and view binding.";}i:2;i:27494;}i:445;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:27527;}i:446;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:27527;}i:447;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:31:"Example Codeigniter Controller:";}i:2;i:27529;}i:448;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:27560;}i:449;a:3:{i:0;s:4:"code";i:1;a:3:{i:0;s:1513:"
//This Home class corresponds to home.php as a filename, home then becomes the first URL segment as http://example.com/index.php/home or http://example.com/home (if using URL rewriting via Apache .htaccess)
class Home extends CI_Controller {

    //you can build up your view binding by creating a privately scoped member array, when you're ready to build up the view, just append values onto this array and pass this to the view. By creating this independent from any methods, the view data is then abstracted and can be added to from multiple methods
    private $_view_data = array();

    //since it is a class that extends the CI_Controller, we still have a __construct that is called as soon as it is initiated
    public function __construct(){
    
        parent::__construct();
        
        //load commonly used dependencies using CI, you would not dependency inject using controllers, because you don't control the calling of controllers
    
    }
    
    //this is the actual method that would be called if there was no second URL segment, it can also be explicitly called by http://example.com/home/index
    //to be callable by URL, they would have to be scoped at public
    public function index(){
    
        //load models and do processing
        //load views and return the response
        $this->load->view('home_view', $this->_view_data);
    
    }
    
    //you can access this via http://example.com/about/2, the 2 becomes the id
    public function about($id){
    
    }
	
}
";i:1;s:3:"php";i:2;N;}i:2;i:27567;}i:450;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:27567;}i:451;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:40:"When processing form inputs, instead of ";}i:2;i:29094;}i:452;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:73:"http://ellislab.com/codeigniter/user-guide/libraries/form_validation.html";i:1;s:61:"placing all the validation rules in your controller's methods";}i:2;i:29134;}i:453;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:72:", keep them in a separate configuration file. Refer to this tutorial on ";}i:2;i:29273;}i:454;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:66:"http://chris-schmitz.com/cleaning-up-your-codeigniter-controllers/";i:1;s:40:"Cleaning up your Codeigniter Controllers";}i:2;i:29345;}i:455;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:23:" to see how to do this:";}i:2;i:29456;}i:456;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:29479;}i:457;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:29479;}i:458;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:360:"There'll be many developers who argue that your form inputs should be validated in your model. However Codeigniter's form validation library doesn't work from the model, so we have to place in our controller. But by following the technique of placing form rules in an external config file, this makes form validation much easier and thinner in our controllers.";}i:2;i:29481;}i:459;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:29842;}i:460;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:29842;}i:461;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:10:"Templating";i:1;i:2;i:2;i:29842;}i:2;i:29842;}i:462;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:2;}i:2;i:29842;}i:463;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:29842;}i:464;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:393:"Templating is the process of using layouts and partials to form complete view user interfaces. In following the separation of concerns, templates should contain as little business logic as possible. It's only there to bring together user interface elements and have dynamic data inserted into them. The problem comes when we want to have reusable partial templates and shared layout templates.";}i:2;i:29866;}i:465;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:30259;}i:466;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:30259;}i:467;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:427:"Think of layouts as a template file that specifies the header, footer, sidebar and any other elements that are shared across web pages and hardly change. A large web application may have multiple layouts, one for the blog, one for the administration panel, one for the home page. Each of which may have different headers or lack/include a sidebar. Layouts are the master templates, the templates that specifies other templates.";}i:2;i:30261;}i:468;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:30688;}i:469;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:30688;}i:470;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:327:"Think of partials as reusable templates across many different areas. An example would be a table row that may get used in different tables in different pages in different layouts. Partials are the grand children templates, templates that don't specify any other template and doesn't know which parent will pick it up to use it.";}i:2;i:30690;}i:471;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:31017;}i:472;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:31017;}i:473;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:47:"There are a number of templating libraries for ";}i:2;i:31019;}i:474;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"PHP";}i:2;i:31066;}i:475;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:230:", some of them catered towards Codeigniter, and others are for generic use. Many of them provide their own domain specific language. You can choose to go with third party solutions, however I like to roll my own simpler solution. ";}i:2;i:31069;}i:476;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"PHP";}i:2;i:31299;}i:477;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:37:" after all was a templating language.";}i:2;i:31302;}i:478;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:31339;}i:479;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:31339;}i:480;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:57:"So I present to you the static helper class CiTemplating:";}i:2;i:31341;}i:481;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:31399;}i:482;a:3:{i:0;s:10:"listu_open";i:1;a:0:{}i:2;i:31399;}i:483;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:31399;}i:484;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:31399;}i:485;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:" ";}i:2;i:31403;}i:486;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:42:"https://github.com/Polycademy/CiTemplating";i:1;s:12:"CiTemplating";}i:2;i:31404;}i:487;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:31463;}i:488;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:31463;}i:489;a:3:{i:0;s:11:"listu_close";i:1;a:0:{}i:2;i:31463;}i:490;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:31463;}i:491;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:286:"You can install it via composer (follow the instructions on the README) and it will be autoloaded, allowing you to call it like a global function without the need of instantiating it or using namespaces. Namespaces couldn't be used, due to the nature of templating, it would require an ";}i:2;i:31465;}i:492;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:31751;}i:493;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:3:"use";}i:2;i:31753;}i:494;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:31756;}i:495;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:104:" namespace import, which would go against the concept of minimal logic views. Please see the section on ";}i:2;i:31758;}i:496;a:3:{i:0;s:9:"locallink";i:1;a:2:{i:0;s:11:"autoloading";i:1;s:11:"Autoloading";}i:2;i:31862;}i:497;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:61:" to find how to integrate autoloading magic into Codeigniter.";}i:2;i:31890;}i:498;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:31951;}i:499;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:31951;}i:500;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:58:"To use this library we need to establish some conventions:";}i:2;i:31953;}i:501;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:32012;}i:502;a:3:{i:0;s:10:"listu_open";i:1;a:0:{}i:2;i:32012;}i:503;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:32012;}i:504;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:32012;}i:505;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:131:" Each controller you have should have a corresponding folder with a matching name in the view folder. Therefore a controller named ";}i:2;i:32016;}i:506;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:32147;}i:507;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:8:"blog.php";}i:2;i:32149;}i:508;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:32157;}i:509;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:24:" should have the folder ";}i:2;i:32159;}i:510;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:32183;}i:511;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:10:"views/blog";}i:2;i:32185;}i:512;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:32195;}i:513;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:".";}i:2;i:32197;}i:514;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:32198;}i:515;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:32198;}i:516;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:32198;}i:517;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:32198;}i:518;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:149:" Each public method in a controller should have their own view with a matching name stored in their view controller folder. Therefore the controller ";}i:2;i:32202;}i:519;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:32351;}i:520;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:8:"blog.php";}i:2;i:32353;}i:521;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:32361;}i:522;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:6:" with ";}i:2;i:32363;}i:523;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:32369;}i:524;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:8:"articles";}i:2;i:32371;}i:525;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:32379;}i:526;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:41:" as a public method should have the view ";}i:2;i:32381;}i:527;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:32422;}i:528;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:28:"views/blog/articles_view.php";}i:2;i:32424;}i:529;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:32452;}i:530;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:".";}i:2;i:32454;}i:531;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:32455;}i:532;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:32455;}i:533;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:32455;}i:534;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:32455;}i:535;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:28:" Partials are appended with ";}i:2;i:32459;}i:536;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:32487;}i:537;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:8:"_partial";}i:2;i:32489;}i:538;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:32497;}i:539;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:48:", and are stored in the partials folder such as ";}i:2;i:32499;}i:540;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:32547;}i:541;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:31:"views/partials/rows_partial.php";}i:2;i:32549;}i:542;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:32580;}i:543;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:".";}i:2;i:32582;}i:544;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:32583;}i:545;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:32583;}i:546;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:32583;}i:547;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:32583;}i:548;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:27:" Layouts are appended with ";}i:2;i:32587;}i:549;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:32614;}i:550;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:8:"_layouts";}i:2;i:32616;}i:551;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:32624;}i:552;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:47:", and are stored in the layouts folder such as ";}i:2;i:32626;}i:553;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:32673;}i:554;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:29:"views/layouts/main_layout.php";}i:2;i:32675;}i:555;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:32704;}i:556;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:".";}i:2;i:32706;}i:557;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:32707;}i:558;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:32707;}i:559;a:3:{i:0;s:11:"listu_close";i:1;a:0:{}i:2;i:32707;}i:560;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:32707;}i:561;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:49:"Your views directory can start to look like this:";}i:2;i:32709;}i:562;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:32759;}i:563;a:3:{i:0;s:12:"preformatted";i:1;a:1:{i:0;s:313:"views
  |
  |----layouts
  |       |
  |       |----main_layout.php
  |       |----admin_layout.php
  |       |----json_layout.php
  |
  |----partials
  |       |
  |       |----rows_partial.php
  |
  |----home
  |       |
  |       |----index_view.php
  |
  |----blog
          |
          |----articles_view.php";}i:2;i:32759;}i:564;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:33112;}i:565;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:7:"Layouts";i:1;i:3;i:2;i:33112;}i:2;i:33112;}i:566;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:33112;}i:567;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:33112;}i:568;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:45:"The CiTemplate static class provide a static ";}i:2;i:33131;}i:569;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:33176;}i:570;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:7:"compose";}i:2;i:33178;}i:571;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:33185;}i:572;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:103:" method allowing you to define both views and their corresponding layouts. All layouts should inject a ";}i:2;i:33187;}i:573;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:33290;}i:574;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:6:"$yield";}i:2;i:33292;}i:575;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:33298;}i:576;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:24:" variable. When you run ";}i:2;i:33300;}i:577;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:33324;}i:578;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:19:"Template::compose()";}i:2;i:33326;}i:579;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:33345;}i:580;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:209:", it will first sent any view data to the specified view, and return the compiled template, before dynamically adding it to the view data array and injecting it into the layout. For example, you should have a ";}i:2;i:33347;}i:581;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:33556;}i:582;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:18:"default_layout.php";}i:2;i:33558;}i:583;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:33576;}i:584;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:18:" that is like this";}i:2;i:33578;}i:585;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:33596;}i:586;a:3:{i:0;s:4:"file";i:1;a:3:{i:0;s:174:"
<?php defined('BASEPATH') OR exit('No direct script access allowed'); ?>
<? Template::partial('header', $header) ?>
<?= $yield ?>
<? Template::partial('footer', $footer) ?>
";i:1;s:3:"php";i:2;s:18:"default_layout.php";}i:2;i:33603;}i:587;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:33603;}i:588;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:91:"The corresponding call to this layout would be something like, if it was called inside the ";}i:2;i:33810;}i:589;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:33901;}i:590;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:7:"index()";}i:2;i:33903;}i:591;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:33910;}i:592;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:25:" method of a controller..";}i:2;i:33912;}i:593;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:33937;}i:594;a:3:{i:0;s:4:"code";i:1;a:3:{i:0;s:156:"
$view_data = array(
    'header' => array(),
    'footer' => array(),
    'data' => 'data_value',
    //... etc
);
Template::compose('index', $view_data);
";i:1;s:3:"php";i:2;N;}i:2;i:33944;}i:595;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:33944;}i:596;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:4:"The ";}i:2;i:34114;}i:597;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:34118;}i:598;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:20:"$view_data['header']";}i:2;i:34120;}i:599;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:34140;}i:600;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:5:" and ";}i:2;i:34142;}i:601;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:34147;}i:602;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:20:"$view_data['footer']";}i:2;i:34149;}i:603;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:34169;}i:604;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:53:" would be be injected into the partial parameters of ";}i:2;i:34171;}i:605;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:34224;}i:606;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:7:"$header";}i:2;i:34226;}i:607;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:34233;}i:608;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:5:" and ";}i:2;i:34235;}i:609;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:34240;}i:610;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:7:"$footer";}i:2;i:34242;}i:611;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:34249;}i:612;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:91:" in the layout. The rest of the properties in the view data array would be passed into the ";}i:2;i:34251;}i:613;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:34342;}i:614;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:14:"index_view.php";}i:2;i:34344;}i:615;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:34358;}i:616;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:138:", and the returned output would automatically be injected into the $yield. This obviously means you should not use have a property key of ";}i:2;i:34360;}i:617;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:34498;}i:618;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:19:"$view_data['yield']";}i:2;i:34500;}i:619;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:34519;}i:620;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:65:" when defining your view data array, as it would get overwritten.";}i:2;i:34521;}i:621;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:34586;}i:622;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:34586;}i:623;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:102:"The compose method also has a third parameter that specifies the layout file to use. By default it is ";}i:2;i:34588;}i:624;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:34690;}i:625;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:7:"default";}i:2;i:34692;}i:626;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:34699;}i:627;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:58:". The compose method allows you to use full names such as ";}i:2;i:34701;}i:628;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:34759;}i:629;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:62:"Template::compose('index_view', $view_data, 'default_layout');";}i:2;i:34761;}i:630;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:34823;}i:631;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:57:", but it isn't necessary as it will automatically append ";}i:2;i:34825;}i:632;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:34882;}i:633;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:5:"_view";}i:2;i:34884;}i:634;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:34889;}i:635;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:4:" or ";}i:2;i:34891;}i:636;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:34895;}i:637;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:7:"_layout";}i:2;i:34897;}i:638;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:34904;}i:639;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:80:" to the end of the parameter if it doesn't have it. The same goes with partials.";}i:2;i:34906;}i:640;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:34986;}i:641;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:34986;}i:642;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:77:"A cool thing you can do with this method is to specify a JSON layout like so:";}i:2;i:34988;}i:643;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:35065;}i:644;a:3:{i:0;s:4:"file";i:1;a:3:{i:0;s:181:"
<?php defined('BASEPATH') OR exit('No direct script access allowed');

header('Content-type: application/json');

echo json_encode($yield, JSON_NUMERIC_CHECK | JSON_FORCE_OBJECT);
";i:1;s:3:"php";i:2;s:15:"json_layout.php";}i:2;i:35072;}i:645;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:35072;}i:646;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:24:"You would call this via:";}i:2;i:35283;}i:647;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:35307;}i:648;a:3:{i:0;s:4:"code";i:1;a:3:{i:0;s:166:"
//we pass false into the view, because don't need one to pass in straight json_data, json_data has to be an array too!
Template::compose(false, $json_data, 'json');
";i:1;s:3:"php";i:2;N;}i:2;i:35314;}i:649;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:35314;}i:650;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:73:"To understand how the compose method works, look into the source code of ";}i:2;i:35494;}i:651;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:35567;}i:652;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:12:"Template.php";}i:2;i:35569;}i:653;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:35581;}i:654;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:23:". It's well documented.";}i:2;i:35583;}i:655;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:35607;}i:656;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:35607;}i:657;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:8:"Partials";i:1;i:3;i:2;i:35607;}i:2;i:35607;}i:658;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:35607;}i:659;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:35607;}i:660;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:485:"Partials allow you define and call in reusable templates within templates. They also allow you to loop through results and repeat a compiled template with minimal logic. Partials are stored in the partials folder. Although it is possible to modify the code to allow partials anywhere in the view directory, I found it more appropriate and simpler to specify that all of them must be in one directory. Do note that it is possible to specify subdirectories in the partials folder though.";}i:2;i:35627;}i:661;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:36112;}i:662;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:36112;}i:663;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:50:"Partials are called within template views like so:";}i:2;i:36114;}i:664;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:36164;}i:665;a:3:{i:0;s:4:"code";i:1;a:3:{i:0;s:171:"
//first parameter is the name of the partial with or without '_partial' appended to it, second parameter is the variable to pass in
Template::partial('header', $header);
";i:1;s:3:"php";i:2;N;}i:2;i:36171;}i:666;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:36171;}i:667;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:47:"To loop through results you would need to pass ";}i:2;i:36356;}i:668;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:36403;}i:669;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:4:"true";}i:2;i:36405;}i:670;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:36409;}i:671;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:42:" to the third parameter in your view file.";}i:2;i:36411;}i:672;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:36453;}i:673;a:3:{i:0;s:4:"code";i:1;a:3:{i:0;s:44:"
Template::partial('row', $row_data, true);
";i:1;s:3:"php";i:2;N;}i:2;i:36460;}i:674;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:36460;}i:675;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:61:"This would call in a partial and attempt the iterate through ";}i:2;i:36518;}i:676;a:3:{i:0;s:13:"emphasis_open";i:1;a:0:{}i:2;i:36579;}i:677;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:6:"values";}i:2;i:36581;}i:678;a:3:{i:0;s:14:"emphasis_close";i:1;a:0:{}i:2;i:36587;}i:679;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:8:" of the ";}i:2;i:36589;}i:680;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:36597;}i:681;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:9:"$row_data";}i:2;i:36599;}i:682;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:36608;}i:683;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:56:". The values are by default specified in the partial as ";}i:2;i:36610;}i:684;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:36666;}i:685;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:4:"$row";}i:2;i:36668;}i:686;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:36672;}i:687;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:62:" variables. It is important to understand this. When you call ";}i:2;i:36674;}i:688;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:36736;}i:689;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:19:"Template::compose()";}i:2;i:36738;}i:690;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:36757;}i:691;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:149:" to a view that has a looped partial, the view data array you pass in should have a property of which its key name matches the injected parameter of ";}i:2;i:36759;}i:692;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:36908;}i:693;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:17:"Template::partial";}i:2;i:36910;}i:694;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:36927;}i:695;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:100:". This property needs to also be an array, and its values are what is iterated over and stored in a ";}i:2;i:36929;}i:696;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:37029;}i:697;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:4:"$row";}i:2;i:37031;}i:698;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:37035;}i:699;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:39:" variable. The partial can simply call ";}i:2;i:37037;}i:700;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:37076;}i:701;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:4:"$row";}i:2;i:37078;}i:702;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:37082;}i:703;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:68:" if it's a scalar value, but if you need multiple properties in the ";}i:2;i:37084;}i:704;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:37152;}i:705;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:4:"$row";}i:2;i:37154;}i:706;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:37158;}i:707;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:69:" variable, then the values that are iterated should also be an array.";}i:2;i:37160;}i:708;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:37229;}i:709;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:37229;}i:710;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:44:"Imagine you had a controller code like this:";}i:2;i:37231;}i:711;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:37275;}i:712;a:3:{i:0;s:4:"code";i:1;a:3:{i:0;s:165:"
$view_data = array(
    'row_data' => array(
        'First Row',
        'Second Row',
        'Third Row',
    ),
);

Template::compose('table', $view_data);    
";i:1;s:3:"php";i:2;N;}i:2;i:37282;}i:713;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:37282;}i:714;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:23:"Then the view could be:";}i:2;i:37461;}i:715;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:37484;}i:716;a:3:{i:0;s:4:"code";i:1;a:3:{i:0;s:99:"
<table>
    <tbody>
        <? Template::partial('row', $row_data, true) ?>
    </tbody>
</table>
";i:1;s:3:"php";i:2;N;}i:2;i:37491;}i:717;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:37491;}i:718;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:26:"Then the partial would be:";}i:2;i:37604;}i:719;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:37630;}i:720;a:3:{i:0;s:4:"code";i:1;a:3:{i:0;s:37:"
<tr>
    <td><?= $row ?></td>
</tr>
";i:1;s:3:"php";i:2;N;}i:2;i:37637;}i:721;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:37637;}i:722;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:12:"Each of the ";}i:2;i:37688;}i:723;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:37700;}i:724;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:4:"$row";}i:2;i:37702;}i:725;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:37706;}i:726;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:36:" would contain the scalar string of ";}i:2;i:37708;}i:727;a:3:{i:0;s:18:"doublequoteopening";i:1;a:0:{}i:2;i:37744;}i:728;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:9:"First Row";}i:2;i:37745;}i:729;a:3:{i:0;s:18:"doublequoteclosing";i:1;a:0:{}i:2;i:37754;}i:730;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:7:", then ";}i:2;i:37755;}i:731;a:3:{i:0;s:18:"doublequoteopening";i:1;a:0:{}i:2;i:37762;}i:732;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:10:"Second Row";}i:2;i:37763;}i:733;a:3:{i:0;s:18:"doublequoteclosing";i:1;a:0:{}i:2;i:37773;}i:734;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:14:", and finally ";}i:2;i:37774;}i:735;a:3:{i:0;s:18:"doublequoteopening";i:1;a:0:{}i:2;i:37788;}i:736;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:9:"Third Row";}i:2;i:37789;}i:737;a:3:{i:0;s:18:"doublequoteclosing";i:1;a:0:{}i:2;i:37798;}i:738;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:".";}i:2;i:37799;}i:739;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:37800;}i:740;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:37800;}i:741;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:16:"If I wanted the ";}i:2;i:37802;}i:742;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:37818;}i:743;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:4:"$row";}i:2;i:37820;}i:744;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:37824;}i:745;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:50:" to have multiple parameters, then I would change ";}i:2;i:37826;}i:746;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:37876;}i:747;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:9:"$row_data";}i:2;i:37878;}i:748;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:37887;}i:749;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:26:" to be an array of arrays.";}i:2;i:37889;}i:750;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:37915;}i:751;a:3:{i:0;s:4:"code";i:1;a:3:{i:0;s:370:"
$view_data = array(
    'row_data' => array(
        array(
            'name' => 'Roger',
            'id' => '4'
        ),
        array(
            'name' => 'Dave',
            'id' => '5'
        ),
    ),
);

Template::compose('table', $view_data);

//and this would be in the partial

<tr>
    <td><?= $row['name'] ?></td>
    <td><?= $row['id'] ?></td>
</tr>
";i:1;s:3:"php";i:2;N;}i:2;i:37922;}i:752;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:37922;}i:753;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:44:"As you can see array keys don't matter here.";}i:2;i:38306;}i:754;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:38350;}i:755;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:38350;}i:756;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:186:"By default they automatically echo their data as soon as they are called. However you can also specify that they return data as a variable by setting the fourth buffer parameter to true.";}i:2;i:38352;}i:757;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:38538;}i:758;a:3:{i:0;s:4:"code";i:1;a:3:{i:0;s:67:"
$partial_compiled = Template::partial('row', $data, false, true);
";i:1;s:3:"php";i:2;N;}i:2;i:38545;}i:759;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:38625;}i:760;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:15:"Using Libraries";i:1;i:2;i:2;i:38625;}i:2;i:38625;}i:761;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:2;}i:2;i:38625;}i:762;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:38625;}i:763;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:602:"One the key concepts of OOP is reusing code. Libraries are the primary way of reusing and sharing code. Whereas code in the MVC refers to a specific implementation of a particular web application. Libraries are created independently of what the web application does. Libraries can be a list of procedural functions, however these are usually called helper functions, and since we're using OOP, we should avoid using function lists which are hard to test, maintain, extend and impossible to autoload. Therefore our libraries will either be normal classes, abstract classes, interfaces or static classes.";}i:2;i:38654;}i:764;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:39256;}i:765;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:39256;}i:766;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:542:"There are different ways of structuring library classes, most of the ways are dependent on how best to autoload or not autoload the classes, and the usage or non-usage of namespacing. The PSR-0 (composer) standard was all about standardising sharable code libraries that could be autoloaded. However there are a number of other ways including Codeigniter's native library loading functionality, Codeigniter Sparks package management and of course rolling our own autoloading. This section will go through each and also discuss static classes.";}i:2;i:39258;}i:767;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:39801;}i:768;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:39801;}i:769;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:21:"Codeigniter Libraries";i:1;i:3;i:2;i:39801;}i:2;i:39801;}i:770;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:39801;}i:771;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:39801;}i:772;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:74:"Codeigniter allows you to create your own libraries and store them in the ";}i:2;i:39834;}i:773;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:39908;}i:774;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:21:"application/libraries";}i:2;i:39910;}i:775;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:39931;}i:776;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:34:" folder. Follow the user guide on ";}i:2;i:39933;}i:777;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:65:"http://ellislab.com/codeigniter/user-guide/general/libraries.html";i:1;s:17:"loading libraries";}i:2;i:39967;}i:778;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:5:" and ";}i:2;i:40054;}i:779;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:74:"http://ellislab.com/codeigniter/user-guide/general/creating_libraries.html";i:1;s:18:"creating libraries";}i:2;i:40059;}i:780;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:200:" for more information. For the purposes of autoloading convention, any library we create should be capitalised and camelcased. In the cases of interfaces and abstracts they should be prefixed with an ";}i:2;i:40156;}i:781;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:40356;}i:782;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:"i";}i:2;i:40358;}i:783;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:40359;}i:784;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:4:" or ";}i:2;i:40361;}i:785;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:40365;}i:786;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:"a";}i:2;i:40367;}i:787;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:40368;}i:788;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:194:" respectively. When you load a Codeigniter library using the Codeigniter loader, it will automatically instantiate the class into an object. So static classes will have to be loaded differently.";}i:2;i:40370;}i:789;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:40564;}i:790;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:40564;}i:791;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:209:"Codeigniter also provides a number of system libraries available for you to use. They provide a number of default functionality that we can take advantage of in order to avoid reinventing the wheel. Check out ";}i:2;i:40566;}i:792;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:51:"http://ellislab.com/codeigniter/user-guide/toc.html";i:1;s:40:"Codeigniter's class and helper reference";}i:2;i:40775;}i:793;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:112:" for more information. Many of the functionality you need to run a generic web application is already available.";}i:2;i:40871;}i:794;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:40983;}i:795;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:40983;}i:796;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:92:"You can also replace and extend system libraries. You will need to either put them into the ";}i:2;i:40985;}i:797;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:41077;}i:798;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:16:"application/core";}i:2;i:41079;}i:799;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:41095;}i:800;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:4:" or ";}i:2;i:41097;}i:801;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:41101;}i:802;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:21:"application/libraries";}i:2;i:41103;}i:803;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:41124;}i:804;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:47:" folder. A good way to know, is to go into the ";}i:2;i:41126;}i:805;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:41173;}i:806;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:11:"system/core";}i:2;i:41175;}i:807;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:41186;}i:808;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:105:" directory and see if the class you're trying to extend is there, and if it is, then it should be in the ";}i:2;i:41188;}i:809;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:41293;}i:810;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:16:"application/core";}i:2;i:41295;}i:811;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:41311;}i:812;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:59:". This is how people get customised controllers or loaders.";}i:2;i:41313;}i:813;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:41372;}i:814;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:41372;}i:815;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:217:"If you're replacing a native library. You would use the same name of the class you're trying to replace. But inside the class, you would call it CI_CLASSNAME. For example to replace the Email class. You would name it ";}i:2;i:41374;}i:816;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:41591;}i:817;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:9:"Email.php";}i:2;i:41593;}i:818;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:41602;}i:819;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:20:" and have it run as ";}i:2;i:41604;}i:820;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:41624;}i:821;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:16:"class CI_Email{}";}i:2;i:41626;}i:822;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:41642;}i:823;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:".";}i:2;i:41644;}i:824;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:41645;}i:825;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:41645;}i:826;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:190:"If you're extending a native library just declare your class as MY_CLASSNAME extending CI_CLASSNAME. Furthermore if you're using a constructor, make sure to call the parent constructor with ";}i:2;i:41647;}i:827;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:41837;}i:828;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:22:"parent::constructor();";}i:2;i:41839;}i:829;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:41861;}i:830;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:".";}i:2;i:41863;}i:831;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:41864;}i:832;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:41864;}i:833;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:142:"Note that if you're trying use Codeigniter's native libraries or database class inside your own custom library, you need to call the function ";}i:2;i:41866;}i:834;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:42008;}i:835;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:14:"get_instance()";}i:2;i:42010;}i:836;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:42024;}i:837;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:201:". This is a global function defined by Codeigniter. When you load in your library, that function points to creating an instance to Codeigniter's super object. It's actually a good demonstration of the ";}i:2;i:42026;}i:838;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:46:"http://en.wikipedia.org/wiki/Singleton_pattern";i:1;s:17:"singleton pattern";}i:2;i:42227;}i:839;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:22:". Every time you call ";}i:2;i:42295;}i:840;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:42317;}i:841;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:12:"get_instance";}i:2;i:42319;}i:842;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:42331;}i:843;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:182:" you don't actually initialise a whole new superobject. The function checks if the object has already been initialised, and if it has been, it will simply return that object. In the ";}i:2;i:42333;}i:844;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:74:"http://ellislab.com/codeigniter/user-guide/general/creating_libraries.html";i:1;s:13:"documentation";}i:2;i:42515;}i:845;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:133:", it recommends that you assign it to a object member property in your constructor, and then use the variable as if you were calling ";}i:2;i:42607;}i:846;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:42740;}i:847;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:5:"$this";}i:2;i:42742;}i:848;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:42747;}i:849;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:32:" in your controllers and models.";}i:2;i:42749;}i:850;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:42781;}i:851;a:3:{i:0;s:4:"code";i:1;a:3:{i:0;s:82:"
$CI = get_instance();
$CI->do_something_native(); //like $CI->load->other_libary
";i:1;s:3:"php";i:2;N;}i:2;i:42788;}i:852;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:42788;}i:853;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:39:"However this actually isn't necessary. ";}i:2;i:42884;}i:854;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:98:"http://stackoverflow.com/questions/7195544/get-instance-in-codeigniter-why-assign-it-to-a-variable";i:1;s:26:"There are reasons for this";}i:2;i:42923;}i:855;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:".";}i:2;i:43052;}i:856;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:43053;}i:857;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:43055;}i:858;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:6:"Sparks";i:1;i:4;i:2;i:43055;}i:2;i:43055;}i:859;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:4;}i:2;i:43055;}i:860;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:43055;}i:861;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:390:"Before the days of Composer and PSR-0, Codeigniter had its own package and repository manager called Sparks. It is still in use today by legacy Codeigniter libraries and Codeigniter specific packages. So this will still be useful. However it hasn't been kept up to date with the latest develop branch version of Codeigniter, so in order to install we have to make a couple changes. See the ";}i:2;i:43071;}i:862;a:3:{i:0;s:12:"internallink";i:1;a:2:{i:0;s:21:"Solution Stack#sparks";i:1;s:24:"solution stack on sparks";}i:2;i:43461;}i:863;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:22:" for more information.";}i:2;i:43511;}i:864;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:43533;}i:865;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:43533;}i:866;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:78:"You would have spark packages located at project root, and with the augmented ";}i:2;i:43535;}i:867;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:43613;}i:868;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:13:"MY_Loader.php";}i:2;i:43615;}i:869;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:43628;}i:870;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:23:" you can load them via ";}i:2;i:43630;}i:871;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:43653;}i:872;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:5:"$this";}i:2;i:43655;}i:873;a:3:{i:0;s:6:"entity";i:1;a:1:{i:0;s:2:"->";}i:2;i:43660;}i:874;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:4:"load";}i:2;i:43662;}i:875;a:3:{i:0;s:6:"entity";i:1;a:1:{i:0;s:2:"->";}i:2;i:43666;}i:876;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:29:"spark('example-spark/1.0.0');";}i:2;i:43668;}i:877;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:43697;}i:878;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:23:", it is then usable as ";}i:2;i:43699;}i:879;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:43722;}i:880;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:5:"$this";}i:2;i:43724;}i:881;a:3:{i:0;s:6:"entity";i:1;a:1:{i:0;s:2:"->";}i:2;i:43729;}i:882;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:13:"example_spark";}i:2;i:43731;}i:883;a:3:{i:0;s:6:"entity";i:1;a:1:{i:0;s:2:"->";}i:2;i:43744;}i:884;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:9:"method();";}i:2;i:43746;}i:885;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:43755;}i:886;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:35:". Notice that we can't use hyphens ";}i:2;i:43757;}i:887;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:43792;}i:888;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:"-";}i:2;i:43794;}i:889;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:43795;}i:890;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:139:", when calling methods from classes as it confuses the interpreter as a syntax error. Packages either have to be underscored or camelcased.";}i:2;i:43797;}i:891;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:43937;}i:892;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:43937;}i:893;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:18:"Composer Libraries";i:1;i:3;i:2;i:43937;}i:2;i:43937;}i:894;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:43937;}i:895;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:43937;}i:896;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:46:"Composer is one of the best things to come to ";}i:2;i:43967;}i:897;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"PHP";}i:2;i:44013;}i:898;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:80:" since sliced bread. There has been numerous attempts at package management for ";}i:2;i:44016;}i:899;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"PHP";}i:2;i:44096;}i:900;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:135:" in the past, but Composer is the best and most widespread in the modern day. Composer is not only an installer tool, but it is also a ";}i:2;i:44099;}i:901;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:56:"http://phpmaster.com/autoloading-and-the-psr-0-standard/";i:1;s:26:"PSR-0 compliant autoloader";}i:2;i:44234;}i:902;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:106:". What this means it will autoload classes and conform to namespace usage. This allows you to simply call ";}i:2;i:44321;}i:903;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:44427;}i:904;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:9:"new Class";}i:2;i:44429;}i:905;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:44438;}i:906;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:27:" or typehint interfaces or ";}i:2;i:44440;}i:907;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:44467;}i:908;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:3:"use";}i:2;i:44469;}i:909;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:44472;}i:910;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:38:" importing without having to actually ";}i:2;i:44474;}i:911;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:44512;}i:912;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:7:"include";}i:2;i:44514;}i:913;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:44521;}i:914;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:4:" or ";}i:2;i:44523;}i:915;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:44527;}i:916;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:7:"require";}i:2;i:44529;}i:917;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:44536;}i:918;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:85:" the files that the classes reside in. This magic is performed by modern versions of ";}i:2;i:44538;}i:919;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"PHP";}i:2;i:44623;}i:920;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:327:" providing autoload functions that hook into the loading architecture so we can augment it to automatically load what we want given a specified directory, naming style and namespace usage. Composer also allows non-PSR autoloading, so if you have some utility classes that you just want autoloaded, Composer can do that as well.";}i:2;i:44626;}i:921;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:44953;}i:922;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:44953;}i:923;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:137:"Try checking out the composer directory, look at how the packages are structured, and the common uses of namespaces in their source code.";}i:2;i:44955;}i:924;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:45092;}i:925;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:45092;}i:926;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:87:"However there's a problem. Codeigniter is a framework that caters to older versions of ";}i:2;i:45094;}i:927;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"PHP";}i:2;i:45181;}i:928;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:415:" users. So it's not natively integrated into Composer. However there are easy ways of integrating Composer into Codeigniter. Autoloading can be considered a form of bootstrapping. Essentially the autoloader should be available from the very start of initialising a web application. Where is the very start of our MVC architecture? It's in the front controller! So the simplest way of integration would be to simply ";}i:2;i:45184;}i:929;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:45599;}i:930;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:12:"require_once";}i:2;i:45601;}i:931;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:45613;}i:932;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:16:" the Composer's ";}i:2;i:45615;}i:933;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:45631;}i:934;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:19:"vendor/autoload.php";}i:2;i:45633;}i:935;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:45652;}i:936;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:48:" in Codeigniter's front controller which is the ";}i:2;i:45654;}i:937;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:45702;}i:938;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:9:"index.php";}i:2;i:45704;}i:939;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:45713;}i:940;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:22:" at root. It would be ";}i:2;i:45715;}i:941;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:28:"http://pastebin.com/6ffYwdkf";i:1;s:69:"somewhere at the end but before Codeigniter loads all the controllers";}i:2;i:45737;}i:942;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:71:", or else we'd try to load classes before the autoloader is registered.";}i:2;i:45839;}i:943;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:45910;}i:944;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:45910;}i:945;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:48:"However there is a better way, and in fact this ";}i:2;i:45912;}i:946;a:3:{i:0;s:18:"doublequoteopening";i:1;a:0:{}i:2;i:45960;}i:947;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:10:"Polycademy";}i:2;i:45961;}i:948;a:3:{i:0;s:18:"doublequoteclosing";i:1;a:0:{}i:2;i:45971;}i:949;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:57:" way actually gives us autoloading on your Codeigniter's ";}i:2;i:45972;}i:950;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:46029;}i:951;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:21:"application/libraries";}i:2;i:46031;}i:952;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:46052;}i:953;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:5:" and ";}i:2;i:46054;}i:954;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:46059;}i:955;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:23:"application/third_party";}i:2;i:46061;}i:956;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:46084;}i:957;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:64:" for free, and is more semantic with Codeigniter's architecture.";}i:2;i:46086;}i:958;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:46151;}i:959;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:46151;}i:960;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:11:"Autoloading";i:1;i:3;i:2;i:46151;}i:2;i:46151;}i:961;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:46151;}i:962;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:46151;}i:963;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:23:"Codeigniter provides a ";}i:2;i:46174;}i:964;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:61:"http://ellislab.com/codeigniter/user-guide/general/hooks.html";i:1;s:8:"hook API";}i:2;i:46197;}i:965;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:215:" so we can plug in our own middleware. The one we're interested in is the most earliest, that is the pre-system hook. This is where we're going to place our Composer bootstrap and our own PSR-0 compliant autoloader.";}i:2;i:46271;}i:966;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:46487;}i:967;a:3:{i:0;s:10:"listo_open";i:1;a:0:{}i:2;i:46487;}i:968;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:46487;}i:969;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:46487;}i:970;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:17:" Enable hooks in ";}i:2;i:46491;}i:971;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:46508;}i:972;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:17:"config/config.php";}i:2;i:46510;}i:973;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:46527;}i:974;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:".";}i:2;i:46529;}i:975;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:46530;}i:976;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:46530;}i:977;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:46530;}i:978;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:46530;}i:979;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:9:" In your ";}i:2;i:46534;}i:980;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:46543;}i:981;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:16:"config/hooks.php";}i:2;i:46545;}i:982;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:46561;}i:983;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:9:" define: ";}i:2;i:46563;}i:984;a:3:{i:0;s:4:"code";i:1;a:3:{i:0;s:185:"
//pre_system autoloader
$hook['pre_system'] = array(
    'class' => 'Autoloader',
    'function'  => '__construct',
    'filename'  => 'Autoloader.php',
    'filepath'  => 'hooks',
);
";i:1;s:3:"php";i:2;s:9:"hooks.php";}i:2;i:46577;}i:985;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:46784;}i:986;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:46784;}i:987;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:46784;}i:988;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:46784;}i:989;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:20:" Then download this ";}i:2;i:46788;}i:990;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:43:"https://github.com/Polycademy/CiAutoloading";i:1;s:14:"Autoloader.php";}i:2;i:46808;}i:991;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:6:" into ";}i:2;i:46870;}i:992;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:46876;}i:993;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:32:"application/hooks/Autoloader.php";}i:2;i:46878;}i:994;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:46910;}i:995;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:108:". (You should also try to read and understand the code, refer to documentation for commands you don't know).";}i:2;i:46912;}i:996;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:47020;}i:997;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:47020;}i:998;a:3:{i:0;s:11:"listo_close";i:1;a:0:{}i:2;i:47020;}i:999;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:47020;}i:1000;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:163:"Now you can auto instantiate objects and call static methods from static classes anywhere, and that means both packages in Composer and packages/libraries in your ";}i:2;i:47022;}i:1001;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:47185;}i:1002;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:21:"application/libraries";}i:2;i:47187;}i:1003;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:47208;}i:1004;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:4:" or ";}i:2;i:47210;}i:1005;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:47214;}i:1006;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:23:"application/third_party";}i:2;i:47216;}i:1007;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:47239;}i:1008;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:184:". However when constructing your library classes, do not use underscores in your filenames (excepting folder names) as they will be translated into directories. You need to follow the ";}i:2;i:47241;}i:1009;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:70:"https://github.com/php-fig/fig-standards/blob/master/accepted/PSR-0.md";i:1;s:11:"PSR-0 rules";}i:2;i:47425;}i:1010;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:33:" now. Capitalised and camelcased!";}i:2;i:47511;}i:1011;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:47544;}i:1012;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:47544;}i:1013;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:325:"However if you classes that extend CI's native classes, you will not be able to autoload them. This is because the system classes that your classes are extending/replacing are not autoloaded as they are in the system directory. You'll need to use the native loader to load them. This does not conflict with the native loader.";}i:2;i:47546;}i:1014;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:47871;}i:1015;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:47871;}i:1016;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:118:"At this point you have a flexible system utilising Composer, Sparks, Native CI and your own PSR-0 or class map loader.";}i:2;i:47873;}i:1017;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:47991;}i:1018;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:47991;}i:1019;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:75:"In order to autoload classes in directories, you'll have to use namespaces.";}i:2;i:47993;}i:1020;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:48069;}i:1021;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:48069;}i:1022;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:10:"Namespaces";i:1;i:3;i:2;i:48069;}i:2;i:48069;}i:1023;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:48069;}i:1024;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:48069;}i:1025;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:400:"Namespaces are a way to encapsulate objects in order to avoid naming conflicts and shorten long path names to aliases. In your operating system you may have two files with the same name and extension. However they can never live in the same directory, because that would cause a naming conflict, and if you're trying to call that file, the operating system wouldn't know which one you're trying call.";}i:2;i:48091;}i:1026;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:48491;}i:1027;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:48491;}i:1028;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:119:"Namespaces in programming operate similarly. Imagine you're working in a team, and one of you defines an object called ";}i:2;i:48493;}i:1029;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:48612;}i:1030;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:10:"class MyDB";}i:2;i:48614;}i:1031;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:48624;}i:1032;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:73:", and your teammate who didn't know better also defined an object called ";}i:2;i:48626;}i:1033;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:48699;}i:1034;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:10:"class MyDB";}i:2;i:48701;}i:1035;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:48711;}i:1036;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:165:". Then if you include the files together into one script, this would cause a naming conflict. Previously we would just name one of the classes with a prefix such as ";}i:2;i:48713;}i:1037;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:48878;}i:1038;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:15:"class SteveMyDB";}i:2;i:48880;}i:1039;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:48895;}i:1040;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:104:". However this is ugly and inefficient. Instead we use namespaces to avoid changing our class names. In ";}i:2;i:48897;}i:1041;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"PHP";}i:2;i:49001;}i:1042;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:147:" only classes, interfaces, functions and constants are affected by namespaces. It is recommended best practice to only have one namespace per file.";}i:2;i:49004;}i:1043;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:49151;}i:1044;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:49151;}i:1045;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:177:"There are two syntax commands in creating and importing namespaces. They should always be used at the top of the code in the file. You cannot use them in blocks or conditionals.";}i:2;i:49153;}i:1046;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:49330;}i:1047;a:3:{i:0;s:4:"file";i:1;a:3:{i:0;s:478:"
//use 'namespace' to define the namespace for the current code
namespace Polycademy\MissonChecker;

//use 'use' to import other namespaces into the code or as an alias
//the use command cannot import functions or constants, which is why we follow OOP
use Polycademy\Abstracts\aArmor;

//via the autoloading mechanism, the aArmor will point to Polycademy/Abstracts/aArmor.php then initialise the aArmor abstract, this will be done automatically
class SomeClass extends aArmor{}
";i:1;s:3:"php";i:2;s:13:"SomeClass.php";}i:2;i:49337;}i:1048;a:3:{i:0;s:4:"file";i:1;a:3:{i:0;s:52:"
namespace Polycademy\Abstracts;

abstract aArmor{}
";i:1;s:3:"php";i:2;s:10:"aArmor.php";}i:2;i:49848;}i:1049;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:49848;}i:1050;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:156:"When using namespaces, you need to abide by a similar directory structure. The above code defines the namespace as in Polycademy\MissionChecker. This means ";}i:2;i:49925;}i:1051;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:50081;}i:1052;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:13:"SomeClass.php";}i:2;i:50083;}i:1053;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:50096;}i:1054;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:11:" exists in ";}i:2;i:50098;}i:1055;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:50109;}i:1056;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:49:"base/path/Polycademy/MissionChecker/SomeClass.php";}i:2;i:50111;}i:1057;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:50160;}i:1058;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:117:". As you can see the namespace is always defined at where the file is, but does not include the filename itself. The ";}i:2;i:50162;}i:1059;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:50279;}i:1060;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:9:"base/path";}i:2;i:50281;}i:1061;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:50290;}i:1062;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:107:" is defined in your autoloader. If you choose to use CiAutoloading, then the base path is at Codeigniter's ";}i:2;i:50292;}i:1063;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:50399;}i:1064;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:21:"application/libraries";}i:2;i:50401;}i:1065;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:50422;}i:1066;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:5:" and ";}i:2;i:50424;}i:1067;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:50429;}i:1068;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:23:"application/third_party";}i:2;i:50431;}i:1069;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:50454;}i:1070;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:97:" folder. CiAutoloading also includes the Composer's own autoloader which has extra features. The ";}i:2;i:50456;}i:1071;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:50553;}i:1072;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:31:"use Polycademy\Abstracts\aArmor";}i:2;i:50555;}i:1073;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:50586;}i:1074;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:84:" actually imports the file itself, it's not just pointing a directory. You can make ";}i:2;i:50588;}i:1075;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:50672;}i:1076;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:3:"use";}i:2;i:50674;}i:1077;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:50677;}i:1078;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:222:" import a directory, however then when you call objects this will require you to append the directory name, so it's easier to import a file. Here's an example of the directory structure using Codeigniter and CiAutoloading.";}i:2;i:50679;}i:1079;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:50902;}i:1080;a:3:{i:0;s:12:"preformatted";i:1;a:1:{i:0;s:262:"  application/libraries
    |
    |----Polycademy
            |
            |----MissionChecker
            |       |
            |       |----SomeClass.php
            |       
            |----Abstracts
                    |
                    |----aArmor.php";}i:2;i:50902;}i:1081;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:50902;}i:1082;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:135:"The namespaces are always referred to from the root of the base path. There can be further directories or less directories if you wish.";}i:2;i:51189;}i:1083;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:51324;}i:1084;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:51324;}i:1085;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:28:"Do note it is possible have ";}i:2;i:51326;}i:1086;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:71:"http://www.php.net/manual/en/language.namespaces.definitionmultiple.php";i:1;s:31:"multiple namespaces in one file";}i:2;i:51354;}i:1087;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:114:", however this is a bad practice as it will confuse you and other developers who expect namespaces as directories.";}i:2;i:51461;}i:1088;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:51575;}i:1089;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:51575;}i:1090;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:180:"Namespaces come to life when using autoloaders, especially PSR-0 compliant autoloaders. According to the PSR-0 rules, you have to namespace and structure your packages in this way:";}i:2;i:51577;}i:1091;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:51758;}i:1092;a:3:{i:0;s:10:"listo_open";i:1;a:0:{}i:2;i:51758;}i:1093;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:51758;}i:1094;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:51758;}i:1095;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:116:" A fully-qualified namespace and class must have the following structure \<Vendor Name>\(<Namespace>)*\<Class Name>.";}i:2;i:51762;}i:1096;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:51878;}i:1097;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:51878;}i:1098;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:51878;}i:1099;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:51878;}i:1100;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:49:" Each namespace must have a top-level namespace (";}i:2;i:51882;}i:1101;a:3:{i:0;s:18:"doublequoteopening";i:1;a:0:{}i:2;i:51931;}i:1102;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:11:"Vendor Name";}i:2;i:51932;}i:1103;a:3:{i:0;s:18:"doublequoteclosing";i:1;a:0:{}i:2;i:51943;}i:1104;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:2:").";}i:2;i:51944;}i:1105;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:51946;}i:1106;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:51946;}i:1107;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:51946;}i:1108;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:51946;}i:1109;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:61:" Each namespace can have as many sub-namespaces as it wishes.";}i:2;i:51950;}i:1110;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:52011;}i:1111;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:52011;}i:1112;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:52011;}i:1113;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:52011;}i:1114;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:98:" Each namespace separator is converted to a DIRECTORY_SEPARATOR when loading from the file system.";}i:2;i:52015;}i:1115;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:52113;}i:1116;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:52113;}i:1117;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:52113;}i:1118;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:52113;}i:1119;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:129:" Each underscore in the class name is converted to a DIRECTORY_SEPARATOR. The underscore has no special meaning in the namespace.";}i:2;i:52117;}i:1120;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:52246;}i:1121;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:52246;}i:1122;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:52246;}i:1123;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:52246;}i:1124;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:97:" The fully-qualified namespace and class is suffixed with .php when loading from the file system.";}i:2;i:52250;}i:1125;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:52347;}i:1126;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:52347;}i:1127;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:52347;}i:1128;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:52347;}i:1129;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:123:" Alphabetic characters in vendor names, namespaces, and class names may be of any combination of lower case and upper case.";}i:2;i:52351;}i:1130;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:52474;}i:1131;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:52474;}i:1132;a:3:{i:0;s:11:"listo_close";i:1;a:0:{}i:2;i:52474;}i:1133;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:52474;}i:1134;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:43:"So in our example the vendor name would be ";}i:2;i:52476;}i:1135;a:3:{i:0;s:18:"doublequoteopening";i:1;a:0:{}i:2;i:52519;}i:1136;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:10:"Polycademy";}i:2;i:52520;}i:1137;a:3:{i:0;s:18:"doublequoteclosing";i:1;a:0:{}i:2;i:52530;}i:1138;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:454:", the next namespace should be the package name. In our example that's either MissionChecker or Abstracts. The 5th rule is why we camelcase our filenames and class names. Most packages that are on Composer follow this structure, but not all of them follow it strictly. It is possible to skip having a vendor name, and just have the package name, and it's also possible just to autoload classes without namespaces by defining them as a classmap. Refer to ";}i:2;i:52531;}i:1139;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:48:"http://getcomposer.org/doc/04-schema.md#autoload";i:1;s:23:"autoloading on Composer";}i:2;i:52985;}i:1140;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:30:" for more information on that.";}i:2;i:53061;}i:1141;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:53091;}i:1142;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:53091;}i:1143;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:76:"As a recommendation when constructing your own libraries, try conforming to ";}i:2;i:53093;}i:1144;a:3:{i:0;s:18:"doublequoteopening";i:1;a:0:{}i:2;i:53169;}i:1145;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:15:"Package/Library";}i:2;i:53170;}i:1146;a:3:{i:0;s:18:"doublequoteclosing";i:1;a:0:{}i:2;i:53185;}i:1147;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:73:" style naming. If you are intending to share it, be PSR-0 compliant with ";}i:2;i:53186;}i:1148;a:3:{i:0;s:18:"doublequoteopening";i:1;a:0:{}i:2;i:53259;}i:1149;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:22:"Vendor/Package/Library";}i:2;i:53260;}i:1150;a:3:{i:0;s:18:"doublequoteclosing";i:1;a:0:{}i:2;i:53282;}i:1151;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:136:" style. However if you're importing third party libraries that are neither Composer or Sparks, then you should try to convert them into ";}i:2;i:53283;}i:1152;a:3:{i:0;s:18:"doublequoteopening";i:1;a:0:{}i:2;i:53419;}i:1153;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:22:"Vendor/Package/Library";}i:2;i:53420;}i:1154;a:3:{i:0;s:18:"doublequoteclosing";i:1;a:0:{}i:2;i:53442;}i:1155;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:58:" style. These would then be put in the third party folder.";}i:2;i:53443;}i:1156;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:53501;}i:1157;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:53501;}i:1158;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:150:"There are couple other important facets of namespacing that may be a bit confusing to a beginner. It's easier to explain this via code. Also note the ";}i:2;i:53503;}i:1159;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:64:"http://www.php.net/manual/en/language.namespaces.nsconstants.php";i:1;s:19:"namespace constants";}i:2;i:53653;}i:1160;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:111:", which you can use to explicitly refer to the current namespace if importing imports classes of the same name.";}i:2;i:53741;}i:1161;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:53852;}i:1162;a:3:{i:0;s:4:"file";i:1;a:3:{i:0;s:2024:"
//assume autoloading is setup

//ok so this file is in Guzzle/Url directory
namespace Guzzle\Url;

//we're importing something we want to use
use Guzzle\Cookie\CookieParser;

//here we're importing, but we're aliasing it too!
use Guzzle\Message as Awesome;

//here we're importing a directory, just imagine that it is a directory and not a file
use Guzzle\Directory;

class Mapper{

    public function __construct(){
    
        //there's never any need to specify filename extensions, the classes and files are the same name.
    
        //this works, because we imported the file (remember that class names should match file names)
        //it first looks at the current namespace, then the imported namespace
        //this is called an unqualified name
        $cookie_parser = new CookieParser; 
        
        //this may work, it's not imported, so the current namespace gets appended
        //it will only work if there was a Guzzle/Url/UrlParser.php
        //this is also called an unqualified name
        $url_parser = new UrlParser;
        
        //this is called a qualified name, the current namespace gets appended to it
        //it becomes Guzzle\Url\Another\Parser.php
        $another_parser = new Another\Parser;
        
        //this is called a FULLY qualified name, it does not append any of the current namespaces, and it does not recognise imported namespaces. It's like an absolute path.
        $absolute_parser = new \Other\Cool\Parser;
        
        //this uses an alias, and resolves to Guzzle\Message\Parsing.php
        $aliased_parser = new Awesome\Parsing;
        
        //this is not an alias, instead it points to the Directory import. So it resolves as Guzzle\Directory\SuperParser;
        $directory_parser = new Directory\SuperParser;
        //therefore if the use keyword points to a directory and not to a specific file, all of those files become fair game. However you need to use the last namespace directory and prefix all class initialisations
    
    }

}
";i:1;s:3:"php";i:2;s:10:"Mapper.php";}i:2;i:53859;}i:1163;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:53859;}i:1164;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:68:"The above code would correspond to this kind of directory structure:";}i:2;i:55908;}i:1165;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:55977;}i:1166;a:3:{i:0;s:12:"preformatted";i:1;a:1:{i:0;s:777:"  application/libraries
    |
    |----Guzzle
    |       |
    |       |----Url
    |       |       |
    |       |       |----Mapper.php
    |       |       |
    |       |       |----UrlParser.php
    |       |       |
    |       |       |----Another
    |       |               |
    |       |               |----Parser.php
    |       |       
    |       |----Cookie
    |       |       |
    |       |       |----CookeParser.php
    |       |
    |       |----Message
    |       |       |
    |       |       |----Parsing.php
    |       |
    |       |
    |       |
    |       |----Directory
    |               |
    |               |----SuperParser.php
    |
    |----Other
           |
           |----Cool
                   |
                   |----Parser.php";}i:2;i:55977;}i:1167;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:56824;}i:1168;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:14:"Static Classes";i:1;i:3;i:2;i:56824;}i:2;i:56824;}i:1169;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:56824;}i:1170;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:56824;}i:1171;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:293:"Static classes are actually classes that have static member properties or methods. These properties and methods can be called without instantiating the class. They almost do the same thing as a procedural function list, however they are more flexible to use and more consistent with OOP usage.";}i:2;i:56851;}i:1172;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:57144;}i:1173;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:57144;}i:1174;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:358:"Static classes are alternatives to procedurally defining a large amount of helper functions that simply operate on data without storing any state itself. It's better to use static classes in OOP for two reasons. Firstly it's the consistency with the rest of your OOP architecture, and secondly static classes can be autoloaded, whereas function lists cannot.";}i:2;i:57146;}i:1175;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:57504;}i:1176;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:57504;}i:1177;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:55:"Static classes are not instantiated. So you don't call ";}i:2;i:57506;}i:1178;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:57561;}i:1179;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:16:"new StaticClass;";}i:2;i:57563;}i:1180;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:57579;}i:1181;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:44:". You can call the class functions directly.";}i:2;i:57581;}i:1182;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:57625;}i:1183;a:3:{i:0;s:4:"code";i:1;a:3:{i:0;s:176:"
class StaticClass{

    public static function say_something(){
        
        echo 'What!';
        
    }

}

//call them directly like this
StaticClass::say_something();
";i:1;s:3:"php";i:2;N;}i:2;i:57632;}i:1184;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:57632;}i:1185;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:305:"The reason you cannot instantiate static classes, is because they don't store any state, they simply operate on other object's data. Therefore it doesn't make any sense to instantiate them. As instantiation is for the purposes of having same class (blueprint) be used for different object representations.";}i:2;i:57822;}i:1186;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:58127;}i:1187;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:58127;}i:1188;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:49:"Inside a static function, the normally available ";}i:2;i:58129;}i:1189;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:58178;}i:1190;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:5:"$this";}i:2;i:58180;}i:1191;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:58185;}i:1192;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:37:" keyword is no longer available. The ";}i:2;i:58187;}i:1193;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:58224;}i:1194;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:5:"$this";}i:2;i:58226;}i:1195;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:58231;}i:1196;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:154:" only exists when the object is instantiated. Since static classes are not instantiated, in order call it's own class methods you have to use the keyword ";}i:2;i:58233;}i:1197;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:58387;}i:1198;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:4:"self";}i:2;i:58389;}i:1199;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:58393;}i:1200;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:".";}i:2;i:58395;}i:1201;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:58396;}i:1202;a:3:{i:0;s:4:"code";i:1;a:3:{i:0;s:458:"
class StaticClass{

    public static $static_variable = ' Dude!';

    public static function say_something(){
        
        echo 'What ';
        self::other_func();
        
    }
    
    public static function other_func(){
    
        echo ' Ever';
        //notice how in instantiated objects we use $this->static_variable; Here we're using self::$static_variable
        echo self::$static_variable;
    
    }

}

StaticClass::say_something();
";i:1;s:3:"php";i:2;N;}i:2;i:58403;}i:1203;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:58403;}i:1204;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:274:"We would put any static classes into our libraries folder. You won't need many static classes, as most things should be instantiated objects. But if you have a bunch of functions related to each other that don't store any state in variables, then you can use static classes.";}i:2;i:58875;}i:1205;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:59149;}i:1206;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:59151;}i:1207;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:8:"Database";i:1;i:2;i:2;i:59151;}i:2;i:59151;}i:1208;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:2;}i:2;i:59151;}i:1209;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:59151;}i:1210;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:180:"Databases are where we store overall application state in the long term. Programming code that stores state, only store the state during the running of the session. In the case of ";}i:2;i:59173;}i:1211;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"PHP";}i:2;i:59353;}i:1212;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:244:", unless you're running a daemon, this only during the request and response cycle. Which means everything gets reset to their default status and the variables won't hold anything until you startup the program again. Therefore we need databases.";}i:2;i:59356;}i:1213;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:59600;}i:1214;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:59600;}i:1215;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:206:"There are many databases catered to many different situations. The one that we're going to be using is MySQL, which is the most popular relational database management system, and one more the flexible ones.";}i:2;i:59602;}i:1216;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:59808;}i:1217;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:59808;}i:1218;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:522:"Think of databases like Microsoft Excel. The excel program you're running can be thought of as an database instance. The excel document you opened can be thought of as the database. Each sheet in excel can be thought of as a table. Each table or sheet can have a large amount of columns and rows. We store data in a tabulated form, with each row denoting a section of related data, and each column being the type of the data. All of this is stored in multiple tables, and each table represents a plurality of related data.";}i:2;i:59810;}i:1219;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:60332;}i:1220;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:60332;}i:1221;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:403:"If you think about a blog. There would be a blog table. The table can have 5 columns being id, author, title, content and date. Each blog post occupies a row taking up those 5 columns. So the first blog post may be '1', 'Roger', 'The Beginning of the End', 'Today we went on a fishing trip, I saw lots of fishes. Then we went home.', '2013/01/01'. Each blog post after the first would do the same thing.";}i:2;i:60334;}i:1222;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:60737;}i:1223;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:60737;}i:1224;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:39:"Database software usually don't have a ";}i:2;i:60739;}i:1225;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"GUI";}i:2;i:60778;}i:1226;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:125:" that comes with it. You would normally have to interface it using the command line. However the PHPMyAdmin adds a web based ";}i:2;i:60781;}i:1227;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"GUI";}i:2;i:60906;}i:1228;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:248:" to any MySQL databases, so you'll do most of your database work there. For other databases, you have to find other GUIs. When interfacing with the database in programming, you would use an abstraction layer such as Codeigniter's Active Records or ";}i:2;i:60909;}i:1229;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"PHP";}i:2;i:61157;}i:1230;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:17:"'s PDO extension.";}i:2;i:61160;}i:1231;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:61177;}i:1232;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:6:"vshare";i:1;a:8:{s:4:"site";s:7:"youtube";s:5:"video";s:51:"4XX7X7upEIU&list=PLwwh-11EOGvMTTrLIdKsmEpn0C0nk9CRQ";s:5:"flash";s:131:"http://www.youtube.com/v/4XX7X7upEIU%26list%3DPLwwh-11EOGvMTTrLIdKsmEpn0C0nk9CRQ?allowFullScreen=true&allowScriptAccess=always&fs=1";s:4:"vars";a:3:{s:15:"allowFullScreen";s:4:"true";s:17:"allowScriptAccess";s:6:"always";s:2:"fs";s:1:"1";}s:5:"align";i:3;s:5:"width";i:520;s:6:"height";i:406;s:5:"title";s:0:"";}i:2;i:5;i:3;s:71:"{{ youtube>4XX7X7upEIU&list=PLwwh-11EOGvMTTrLIdKsmEpn0C0nk9CRQ?large }}";}i:2;i:61179;}i:1233;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:61179;}i:1234;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:423:"Before we start using the database, we should get acquainted with some of the architectural concepts in using databases. It's important to understand that databases are not part of your application server. They are a totally different long running process (it is persistent and not part of the request and response cycle) that is running and your programming in the application server connects to it and interacts with its ";}i:2;i:61252;}i:1235;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"API";}i:2;i:61675;}i:1236;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:".";}i:2;i:61678;}i:1237;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:61679;}i:1238;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:61681;}i:1239;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:13:"SQL and NoSQL";i:1;i:3;i:2;i:61681;}i:2;i:61681;}i:1240;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:61681;}i:1241;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:61681;}i:1242;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:29:"You may have heard the terms ";}i:2;i:61706;}i:1243;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"SQL";}i:2;i:61735;}i:1244;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:12:" and NoSQL. ";}i:2;i:61738;}i:1245;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"SQL";}i:2;i:61750;}i:1246;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:12:" stands for ";}i:2;i:61753;}i:1247;a:3:{i:0;s:18:"doublequoteopening";i:1;a:0:{}i:2;i:61765;}i:1248;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:25:"structured query language";}i:2;i:61766;}i:1249;a:3:{i:0;s:18:"doublequoteclosing";i:1;a:0:{}i:2;i:61791;}i:1250;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:18:", and NoSQL means ";}i:2;i:61792;}i:1251;a:3:{i:0;s:18:"doublequoteopening";i:1;a:0:{}i:2;i:61810;}i:1252;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:34:"not only structured query language";}i:2;i:61811;}i:1253;a:3:{i:0;s:18:"doublequoteclosing";i:1;a:0:{}i:2;i:61845;}i:1254;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:154:". Since the 1970s it has become a standardised and popular language that interfaces with relational (tabular) based databases. Now when people talk about ";}i:2;i:61846;}i:1255;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"SQL";}i:2;i:62000;}i:1256;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:51:" databases, they mean not only that the database's ";}i:2;i:62003;}i:1257;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"API";}i:2;i:62054;}i:1258;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:20:" require you to use ";}i:2;i:62057;}i:1259;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"SQL";}i:2;i:62077;}i:1260;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:38:", but that the database is relational.";}i:2;i:62080;}i:1261;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:62118;}i:1262;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:6:"vshare";i:1;a:8:{s:4:"site";s:5:"vimeo";s:5:"video";s:8:"46886385";s:5:"flash";s:51:"http://www.vimeo.com/moogaloop.swf?clip_id=46886385";s:4:"vars";a:1:{s:7:"clip_id";s:8:"46886385";}s:5:"align";i:1;s:5:"width";i:255;s:6:"height";i:210;s:5:"title";s:0:"";}i:2;i:5;i:3;s:25:"{{ vimeo>46886385?small}}";}i:2;i:62120;}i:1263;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:62120;}i:1264;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:227:"NoSQL arrived on the scene recently in 1998, and has become more popular in recent years. Essentially NoSQL databases don't conform to the relational model, so they don't store data in a tabular format. They also don't use the ";}i:2;i:62147;}i:1265;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"SQL";}i:2;i:62374;}i:1266;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:16:" language as an ";}i:2;i:62377;}i:1267;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"API";}i:2;i:62393;}i:1268;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:139:". NoSQL databases are useful for data that don't conform or are easily represented in tabular format. Some NoSQL databases are faster than ";}i:2;i:62396;}i:1269;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"SQL";}i:2;i:62535;}i:1270;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:27:" databases, simply because ";}i:2;i:62538;}i:1271;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"SQL";}i:2;i:62565;}i:1272;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:75:" databases usually have more checks and balances to keep the data reliable.";}i:2;i:62568;}i:1273;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:62643;}i:1274;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:62643;}i:1275;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:58:"http://kkovacs.eu/cassandra-vs-mongodb-vs-couchdb-vs-redis";i:1;s:33:"NoSQL is not one type of database";}i:2;i:62645;}i:1276;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:164:", there are many different ways of storing data outside of relational databases, however the topic is beyond the scope of this course. You can find out more in the ";}i:2;i:62741;}i:1277;a:3:{i:0;s:13:"interwikilink";i:1;a:4:{i:0;s:8:"wp>NoSQL";i:1;s:36:"wikipedia article on NoSQL databases";i:2;s:2:"wp";i:3;s:5:"NoSQL";}i:2;i:62905;}i:1278;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:".";}i:2;i:62954;}i:1279;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:62955;}i:1280;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:62955;}i:1281;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:106:"There are two NoSQL databases that have become popular and can be used for general applications. They are ";}i:2;i:62957;}i:1282;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:23:"http://www.mongodb.org/";i:1;s:7:"MongoDB";}i:2;i:63063;}i:1283;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:5:" and ";}i:2;i:63098;}i:1284;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:16:"http://redis.io/";i:1;s:5:"Redis";}i:2;i:63103;}i:1285;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:263:". The blog example can be easily replicated in MongoDB. The key difference between MongoDB and MySQL that is quite important for you as a startup to realise is this: One of the reasons MongoDB is faster than MySQL because it has poorer ACID transactional support.";}i:2;i:63129;}i:1286;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:63392;}i:1287;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:63392;}i:1288;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:489:"What are ACID transactions? Well first transactions are a unit of work performed within a database management system, and treated in a coherent and reliable way independent of other transactions. Transactions are used when you need that unit of work to be reliable even if the system crashes or bugs out and the unit of work stops either completely or partially. This unit of work needs to be isolated from the rest of the system, so there is no side effects from any erroneous operation. ";}i:2;i:63394;}i:1289;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:33:"http://en.wikipedia.org/wiki/ACID";i:1;s:28:"Transactions need to be ACID";}i:2;i:63883;}i:1290;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:54:". This means atomic, consistent, isolated and durable.";}i:2;i:63949;}i:1291;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:64004;}i:1292;a:3:{i:0;s:10:"listu_open";i:1;a:0:{}i:2;i:64004;}i:1293;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:64004;}i:1294;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:64004;}i:1295;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:48:" Atomic means the transaction is all or nothing.";}i:2;i:64008;}i:1296;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:64056;}i:1297;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:64056;}i:1298;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:64056;}i:1299;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:64056;}i:1300;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:145:" Consistent means that completing any transaction must keep the database valid, that is the transaction needs to conform to any data entry rules.";}i:2;i:64060;}i:1301;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:64205;}i:1302;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:64205;}i:1303;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:64205;}i:1304;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:64205;}i:1305;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:251:" Isolated means that if transactions are performed concurrently, the state of the system should be as if the transactions were performed one after the other. This could mean that the database is locked for a transaction and is opened when it finishes.";}i:2;i:64209;}i:1306;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:64460;}i:1307;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:64460;}i:1308;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:64460;}i:1309;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:64460;}i:1310;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:145:" Durable means that once a transaction completes, the data needs to be stored permanently to disk even if the system crashes straight afterwards.";}i:2;i:64464;}i:1311;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:64609;}i:1312;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:64609;}i:1313;a:3:{i:0;s:11:"listu_close";i:1;a:0:{}i:2;i:64609;}i:1314;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:64609;}i:1315;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:592:"ACID transactions are paramount for databases doing financial work. Imagine you went to an online store and bought a game. You put in your credit card details and click purchase. The system at minimum is doing two things. It is logging your credit card to the financial company, and then putting a record into its sales/delivery system. So that your money gets processed and your good gets delivered. But what if halfway through this process, the system unexpectedly crashed? If the transaction was not ACID, then your money gets processed, but the purchase/delivery order wouldn't be placed!";}i:2;i:64611;}i:1316;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:65203;}i:1317;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:65203;}i:1318;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:21:"MySQL and most other ";}i:2;i:65205;}i:1319;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"SQL";}i:2;i:65226;}i:1320;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:62:" databases have good transactional support, and you can setup ";}i:2;i:65229;}i:1321;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:69:"http://ellislab.com/codeigniter/user-guide/database/transactions.html";i:1;s:47:"transactions using Codeigniter's active records";}i:2;i:65291;}i:1322;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:77:". This abstracts the process making it easier to work with. Do note that the ";}i:2;i:65412;}i:1323;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:95:"http://www.kavoir.com/2009/09/mysql-engines-innodb-vs-myisam-a-comparison-of-pros-and-cons.html";i:1;s:58:"MySQL table needs to be setup with the InnoDB table engine";}i:2;i:65489;}i:1324;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:22:" to have transactions.";}i:2;i:65647;}i:1325;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:65669;}i:1326;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:65669;}i:1327;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:423:"So when choosing between using MongoDB or MySQL. If you the data you're trying to store naturally comes to mind as a relational data, that is data in tabular format that have relationships to each column, then choose MySQL. If your data doesn't fit that and comes to mind as an object that could have a variable number of columns (thus variable number of properties), choose MongoDB. If you need transactions, always use a ";}i:2;i:65671;}i:1328;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"SQL";}i:2;i:66094;}i:1329;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:10:" database.";}i:2;i:66097;}i:1330;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:66108;}i:1331;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:66108;}i:1332;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:17:"Database Planning";i:1;i:3;i:2;i:66108;}i:2;i:66108;}i:1333;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:66108;}i:1334;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:66108;}i:1335;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:317:"The complexity of your database depends on two things. Firstly the quantity and coherence of your data set, and what kind of questions and answers you want to extract out of your database. For relational databases, there are two concepts that are important in planning out your databases. The first is designing your ";}i:2;i:66137;}i:1336;a:3:{i:0;s:13:"interwikilink";i:1;a:4:{i:0;s:18:"wp>Database schema";i:1;s:6:"schema";i:2;s:2:"wp";i:3;s:15:"Database schema";}i:2;i:66454;}i:1337;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:20:", and the second is ";}i:2;i:66483;}i:1338;a:3:{i:0;s:13:"interwikilink";i:1;a:4:{i:0;s:25:"wp>Database normalization";i:1;s:22:"database normalisation";i:2;s:2:"wp";i:3;s:22:"Database normalization";}i:2;i:66503;}i:1339;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:".";}i:2;i:66555;}i:1340;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:66556;}i:1341;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:66556;}i:1342;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:380:"For most web applications, unless you're operating on big data, your schema planning should be fairly straight forward. However sometimes your web application will grow a bit more complex, and perhaps you want to extract insight from the data you have. This knowledge area is out of the scope of this course, however you can refer to the these tutorials if you want to learn more:";}i:2;i:66558;}i:1343;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:66939;}i:1344;a:3:{i:0;s:10:"listu_open";i:1;a:0:{}i:2;i:66939;}i:1345;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:66939;}i:1346;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:66939;}i:1347;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:" ";}i:2;i:66943;}i:1348;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:90:"http://net.tutsplus.com/tutorials/databases/visual-database-creation-with-mysql-workbench/";i:1;s:52:"Visual Database Schema Creation with MySQL Workbench";}i:2;i:66944;}i:1349;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:67091;}i:1350;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:67091;}i:1351;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:67091;}i:1352;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:67091;}i:1353;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:" ";}i:2;i:67095;}i:1354;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:88:"http://www.dreamincode.net/forums/topic/179103-relational-database-design-normalization/";i:1;s:31:"Database Normalisation Tutorial";}i:2;i:67096;}i:1355;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:67220;}i:1356;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:67220;}i:1357;a:3:{i:0;s:11:"listu_close";i:1;a:0:{}i:2;i:67220;}i:1358;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:67222;}i:1359;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:10:"Data Types";i:1;i:4;i:2;i:67222;}i:2;i:67222;}i:1360;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:4;}i:2;i:67222;}i:1361;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:67222;}i:1362;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:64:"For pretty much every table you create, you'll need at least an ";}i:2;i:67242;}i:1363;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:67306;}i:1364;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:2:"id";}i:2;i:67308;}i:1365;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:67310;}i:1366;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:87:" column, which would be the unique number pointing to any particular row of data. This ";}i:2;i:67312;}i:1367;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:67399;}i:1368;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:2:"id";}i:2;i:67401;}i:1369;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:67403;}i:1370;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:90:" column needs to have a datatype of integer or larger, and it should have the property of ";}i:2;i:67405;}i:1371;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:67495;}i:1372;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:14:"AUTO_INCREMENT";}i:2;i:67497;}i:1373;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:67511;}i:1374;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:70:", and you should also position it as the primary key. The property of ";}i:2;i:67513;}i:1375;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:67583;}i:1376;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:14:"AUTO_INCREMENT";}i:2;i:67585;}i:1377;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:67599;}i:1378;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:248:" makes the row automatically increment the number as you insert more data even if you don't insert anything into it (this is why we don't have to worry about it when inserting new rows in the model). Making it the primary key makes MySQL index the ";}i:2;i:67601;}i:1379;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:67849;}i:1380;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:2:"id";}i:2;i:67851;}i:1381;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:67853;}i:1382;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:89:" column and gives it precedence making any look up queries with a matching id super fast.";}i:2;i:67855;}i:1383;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:67944;}i:1384;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:67944;}i:1385;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:79:"You should also take care to choose the correct data type for each column. Use ";}i:2;i:67946;}i:1386;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:68025;}i:1387;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:7:"VARCHAR";}i:2;i:68027;}i:1388;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:68034;}i:1389;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:51:" for any text with a set number of characters. Use ";}i:2;i:68036;}i:1390;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:68087;}i:1391;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:4:"TEXT";}i:2;i:68089;}i:1392;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:68093;}i:1393;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:56:" when you don't know how the long the data will be. Use ";}i:2;i:68095;}i:1394;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:68151;}i:1395;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:8:"FULLTEXT";}i:2;i:68153;}i:1396;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:68161;}i:1397;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:50:" when you're indexing it using MyISAM tables. Use ";}i:2;i:68163;}i:1398;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:68213;}i:1399;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:7:"TINYINT";}i:2;i:68215;}i:1400;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:68222;}i:1401;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:74:" if it's a binary true/false boolean data field. You can find out more at ";}i:2;i:68224;}i:1402;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:54:"http://dev.mysql.com/doc/refman/5.0/en/data-types.html";i:1;s:35:"MySQL's documentation on data types";}i:2;i:68298;}i:1403;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:".";}i:2;i:68392;}i:1404;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:68394;}i:1405;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:68394;}i:1406;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:14:"Active Records";i:1;i:3;i:2;i:68394;}i:2;i:68394;}i:1407;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:68394;}i:1408;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:68394;}i:1409;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:169:"When interfacing with a database programmatically, it's best practice to use a library to abstract the process of connecting to the database and also provide a standard ";}i:2;i:68420;}i:1410;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"API";}i:2;i:68589;}i:1411;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:71:" to all the different database commands. This is because although many ";}i:2;i:68592;}i:1412;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"SQL";}i:2;i:68663;}i:1413;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:15:" databases use ";}i:2;i:68666;}i:1414;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"SQL";}i:2;i:68681;}i:1415;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:39:", they often have differences in their ";}i:2;i:68684;}i:1416;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"SQL";}i:2;i:68723;}i:1417;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:138:" commands. It's far more easier to have a library remember all these commands then you writing different commands for different databases.";}i:2;i:68726;}i:1418;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:68864;}i:1419;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:68864;}i:1420;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:111:"Another reason to use libraries is security. A library will often force you to conform to a certain of writing ";}i:2;i:68866;}i:1421;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"SQL";}i:2;i:68977;}i:1422;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:57:" commands, and libraries would automatically escape your ";}i:2;i:68980;}i:1423;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"SQL";}i:2;i:69037;}i:1424;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:34:" commands to prevent any injected ";}i:2;i:69040;}i:1425;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"SQL";}i:2;i:69074;}i:1426;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:26:" destroying your database.";}i:2;i:69077;}i:1427;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:69103;}i:1428;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:69103;}i:1429;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:4:"For ";}i:2;i:69105;}i:1430;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"PHP";}i:2;i:69109;}i:1431;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:54:" in general, one the best native extensions to use is ";}i:2;i:69112;}i:1432;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:37:"http://php.net/manual/en/book.pdo.php";i:1;s:3:"PDO";}i:2;i:69166;}i:1433;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:58:". However for Codeigniter, it has a native library called ";}i:2;i:69211;}i:1434;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:70:"http://ellislab.com/codeigniter/user-guide/database/active_record.html";i:1;s:14:"Active Records";}i:2;i:69269;}i:1435;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:86:", and it's simpler to use. Refer to Codeigniter's documentation on the Active Records ";}i:2;i:69358;}i:1436;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"API";}i:2;i:69444;}i:1437;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:88:" for more information. Do note that Active Records is a subset of Codeigniter's overall ";}i:2;i:69447;}i:1438;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:62:"http://ellislab.com/codeigniter/user-guide/database/index.html";i:1;s:14:"Database class";}i:2;i:69535;}i:1439;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:54:". The database class provides much more functionality.";}i:2;i:69616;}i:1440;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:69670;}i:1441;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:69672;}i:1442;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:34:"Codeigniter Database Configuration";i:1;i:4;i:2;i:69672;}i:2;i:69672;}i:1443;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:4;}i:2;i:69672;}i:1444;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:69672;}i:1445;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:42:"For Codeigniter you should be configuring ";}i:2;i:69716;}i:1446;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:70:"http://ellislab.com/codeigniter/user-guide/database/configuration.html";i:1;s:58:"your database's connections in the configuration directory";}i:2;i:69758;}i:1447;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:" ";}i:2;i:69891;}i:1448;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:69892;}i:1449;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:31:"application/config/database.php";}i:2;i:69894;}i:1450;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:69925;}i:1451;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:".";}i:2;i:69927;}i:1452;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:69928;}i:1453;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:69928;}i:1454;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:5:"Your ";}i:2;i:69930;}i:1455;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:67:"http://ellislab.com/codeigniter/user-guide/database/connecting.html";i:1;s:31:"database can then be autoloaded";}i:2;i:69935;}i:1456;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:23:" through Codeigniter's ";}i:2;i:70038;}i:1457;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:70061;}i:1458;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:31:"application/config/autoload.php";}i:2;i:70063;}i:1459;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:70094;}i:1460;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:55:" and always switched on no matter which the user is on.";}i:2;i:70096;}i:1461;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:70151;}i:1462;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:70151;}i:1463;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:20:"You should set your ";}i:2;i:70153;}i:1464;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:70173;}i:1465;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:8:"db_debug";}i:2;i:70175;}i:1466;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:70183;}i:1467;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:122:" option to false during production and if you're explicitly logging the database errors as shown in the MVC model section.";}i:2;i:70185;}i:1468;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:70307;}i:1469;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:70307;}i:1470;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:36:"Note to access database errors when ";}i:2;i:70309;}i:1471;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:70345;}i:1472;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:8:"db_debug";}i:2;i:70347;}i:1473;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:70355;}i:1474;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:58:" is off you need to use these two undocumented properties:";}i:2;i:70357;}i:1475;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:70415;}i:1476;a:3:{i:0;s:4:"code";i:1;a:3:{i:0;s:353:"
$num   = $this->db->_error_number()
$msg = $this->db->_error_message();
//this is also useful to examine the actual query passed into the database
$last_query = $this->db->last_query();

//you can then log it via log_message
log_message('error', 'Problem Inserting to user table: ' . $msg . ' (' . $num . '), using this query: "' . $last_query . '"');
";i:1;s:3:"php";i:2;N;}i:2;i:70422;}i:1477;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:70422;}i:1478;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:6:"Refer ";}i:2;i:70789;}i:1479;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:62:"http://ellislab.com/codeigniter/user-guide/general/errors.html";i:1;s:45:"Codeigniter's documentation on error handling";}i:2;i:70795;}i:1480;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:303:" for more information on logging. Note that because log files are written to disk, this won't work in hosts that don't offer writable directories. Cloud hosts normally don't offer writable directories. However it is possible to make your helper class to log it to a third party or send logs to an email.";}i:2;i:70907;}i:1481;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:71211;}i:1482;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:71211;}i:1483;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:6:"Search";i:1;i:3;i:2;i:71211;}i:2;i:71211;}i:1484;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:71211;}i:1485;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:71211;}i:1486;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:279:"One of the most common things we do on a database is search for data. Actually most of the times we're selecting data that match some condition. That is not considered to be a search problem, it's a matching problem. This section specifically refers to wildcard search using the ";}i:2;i:71229;}i:1487;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:71508;}i:1488;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:4:"LIKE";}i:2;i:71510;}i:1489;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:71514;}i:1490;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:43:" operator or full text search with indexes.";}i:2;i:71516;}i:1491;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:71559;}i:1492;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:71559;}i:1493;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:4:"The ";}i:2;i:71561;}i:1494;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:60:"http://dev.mysql.com/doc/refman/5.0/en/pattern-matching.html";i:1;s:21:"SQL ''LIKE'' operator";}i:2;i:71565;}i:1495;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:71:" works like pattern matching. Essentially when you call something like ";}i:2;i:71651;}i:1496;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:71722;}i:1497;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:39:"SELECT * FROM pet WHERE name LIKE 'b%';";}i:2;i:71724;}i:1498;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:71763;}i:1499;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:76:" and this would get all rows from the pet table, where the name starts with ";}i:2;i:71765;}i:1500;a:3:{i:0;s:18:"doublequoteopening";i:1;a:0:{}i:2;i:71841;}i:1501;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:"b";}i:2;i:71842;}i:1502;a:3:{i:0;s:18:"doublequoteclosing";i:1;a:0:{}i:2;i:71843;}i:1503;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:36:" and any number of characters after ";}i:2;i:71844;}i:1504;a:3:{i:0;s:18:"doublequoteopening";i:1;a:0:{}i:2;i:71880;}i:1505;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:"b";}i:2;i:71881;}i:1506;a:3:{i:0;s:18:"doublequoteclosing";i:1;a:0:{}i:2;i:71882;}i:1507;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:6:". The ";}i:2;i:71883;}i:1508;a:3:{i:0;s:18:"doublequoteclosing";i:1;a:0:{}i:2;i:71889;}i:1509;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:"%";}i:2;i:71890;}i:1510;a:3:{i:0;s:18:"doublequoteclosing";i:1;a:0:{}i:2;i:71891;}i:1511;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:76:" sign is a wildcard. If you're looking for a row column to mention the word ";}i:2;i:71892;}i:1512;a:3:{i:0;s:18:"doublequoteopening";i:1;a:0:{}i:2;i:71968;}i:1513;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:3:"cat";}i:2;i:71969;}i:1514;a:3:{i:0;s:18:"doublequoteclosing";i:1;a:0:{}i:2;i:71972;}i:1515;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:37:" anywhere, then you would change the ";}i:2;i:71973;}i:1516;a:3:{i:0;s:18:"doublequoteopening";i:1;a:0:{}i:2;i:72010;}i:1517;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:2:"b%";}i:2;i:72011;}i:1518;a:3:{i:0;s:18:"doublequoteclosing";i:1;a:0:{}i:2;i:72013;}i:1519;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:4:" to ";}i:2;i:72014;}i:1520;a:3:{i:0;s:18:"doublequoteclosing";i:1;a:0:{}i:2;i:72018;}i:1521;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:5:"%cat%";}i:2;i:72019;}i:1522;a:3:{i:0;s:18:"doublequoteclosing";i:1;a:0:{}i:2;i:72024;}i:1523;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:58:". And of course if you're looking for something to end in ";}i:2;i:72025;}i:1524;a:3:{i:0;s:18:"doublequoteopening";i:1;a:0:{}i:2;i:72083;}i:1525;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:3:"cat";}i:2;i:72084;}i:1526;a:3:{i:0;s:18:"doublequoteclosing";i:1;a:0:{}i:2;i:72087;}i:1527;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:16:", then it would ";}i:2;i:72088;}i:1528;a:3:{i:0;s:18:"doublequoteclosing";i:1;a:0:{}i:2;i:72104;}i:1529;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:4:"%cat";}i:2;i:72105;}i:1530;a:3:{i:0;s:18:"doublequoteclosing";i:1;a:0:{}i:2;i:72109;}i:1531;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:146:". The Codeigniter's Active Records library provides an abstraction for these commands giving you a very simple search functionality. Commonly the ";}i:2;i:72110;}i:1532;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:72256;}i:1533;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:4:"LIKE";}i:2;i:72258;}i:1534;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:72262;}i:1535;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:225:" operator is used to search for tags. Imagine you had a blog post, and each blog post is given a set of tags. Kind of like the tags that Youtube uses for their videos. In order to search for these tags, you would not use the ";}i:2;i:72264;}i:1536;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:72489;}i:1537;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:5:"WHERE";}i:2;i:72491;}i:1538;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:72496;}i:1539;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:25:" operator, you would use ";}i:2;i:72498;}i:1540;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:72523;}i:1541;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:4:"LIKE";}i:2;i:72525;}i:1542;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:72529;}i:1543;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:6:" with ";}i:2;i:72531;}i:1544;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:72537;}i:1545;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:9:"%tagname%";}i:2;i:72539;}i:1546;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:72548;}i:1547;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:63:". If you had multiple tags to search for, you could either use ";}i:2;i:72550;}i:1548;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:72613;}i:1549;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:8:"AND LIKE";}i:2;i:72615;}i:1550;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:72623;}i:1551;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:4:" or ";}i:2;i:72625;}i:1552;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:72629;}i:1553;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:7:"OR LIKE";}i:2;i:72631;}i:1554;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:72638;}i:1555;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:102:". The former makes sure that all tags are present, the latter makes sure at least one tag is present. ";}i:2;i:72640;}i:1556;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:72742;}i:1557;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:72742;}i:1558;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:6:"Using ";}i:2;i:72744;}i:1559;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:72750;}i:1560;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:4:"LIKE";}i:2;i:72752;}i:1561;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:72756;}i:1562;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:118:" is highly precise, often you need more fine grained control over you search capability. What if you're searching for ";}i:2;i:72758;}i:1563;a:3:{i:0;s:18:"doublequoteopening";i:1;a:0:{}i:2;i:72876;}i:1564;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:3:"cat";}i:2;i:72877;}i:1565;a:3:{i:0;s:18:"doublequoteclosing";i:1;a:0:{}i:2;i:72880;}i:1566;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:16:", but a tag has ";}i:2;i:72881;}i:1567;a:3:{i:0;s:18:"doublequoteopening";i:1;a:0:{}i:2;i:72897;}i:1568;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:4:"cats";}i:2;i:72898;}i:1569;a:3:{i:0;s:18:"doublequoteclosing";i:1;a:0:{}i:2;i:72902;}i:1570;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:11:". Then the ";}i:2;i:72903;}i:1571;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:72914;}i:1572;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:4:"LIKE";}i:2;i:72916;}i:1573;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:72920;}i:1574;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:33:" operator would not the tag with ";}i:2;i:72922;}i:1575;a:3:{i:0;s:18:"doublequoteopening";i:1;a:0:{}i:2;i:72955;}i:1576;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:4:"cats";}i:2;i:72956;}i:1577;a:3:{i:0;s:18:"doublequoteclosing";i:1;a:0:{}i:2;i:72960;}i:1578;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:50:" unless you explicitly specified them. What about ";}i:2;i:72961;}i:1579;a:3:{i:0;s:18:"doublequoteopening";i:1;a:0:{}i:2;i:73011;}i:1580;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:7:"kittens";}i:2;i:73012;}i:1581;a:3:{i:0;s:18:"doublequoteclosing";i:1;a:0:{}i:2;i:73019;}i:1582;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:168:"? What happens when the data your searching through is larger, like perhaps you're searching through the blog's article content. This is when you need full text search.";}i:2;i:73020;}i:1583;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:73188;}i:1584;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:73188;}i:1585;a:3:{i:0;s:13:"interwikilink";i:1;a:4:{i:0;s:19:"wp>Full text search";i:1;s:16:"Full text search";i:2;s:2:"wp";i:3;s:16:"Full text search";}i:2;i:73190;}i:1586;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:147:" works by first establishing an index of the data. This index often groups related terms together, this is called stemming. For example, the words ";}i:2;i:73230;}i:1587;a:3:{i:0;s:18:"doublequoteopening";i:1;a:0:{}i:2;i:73377;}i:1588;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:6:"drives";}i:2;i:73378;}i:1589;a:3:{i:0;s:18:"doublequoteclosing";i:1;a:0:{}i:2;i:73384;}i:1590;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:2:", ";}i:2;i:73385;}i:1591;a:3:{i:0;s:18:"doublequoteopening";i:1;a:0:{}i:2;i:73387;}i:1592;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:5:"drove";}i:2;i:73388;}i:1593;a:3:{i:0;s:18:"doublequoteclosing";i:1;a:0:{}i:2;i:73393;}i:1594;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:6:", and ";}i:2;i:73394;}i:1595;a:3:{i:0;s:18:"doublequoteopening";i:1;a:0:{}i:2;i:73400;}i:1596;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:6:"driven";}i:2;i:73401;}i:1597;a:3:{i:0;s:18:"doublequoteclosing";i:1;a:0:{}i:2;i:73407;}i:1598;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:61:" will be recorded in the index under the single concept word ";}i:2;i:73408;}i:1599;a:3:{i:0;s:18:"doublequoteopening";i:1;a:0:{}i:2;i:73469;}i:1600;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:6:"drive.";}i:2;i:73470;}i:1601;a:3:{i:0;s:18:"doublequoteclosing";i:1;a:0:{}i:2;i:73476;}i:1602;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:40:" It will also ignore stop words such as ";}i:2;i:73477;}i:1603;a:3:{i:0;s:13:"emphasis_open";i:1;a:0:{}i:2;i:73517;}i:1604;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:3:"the";}i:2;i:73519;}i:1605;a:3:{i:0;s:14:"emphasis_close";i:1;a:0:{}i:2;i:73522;}i:1606;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:2:", ";}i:2;i:73524;}i:1607;a:3:{i:0;s:13:"emphasis_open";i:1;a:0:{}i:2;i:73526;}i:1608;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:2:"is";}i:2;i:73528;}i:1609;a:3:{i:0;s:14:"emphasis_close";i:1;a:0:{}i:2;i:73530;}i:1610;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:2:", ";}i:2;i:73532;}i:1611;a:3:{i:0;s:13:"emphasis_open";i:1;a:0:{}i:2;i:73534;}i:1612;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:2:"at";}i:2;i:73536;}i:1613;a:3:{i:0;s:14:"emphasis_close";i:1;a:0:{}i:2;i:73538;}i:1614;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:2:", ";}i:2;i:73540;}i:1615;a:3:{i:0;s:13:"emphasis_open";i:1;a:0:{}i:2;i:73542;}i:1616;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:5:"which";}i:2;i:73544;}i:1617;a:3:{i:0;s:14:"emphasis_close";i:1;a:0:{}i:2;i:73549;}i:1618;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:6:", and ";}i:2;i:73551;}i:1619;a:3:{i:0;s:13:"emphasis_open";i:1;a:0:{}i:2;i:73557;}i:1620;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:2:"on";}i:2;i:73559;}i:1621;a:3:{i:0;s:14:"emphasis_close";i:1;a:0:{}i:2;i:73561;}i:1622;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:232:". Then the search algorithm goes through the index instead of going through the raw data. This makes for a faster search on a large amount of content. The balancing act in using full text search is between precision and recall. The ";}i:2;i:73563;}i:1623;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:73795;}i:1624;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:4:"LIKE";}i:2;i:73797;}i:1625;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:73801;}i:1626;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:589:" operator has 100% precision, however it will have low recall. This makes it powerful if you're searching for an exact term. But often we don't know what kind of result we're looking for, so the full text search has higher recall. This however creates the problem of false positives. Results which are irrelevant to our query. There are a number of statistical and algorithmic techniques to improve a search engine, and they are all catered to different situations. You can read more about them on the Wikipedia article on full text search. For our purposes, we can keep it simple and use ";}i:2;i:73803;}i:1627;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:74392;}i:1628;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:4:"LIKE";}i:2;i:74394;}i:1629;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:74398;}i:1630;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:80:" when we're looking for tag like data, and full text search for everything else.";}i:2;i:74400;}i:1631;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:74480;}i:1632;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:74480;}i:1633;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:476:"To implement full text search on MySQL, you need to use the MyISAM table engine, not InnoDB. Remember that InnoDB provides transactions and is more efficient for write intensive tables, whereas MyISAM is optimised for read intensive and thus search based tables. You can use both tables together in a single database. Setting up needs to be done when you create the table first, not after you create the table. To setup with the MyISAM engine, you can either use PHPMyAdmin's ";}i:2;i:74482;}i:1634;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"GUI";}i:2;i:74958;}i:1635;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:2:", ";}i:2;i:74961;}i:1636;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:77:"http://www.ignoredbydinosaurs.com/2012/05/database-migrations-codeigniter-101";i:1;s:21:"Codeigniter's DBForge";}i:2;i:74963;}i:1637;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:13:" or straight ";}i:2;i:75066;}i:1638;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"SQL";}i:2;i:75079;}i:1639;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:14:" such as this:";}i:2;i:75082;}i:1640;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:75096;}i:1641;a:3:{i:0;s:4:"code";i:1;a:3:{i:0;s:237:"
CREATE TABLE pages (
  id int(10) UNSIGNED NOT NULL AUTO_INCREMENT,
  url text NOT NULL,
  title text NOT NULL,
  content text NOT NULL,
  updated datetime NOT NULL,
  PRIMARY KEY  (id),
  FULLTEXT KEY content (content)
) ENGINE=MyISAM
";i:1;s:3:"sql";i:2;N;}i:2;i:75103;}i:1642;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:75103;}i:1643;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:77:"If you already created the table, you can alter the table's engine using the ";}i:2;i:75354;}i:1644;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:55:"http://dev.mysql.com/doc/refman/5.0/en/alter-table.html";i:1;s:11:"ALTER TABLE";}i:2;i:75431;}i:1645;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:50:" syntax. Although it's easier to use PHPMyAdmin's ";}i:2;i:75502;}i:1646;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"GUI";}i:2;i:75552;}i:1647;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:317:". We're going to start using the database migration tool via Codeigniter's DBForge, so we can keep our database's schema synchronised between development servers. Do note that DBForge currently doesn't support changing the engine of the table, so you'll need to add an additional command using standard query methods.";}i:2;i:75555;}i:1648;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:75872;}i:1649;a:3:{i:0;s:4:"code";i:1;a:3:{i:0;s:137:"
//refer to migrations section to learn more about why we're doing this
$this->db->query('ALTER TABLE  `table_name` ENGINE = MYISAM');  
";i:1;s:3:"php";i:2;N;}i:2;i:75879;}i:1650;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:75879;}i:1651;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:113:"Active Records by itself does not have abstracted methods for full text search. However it is possible using the ";}i:2;i:76030;}i:1652;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:76143;}i:1653;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:5:"$this";}i:2;i:76145;}i:1654;a:3:{i:0;s:6:"entity";i:1;a:1:{i:0;s:2:"->";}i:2;i:76150;}i:1655;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:2:"db";}i:2;i:76152;}i:1656;a:3:{i:0;s:6:"entity";i:1;a:1:{i:0;s:2:"->";}i:2;i:76154;}i:1657;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:7:"where()";}i:2;i:76156;}i:1658;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:76163;}i:1659;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:129:" method. It has some quirks though. The method by default places backticks on your table and field names. This will corrupt your ";}i:2;i:76165;}i:1660;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"SQL";}i:2;i:76294;}i:1661;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:66:" query. You need to run a command with the 2nd parameter equal to ";}i:2;i:76297;}i:1662;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:76363;}i:1663;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:4:"NULL";}i:2;i:76365;}i:1664;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:76369;}i:1665;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:34:" and the third parameter equal to ";}i:2;i:76371;}i:1666;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:76405;}i:1667;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:5:"FALSE";}i:2;i:76407;}i:1668;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:76412;}i:1669;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:".";}i:2;i:76414;}i:1670;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:76415;}i:1671;a:3:{i:0;s:4:"code";i:1;a:3:{i:0;s:67:"
$this->db->where('MATCH (field) AGAINST ("value")', NULL, FALSE);
";i:1;s:3:"php";i:2;N;}i:2;i:76422;}i:1672;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:76422;}i:1673;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:87:"To learn about the syntax of full text searches check out these two external resources:";}i:2;i:76503;}i:1674;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:76591;}i:1675;a:3:{i:0;s:10:"listu_open";i:1;a:0:{}i:2;i:76591;}i:1676;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:76591;}i:1677;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:76591;}i:1678;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:" ";}i:2;i:76595;}i:1679;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:56:"http://www.mysqltutorial.org/mysql-full-text-search.aspx";i:1;N;}i:2;i:76596;}i:1680;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:76652;}i:1681;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:76652;}i:1682;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:76652;}i:1683;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:76652;}i:1684;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:" ";}i:2;i:76656;}i:1685;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:59:"http://devzone.zend.com/26/using-mysql-full-text-searching/";i:1;N;}i:2;i:76657;}i:1686;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:76716;}i:1687;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:76716;}i:1688;a:3:{i:0;s:11:"listu_close";i:1;a:0:{}i:2;i:76716;}i:1689;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:76716;}i:1690;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:30:"You can also elect to use the ";}i:2;i:76718;}i:1691;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:76748;}i:1692;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:5:"$this";}i:2;i:76750;}i:1693;a:3:{i:0;s:6:"entity";i:1;a:1:{i:0;s:2:"->";}i:2;i:76755;}i:1694;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:2:"db";}i:2;i:76757;}i:1695;a:3:{i:0;s:6:"entity";i:1;a:1:{i:0;s:2:"->";}i:2;i:76759;}i:1696;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:7:"query()";}i:2;i:76761;}i:1697;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:76768;}i:1698;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:108:" method as an alternative to Active Records. However this does not automatically escape the values for your ";}i:2;i:76770;}i:1699;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"SQL";}i:2;i:76878;}i:1700;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:136:" query opening you up to security issues. You will need to manually escape the values or use query binding. All of this is discussed in ";}i:2;i:76881;}i:1701;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:64:"http://ellislab.com/codeigniter/user-guide/database/queries.html";i:1;s:47:"Codeigniter's documentation on database queries";}i:2;i:77017;}i:1702;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:".";}i:2;i:77133;}i:1703;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:77134;}i:1704;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:77134;}i:1705;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:184:"If you have a large amount of content, and search is starting to get slower. You can either re-architect your database using one of the other database stores, or you can integrate the ";}i:2;i:77136;}i:1706;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:24:"http://sphinxsearch.com/";i:1;s:20:"Sphinx search engine";}i:2;i:77320;}i:1707;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:".";}i:2;i:77369;}i:1708;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:77370;}i:1709;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:6:"vshare";i:1;a:8:{s:4:"site";s:7:"youtube";s:5:"video";s:11:"d--v0NhjIfc";s:5:"flash";s:87:"http://www.youtube.com/v/d--v0NhjIfc?allowFullScreen=true&allowScriptAccess=always&fs=1";s:4:"vars";a:3:{s:15:"allowFullScreen";s:4:"true";s:17:"allowScriptAccess";s:6:"always";s:2:"fs";s:1:"1";}s:5:"align";i:3;s:5:"width";i:520;s:6:"height";i:406;s:5:"title";s:0:"";}i:2;i:5;i:3;s:31:"{{ youtube>d--v0NhjIfc?large }}";}i:2;i:77372;}i:1710;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:77404;}i:1711;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:5:"Redis";i:1;i:3;i:2;i:77404;}i:2;i:77404;}i:1712;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:77404;}i:1713;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:77404;}i:1714;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:274:"Redis is a special database that is catered towards volatile data. This is data in which persistence is not a major issue. It's data you're willing to throw away after finishing the session. It operates like an in-memory key to value data store. This means it is super fast.";}i:2;i:77421;}i:1715;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:77695;}i:1716;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:77695;}i:1717;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:202:"Redis in terms of web application development is usually used where memcached was used before. Essentially you can use it for session data, real time messages, publish and subscribing, caching and chat.";}i:2;i:77697;}i:1718;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:77899;}i:1719;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:77899;}i:1720;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:262:"We can switch to using Redis for session data if you require that kind of performance. For now we'll stick with working with MySQL, because it's simple and its enough for startup traffic. However if you're interested in hooking up Redis check out these articles:";}i:2;i:77901;}i:1721;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:78164;}i:1722;a:3:{i:0;s:10:"listu_open";i:1;a:0:{}i:2;i:78164;}i:1723;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:78164;}i:1724;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:78164;}i:1725;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:" ";}i:2;i:78168;}i:1726;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:20:"http://try.redis.io/";i:1;s:25:"Interative Redis Tutorial";}i:2;i:78169;}i:1727;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:78219;}i:1728;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:78219;}i:1729;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:78219;}i:1730;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:78219;}i:1731;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:" ";}i:2;i:78223;}i:1732;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:66:"http://phpmaster.com/an-introduction-to-redis-in-php-using-predis/";i:1;s:36:"Introduction to using Redis with PHP";}i:2;i:78224;}i:1733;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:78331;}i:1734;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:78331;}i:1735;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:78331;}i:1736;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:78331;}i:1737;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:" ";}i:2;i:78335;}i:1738;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:73:"http://www.justincarmony.com/blog/2012/01/10/php-workers-with-redis-solo/";i:1;s:44:"Using Predis as a message queue to pass jobs";}i:2;i:78336;}i:1739;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:78458;}i:1740;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:78458;}i:1741;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:78458;}i:1742;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:78458;}i:1743;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:" ";}i:2;i:78462;}i:1744;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:53:"http://blog.jmoz.co.uk/websockets-ratchet-react-redis";i:1;s:22:"Redis with Web Sockets";}i:2;i:78463;}i:1745;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:78543;}i:1746;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:78543;}i:1747;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:78543;}i:1748;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:78543;}i:1749;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:32:" Libraries for utilising Redis: ";}i:2;i:78547;}i:1750;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:44:"https://github.com/joelcox/codeigniter-redis";i:1;s:17:"Codeigniter Redis";}i:2;i:78579;}i:1751;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:2:", ";}i:2;i:78645;}i:1752;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:29:"https://github.com/nrk/predis";i:1;s:6:"Predis";}i:2;i:78647;}i:1753;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:5:" and ";}i:2;i:78687;}i:1754;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:35:"https://github.com/nrk/predis-async";i:1;s:30:"Predis-Async (requires daemon)";}i:2;i:78692;}i:1755;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:78762;}i:1756;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:78762;}i:1757;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:78762;}i:1758;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:78762;}i:1759;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:" ";}i:2;i:78766;}i:1760;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:24:"http://garantiadata.com/";i:1;s:18:"Redis Cloud Server";}i:2;i:78767;}i:1761;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:24:" - for using with Cloud9";}i:2;i:78814;}i:1762;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:78838;}i:1763;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:78838;}i:1764;a:3:{i:0;s:11:"listu_close";i:1;a:0:{}i:2;i:78838;}i:1765;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:78839;}i:1766;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:10:"Migrations";i:1;i:3;i:2;i:78839;}i:2;i:78839;}i:1767;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:78839;}i:1768;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:78839;}i:1769;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:40:"Talk about using DB forge for migrations";}i:2;i:78861;}i:1770;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:78902;}i:1771;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:78902;}i:1772;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:8:"Security";i:1;i:2;i:2;i:78902;}i:2;i:78902;}i:1773;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:2;}i:2;i:78902;}i:1774;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:78902;}i:1775;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:23:"Should make a security ";}i:2;i:78924;}i:1776;a:3:{i:0;s:18:"doublequoteopening";i:1;a:0:{}i:2;i:78947;}i:1777;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:9:"checklist";}i:2;i:78948;}i:1778;a:3:{i:0;s:18:"doublequoteclosing";i:1;a:0:{}i:2;i:78957;}i:1779;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:19:" before deployment.";}i:2;i:78958;}i:1780;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:78977;}i:1781;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:78979;}i:1782;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:16:"Input Validation";i:1;i:3;i:2;i:78979;}i:2;i:78979;}i:1783;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:78979;}i:1784;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:78979;}i:1785;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:8:"Escaping";}i:2;i:79007;}i:1786;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:79015;}i:1787;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:79015;}i:1788;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:21:"Testing against rules";}i:2;i:79017;}i:1789;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:79038;}i:1790;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:79038;}i:1791;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"SQL";}i:2;i:79040;}i:1792;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:10:" injection";}i:2;i:79043;}i:1793;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:79053;}i:1794;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:79055;}i:1795;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:4:"CSRF";i:1;i:3;i:2;i:79055;}i:2;i:79055;}i:1796;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:79055;}i:1797;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:79055;}i:1798;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:18:"Handling Passwords";}i:2;i:79072;}i:1799;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:79090;}i:1800;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:79092;}i:1801;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:18:"Handling Passwords";i:1;i:3;i:2;i:79092;}i:2;i:79092;}i:1802;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:79092;}i:1803;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:79092;}i:1804;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:7:"Salting";}i:2;i:79122;}i:1805;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:79129;}i:1806;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:79129;}i:1807;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:17:"Bcrypt encryption";}i:2;i:79131;}i:1808;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:79148;}i:1809;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:79148;}i:1810;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:44:"http://crackstation.net/hashing-security.htm";i:1;N;}i:2;i:79150;}i:1811;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:79194;}i:1812;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:79194;}i:1813;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:42:"http://php.net/manual/en/faq.passwords.php";i:1;N;}i:2;i:79196;}i:1814;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:79238;}i:1815;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:79238;}i:1816;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:37:"https://gist.github.com/nikic/3707231";i:1;N;}i:2;i:79240;}i:1817;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:79277;}i:1818;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:79277;}i:1819;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:38:"https://wiki.php.net/rfc/password_hash";i:1;N;}i:2;i:79279;}i:1820;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:79317;}i:1821;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:79317;}i:1822;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:17:"Can we use this? ";}i:2;i:79319;}i:1823;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:44:"https://github.com/ircmaxell/password_compat";i:1;N;}i:2;i:79336;}i:1824;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:122:" min version 5.3.7. Cannot run on C9 atm, or Appfog. However Pagodabox and dotCloud will work. Also local installation of ";}i:2;i:79380;}i:1825;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"PHP";}i:2;i:79502;}i:1826;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:15:" will work too.";}i:2;i:79505;}i:1827;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:79521;}i:1828;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:79521;}i:1829;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:23:"Payments & Credit Cards";i:1;i:3;i:2;i:79521;}i:2;i:79521;}i:1830;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:79521;}i:1831;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:79521;}i:1832;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:92:"In short don't bother. Leave it to the experts. Have a third party process transactions and ";}i:2;i:79556;}i:1833;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"SSL";}i:2;i:79648;}i:1834;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:13:" at all times";}i:2;i:79651;}i:1835;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:79664;}i:1836;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:79666;}i:1837;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:3:"SSL";i:1;i:3;i:2;i:79666;}i:2;i:79666;}i:1838;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:79666;}i:1839;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:79666;}i:1840;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:42:"For transmitting any sensitive information";}i:2;i:79681;}i:1841;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:79724;}i:1842;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:79724;}i:1843;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:25:"Sessions & Authentication";i:1;i:2;i:2;i:79724;}i:2;i:79724;}i:1844;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:2;}i:2;i:79724;}i:1845;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:79724;}i:1846;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:19:"Cursory note about ";}i:2;i:79763;}i:1847;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:4:"AJAX";}i:2;i:79782;}i:1848;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:79786;}i:1849;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:79788;}i:1850;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:8:"Sessions";i:1;i:3;i:2;i:79788;}i:2;i:79788;}i:1851;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:79788;}i:1852;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:79788;}i:1853;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:12:"Cookie based";}i:2;i:79808;}i:1854;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:79820;}i:1855;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:79820;}i:1856;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"URL";}i:2;i:79822;}i:1857;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:6:" based";}i:2;i:79825;}i:1858;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:79831;}i:1859;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:79831;}i:1860;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"PHP";}i:2;i:79833;}i:1861;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:14:" Session based";}i:2;i:79836;}i:1862;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:79850;}i:1863;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:79850;}i:1864;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:34:"Database based (best!) using Redis";}i:2;i:79852;}i:1865;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:79886;}i:1866;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:79888;}i:1867;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:21:"Authentication System";i:1;i:3;i:2;i:79888;}i:2;i:79888;}i:1868;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:79888;}i:1869;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:79888;}i:1870;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:23:"Login password matching";}i:2;i:79921;}i:1871;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:79944;}i:1872;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:79944;}i:1873;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:52:"Permissions using group system and bitwise operators";}i:2;i:79946;}i:1874;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:79998;}i:1875;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:79998;}i:1876;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:30:"http://ulogin.sourceforge.net/";i:1;N;}i:2;i:80000;}i:1877;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:80030;}i:1878;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:80032;}i:1879;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:19:"Access Control List";i:1;i:3;i:2;i:80032;}i:2;i:80032;}i:1880;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:80032;}i:1881;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:80032;}i:1882;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:50:"https://github.com/benedmunds/CodeIgniter-Ion-Auth";i:1;N;}i:2;i:80063;}i:1883;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:80113;}i:1884;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:80113;}i:1885;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:54:"http://lucdebrouwer.nl/adding-zend-acl-to-codeigniter/";i:1;N;}i:2;i:80115;}i:1886;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:0:"";}i:2;i:80169;}i:1887;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:80170;}i:1888;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:80170;}i:1889;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:4:"AJAX";i:1;i:3;i:2;i:80170;}i:2;i:80170;}i:1890;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:80170;}i:1891;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:80170;}i:1892;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:23:"Can use normal sessions";}i:2;i:80186;}i:1893;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:80209;}i:1894;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:80209;}i:1895;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:40:"Can use REST based authentication using ";}i:2;i:80211;}i:1896;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"API";}i:2;i:80251;}i:1897;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:46:" key (but more for providing external service_";}i:2;i:80254;}i:1898;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:80300;}i:1899;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:80300;}i:1900;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:32:"Username & Login on each request";}i:2;i:80302;}i:1901;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:80334;}i:1902;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:80334;}i:1903;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:58:"Using Oauth and Oauth2 but refer to providing web services";}i:2;i:80336;}i:1904;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:80394;}i:1905;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:80396;}i:1906;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:5:"Oauth";i:1;i:3;i:2;i:80396;}i:2;i:80396;}i:1907;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:80396;}i:1908;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:80396;}i:1909;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:18:"Login via whatever";}i:2;i:80413;}i:1910;a:3:{i:0;s:6:"entity";i:1;a:1:{i:0;s:3:"...";}i:2;i:80431;}i:1911;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:94:" you can build it yourself as an Oauth consumer and even provide login as by provisining Oauth";}i:2;i:80434;}i:1912;a:3:{i:0;s:6:"entity";i:1;a:1:{i:0;s:3:"...";}i:2;i:80528;}i:1913;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:32:" but you can just this right now";}i:2;i:80531;}i:1914;a:3:{i:0;s:6:"entity";i:1;a:1:{i:0;s:3:"...";}i:2;i:80563;}i:1915;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:80566;}i:1916;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:80566;}i:1917;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:34:"http://hybridauth.sourceforge.net/";i:1;N;}i:2;i:80568;}i:1918;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:0:"";}i:2;i:80602;}i:1919;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:80603;}i:1920;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:80603;}i:1921;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:9:".htaccess";i:1;i:2;i:2;i:80603;}i:2;i:80603;}i:1922;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:2;}i:2;i:80603;}i:1923;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:80603;}i:1924;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:10:"For apache";}i:2;i:80626;}i:1925;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:80636;}i:1926;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:80636;}i:1927;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"URL";}i:2;i:80638;}i:1928;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:10:" rewriting";}i:2;i:80641;}i:1929;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:80651;}i:1930;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:80651;}i:1931;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:16:"GZIP Compression";}i:2;i:80653;}i:1932;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:80669;}i:1933;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:80671;}i:1934;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:7:"Caching";i:1;i:2;i:2;i:80671;}i:2;i:80671;}i:1935;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:2;}i:2;i:80671;}i:1936;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:80692;}i:1937;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:14:"Opcode Caching";i:1;i:3;i:2;i:80692;}i:2;i:80692;}i:1938;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:80692;}i:1939;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:80692;}i:1940;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:18:"Alredy done by APC";}i:2;i:80718;}i:1941;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:80736;}i:1942;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:80738;}i:1943;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:17:"View File Caching";i:1;i:3;i:2;i:80738;}i:2;i:80738;}i:1944;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:80738;}i:1945;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:80738;}i:1946;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:35:"Include partial or fragment caching";}i:2;i:80767;}i:1947;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:80802;}i:1948;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:80804;}i:1949;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:16:"Database Caching";i:1;i:3;i:2;i:80804;}i:2;i:80804;}i:1950;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:80804;}i:1951;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:80804;}i:1952;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:113:"Caching database calls, but also storing data into a database that is sometimes called from external web services";}i:2;i:80832;}i:1953;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:80945;}i:1954;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:80945;}i:1955;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:43:"Using either Redis (also memory) or MongoDB";}i:2;i:80947;}i:1956;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:80990;}i:1957;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:80992;}i:1958;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:15:"Browser Caching";i:1;i:3;i:2;i:80992;}i:2;i:80992;}i:1959;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:80992;}i:1960;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:80992;}i:1961;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:15:"Using .htaccess";}i:2;i:81019;}i:1962;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:81035;}i:1963;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:81035;}i:1964;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:21:"Concurrent Processing";i:1;i:2;i:2;i:81035;}i:2;i:81035;}i:1965;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:2;}i:2;i:81035;}i:1966;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:81035;}i:1967;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:15:"Multithreading ";}i:2;i:81070;}i:1968;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"PHP";}i:2;i:81085;}i:1969;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:21:" is not multithreaded";}i:2;i:81088;}i:1970;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:81109;}i:1971;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:81109;}i:1972;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:96:"For offloading work (image thumbnailing), distributing work (getting data from multiple places).";}i:2;i:81111;}i:1973;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:81207;}i:1974;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:81207;}i:1975;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:13:"Using daemons";}i:2;i:81209;}i:1976;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:81222;}i:1977;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:81222;}i:1978;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:9:"Using ZMQ";}i:2;i:81224;}i:1979;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:81233;}i:1980;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:81233;}i:1981;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:21:"Using Gearman workers";}i:2;i:81235;}i:1982;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:81256;}i:1983;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:81256;}i:1984;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:167:"A note due to host environments, you may not able to use daemons, zmq or gearman. You may then have to use hacks, or use dotCloud's workers. Or thirdparty the workers.";}i:2;i:81258;}i:1985;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:81425;}i:1986;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:81425;}i:1987;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:37:"Use Supervisor to keep track of tasks";}i:2;i:81427;}i:1988;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:81464;}i:1989;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:81466;}i:1990;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:27:"Consuming Web Services APIs";i:1;i:2;i:2;i:81466;}i:2;i:81466;}i:1991;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:2;}i:2;i:81466;}i:1992;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:81466;}i:1993;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:10:"Using REST";}i:2;i:81507;}i:1994;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:81517;}i:1995;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:81517;}i:1996;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:5:"Oauth";}i:2;i:81519;}i:1997;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:81524;}i:1998;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:81524;}i:1999;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:6:"Oauth2";}i:2;i:81526;}i:2000;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:81532;}i:2001;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:81534;}i:2002;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:27:"Providing Web Services APIs";i:1;i:2;i:2;i:81534;}i:2;i:81534;}i:2003;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:2;}i:2;i:81534;}i:2004;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:81534;}i:2005;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:14:"REST provision";}i:2;i:81575;}i:2006;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:81589;}i:2007;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:81589;}i:2008;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:15:"Oauth Provision";}i:2;i:81591;}i:2009;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:81606;}i:2010;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:81606;}i:2011;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:4:"JSON";}i:2;i:81608;}i:2012;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:81612;}i:2013;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:81612;}i:2014;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:7:"Pusher ";}i:2;i:81614;}i:2015;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"API";}i:2;i:81621;}i:2016;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:81624;}i:2017;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:81626;}i:2018;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:13:"Sockets & RTC";i:1;i:2;i:2;i:81626;}i:2;i:81626;}i:2019;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:2;}i:2;i:81626;}i:2020;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:81626;}i:2021;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:115:"Sockets using Ratchet (daemons) (Pub/Sub) and HAProxy (Ratchet can provide an always on subscriber or publisher..?)";}i:2;i:81653;}i:2022;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:81768;}i:2023;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:81768;}i:2024;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:28:"RTC (tokbox) and UDP and TCP";}i:2;i:81770;}i:2025;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:81798;}i:2026;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:81798;}i:2027;a:3:{i:0;s:12:"document_end";i:1;a:0:{}i:2;i:81798;}}