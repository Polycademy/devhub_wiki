a:3794:{i:0;a:3:{i:0;s:14:"document_start";i:1;a:0:{}i:2;i:0;}i:1;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:30:"PHP - Server Side Architecture";i:1;i:1;i:2;i:1;}i:2;i:1;}i:2;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:1;}i:2;i:1;}i:3;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:1;}i:4;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"PHP";}i:2;i:47;}i:5;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:80:" is a server side scripting language. It is a dynamic and interpreted language. ";}i:2;i:50;}i:6;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"PHP";}i:2;i:130;}i:7;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:69:" is not compiled. It runs through an interpreter, which is usually a ";}i:2;i:133;}i:8;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"PHP";}i:2;i:202;}i:9;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:99:" processor module that is integrated into a web server. For our purposes, that would be the Apache ";}i:2;i:205;}i:10;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:4:"HTTP";}i:2;i:304;}i:11;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:23:" server which includes ";}i:2;i:308;}i:12;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:331;}i:13;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:7:"mod_php";}i:2;i:333;}i:14;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:340;}i:15;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:26:" as the processor module. ";}i:2;i:342;}i:16;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"PHP";}i:2;i:368;}i:17;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:20:" can also be ran as ";}i:2;i:371;}i:18;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"CGI";}i:2;i:391;}i:19;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:35:", but that is not as common as the ";}i:2;i:394;}i:20;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:429;}i:21;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:7:"mod_php";}i:2;i:431;}i:22;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:438;}i:23;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:64:" method. It started out being an embedded scripting language to ";}i:2;i:440;}i:24;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:4:"HTML";}i:2;i:504;}i:25;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:314:", but grew into a full fledged programming language. It includes its own command line interface and can run as a stand alone server (but only used for development). It is single threaded and share nothing, meaning that it doesn't natively support concurrent processing and it doesn't share data between processes. ";}i:2;i:508;}i:26;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"PHP";}i:2;i:822;}i:27;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:105:" is currently the most widely used web programming language powering Wikipedia, Facebook, Digg and more. ";}i:2;i:825;}i:28;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:930;}i:29;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:930;}i:30;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:44:"While going through this article, try using ";}i:2;i:932;}i:31;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:26:"http://phpbounce.aws.af.cm";i:1;s:9:"PHPBounce";}i:2;i:976;}i:32;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:78:" to quickly test out your code if you don't have a chance to run a web server.";}i:2;i:1016;}i:33;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:1094;}i:34;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:1096;}i:35;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:33:"Object Oriented Programming (OOP)";i:1;i:2;i:2;i:1096;}i:2;i:1096;}i:36;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:2;}i:2;i:1096;}i:37;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:1096;}i:38;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:23:"There four fundamental ";}i:2;i:1143;}i:39;a:3:{i:0;s:13:"interwikilink";i:1;a:4:{i:0;s:23:"wp>Programming paradigm";i:1;s:21:"programming paradigms";i:2;s:2:"wp";i:3;s:20:"Programming paradigm";}i:2;i:1166;}i:40;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:74:". They are object-oriented, imperative, functional and logic programming. ";}i:2;i:1215;}i:41;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"PHP";}i:2;i:1289;}i:42;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:161:" can support multiple paradigms, namely procedural (imperative) and object oriented. It incorporates aspects of functional, but developers don't architect their ";}i:2;i:1292;}i:43;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"PHP";}i:2;i:1453;}i:44;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:76:" applications in a functional way. The most common programming paradigm for ";}i:2;i:1456;}i:45;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"PHP";}i:2;i:1532;}i:46;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:20:" is object oriented.";}i:2;i:1535;}i:47;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:1555;}i:48;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:1555;}i:49;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:823:"Object oriented simply means that we try to separate our programming into logical units of code. Each unit of code is an object. Each object can have multiple data properties that describe the object and multiple functions called methods. When we normally start programming, we naturally start in a procedural manner, specifying a list of tasks and subroutines before getting an end result. However in OOP, each object is an independent unit of code capable of receiving input, processing data and returning output. Each object can call on other objects, be dependent on external objects, or extended from parent objects. Each object has a distinct role. The decision of how granular we want when separating code into objects depends on the complexity of the unit of code. If you can find yourself doing multiple different ";}i:2;i:1557;}i:50;a:3:{i:0;s:13:"emphasis_open";i:1;a:0:{}i:2;i:2380;}i:51;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:5:"types";}i:2;i:2382;}i:52;a:3:{i:0;s:14:"emphasis_close";i:1;a:0:{}i:2;i:2387;}i:53;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:70:" of tasks in one subroutine, then it's probably time to separate each ";}i:2;i:2389;}i:54;a:3:{i:0;s:13:"emphasis_open";i:1;a:0:{}i:2;i:2459;}i:55;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:4:"type";}i:2;i:2461;}i:56;a:3:{i:0;s:14:"emphasis_close";i:1;a:0:{}i:2;i:2465;}i:57;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:204:" of functionality into different objects or different object methods. Objects should be created with one single responsibility, one way to check if an object is doing too many things is checking how many ";}i:2;i:2467;}i:58;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:2671;}i:59;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:2:"if";}i:2;i:2673;}i:60;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:2675;}i:61;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:4:" or ";}i:2;i:2677;}i:62;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:2681;}i:63;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:6:"switch";}i:2;i:2683;}i:64;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:2689;}i:65;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:66:" statements that are used to branch off logic. This is called the ";}i:2;i:2691;}i:66;a:3:{i:0;s:13:"interwikilink";i:1;a:4:{i:0;s:34:"wp>Single responsibility principle";i:1;s:31:"Single Responsibility Principle";i:2;s:2:"wp";i:3;s:31:"Single responsibility principle";}i:2;i:2757;}i:67;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:2827;}i:68;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:2827;}i:69;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:120:"In order to create objects, we actually first specify a class. Classes are blueprints for objects. Objects are actually ";}i:2;i:2829;}i:70;a:3:{i:0;s:13:"emphasis_open";i:1;a:0:{}i:2;i:2949;}i:71;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:9:"instances";}i:2;i:2951;}i:72;a:3:{i:0;s:14:"emphasis_close";i:1;a:0:{}i:2;i:2960;}i:73;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:307:" of classes. So a single class can be used to create multiple objects. Note that the words objects and classes are used interchangeably. However when people say class it usually refers to the creation of the class, whereas when people refer to object, it usually refers to instantiated context of the class.";}i:2;i:2962;}i:74;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:3269;}i:75;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:3269;}i:76;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:106:"It's important to note that by convention we name our classes with capitalised first letters and the rest ";}i:2;i:3271;}i:77;a:3:{i:0;s:13:"interwikilink";i:1;a:4:{i:0;s:12:"wp>CamelCase";i:1;s:11:"camel cased";i:2;s:2:"wp";i:3;s:9:"CamelCase";}i:2;i:3377;}i:78;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:458:". Except when we're naming interfaces or abstracts. Furthermore we put each class into its own single file, so there's never two classes in one file. The file name should also match the name of the class including the capitalisations. This file naming convention however is not applied when we're using models, views or controllers in Codeigniter. The reason for this is due to a mismatch of conventions between the PSR autoloading standards and Codeigniter.";}i:2;i:3405;}i:79;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:3863;}i:80;a:3:{i:0;s:4:"code";i:1;a:3:{i:0;s:156:"
//a class of Elephant, classes are usually capitalised
class Elephant{}

//$elephant is an object instance of the Elephant class
$elephant = new Elephant;
";i:1;s:3:"php";i:2;N;}i:2;i:3870;}i:81;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:3870;}i:82;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:86:"OOP has four main concepts: encapsulation, abstraction, inheritance and polymorphism. ";}i:2;i:4040;}i:83;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:4126;}i:84;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:4128;}i:85;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:13:"Encapsulation";i:1;i:3;i:2;i:4128;}i:2;i:4128;}i:86;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:4128;}i:87;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:4128;}i:88;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:411:"OOP arose from the need to modularise and separate the functionality of software as software grew in complexity. The OOP approach encourages encapsulation which means we should place units of data inside objects which can only be accessed and manipulated through the object's methods. The methods act as intermediaries between different objects. You should never access data properties from the object directly.";}i:2;i:4153;}i:89;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:4564;}i:90;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:4564;}i:91;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:222:"The motivation for encapsulation is discipline and abstraction. By encapsulating the data properties and thus the state of the object, we're hiding the implementation details of the object, but instead providing an method ";}i:2;i:4566;}i:92;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"API";}i:2;i:4788;}i:93;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:205:" that external objects can access. This helps with the abstraction process by providing a consistent way of accessing objects. This discipline is also useful when software development takes place in teams.";}i:2;i:4791;}i:94;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:4996;}i:95;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:4996;}i:96;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:184:"Furthermore since the data properties are hidden, and only the names of methods are accessible, we can change the implementation details of the object without worrying of breaking the ";}i:2;i:4998;}i:97;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"API";}i:2;i:5182;}i:98;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:19:" for other objects.";}i:2;i:5185;}i:99;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:5204;}i:100;a:3:{i:0;s:4:"code";i:1;a:3:{i:0;s:928:"
class Elephant{

    //encapsulated private data property of $_colour. The private makes it only accessible within the object's instance using $this. This underscore is only a convention of prefixing private or protected variables.
    private $_colour;
    
    //public accessor method that sets the $_colour and echos it
    public function set_colour($colour){
        
        $this->_colour = $colour;
        echo $colour;
        
        //did you know that we can dynamically create object instance variables too? This only gets created when set_colour is called from the instance
        $this->hue = $colour;
        
    }
  
}

$red_elephant = new Elephant;
//we can access the public method that acts as the intermediary to the private data property
$red_elephant->set_colour('red');

//second object instantiation
$green_elephant = new Elephant;
$green_elephant->set_colour('green');
echo $green_elephant->hue;
";i:1;s:3:"php";i:2;N;}i:2;i:5211;}i:101;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:6152;}i:102;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:11:"Abstraction";i:1;i:3;i:2;i:6152;}i:2;i:6152;}i:103;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:6152;}i:104;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:6152;}i:105;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:332:"Encapsulation is actually technique of a more generic concept called abstraction. Objects should be abstracted. This means that the concrete implementation details should be hidden and abstracted away, so that only contextually important methods are available at a particular perspective. Here's a couple examples: the concept of a ";}i:2;i:6175;}i:106;a:3:{i:0;s:18:"doublequoteopening";i:1;a:0:{}i:2;i:6507;}i:107;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:4:"List";}i:2;i:6508;}i:108;a:3:{i:0;s:18:"doublequoteclosing";i:1;a:0:{}i:2;i:6512;}i:109;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:22:" is an abstraction of ";}i:2;i:6513;}i:110;a:3:{i:0;s:18:"doublequoteopening";i:1;a:0:{}i:2;i:6535;}i:111;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:10:"Fruit List";}i:2;i:6536;}i:112;a:3:{i:0;s:18:"doublequoteclosing";i:1;a:0:{}i:2;i:6546;}i:113;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:4:" or ";}i:2;i:6547;}i:114;a:3:{i:0;s:18:"doublequoteopening";i:1;a:0:{}i:2;i:6551;}i:115;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:8:"Car List";}i:2;i:6552;}i:116;a:3:{i:0;s:18:"doublequoteclosing";i:1;a:0:{}i:2;i:6560;}i:117;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:19:". The concept of a ";}i:2;i:6561;}i:118;a:3:{i:0;s:18:"doublequoteopening";i:1;a:0:{}i:2;i:6580;}i:119;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:12:"Living Thing";}i:2;i:6581;}i:120;a:3:{i:0;s:18:"doublequoteclosing";i:1;a:0:{}i:2;i:6593;}i:121;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:22:" is an abstraction of ";}i:2;i:6594;}i:122;a:3:{i:0;s:18:"doublequoteopening";i:1;a:0:{}i:2;i:6616;}i:123;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:7:"Animals";}i:2;i:6617;}i:124;a:3:{i:0;s:18:"doublequoteclosing";i:1;a:0:{}i:2;i:6624;}i:125;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:28:" which is an abstraction of ";}i:2;i:6625;}i:126;a:3:{i:0;s:18:"doublequoteopening";i:1;a:0:{}i:2;i:6653;}i:127;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:3:"Dog";}i:2;i:6654;}i:128;a:3:{i:0;s:18:"doublequoteclosing";i:1;a:0:{}i:2;i:6657;}i:129;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:17:". The concept of ";}i:2;i:6658;}i:130;a:3:{i:0;s:18:"doublequoteopening";i:1;a:0:{}i:2;i:6675;}i:131;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:6:"People";}i:2;i:6676;}i:132;a:3:{i:0;s:18:"doublequoteclosing";i:1;a:0:{}i:2;i:6682;}i:133;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:33:" is an abstraction of the person ";}i:2;i:6683;}i:134;a:3:{i:0;s:18:"doublequoteopening";i:1;a:0:{}i:2;i:6716;}i:135;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:5:"Roger";}i:2;i:6717;}i:136;a:3:{i:0;s:18:"doublequoteclosing";i:1;a:0:{}i:2;i:6722;}i:137;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:5:" and ";}i:2;i:6723;}i:138;a:3:{i:0;s:18:"doublequoteopening";i:1;a:0:{}i:2;i:6728;}i:139;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:7:"Matthew";}i:2;i:6729;}i:140;a:3:{i:0;s:18:"doublequoteclosing";i:1;a:0:{}i:2;i:6736;}i:141;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:122:". When constructing an object, the available object properties should be relevant to the context of which it is used. All ";}i:2;i:6737;}i:142;a:3:{i:0;s:18:"doublequoteopening";i:1;a:0:{}i:2;i:6859;}i:143;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:6:"People";}i:2;i:6860;}i:144;a:3:{i:0;s:18:"doublequoteclosing";i:1;a:0:{}i:2;i:6866;}i:145;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:40:" may have heights and weights, but only ";}i:2;i:6867;}i:146;a:3:{i:0;s:18:"doublequoteopening";i:1;a:0:{}i:2;i:6907;}i:147;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:5:"Roger";}i:2;i:6908;}i:148;a:3:{i:0;s:18:"doublequoteclosing";i:1;a:0:{}i:2;i:6913;}i:149;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:22:" has a preference for ";}i:2;i:6914;}i:150;a:3:{i:0;s:18:"doublequoteopening";i:1;a:0:{}i:2;i:6936;}i:151;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:13:"Action Movies";}i:2;i:6937;}i:152;a:3:{i:0;s:18:"doublequoteclosing";i:1;a:0:{}i:2;i:6950;}i:153;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:10:" and only ";}i:2;i:6951;}i:154;a:3:{i:0;s:18:"doublequoteopening";i:1;a:0:{}i:2;i:6961;}i:155;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:7:"Matthew";}i:2;i:6962;}i:156;a:3:{i:0;s:18:"doublequoteclosing";i:1;a:0:{}i:2;i:6969;}i:157;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:21:" has a tattoo saying ";}i:2;i:6970;}i:158;a:3:{i:0;s:18:"doublequoteopening";i:1;a:0:{}i:2;i:6991;}i:159;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:11:"I'm Awesome";}i:2;i:6992;}i:160;a:3:{i:0;s:18:"doublequoteclosing";i:1;a:0:{}i:2;i:7003;}i:161;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:27:". So when I'm defining the ";}i:2;i:7004;}i:162;a:3:{i:0;s:18:"doublequoteopening";i:1;a:0:{}i:2;i:7031;}i:163;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:6:"People";}i:2;i:7032;}i:164;a:3:{i:0;s:18:"doublequoteclosing";i:1;a:0:{}i:2;i:7038;}i:165;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:145:" object, it should not have properties of movie preferences or tattoos, those are not contextually relevant to how I would perceive or represent ";}i:2;i:7039;}i:166;a:3:{i:0;s:18:"doublequoteopening";i:1;a:0:{}i:2;i:7184;}i:167;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:6:"People";}i:2;i:7185;}i:168;a:3:{i:0;s:18:"doublequoteclosing";i:1;a:0:{}i:2;i:7191;}i:169;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:24:" as an abstract concept.";}i:2;i:7192;}i:170;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:7216;}i:171;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:7216;}i:172;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:200:"Abstraction is achieved by encapsulating concrete implementation details, but it can also be achieved by leaving concrete implementation details later to extend the abstract class as the parent class.";}i:2;i:7218;}i:173;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:7419;}i:174;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:7419;}i:175;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:11:"Inheritance";i:1;i:3;i:2;i:7419;}i:2;i:7419;}i:176;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:7419;}i:177;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:7419;}i:178;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:292:"Inheritance can be used to establish an abstract hierarchy of concepts and objects. At the same time because we're not rewriting the parent class's code, we enhance code reuse. Essentially child classes can inherit from parent classes, so that it inherits its parent's properties and methods.";}i:2;i:7442;}i:179;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:7734;}i:180;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:7734;}i:181;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:98:"Methods specified in the parent classes can be overwritten by child classes unless finalised with ";}i:2;i:7736;}i:182;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:7834;}i:183;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:6:"final ";}i:2;i:7836;}i:184;a:3:{i:0;s:13:"emphasis_open";i:1;a:0:{}i:2;i:7842;}i:185;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:5:"scope";}i:2;i:7844;}i:186;a:3:{i:0;s:14:"emphasis_close";i:1;a:0:{}i:2;i:7849;}i:187;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:10:" function ";}i:2;i:7851;}i:188;a:3:{i:0;s:13:"emphasis_open";i:1;a:0:{}i:2;i:7861;}i:189;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:4:"name";}i:2;i:7863;}i:190;a:3:{i:0;s:14:"emphasis_close";i:1;a:0:{}i:2;i:7867;}i:191;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:2:"{}";}i:2;i:7869;}i:192;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:7871;}i:193;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:2:". ";}i:2;i:7873;}i:194;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"PHP";}i:2;i:7875;}i:195;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:182:" also does not support multiple inheritance, so a child can only inherit from one parent. However there are different strategies to overcome this. Classes can also chain inheritance.";}i:2;i:7878;}i:196;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:8060;}i:197;a:3:{i:0;s:4:"code";i:1;a:3:{i:0;s:936:"
class Animal{

    //private scoped variables will not be accessible in the child classes
    private $_exists = true;
    
    //protected scoped variables are accessible in the child class but not outside of the class
    protected $_breathing_noise = 'breathing';
    
    public function breathe(){
        echo $this->_breathing_noise;
    }
    
}

//Elephant is a child of the abstract parent Animal class
class Elephant extends Animal{
    
    private $_colour;
    
    public function set_colour($colour){
        //$this can access this class and the parent's class when the object is instantiated
        $this->_colour = $colour;
        echo $colour;
    }
    
    public function set_breathing($noise){
        $this->_breathing_noise = $noise;
    }
    
}
     
$elephant = new Elephant;
$elephant->set_colour('red');
$elephant->set_breathing('HRRUMPH!');
$elephant->breathe(); //look accessing the parent's method!
";i:1;s:3:"php";i:2;N;}i:2;i:8067;}i:198;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:9017;}i:199;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:12:"Polymorphism";i:1;i:3;i:2;i:9017;}i:2;i:9017;}i:200;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:9017;}i:201;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:9017;}i:202;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:349:"Simply put polymorphism is simply that classes can have different functionality and yet share the same interface. Essentially you would be able to call a method that has a name, that is shared by classes which occupy the same abstraction level, but have different functionality. The point is so that you can write less code by not having to specify ";}i:2;i:9041;}i:203;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:9390;}i:204;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:2:"if";}i:2;i:9392;}i:205;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:9394;}i:206;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:137:" statements to switch functionality based on some context. This also means when you're working in teams you can establish a standard for ";}i:2;i:9396;}i:207;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"API";}i:2;i:9533;}i:208;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:29:" methods for similar classes.";}i:2;i:9536;}i:209;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:9565;}i:210;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:9565;}i:211;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:219:"An example would be a button. Everybody knows how to interact with a button. You either press it or you don't. But what the button does, who knows? So all buttons should have the same interface, such as a method called ";}i:2;i:9567;}i:212;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:9786;}i:213;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:5:"press";}i:2;i:9788;}i:214;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:9793;}i:215;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:".";}i:2;i:9795;}i:216;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:9796;}i:217;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:9796;}i:218;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:76:"Polymorphism is supported by two extra constructs: Interfaces and Abstracts.";}i:2;i:9798;}i:219;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:9874;}i:220;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:9876;}i:221;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:10:"Interfaces";i:1;i:4;i:2;i:9876;}i:2;i:9876;}i:222;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:4;}i:2;i:9876;}i:223;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:9876;}i:224;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:465:"Interfaces are contracts that objects implement. An object can implement multiple interfaces. An interface is simply an empty class with named methods, but no implementation details inside the methods. Any class that implements an interface will have to create concrete methods that match the empty methods in the interface, it they don't, it will cause a fatal error. By using interfaces you're guaranteeing that your implemented objects will have a set of public ";}i:2;i:9896;}i:225;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"API";}i:2;i:10361;}i:226;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:9:" methods.";}i:2;i:10364;}i:227;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:10373;}i:228;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:10373;}i:229;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:203:"Interfaces support polymorphism because different objects can implement the same interface. If we take the button example, there could be a button interface, which red button and green button implements.";}i:2;i:10375;}i:230;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:10578;}i:231;a:3:{i:0;s:4:"code";i:1;a:3:{i:0;s:791:"
//We usually prefix our interfaces with i, and class names are usually camelcased
interface iButton{
    
    public function press();
    
    public function change_colour();
    
}

class RedButton implements iButton{

    public function press(){
        echo 'Alert! RED BUTTON PRESSED!';
    }
    
    public function change_colour(){
        echo 'Flash RED and ORANGE!';
    }

}

class GreenButton implements iButton{

    public function press(){
        echo 'Warning! GREEN BUTTON PRESSED!';
    }
    
    public function change_colour(){
        echo 'Flash GREEN and BROWN!';
    }

}

//now we can expect the same API methods, and hence polymorphic method! Same name, different functionality.
$red = new RedButton;
$red->press();
$green = new GreenButton;
$green->press();
";i:1;s:3:"php";i:2;N;}i:2;i:10585;}i:232;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:10585;}i:233;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:109:"Interfaces can also include constants which are accessible statically in their implementing objects. See the ";}i:2;i:11390;}i:234;a:3:{i:0;s:9:"locallink";i:1;a:2:{i:0;s:15:"using_libraries";i:1;s:15:"Using Libraries";}i:2;i:11499;}i:235;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:150:" section for more on static classes. Interfaces can also be extended, this allows interfaces to occupy multiple levels of abstraction. You can have a ";}i:2;i:11535;}i:236;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:11685;}i:237;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:22:"interface iLivingThing";}i:2;i:11687;}i:238;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:11709;}i:239;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:28:" which is an abstraction of ";}i:2;i:11711;}i:240;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:11739;}i:241;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:17:"interface iAnimal";}i:2;i:11741;}i:242;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:11758;}i:243;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:".";}i:2;i:11760;}i:244;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:11761;}i:245;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:11761;}i:246;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:108:"Interfaces are most commonly used with type hints to enforce type checking when injecting dependencies. See ";}i:2;i:11763;}i:247;a:3:{i:0;s:12:"internallink";i:1;a:2:{i:0;s:21:"PHP - Design Patterns";i:1;N;}i:2;i:11871;}i:248;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:46:" for more information on dependency injection.";}i:2;i:11896;}i:249;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:11942;}i:250;a:3:{i:0;s:4:"code";i:1;a:3:{i:0;s:1094:"
interface iAdd{

    //interfaces can also demand parameters
    public function add($one, $two);

}

class Calculator implements iAdd{

    public function add($one, $two){
        $result = $one + $two;
        return $result;
    }

}


class Calculation{

    //the iAdd type hint here forces the $calculator to be any object that implements the iAdd interface, because Calculation is expecting the add method which is guaranteed by the iAdd interface
    //__construct methods are called as soon as the class is instantiated, its parameters dictate parameters that are passed during object instantiation
    public function __construct(iAdd $calculator, $one, $two){
        $result = $calculator->add($one, $two);
        echo $result;
    }
    
}

//if I passed in an object that didn't implement the iAdd interface, the typehint would cause a fatal error
//you may notice that this object instantiation has parentheses "()", these are used when there is a __construct method, which is called as soon as the object is instantiated
$calculation = new Calculation(new Calculator, 5, 6);
";i:1;s:3:"php";i:2;N;}i:2;i:11949;}i:251;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:11949;}i:252;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:600:"The practice of using interfaces with type hinting and dependency injection is important, as it modularises the dependencies of classes. The Calculation class depends on an object that implements the iAdd interface. It doesn't care what the passed in object is, as long as it has the methods specified in the interface, because it's expecting to use those methods. Therefore, this also loosens the dependency coupling, allowing us to swap out the Calculator object with a different object with different implementation details as long as it preserves the polymorphic method names and expected output.";}i:2;i:13057;}i:253;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:13657;}i:254;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:13657;}i:255;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:60:"This practice is quite useful when you need to abstract the ";}i:2;i:13659;}i:256;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"API";}i:2;i:13719;}i:257;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:311:" (the way you use something) away from the concrete implementation (what the something is). One example would be if you're using a class that needs to store data into a database. That class should not care what kind of database it is, and how it stores its data as long as it has access to a set of predictable ";}i:2;i:13722;}i:258;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"API";}i:2;i:14033;}i:259;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:390:" methods. If you hard coded the database dependency and decided to change the database some time later, then you would have to change all the method calls, which is not good for maintenance. By using an interface, you avoid all of that by simply swapping out the database class and implementing the interface. Of course this only works if you abide by type hinting and dependency injection.";}i:2;i:14036;}i:260;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:14426;}i:261;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:14426;}i:262;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:189:"Note that objects can implement multiple interfaces, this just makes the instantiation of the object more strict, in that they have to implement all the methods specified in the interfaces.";}i:2;i:14428;}i:263;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:14617;}i:264;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:14619;}i:265;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:9:"Abstracts";i:1;i:4;i:2;i:14619;}i:2;i:14619;}i:266;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:4;}i:2;i:14619;}i:267;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:14619;}i:268;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:607:"Abstracts are interfaces that allow concrete implementations of their methods, however classes extend abstracts instead of implementing them, this means only one abstract can be used for each object. You might then think why can't we just use a normal class and have children that extend it. Well you could, but in programming, it's good to be explicit. Think of abstracts as a strict possessive parent class that must have children, and then forces its children to do things their way. But at the same time, it provides shared methods to their children to use. Hence abstracts are never used by themselves.";}i:2;i:14638;}i:269;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:15245;}i:270;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:15245;}i:271;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:204:"Developers use abstracts to provide a boilerplate classes. Abstract methods which are the ones that children are forced to implement have to be either scoped at protected or public. Private wouldn't work.";}i:2;i:15247;}i:272;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:15451;}i:273;a:3:{i:0;s:4:"code";i:1;a:3:{i:0;s:985:"
//abstracts are classes, that's why we still have a class operator, furthermore we prefix abstracts with a little a
abstract class aArmor{

    //shared variable
    //variables or properties cannot be abstracted, they are considered concrete implementation details
    protected $_weight;
    
    //shared method
    public function set_weight($kg){
        $this->_weight = $kg;
    }
    
    //this is what will have to be implemented by the children
    abstract public function armor_rating();
    
}

class ChineseArmor extends aArmor{

    public function __construct($weight){
        $this->set_weight($weight);
    }
    
    
    //implemented functions have to be at the same or less restrictive scoping, public is the least restrictive!
    public function armor_rating(){
        echo 'Over 10,000!';
    }
    
    public function get_weight(){
        echo $this->_weight;
    }

}

$armor = new ChineseArmor('100 Kg');
$armor->armor_rating();
$armor->get_weight();
";i:1;s:3:"php";i:2;N;}i:2;i:15458;}i:274;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:15458;}i:275;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:151:"Abstracts can also be type hinted, in fact all objects can be type hinted, so you can use them in the same way as interfaces with dependency injection.";}i:2;i:16457;}i:276;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:16608;}i:277;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:16608;}i:278;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:43:"Abstracts can also be used with interfaces.";}i:2;i:16610;}i:279;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:16653;}i:280;a:3:{i:0;s:4:"code";i:1;a:3:{i:0;s:1228:"
interface iPhysicalObject{

    //abstracts do not need to implement this, only the final concrete child class
    public function weight();

}

abstract class aArmor implements iPhysicalObject{

    //shared function
    public function armor_rating(){
        //abstracts can reference weight method even though it doesn't exist yet, because it has been guranteed by the interface
        $rating = 10 * $this->weight();
        return $rating;
    }
    
    abstract public function blacksmith();

}


class ChineseArmor extends aArmor{

    //defined by interface
    public function weight(){
        return 100;
    }
    
    //defined by abstract
    public function blacksmith(){
        echo 'The Yellow Dragon!';
    }
    
    public function protection(){
        $protection = $this->armor_rating();
        //if the armor was created by the The Yellow Dragon! we add a bonus of 1000
        if($this->blacksmith() == 'The Yellow Dragon!'){
            $protection + 1000;
        }
        return $protection;
    }

}


class Fight{

    public function __construct(aArmor $armor){
        if($armor->protection() > 100){
            echo 'You won!';
        }
    }

}

$battle = new Fight(new ChineseArmor);
";i:1;s:3:"php";i:2;N;}i:2;i:16660;}i:281;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:17901;}i:282;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:27:"Model View Controller (MVC)";i:1;i:2;i:2;i:17901;}i:2;i:17901;}i:283;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:2;}i:2;i:17901;}i:284;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:17901;}i:285;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:406:"The model view controller pattern is an architecture pattern that separates software applications into three areas. The model is the business logic and application data. The view is the presentational user interface of the data. The controller is what binds the model's data to the view inputs, and it also routs user input requests to the appropriate interactions. The central ideas of the MVC pattern is ";}i:2;i:17942;}i:286;a:3:{i:0;s:13:"interwikilink";i:1;a:4:{i:0;s:13:"wp>Code reuse";i:1;s:17:"code re-usability";i:2;s:2:"wp";i:3;s:10:"Code reuse";}i:2;i:18348;}i:287;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:2:", ";}i:2;i:18383;}i:288;a:3:{i:0;s:13:"interwikilink";i:1;a:4:{i:0;s:25:"wp>Separation of concerns";i:1;s:22:"separation of concerns";i:2;s:2:"wp";i:3;s:22:"Separation of concerns";}i:2;i:18385;}i:289;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:5:" and ";}i:2;i:18437;}i:290;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:96:"http://www.slideshare.net/damiansromek/thin-controllers-fat-models-proper-code-structure-for-mvc";i:1;s:29:"thin controllers - fat models";}i:2;i:18442;}i:291;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:".";}i:2;i:18572;}i:292;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:18573;}i:293;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:18573;}i:294;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:44:"MVC architecture is usually placed behind a ";}i:2;i:18575;}i:295;a:3:{i:0;s:13:"interwikilink";i:1;a:4:{i:0;s:27:"wp>Front Controller pattern";i:1;s:16:"front controller";i:2;s:2:"wp";i:3;s:24:"Front Controller pattern";}i:2;i:18619;}i:296;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:317:". These front controllers essentially establish the workflow and middleware for every request and response. The front controller may include a router, or the router may be part of the middleware. The router routs requests to the appropriate controller which then calls upon its models and views to produce a response.";}i:2;i:18667;}i:297;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:18984;}i:298;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:18984;}i:299;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:333:"Codeigniter is an MVC framework. The code you write is separated into models, views and controllers. We also further separate our code into libraries, packages and helpers, but that's for later. Codeigniter also includes a front controller which is the index.php at your project root. Codeigniter automatically routs requests in the ";}i:2;i:18986;}i:300;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"URL";}i:2;i:19319;}i:301;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:102:" to the controller with a matching name, however this can be customised in the routes.php. The Apache ";}i:2;i:19322;}i:302;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:4:"HTTP";}i:2;i:19424;}i:303;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:281:" server actually sends all requests to the index.php, the index.php then calls upon the rest of the architecture and produces a response. No other files in Codeigniter is accessed directly. This gives an easy way to hook into the request and response flow and introduce middleware.";}i:2;i:19428;}i:304;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:19709;}i:305;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:19709;}i:306;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:376:"Note that there is a many to many relationship between models, controllers and views. One controller may call upon multiple models and multiple views. Models don't call controllers or views, and views don't call controllers or models. They simply return data to the controller that called them. Therefore models and views can have multiple controllers that interact with them.";}i:2;i:19711;}i:307;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:20087;}i:308;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:20087;}i:309;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:334:"Interfaces, abstracts and further inheritance can be applied to Codeigniter's models, views and controllers. However this practice is uncommon. I recommend you to use only these features in libraries or packages, and follow Codeigniter extension suggestions in their userguide if you need customised functionality in the architecture.";}i:2;i:20089;}i:310;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:20423;}i:311;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:20423;}i:312;a:3:{i:0;s:13:"internalmedia";i:1;a:7:{i:0;s:45:":web_application_development:appflowchart.gif";i:1;s:0:"";i:2;s:6:"center";i:3;N;i:4;N;i:5;s:5:"cache";i:6;s:7:"details";}i:2;i:20425;}i:313;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:20477;}i:314;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:20479;}i:315;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:5:"Model";i:1;i:3;i:2;i:20479;}i:2;i:20479;}i:316;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:20479;}i:317;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:20479;}i:318;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:690:"Your models is where your business logic and application data resides. Your models should contain the bulk of your operations and processing. Models also contain accessors and mutators to your database if any. It's important to understand that models aren't just for storing state, but also the operations on the behaviour of your system. If you were writing a Chess game, not only would the storage of the chess board state be via the model, but also the rule checking algorithms and artificial intelligence. Once this business logic finds itself needed in other areas, that's when you abstract it into its own package or library. That way it can be called and executed in multiple models.";}i:2;i:20496;}i:319;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:21186;}i:320;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:21186;}i:321;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:114:"Models return processed data to the controller. Models don't need to know where it gets called, just that it does.";}i:2;i:21188;}i:322;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:21302;}i:323;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:21302;}i:324;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:417:"Models can also perform data validation, but data validation that involves simply input filtering for security purposes should be left to the controller, because that's metaphorically the gate to your software fortress. However if the data validation requires business logic to be performed, such as checks against the database, then the it should be placed in the model. However opinions may vary on this suggestion.";}i:2;i:21304;}i:325;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:21721;}i:326;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:21721;}i:327;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:26:"Example Codeigniter Model:";}i:2;i:21723;}i:328;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:21749;}i:329;a:3:{i:0;s:4:"code";i:1;a:3:{i:0;s:943:"
//by convention we suffix the model with _model and all models extend the CI_Model from Codeigniter
class Blog_model extends CI_Model {

    public function __construct(){
        //when the model gets loaded into the controller, it calls the parent __construct method. This __construct method is actually from CI_Model. This way when we instantiate this object, we also instantiate the parent.
        
        //CI_Model's __construct() is not implicitly called because we method overrided it with this child class's __construct. Therefore in order to setup the parent's class, we need to call it with parent::__construct(). If this model did not have __construct, then the parent's __construct would be automatically called.
        parent::__construct();
        
        //here is where you load any dependencies as well, either through CI's loader or through autoloading
        
    }
    
    //more accessors and mutators here...

}
";i:1;s:3:"php";i:2;N;}i:2;i:21756;}i:330;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:22713;}i:331;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:4:"CRUD";i:1;i:4;i:2;i:22713;}i:2;i:22713;}i:332;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:4;}i:2;i:22713;}i:333;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:22713;}i:334;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:15:"CRUD refers to ";}i:2;i:22727;}i:335;a:3:{i:0;s:13:"interwikilink";i:1;a:4:{i:0;s:34:"wp>Create, read, update and delete";i:1;s:29:"Create Read Update and Delete";i:2;s:2:"wp";i:3;s:31:"Create, read, update and delete";}i:2;i:22742;}i:336;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:104:". These are the four basic functions of any model when interacting with a database. You should read the ";}i:2;i:22810;}i:337;a:3:{i:0;s:9:"locallink";i:1;a:2:{i:0;s:8:"database";i:1;s:16:"Database Section";}i:2;i:22914;}i:338;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:222:" before proceeding. If you're using models to interface with a database, the convention is to name your model after the table name you're using. In each model class, there will be four public methods corresponding to CRUD.";}i:2;i:22944;}i:339;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:23166;}i:340;a:3:{i:0;s:4:"file";i:1;a:3:{i:0;s:3779:"

class User_model extends CI_Model{

    public function __construct(){
        parent::__construct();
        //this will become available as $this->db..etc
        $this->load->database();
    
    }
    
    //you can name these functions using other terms or even terms closer to HTTP if you prefer
    
    //the parameters here would be passed in from the controller, they would be acquired from the input library
    //we could have as separate parameters, or a single array object
    public function create($username, $password, $email){
        
        $data = array(
            'username' => $username, //perhaps make it lowercase?
            'password' => password_hash($password), //password_hash is not a defined function anywhere yet, I'm setting here so you remember that passwords need to be hashed and salted before inputting it into the database. See the security section on passwords. THIS IS IMPORTANT!
            'email'    => $email,
        );
        
        $query = $this->db->insert('user', $data); 
        
        if(!$query){
        
            //some error occurred? We should log the database error
            //the below only works if $db['default']['db_debug'] = FALSE in the database configuration (so that it doesn't display straight to the user
            
            $msg = $this->db->_error_message();
            $num = $this->db->_error_number();
            $last_query = $this->db->last_query();
            
            log_message('error', 'Problem Inserting to user table: ' . $msg . ' (' . $num . '), using this query: "' . $last_query . '"'); 
            
            return false;
            
        }
        
        //it worked! return the last insert_id!
        return $this->db->insert_id();
    
    }
    
    public function read($id){
    
        //first validate the $id somehow
        if(!is_numeric($id)){
            show_404();
        }
        
        //we can just use *, but this is required when specifying multiple tables
        $this->db->select('user.*');
        $this->db->where('user.id', $id);
        $this->db->from('user');
        
        $user_query = $this->db->get();
        
        if($user_query->num_rows() > 0){
        
            $result = $user_query->row();
            
            return $result;
        
        }else{
        
            //this is probably not an error, most likely there was no user with that id, so there were no results
            return false;
        
        }
    
    }
    
    //this would assume that the data array has already been passed in
    //if there are columns you don't want to update, just don't pass them in as key to value properties of the $data array
    public function update($id, $data){
    
        $this->db->where('id', $id);
        $this->db->update('user', $data);
        
        if($this->db->affected_rows() > 0){
            //this returns the number of affected rows
            return $this->db->affected_rows();
        }
        
        //we're not doing any error logging here, you can implement it yourself, remember this could actually mean there were no users with that id, not a database error
        return false;
    
    }
    
    public function delete($id){
    
        $this->db->where('id', $id);
        $result = $this->db->delete('user');
        
        //db->delete would return true if it worked
        if($result){
            //we can return the number of rows deleted
            return $this->db->affected_rows();
        }else{
            return false; //couldn't delete
        }
    
    }
    
    //the above are not the only methods you would have, but are just the bare minimum, perhaps you need a method that gets all the listings, not just one entry...

}

";i:1;s:3:"php";i:2;s:14:"user_model.php";}i:2;i:23173;}i:341;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:23173;}i:342;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:133:"You may notice eventually that CRUD is simply one of the many configurations of these four operations at different abstraction levels";}i:2;i:26981;}i:343;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:27115;}i:344;a:3:{i:0;s:10:"table_open";i:1;a:3:{i:0;i:3;i:1;i:5;i:2;i:27116;}i:2;i:27115;}i:345;a:3:{i:0;s:13:"tablerow_open";i:1;a:0:{}i:2;i:27115;}i:346;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;s:4:"left";i:2;i:1;}i:2;i:27115;}i:347;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:9:"         ";}i:2;i:27117;}i:348;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:27126;}i:349;a:3:{i:0;s:16:"tableheader_open";i:1;a:3:{i:0;i:1;i:1;s:4:"left";i:2;i:1;}i:2;i:27126;}i:350;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:" ";}i:2;i:27127;}i:351;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"SQL";}i:2;i:27128;}i:352;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:13:"             ";}i:2;i:27131;}i:353;a:3:{i:0;s:17:"tableheader_close";i:1;a:0:{}i:2;i:27144;}i:354;a:3:{i:0;s:16:"tableheader_open";i:1;a:3:{i:0;i:1;i:1;s:4:"left";i:2;i:1;}i:2;i:27144;}i:355;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:" ";}i:2;i:27145;}i:356;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:4:"HTTP";}i:2;i:27146;}i:357;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:15:" (RESTful)     ";}i:2;i:27150;}i:358;a:3:{i:0;s:17:"tableheader_close";i:1;a:0:{}i:2;i:27165;}i:359;a:3:{i:0;s:14:"tablerow_close";i:1;a:0:{}i:2;i:27166;}i:360;a:3:{i:0;s:13:"tablerow_open";i:1;a:0:{}i:2;i:27166;}i:361;a:3:{i:0;s:16:"tableheader_open";i:1;a:3:{i:0;i:1;i:1;s:4:"left";i:2;i:1;}i:2;i:27166;}i:362;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:9:" Create  ";}i:2;i:27168;}i:363;a:3:{i:0;s:17:"tableheader_close";i:1;a:0:{}i:2;i:27177;}i:364;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;s:4:"left";i:2;i:1;}i:2;i:27177;}i:365;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:17:" INSERT          ";}i:2;i:27178;}i:366;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:27195;}i:367;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;s:4:"left";i:2;i:1;}i:2;i:27195;}i:368;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:20:" POST               ";}i:2;i:27196;}i:369;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:27216;}i:370;a:3:{i:0;s:14:"tablerow_close";i:1;a:0:{}i:2;i:27217;}i:371;a:3:{i:0;s:13:"tablerow_open";i:1;a:0:{}i:2;i:27217;}i:372;a:3:{i:0;s:16:"tableheader_open";i:1;a:3:{i:0;i:1;i:1;s:4:"left";i:2;i:1;}i:2;i:27217;}i:373;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:9:" Read    ";}i:2;i:27219;}i:374;a:3:{i:0;s:17:"tableheader_close";i:1;a:0:{}i:2;i:27228;}i:375;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;s:4:"left";i:2;i:1;}i:2;i:27228;}i:376;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:17:" SELECT          ";}i:2;i:27229;}i:377;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:27246;}i:378;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;s:4:"left";i:2;i:1;}i:2;i:27246;}i:379;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:20:" GET                ";}i:2;i:27247;}i:380;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:27267;}i:381;a:3:{i:0;s:14:"tablerow_close";i:1;a:0:{}i:2;i:27268;}i:382;a:3:{i:0;s:13:"tablerow_open";i:1;a:0:{}i:2;i:27268;}i:383;a:3:{i:0;s:16:"tableheader_open";i:1;a:3:{i:0;i:1;i:1;s:4:"left";i:2;i:1;}i:2;i:27268;}i:384;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:9:" Update  ";}i:2;i:27270;}i:385;a:3:{i:0;s:17:"tableheader_close";i:1;a:0:{}i:2;i:27279;}i:386;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;s:4:"left";i:2;i:1;}i:2;i:27279;}i:387;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:17:" UPDATE          ";}i:2;i:27280;}i:388;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:27297;}i:389;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;s:4:"left";i:2;i:1;}i:2;i:27297;}i:390;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:20:" PUT                ";}i:2;i:27298;}i:391;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:27318;}i:392;a:3:{i:0;s:14:"tablerow_close";i:1;a:0:{}i:2;i:27319;}i:393;a:3:{i:0;s:13:"tablerow_open";i:1;a:0:{}i:2;i:27319;}i:394;a:3:{i:0;s:16:"tableheader_open";i:1;a:3:{i:0;i:1;i:1;s:4:"left";i:2;i:1;}i:2;i:27319;}i:395;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:9:" Delete  ";}i:2;i:27321;}i:396;a:3:{i:0;s:17:"tableheader_close";i:1;a:0:{}i:2;i:27330;}i:397;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;s:4:"left";i:2;i:1;}i:2;i:27330;}i:398;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:17:" DELETE          ";}i:2;i:27331;}i:399;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:27348;}i:400;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;s:4:"left";i:2;i:1;}i:2;i:27348;}i:401;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:20:" DELETE             ";}i:2;i:27349;}i:402;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:27369;}i:403;a:3:{i:0;s:14:"tablerow_close";i:1;a:0:{}i:2;i:27370;}i:404;a:3:{i:0;s:11:"table_close";i:1;a:1:{i:0;i:27370;}i:2;i:27370;}i:405;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:27371;}i:406;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:4:"View";i:1;i:3;i:2;i:27371;}i:2;i:27371;}i:407;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:27371;}i:408;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:27371;}i:409;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:64:"Your view is where your user interface code lies. Remember that ";}i:2;i:27387;}i:410;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:4:"HTML";}i:2;i:27451;}i:411;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:5:" and ";}i:2;i:27455;}i:412;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"CSS";}i:2;i:27460;}i:413;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:59:" markup you did while in the Web Design section? Well that ";}i:2;i:27463;}i:414;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:4:"HTML";}i:2;i:27522;}i:415;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:71:" markup is going to be cutup into independent layouts in the view. The ";}i:2;i:27526;}i:416;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"CSS";}i:2;i:27597;}i:417;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:98:", Javascript and other assets actually remain where they are. The view is also where we implement ";}i:2;i:27600;}i:418;a:3:{i:0;s:9:"locallink";i:1;a:2:{i:0;s:10:"templating";i:1;s:10:"templating";}i:2;i:27698;}i:419;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:322:", which is the practice of modularising user interfaces into reusable components so they can be swapped in and out with other user interface elements. In order to pull in dynamic data, we actually place variables inside the views which will be injected from the controller after the controller has the data from the model.";}i:2;i:27724;}i:420;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:28046;}i:421;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:28046;}i:422;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:77:"By convention we suffix views files with _view. So any file names would like ";}i:2;i:28048;}i:423;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:28125;}i:424;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:13:"home_view.php";}i:2;i:28127;}i:425;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:28140;}i:426;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:".";}i:2;i:28142;}i:427;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:28143;}i:428;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:28143;}i:429;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:39:"Example Codeigniter View with embedded ";}i:2;i:28145;}i:430;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"PHP";}i:2;i:28184;}i:431;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:":";}i:2;i:28187;}i:432;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:28188;}i:433;a:3:{i:0;s:4:"code";i:1;a:3:{i:0;s:142:"
<html>
    <head>
        <title>Example Page!</title>
    </head>
    <body>
        <p>Hello! <? echo 'World!'; ?></p>
    </body>
</html>
";i:1;s:3:"php";i:2;N;}i:2;i:28195;}i:434;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:28350;}i:435;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:10:"Controller";i:1;i:3;i:2;i:28350;}i:2;i:28350;}i:436;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:28350;}i:437;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:28350;}i:438;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:120:"The controller is the manager of the model and view. In Codeigniter the name of the controller corresponds to the first ";}i:2;i:28372;}i:439;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"URL";}i:2;i:28492;}i:440;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:21:" segment. The second ";}i:2;i:28495;}i:441;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"URL";}i:2;i:28516;}i:442;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:60:" segment is executed as a corresponding method. Any further ";}i:2;i:28519;}i:443;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"URL";}i:2;i:28579;}i:444;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:336:" segments are passed to the methods as parameters. Controllers are meant to be thin and simply call upon models and pass in parameters, afterwards it binds the returned data to the view and at the same time responds back to the client with the finished data. The only business logic that controllers should have is any input filtering, ";}i:2;i:28582;}i:445;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:4:"HTTP";}i:2;i:28918;}i:446;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:33:" routing tasks, and view binding.";}i:2;i:28922;}i:447;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:28955;}i:448;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:28955;}i:449;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:31:"Example Codeigniter Controller:";}i:2;i:28957;}i:450;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:28988;}i:451;a:3:{i:0;s:4:"code";i:1;a:3:{i:0;s:1513:"
//This Home class corresponds to home.php as a filename, home then becomes the first URL segment as http://example.com/index.php/home or http://example.com/home (if using URL rewriting via Apache .htaccess)
class Home extends CI_Controller {

    //you can build up your view binding by creating a privately scoped member array, when you're ready to build up the view, just append values onto this array and pass this to the view. By creating this independent from any methods, the view data is then abstracted and can be added to from multiple methods
    private $_view_data = array();

    //since it is a class that extends the CI_Controller, we still have a __construct that is called as soon as it is initiated
    public function __construct(){
    
        parent::__construct();
        
        //load commonly used dependencies using CI, you would not dependency inject using controllers, because you don't control the calling of controllers
    
    }
    
    //this is the actual method that would be called if there was no second URL segment, it can also be explicitly called by http://example.com/home/index
    //to be callable by URL, they would have to be scoped at public
    public function index(){
    
        //load models and do processing
        //load views and return the response
        $this->load->view('home_view', $this->_view_data);
    
    }
    
    //you can access this via http://example.com/about/2, the 2 becomes the id
    public function about($id){
    
    }
	
}
";i:1;s:3:"php";i:2;N;}i:2;i:28995;}i:452;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:28995;}i:453;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:40:"When processing form inputs, instead of ";}i:2;i:30522;}i:454;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:73:"http://ellislab.com/codeigniter/user-guide/libraries/form_validation.html";i:1;s:61:"placing all the validation rules in your controller's methods";}i:2;i:30562;}i:455;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:72:", keep them in a separate configuration file. Refer to this tutorial on ";}i:2;i:30701;}i:456;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:66:"http://chris-schmitz.com/cleaning-up-your-codeigniter-controllers/";i:1;s:40:"Cleaning up your Codeigniter Controllers";}i:2;i:30773;}i:457;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:23:" to see how to do this:";}i:2;i:30884;}i:458;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:30907;}i:459;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:30907;}i:460;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:360:"There'll be many developers who argue that your form inputs should be validated in your model. However Codeigniter's form validation library doesn't work from the model, so we have to place in our controller. But by following the technique of placing form rules in an external config file, this makes form validation much easier and thinner in our controllers.";}i:2;i:30909;}i:461;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:31270;}i:462;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:31270;}i:463;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:10:"Templating";i:1;i:2;i:2;i:31270;}i:2;i:31270;}i:464;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:2;}i:2;i:31270;}i:465;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:31270;}i:466;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:393:"Templating is the process of using layouts and partials to form complete view user interfaces. In following the separation of concerns, templates should contain as little business logic as possible. It's only there to bring together user interface elements and have dynamic data inserted into them. The problem comes when we want to have reusable partial templates and shared layout templates.";}i:2;i:31294;}i:467;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:31687;}i:468;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:31687;}i:469;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:427:"Think of layouts as a template file that specifies the header, footer, sidebar and any other elements that are shared across web pages and hardly change. A large web application may have multiple layouts, one for the blog, one for the administration panel, one for the home page. Each of which may have different headers or lack/include a sidebar. Layouts are the master templates, the templates that specifies other templates.";}i:2;i:31689;}i:470;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:32116;}i:471;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:32116;}i:472;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:327:"Think of partials as reusable templates across many different areas. An example would be a table row that may get used in different tables in different pages in different layouts. Partials are the grand children templates, templates that don't specify any other template and doesn't know which parent will pick it up to use it.";}i:2;i:32118;}i:473;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:32445;}i:474;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:32445;}i:475;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:47:"There are a number of templating libraries for ";}i:2;i:32447;}i:476;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"PHP";}i:2;i:32494;}i:477;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:230:", some of them catered towards Codeigniter, and others are for generic use. Many of them provide their own domain specific language. You can choose to go with third party solutions, however I like to roll my own simpler solution. ";}i:2;i:32497;}i:478;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"PHP";}i:2;i:32727;}i:479;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:37:" after all was a templating language.";}i:2;i:32730;}i:480;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:32767;}i:481;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:32767;}i:482;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:57:"So I present to you the static helper class CiTemplating:";}i:2;i:32769;}i:483;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:32827;}i:484;a:3:{i:0;s:10:"listu_open";i:1;a:0:{}i:2;i:32827;}i:485;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:32827;}i:486;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:32827;}i:487;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:" ";}i:2;i:32831;}i:488;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:42:"https://github.com/Polycademy/CiTemplating";i:1;s:12:"CiTemplating";}i:2;i:32832;}i:489;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:32891;}i:490;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:32891;}i:491;a:3:{i:0;s:11:"listu_close";i:1;a:0:{}i:2;i:32891;}i:492;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:32891;}i:493;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:286:"You can install it via composer (follow the instructions on the README) and it will be autoloaded, allowing you to call it like a global function without the need of instantiating it or using namespaces. Namespaces couldn't be used, due to the nature of templating, it would require an ";}i:2;i:32893;}i:494;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:33179;}i:495;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:3:"use";}i:2;i:33181;}i:496;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:33184;}i:497;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:104:" namespace import, which would go against the concept of minimal logic views. Please see the section on ";}i:2;i:33186;}i:498;a:3:{i:0;s:9:"locallink";i:1;a:2:{i:0;s:11:"autoloading";i:1;s:11:"Autoloading";}i:2;i:33290;}i:499;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:61:" to find how to integrate autoloading magic into Codeigniter.";}i:2;i:33318;}i:500;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:33379;}i:501;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:33379;}i:502;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:58:"To use this library we need to establish some conventions:";}i:2;i:33381;}i:503;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:33440;}i:504;a:3:{i:0;s:10:"listu_open";i:1;a:0:{}i:2;i:33440;}i:505;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:33440;}i:506;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:33440;}i:507;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:131:" Each controller you have should have a corresponding folder with a matching name in the view folder. Therefore a controller named ";}i:2;i:33444;}i:508;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:33575;}i:509;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:8:"blog.php";}i:2;i:33577;}i:510;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:33585;}i:511;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:24:" should have the folder ";}i:2;i:33587;}i:512;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:33611;}i:513;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:10:"views/blog";}i:2;i:33613;}i:514;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:33623;}i:515;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:".";}i:2;i:33625;}i:516;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:33626;}i:517;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:33626;}i:518;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:33626;}i:519;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:33626;}i:520;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:149:" Each public method in a controller should have their own view with a matching name stored in their view controller folder. Therefore the controller ";}i:2;i:33630;}i:521;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:33779;}i:522;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:8:"blog.php";}i:2;i:33781;}i:523;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:33789;}i:524;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:6:" with ";}i:2;i:33791;}i:525;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:33797;}i:526;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:8:"articles";}i:2;i:33799;}i:527;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:33807;}i:528;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:41:" as a public method should have the view ";}i:2;i:33809;}i:529;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:33850;}i:530;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:28:"views/blog/articles_view.php";}i:2;i:33852;}i:531;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:33880;}i:532;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:".";}i:2;i:33882;}i:533;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:33883;}i:534;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:33883;}i:535;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:33883;}i:536;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:33883;}i:537;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:28:" Partials are appended with ";}i:2;i:33887;}i:538;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:33915;}i:539;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:8:"_partial";}i:2;i:33917;}i:540;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:33925;}i:541;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:48:", and are stored in the partials folder such as ";}i:2;i:33927;}i:542;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:33975;}i:543;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:31:"views/partials/rows_partial.php";}i:2;i:33977;}i:544;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:34008;}i:545;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:".";}i:2;i:34010;}i:546;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:34011;}i:547;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:34011;}i:548;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:34011;}i:549;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:34011;}i:550;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:27:" Layouts are appended with ";}i:2;i:34015;}i:551;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:34042;}i:552;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:8:"_layouts";}i:2;i:34044;}i:553;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:34052;}i:554;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:47:", and are stored in the layouts folder such as ";}i:2;i:34054;}i:555;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:34101;}i:556;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:29:"views/layouts/main_layout.php";}i:2;i:34103;}i:557;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:34132;}i:558;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:".";}i:2;i:34134;}i:559;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:34135;}i:560;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:34135;}i:561;a:3:{i:0;s:11:"listu_close";i:1;a:0:{}i:2;i:34135;}i:562;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:34135;}i:563;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:49:"Your views directory can start to look like this:";}i:2;i:34137;}i:564;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:34187;}i:565;a:3:{i:0;s:12:"preformatted";i:1;a:1:{i:0;s:284:"views
  |
  |----layouts
  |       |
  |       |----default_layout.php
  |       |----json_layout.php
  |
  |----partials
  |       |
  |       |----rows_partial.php
  |
  |----home
  |       |
  |       |----index_view.php
  |
  |----blog
          |
          |----articles_view.php";}i:2;i:34187;}i:566;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:34509;}i:567;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:7:"Layouts";i:1;i:3;i:2;i:34509;}i:2;i:34509;}i:568;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:34509;}i:569;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:34509;}i:570;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:45:"The CiTemplate static class provide a static ";}i:2;i:34528;}i:571;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:34573;}i:572;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:7:"compose";}i:2;i:34575;}i:573;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:34582;}i:574;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:103:" method allowing you to define both views and their corresponding layouts. All layouts should inject a ";}i:2;i:34584;}i:575;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:34687;}i:576;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:6:"$yield";}i:2;i:34689;}i:577;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:34695;}i:578;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:24:" variable. When you run ";}i:2;i:34697;}i:579;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:34721;}i:580;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:19:"Template::compose()";}i:2;i:34723;}i:581;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:34742;}i:582;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:209:", it will first sent any view data to the specified view, and return the compiled template, before dynamically adding it to the view data array and injecting it into the layout. For example, you should have a ";}i:2;i:34744;}i:583;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:34953;}i:584;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:18:"default_layout.php";}i:2;i:34955;}i:585;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:34973;}i:586;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:18:" that is like this";}i:2;i:34975;}i:587;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:34993;}i:588;a:3:{i:0;s:4:"file";i:1;a:3:{i:0;s:101:"
<? Template::partial('header', $header) ?>
<?= $yield ?>
<? Template::partial('footer', $footer) ?>
";i:1;s:3:"php";i:2;s:18:"default_layout.php";}i:2;i:35000;}i:589;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:35000;}i:590;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:91:"The corresponding call to this layout would be something like, if it was called inside the ";}i:2;i:35134;}i:591;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:35225;}i:592;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:7:"index()";}i:2;i:35227;}i:593;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:35234;}i:594;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:25:" method of a controller..";}i:2;i:35236;}i:595;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:35261;}i:596;a:3:{i:0;s:4:"code";i:1;a:3:{i:0;s:156:"
$view_data = array(
    'header' => array(),
    'footer' => array(),
    'data' => 'data_value',
    //... etc
);
Template::compose('index', $view_data);
";i:1;s:3:"php";i:2;N;}i:2;i:35268;}i:597;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:35268;}i:598;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:4:"The ";}i:2;i:35438;}i:599;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:35442;}i:600;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:20:"$view_data['header']";}i:2;i:35444;}i:601;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:35464;}i:602;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:5:" and ";}i:2;i:35466;}i:603;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:35471;}i:604;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:20:"$view_data['footer']";}i:2;i:35473;}i:605;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:35493;}i:606;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:53:" would be be injected into the partial parameters of ";}i:2;i:35495;}i:607;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:35548;}i:608;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:7:"$header";}i:2;i:35550;}i:609;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:35557;}i:610;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:5:" and ";}i:2;i:35559;}i:611;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:35564;}i:612;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:7:"$footer";}i:2;i:35566;}i:613;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:35573;}i:614;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:91:" in the layout. The rest of the properties in the view data array would be passed into the ";}i:2;i:35575;}i:615;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:35666;}i:616;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:14:"index_view.php";}i:2;i:35668;}i:617;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:35682;}i:618;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:138:", and the returned output would automatically be injected into the $yield. This obviously means you should not use have a property key of ";}i:2;i:35684;}i:619;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:35822;}i:620;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:19:"$view_data['yield']";}i:2;i:35824;}i:621;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:35843;}i:622;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:65:" when defining your view data array, as it would get overwritten.";}i:2;i:35845;}i:623;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:35910;}i:624;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:35910;}i:625;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:102:"The compose method also has a third parameter that specifies the layout file to use. By default it is ";}i:2;i:35912;}i:626;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:36014;}i:627;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:7:"default";}i:2;i:36016;}i:628;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:36023;}i:629;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:58:". The compose method allows you to use full names such as ";}i:2;i:36025;}i:630;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:36083;}i:631;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:62:"Template::compose('index_view', $view_data, 'default_layout');";}i:2;i:36085;}i:632;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:36147;}i:633;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:57:", but it isn't necessary as it will automatically append ";}i:2;i:36149;}i:634;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:36206;}i:635;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:5:"_view";}i:2;i:36208;}i:636;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:36213;}i:637;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:4:" or ";}i:2;i:36215;}i:638;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:36219;}i:639;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:7:"_layout";}i:2;i:36221;}i:640;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:36228;}i:641;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:80:" to the end of the parameter if it doesn't have it. The same goes with partials.";}i:2;i:36230;}i:642;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:36310;}i:643;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:36310;}i:644;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:77:"A cool thing you can do with this method is to specify a JSON layout like so:";}i:2;i:36312;}i:645;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:36389;}i:646;a:3:{i:0;s:4:"file";i:1;a:3:{i:0;s:117:"
<?php

header('Content-type: application/json');

echo json_encode($yield, JSON_NUMERIC_CHECK | JSON_FORCE_OBJECT);
";i:1;s:3:"php";i:2;s:15:"json_layout.php";}i:2;i:36396;}i:647;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:36396;}i:648;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:24:"You would call this via:";}i:2;i:36543;}i:649;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:36567;}i:650;a:3:{i:0;s:4:"code";i:1;a:3:{i:0;s:166:"
//we pass false into the view, because don't need one to pass in straight json_data, json_data has to be an array too!
Template::compose(false, $json_data, 'json');
";i:1;s:3:"php";i:2;N;}i:2;i:36574;}i:651;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:36574;}i:652;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:73:"To understand how the compose method works, look into the source code of ";}i:2;i:36754;}i:653;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:36827;}i:654;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:12:"Template.php";}i:2;i:36829;}i:655;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:36841;}i:656;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:23:". It's well documented.";}i:2;i:36843;}i:657;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:36867;}i:658;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:36867;}i:659;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:8:"Partials";i:1;i:3;i:2;i:36867;}i:2;i:36867;}i:660;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:36867;}i:661;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:36867;}i:662;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:485:"Partials allow you define and call in reusable templates within templates. They also allow you to loop through results and repeat a compiled template with minimal logic. Partials are stored in the partials folder. Although it is possible to modify the code to allow partials anywhere in the view directory, I found it more appropriate and simpler to specify that all of them must be in one directory. Do note that it is possible to specify subdirectories in the partials folder though.";}i:2;i:36887;}i:663;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:37372;}i:664;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:37372;}i:665;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:50:"Partials are called within template views like so:";}i:2;i:37374;}i:666;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:37424;}i:667;a:3:{i:0;s:4:"code";i:1;a:3:{i:0;s:171:"
//first parameter is the name of the partial with or without '_partial' appended to it, second parameter is the variable to pass in
Template::partial('header', $header);
";i:1;s:3:"php";i:2;N;}i:2;i:37431;}i:668;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:37431;}i:669;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:47:"To loop through results you would need to pass ";}i:2;i:37616;}i:670;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:37663;}i:671;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:4:"true";}i:2;i:37665;}i:672;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:37669;}i:673;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:42:" to the third parameter in your view file.";}i:2;i:37671;}i:674;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:37713;}i:675;a:3:{i:0;s:4:"code";i:1;a:3:{i:0;s:44:"
Template::partial('row', $row_data, true);
";i:1;s:3:"php";i:2;N;}i:2;i:37720;}i:676;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:37720;}i:677;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:61:"This would call in a partial and attempt the iterate through ";}i:2;i:37778;}i:678;a:3:{i:0;s:13:"emphasis_open";i:1;a:0:{}i:2;i:37839;}i:679;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:6:"values";}i:2;i:37841;}i:680;a:3:{i:0;s:14:"emphasis_close";i:1;a:0:{}i:2;i:37847;}i:681;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:8:" of the ";}i:2;i:37849;}i:682;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:37857;}i:683;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:9:"$row_data";}i:2;i:37859;}i:684;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:37868;}i:685;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:56:". The values are by default specified in the partial as ";}i:2;i:37870;}i:686;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:37926;}i:687;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:4:"$row";}i:2;i:37928;}i:688;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:37932;}i:689;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:62:" variables. It is important to understand this. When you call ";}i:2;i:37934;}i:690;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:37996;}i:691;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:19:"Template::compose()";}i:2;i:37998;}i:692;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:38017;}i:693;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:149:" to a view that has a looped partial, the view data array you pass in should have a property of which its key name matches the injected parameter of ";}i:2;i:38019;}i:694;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:38168;}i:695;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:17:"Template::partial";}i:2;i:38170;}i:696;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:38187;}i:697;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:100:". This property needs to also be an array, and its values are what is iterated over and stored in a ";}i:2;i:38189;}i:698;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:38289;}i:699;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:4:"$row";}i:2;i:38291;}i:700;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:38295;}i:701;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:39:" variable. The partial can simply call ";}i:2;i:38297;}i:702;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:38336;}i:703;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:4:"$row";}i:2;i:38338;}i:704;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:38342;}i:705;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:68:" if it's a scalar value, but if you need multiple properties in the ";}i:2;i:38344;}i:706;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:38412;}i:707;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:4:"$row";}i:2;i:38414;}i:708;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:38418;}i:709;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:69:" variable, then the values that are iterated should also be an array.";}i:2;i:38420;}i:710;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:38489;}i:711;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:38489;}i:712;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:44:"Imagine you had a controller code like this:";}i:2;i:38491;}i:713;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:38535;}i:714;a:3:{i:0;s:4:"code";i:1;a:3:{i:0;s:165:"
$view_data = array(
    'row_data' => array(
        'First Row',
        'Second Row',
        'Third Row',
    ),
);

Template::compose('table', $view_data);    
";i:1;s:3:"php";i:2;N;}i:2;i:38542;}i:715;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:38542;}i:716;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:23:"Then the view could be:";}i:2;i:38721;}i:717;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:38744;}i:718;a:3:{i:0;s:4:"code";i:1;a:3:{i:0;s:99:"
<table>
    <tbody>
        <? Template::partial('row', $row_data, true) ?>
    </tbody>
</table>
";i:1;s:3:"php";i:2;N;}i:2;i:38751;}i:719;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:38751;}i:720;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:26:"Then the partial would be:";}i:2;i:38864;}i:721;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:38890;}i:722;a:3:{i:0;s:4:"code";i:1;a:3:{i:0;s:37:"
<tr>
    <td><?= $row ?></td>
</tr>
";i:1;s:3:"php";i:2;N;}i:2;i:38897;}i:723;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:38897;}i:724;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:12:"Each of the ";}i:2;i:38948;}i:725;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:38960;}i:726;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:4:"$row";}i:2;i:38962;}i:727;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:38966;}i:728;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:36:" would contain the scalar string of ";}i:2;i:38968;}i:729;a:3:{i:0;s:18:"doublequoteopening";i:1;a:0:{}i:2;i:39004;}i:730;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:9:"First Row";}i:2;i:39005;}i:731;a:3:{i:0;s:18:"doublequoteclosing";i:1;a:0:{}i:2;i:39014;}i:732;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:7:", then ";}i:2;i:39015;}i:733;a:3:{i:0;s:18:"doublequoteopening";i:1;a:0:{}i:2;i:39022;}i:734;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:10:"Second Row";}i:2;i:39023;}i:735;a:3:{i:0;s:18:"doublequoteclosing";i:1;a:0:{}i:2;i:39033;}i:736;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:14:", and finally ";}i:2;i:39034;}i:737;a:3:{i:0;s:18:"doublequoteopening";i:1;a:0:{}i:2;i:39048;}i:738;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:9:"Third Row";}i:2;i:39049;}i:739;a:3:{i:0;s:18:"doublequoteclosing";i:1;a:0:{}i:2;i:39058;}i:740;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:".";}i:2;i:39059;}i:741;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:39060;}i:742;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:39060;}i:743;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:16:"If I wanted the ";}i:2;i:39062;}i:744;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:39078;}i:745;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:4:"$row";}i:2;i:39080;}i:746;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:39084;}i:747;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:50:" to have multiple parameters, then I would change ";}i:2;i:39086;}i:748;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:39136;}i:749;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:9:"$row_data";}i:2;i:39138;}i:750;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:39147;}i:751;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:26:" to be an array of arrays.";}i:2;i:39149;}i:752;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:39175;}i:753;a:3:{i:0;s:4:"code";i:1;a:3:{i:0;s:370:"
$view_data = array(
    'row_data' => array(
        array(
            'name' => 'Roger',
            'id' => '4'
        ),
        array(
            'name' => 'Dave',
            'id' => '5'
        ),
    ),
);

Template::compose('table', $view_data);

//and this would be in the partial

<tr>
    <td><?= $row['name'] ?></td>
    <td><?= $row['id'] ?></td>
</tr>
";i:1;s:3:"php";i:2;N;}i:2;i:39182;}i:754;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:39182;}i:755;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:44:"As you can see array keys don't matter here.";}i:2;i:39566;}i:756;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:39610;}i:757;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:39610;}i:758;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:186:"By default they automatically echo their data as soon as they are called. However you can also specify that they return data as a variable by setting the fourth buffer parameter to true.";}i:2;i:39612;}i:759;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:39798;}i:760;a:3:{i:0;s:4:"code";i:1;a:3:{i:0;s:67:"
$partial_compiled = Template::partial('row', $data, false, true);
";i:1;s:3:"php";i:2;N;}i:2;i:39805;}i:761;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:39885;}i:762;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:15:"Using Libraries";i:1;i:2;i:2;i:39885;}i:2;i:39885;}i:763;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:2;}i:2;i:39885;}i:764;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:39885;}i:765;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:602:"One the key concepts of OOP is reusing code. Libraries are the primary way of reusing and sharing code. Whereas code in the MVC refers to a specific implementation of a particular web application. Libraries are created independently of what the web application does. Libraries can be a list of procedural functions, however these are usually called helper functions, and since we're using OOP, we should avoid using function lists which are hard to test, maintain, extend and impossible to autoload. Therefore our libraries will either be normal classes, abstract classes, interfaces or static classes.";}i:2;i:39914;}i:766;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:40516;}i:767;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:40516;}i:768;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:542:"There are different ways of structuring library classes, most of the ways are dependent on how best to autoload or not autoload the classes, and the usage or non-usage of namespacing. The PSR-0 (composer) standard was all about standardising sharable code libraries that could be autoloaded. However there are a number of other ways including Codeigniter's native library loading functionality, Codeigniter Sparks package management and of course rolling our own autoloading. This section will go through each and also discuss static classes.";}i:2;i:40518;}i:769;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:41061;}i:770;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:41061;}i:771;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:21:"Codeigniter Libraries";i:1;i:3;i:2;i:41061;}i:2;i:41061;}i:772;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:41061;}i:773;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:41061;}i:774;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:74:"Codeigniter allows you to create your own libraries and store them in the ";}i:2;i:41094;}i:775;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:41168;}i:776;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:21:"application/libraries";}i:2;i:41170;}i:777;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:41191;}i:778;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:34:" folder. Follow the user guide on ";}i:2;i:41193;}i:779;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:65:"http://ellislab.com/codeigniter/user-guide/general/libraries.html";i:1;s:17:"loading libraries";}i:2;i:41227;}i:780;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:5:" and ";}i:2;i:41314;}i:781;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:74:"http://ellislab.com/codeigniter/user-guide/general/creating_libraries.html";i:1;s:18:"creating libraries";}i:2;i:41319;}i:782;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:200:" for more information. For the purposes of autoloading convention, any library we create should be capitalised and camelcased. In the cases of interfaces and abstracts they should be prefixed with an ";}i:2;i:41416;}i:783;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:41616;}i:784;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:"i";}i:2;i:41618;}i:785;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:41619;}i:786;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:4:" or ";}i:2;i:41621;}i:787;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:41625;}i:788;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:"a";}i:2;i:41627;}i:789;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:41628;}i:790;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:194:" respectively. When you load a Codeigniter library using the Codeigniter loader, it will automatically instantiate the class into an object. So static classes will have to be loaded differently.";}i:2;i:41630;}i:791;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:41824;}i:792;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:41824;}i:793;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:209:"Codeigniter also provides a number of system libraries available for you to use. They provide a number of default functionality that we can take advantage of in order to avoid reinventing the wheel. Check out ";}i:2;i:41826;}i:794;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:51:"http://ellislab.com/codeigniter/user-guide/toc.html";i:1;s:40:"Codeigniter's class and helper reference";}i:2;i:42035;}i:795;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:112:" for more information. Many of the functionality you need to run a generic web application is already available.";}i:2;i:42131;}i:796;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:42243;}i:797;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:42243;}i:798;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:92:"You can also replace and extend system libraries. You will need to either put them into the ";}i:2;i:42245;}i:799;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:42337;}i:800;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:16:"application/core";}i:2;i:42339;}i:801;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:42355;}i:802;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:4:" or ";}i:2;i:42357;}i:803;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:42361;}i:804;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:21:"application/libraries";}i:2;i:42363;}i:805;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:42384;}i:806;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:47:" folder. A good way to know, is to go into the ";}i:2;i:42386;}i:807;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:42433;}i:808;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:11:"system/core";}i:2;i:42435;}i:809;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:42446;}i:810;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:105:" directory and see if the class you're trying to extend is there, and if it is, then it should be in the ";}i:2;i:42448;}i:811;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:42553;}i:812;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:16:"application/core";}i:2;i:42555;}i:813;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:42571;}i:814;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:59:". This is how people get customised controllers or loaders.";}i:2;i:42573;}i:815;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:42632;}i:816;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:42632;}i:817;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:217:"If you're replacing a native library. You would use the same name of the class you're trying to replace. But inside the class, you would call it CI_CLASSNAME. For example to replace the Email class. You would name it ";}i:2;i:42634;}i:818;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:42851;}i:819;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:9:"Email.php";}i:2;i:42853;}i:820;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:42862;}i:821;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:20:" and have it run as ";}i:2;i:42864;}i:822;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:42884;}i:823;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:16:"class CI_Email{}";}i:2;i:42886;}i:824;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:42902;}i:825;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:".";}i:2;i:42904;}i:826;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:42905;}i:827;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:42905;}i:828;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:190:"If you're extending a native library just declare your class as MY_CLASSNAME extending CI_CLASSNAME. Furthermore if you're using a constructor, make sure to call the parent constructor with:";}i:2;i:42907;}i:829;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:43097;}i:830;a:3:{i:0;s:4:"code";i:1;a:3:{i:0;s:24:"
parent::__construct();
";i:1;s:3:"php";i:2;N;}i:2;i:43104;}i:831;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:43104;}i:832;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:142:"Note that if you're trying use Codeigniter's native libraries or database class inside your own custom library, you need to call the function ";}i:2;i:43142;}i:833;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:43284;}i:834;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:14:"get_instance()";}i:2;i:43286;}i:835;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:43300;}i:836;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:201:". This is a global function defined by Codeigniter. When you load in your library, that function points to creating an instance to Codeigniter's super object. It's actually a good demonstration of the ";}i:2;i:43302;}i:837;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:46:"http://en.wikipedia.org/wiki/Singleton_pattern";i:1;s:17:"singleton pattern";}i:2;i:43503;}i:838;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:22:". Every time you call ";}i:2;i:43571;}i:839;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:43593;}i:840;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:12:"get_instance";}i:2;i:43595;}i:841;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:43607;}i:842;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:182:" you don't actually initialise a whole new superobject. The function checks if the object has already been initialised, and if it has been, it will simply return that object. In the ";}i:2;i:43609;}i:843;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:74:"http://ellislab.com/codeigniter/user-guide/general/creating_libraries.html";i:1;s:13:"documentation";}i:2;i:43791;}i:844;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:133:", it recommends that you assign it to a object member property in your constructor, and then use the variable as if you were calling ";}i:2;i:43883;}i:845;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:44016;}i:846;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:5:"$this";}i:2;i:44018;}i:847;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:44023;}i:848;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:32:" in your controllers and models.";}i:2;i:44025;}i:849;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:44057;}i:850;a:3:{i:0;s:4:"code";i:1;a:3:{i:0;s:82:"
$CI = get_instance();
$CI->do_something_native(); //like $CI->load->other_libary
";i:1;s:3:"php";i:2;N;}i:2;i:44064;}i:851;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:44064;}i:852;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:39:"However this actually isn't necessary. ";}i:2;i:44160;}i:853;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:98:"http://stackoverflow.com/questions/7195544/get-instance-in-codeigniter-why-assign-it-to-a-variable";i:1;s:26:"There are reasons for this";}i:2;i:44199;}i:854;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:".";}i:2;i:44328;}i:855;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:44329;}i:856;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:44331;}i:857;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:6:"Sparks";i:1;i:4;i:2;i:44331;}i:2;i:44331;}i:858;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:4;}i:2;i:44331;}i:859;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:44331;}i:860;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:390:"Before the days of Composer and PSR-0, Codeigniter had its own package and repository manager called Sparks. It is still in use today by legacy Codeigniter libraries and Codeigniter specific packages. So this will still be useful. However it hasn't been kept up to date with the latest develop branch version of Codeigniter, so in order to install we have to make a couple changes. See the ";}i:2;i:44347;}i:861;a:3:{i:0;s:12:"internallink";i:1;a:2:{i:0;s:21:"Solution Stack#sparks";i:1;s:24:"solution stack on sparks";}i:2;i:44737;}i:862;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:22:" for more information.";}i:2;i:44787;}i:863;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:44809;}i:864;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:44809;}i:865;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:78:"You would have spark packages located at project root, and with the augmented ";}i:2;i:44811;}i:866;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:44889;}i:867;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:13:"MY_Loader.php";}i:2;i:44891;}i:868;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:44904;}i:869;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:23:" you can load them via ";}i:2;i:44906;}i:870;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:44929;}i:871;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:5:"$this";}i:2;i:44931;}i:872;a:3:{i:0;s:6:"entity";i:1;a:1:{i:0;s:2:"->";}i:2;i:44936;}i:873;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:4:"load";}i:2;i:44938;}i:874;a:3:{i:0;s:6:"entity";i:1;a:1:{i:0;s:2:"->";}i:2;i:44942;}i:875;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:29:"spark('example-spark/1.0.0');";}i:2;i:44944;}i:876;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:44973;}i:877;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:23:", it is then usable as ";}i:2;i:44975;}i:878;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:44998;}i:879;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:5:"$this";}i:2;i:45000;}i:880;a:3:{i:0;s:6:"entity";i:1;a:1:{i:0;s:2:"->";}i:2;i:45005;}i:881;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:13:"example_spark";}i:2;i:45007;}i:882;a:3:{i:0;s:6:"entity";i:1;a:1:{i:0;s:2:"->";}i:2;i:45020;}i:883;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:9:"method();";}i:2;i:45022;}i:884;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:45031;}i:885;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:35:". Notice that we can't use hyphens ";}i:2;i:45033;}i:886;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:45068;}i:887;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:"-";}i:2;i:45070;}i:888;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:45071;}i:889;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:139:", when calling methods from classes as it confuses the interpreter as a syntax error. Packages either have to be underscored or camelcased.";}i:2;i:45073;}i:890;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:45213;}i:891;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:45213;}i:892;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:18:"Composer Libraries";i:1;i:3;i:2;i:45213;}i:2;i:45213;}i:893;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:45213;}i:894;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:45213;}i:895;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:46:"Composer is one of the best things to come to ";}i:2;i:45243;}i:896;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"PHP";}i:2;i:45289;}i:897;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:80:" since sliced bread. There has been numerous attempts at package management for ";}i:2;i:45292;}i:898;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"PHP";}i:2;i:45372;}i:899;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:135:" in the past, but Composer is the best and most widespread in the modern day. Composer is not only an installer tool, but it is also a ";}i:2;i:45375;}i:900;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:56:"http://phpmaster.com/autoloading-and-the-psr-0-standard/";i:1;s:26:"PSR-0 compliant autoloader";}i:2;i:45510;}i:901;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:106:". What this means it will autoload classes and conform to namespace usage. This allows you to simply call ";}i:2;i:45597;}i:902;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:45703;}i:903;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:9:"new Class";}i:2;i:45705;}i:904;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:45714;}i:905;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:27:" or typehint interfaces or ";}i:2;i:45716;}i:906;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:45743;}i:907;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:3:"use";}i:2;i:45745;}i:908;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:45748;}i:909;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:38:" importing without having to actually ";}i:2;i:45750;}i:910;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:45788;}i:911;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:7:"include";}i:2;i:45790;}i:912;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:45797;}i:913;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:4:" or ";}i:2;i:45799;}i:914;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:45803;}i:915;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:7:"require";}i:2;i:45805;}i:916;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:45812;}i:917;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:85:" the files that the classes reside in. This magic is performed by modern versions of ";}i:2;i:45814;}i:918;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"PHP";}i:2;i:45899;}i:919;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:327:" providing autoload functions that hook into the loading architecture so we can augment it to automatically load what we want given a specified directory, naming style and namespace usage. Composer also allows non-PSR autoloading, so if you have some utility classes that you just want autoloaded, Composer can do that as well.";}i:2;i:45902;}i:920;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:46229;}i:921;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:46229;}i:922;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:137:"Try checking out the composer directory, look at how the packages are structured, and the common uses of namespaces in their source code.";}i:2;i:46231;}i:923;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:46368;}i:924;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:46368;}i:925;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:87:"However there's a problem. Codeigniter is a framework that caters to older versions of ";}i:2;i:46370;}i:926;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"PHP";}i:2;i:46457;}i:927;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:415:" users. So it's not natively integrated into Composer. However there are easy ways of integrating Composer into Codeigniter. Autoloading can be considered a form of bootstrapping. Essentially the autoloader should be available from the very start of initialising a web application. Where is the very start of our MVC architecture? It's in the front controller! So the simplest way of integration would be to simply ";}i:2;i:46460;}i:928;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:46875;}i:929;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:12:"require_once";}i:2;i:46877;}i:930;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:46889;}i:931;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:16:" the Composer's ";}i:2;i:46891;}i:932;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:46907;}i:933;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:19:"vendor/autoload.php";}i:2;i:46909;}i:934;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:46928;}i:935;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:48:" in Codeigniter's front controller which is the ";}i:2;i:46930;}i:936;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:46978;}i:937;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:9:"index.php";}i:2;i:46980;}i:938;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:46989;}i:939;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:22:" at root. It would be ";}i:2;i:46991;}i:940;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:28:"http://pastebin.com/6ffYwdkf";i:1;s:69:"somewhere at the end but before Codeigniter loads all the controllers";}i:2;i:47013;}i:941;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:71:", or else we'd try to load classes before the autoloader is registered.";}i:2;i:47115;}i:942;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:47186;}i:943;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:47186;}i:944;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:48:"However there is a better way, and in fact this ";}i:2;i:47188;}i:945;a:3:{i:0;s:18:"doublequoteopening";i:1;a:0:{}i:2;i:47236;}i:946;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:10:"Polycademy";}i:2;i:47237;}i:947;a:3:{i:0;s:18:"doublequoteclosing";i:1;a:0:{}i:2;i:47247;}i:948;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:57:" way actually gives us autoloading on your Codeigniter's ";}i:2;i:47248;}i:949;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:47305;}i:950;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:21:"application/libraries";}i:2;i:47307;}i:951;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:47328;}i:952;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:5:" and ";}i:2;i:47330;}i:953;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:47335;}i:954;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:23:"application/third_party";}i:2;i:47337;}i:955;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:47360;}i:956;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:64:" for free, and is more semantic with Codeigniter's architecture.";}i:2;i:47362;}i:957;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:47427;}i:958;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:47427;}i:959;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:11:"Autoloading";i:1;i:3;i:2;i:47427;}i:2;i:47427;}i:960;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:47427;}i:961;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:47427;}i:962;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:23:"Codeigniter provides a ";}i:2;i:47450;}i:963;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:61:"http://ellislab.com/codeigniter/user-guide/general/hooks.html";i:1;s:8:"hook API";}i:2;i:47473;}i:964;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:215:" so we can plug in our own middleware. The one we're interested in is the most earliest, that is the pre-system hook. This is where we're going to place our Composer bootstrap and our own PSR-0 compliant autoloader.";}i:2;i:47547;}i:965;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:47763;}i:966;a:3:{i:0;s:10:"listo_open";i:1;a:0:{}i:2;i:47763;}i:967;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:47763;}i:968;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:47763;}i:969;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:17:" Enable hooks in ";}i:2;i:47767;}i:970;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:47784;}i:971;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:17:"config/config.php";}i:2;i:47786;}i:972;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:47803;}i:973;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:".";}i:2;i:47805;}i:974;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:47806;}i:975;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:47806;}i:976;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:47806;}i:977;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:47806;}i:978;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:9:" In your ";}i:2;i:47810;}i:979;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:47819;}i:980;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:16:"config/hooks.php";}i:2;i:47821;}i:981;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:47837;}i:982;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:9:" define: ";}i:2;i:47839;}i:983;a:3:{i:0;s:4:"code";i:1;a:3:{i:0;s:185:"
//pre_system autoloader
$hook['pre_system'] = array(
    'class' => 'Autoloader',
    'function'  => '__construct',
    'filename'  => 'Autoloader.php',
    'filepath'  => 'hooks',
);
";i:1;s:3:"php";i:2;s:9:"hooks.php";}i:2;i:47853;}i:984;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:48060;}i:985;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:48060;}i:986;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:48060;}i:987;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:48060;}i:988;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:20:" Then download this ";}i:2;i:48064;}i:989;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:43:"https://github.com/Polycademy/CiAutoloading";i:1;s:14:"Autoloader.php";}i:2;i:48084;}i:990;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:6:" into ";}i:2;i:48146;}i:991;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:48152;}i:992;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:32:"application/hooks/Autoloader.php";}i:2;i:48154;}i:993;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:48186;}i:994;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:108:". (You should also try to read and understand the code, refer to documentation for commands you don't know).";}i:2;i:48188;}i:995;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:48296;}i:996;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:48296;}i:997;a:3:{i:0;s:11:"listo_close";i:1;a:0:{}i:2;i:48296;}i:998;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:48296;}i:999;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:163:"Now you can auto instantiate objects and call static methods from static classes anywhere, and that means both packages in Composer and packages/libraries in your ";}i:2;i:48298;}i:1000;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:48461;}i:1001;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:21:"application/libraries";}i:2;i:48463;}i:1002;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:48484;}i:1003;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:4:" or ";}i:2;i:48486;}i:1004;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:48490;}i:1005;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:23:"application/third_party";}i:2;i:48492;}i:1006;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:48515;}i:1007;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:184:". However when constructing your library classes, do not use underscores in your filenames (excepting folder names) as they will be translated into directories. You need to follow the ";}i:2;i:48517;}i:1008;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:70:"https://github.com/php-fig/fig-standards/blob/master/accepted/PSR-0.md";i:1;s:11:"PSR-0 rules";}i:2;i:48701;}i:1009;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:33:" now. Capitalised and camelcased!";}i:2;i:48787;}i:1010;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:48820;}i:1011;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:48820;}i:1012;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:325:"However if you classes that extend CI's native classes, you will not be able to autoload them. This is because the system classes that your classes are extending/replacing are not autoloaded as they are in the system directory. You'll need to use the native loader to load them. This does not conflict with the native loader.";}i:2;i:48822;}i:1013;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:49147;}i:1014;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:49147;}i:1015;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:118:"At this point you have a flexible system utilising Composer, Sparks, Native CI and your own PSR-0 or class map loader.";}i:2;i:49149;}i:1016;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:49267;}i:1017;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:49267;}i:1018;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:75:"In order to autoload classes in directories, you'll have to use namespaces.";}i:2;i:49269;}i:1019;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:49345;}i:1020;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:49345;}i:1021;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:10:"Namespaces";i:1;i:3;i:2;i:49345;}i:2;i:49345;}i:1022;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:49345;}i:1023;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:49345;}i:1024;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:400:"Namespaces are a way to encapsulate objects in order to avoid naming conflicts and shorten long path names to aliases. In your operating system you may have two files with the same name and extension. However they can never live in the same directory, because that would cause a naming conflict, and if you're trying to call that file, the operating system wouldn't know which one you're trying call.";}i:2;i:49367;}i:1025;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:49767;}i:1026;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:49767;}i:1027;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:119:"Namespaces in programming operate similarly. Imagine you're working in a team, and one of you defines an object called ";}i:2;i:49769;}i:1028;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:49888;}i:1029;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:10:"class MyDB";}i:2;i:49890;}i:1030;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:49900;}i:1031;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:73:", and your teammate who didn't know better also defined an object called ";}i:2;i:49902;}i:1032;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:49975;}i:1033;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:10:"class MyDB";}i:2;i:49977;}i:1034;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:49987;}i:1035;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:165:". Then if you include the files together into one script, this would cause a naming conflict. Previously we would just name one of the classes with a prefix such as ";}i:2;i:49989;}i:1036;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:50154;}i:1037;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:15:"class SteveMyDB";}i:2;i:50156;}i:1038;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:50171;}i:1039;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:104:". However this is ugly and inefficient. Instead we use namespaces to avoid changing our class names. In ";}i:2;i:50173;}i:1040;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"PHP";}i:2;i:50277;}i:1041;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:147:" only classes, interfaces, functions and constants are affected by namespaces. It is recommended best practice to only have one namespace per file.";}i:2;i:50280;}i:1042;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:50427;}i:1043;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:50427;}i:1044;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:177:"There are two syntax commands in creating and importing namespaces. They should always be used at the top of the code in the file. You cannot use them in blocks or conditionals.";}i:2;i:50429;}i:1045;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:50606;}i:1046;a:3:{i:0;s:4:"file";i:1;a:3:{i:0;s:478:"
//use 'namespace' to define the namespace for the current code
namespace Polycademy\MissonChecker;

//use 'use' to import other namespaces into the code or as an alias
//the use command cannot import functions or constants, which is why we follow OOP
use Polycademy\Abstracts\aArmor;

//via the autoloading mechanism, the aArmor will point to Polycademy/Abstracts/aArmor.php then initialise the aArmor abstract, this will be done automatically
class SomeClass extends aArmor{}
";i:1;s:3:"php";i:2;s:13:"SomeClass.php";}i:2;i:50613;}i:1047;a:3:{i:0;s:4:"file";i:1;a:3:{i:0;s:52:"
namespace Polycademy\Abstracts;

abstract aArmor{}
";i:1;s:3:"php";i:2;s:10:"aArmor.php";}i:2;i:51124;}i:1048;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:51124;}i:1049;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:156:"When using namespaces, you need to abide by a similar directory structure. The above code defines the namespace as in Polycademy\MissionChecker. This means ";}i:2;i:51201;}i:1050;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:51357;}i:1051;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:13:"SomeClass.php";}i:2;i:51359;}i:1052;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:51372;}i:1053;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:11:" exists in ";}i:2;i:51374;}i:1054;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:51385;}i:1055;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:49:"base/path/Polycademy/MissionChecker/SomeClass.php";}i:2;i:51387;}i:1056;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:51436;}i:1057;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:117:". As you can see the namespace is always defined at where the file is, but does not include the filename itself. The ";}i:2;i:51438;}i:1058;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:51555;}i:1059;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:9:"base/path";}i:2;i:51557;}i:1060;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:51566;}i:1061;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:107:" is defined in your autoloader. If you choose to use CiAutoloading, then the base path is at Codeigniter's ";}i:2;i:51568;}i:1062;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:51675;}i:1063;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:21:"application/libraries";}i:2;i:51677;}i:1064;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:51698;}i:1065;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:5:" and ";}i:2;i:51700;}i:1066;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:51705;}i:1067;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:23:"application/third_party";}i:2;i:51707;}i:1068;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:51730;}i:1069;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:97:" folder. CiAutoloading also includes the Composer's own autoloader which has extra features. The ";}i:2;i:51732;}i:1070;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:51829;}i:1071;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:31:"use Polycademy\Abstracts\aArmor";}i:2;i:51831;}i:1072;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:51862;}i:1073;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:84:" actually imports the file itself, it's not just pointing a directory. You can make ";}i:2;i:51864;}i:1074;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:51948;}i:1075;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:3:"use";}i:2;i:51950;}i:1076;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:51953;}i:1077;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:222:" import a directory, however then when you call objects this will require you to append the directory name, so it's easier to import a file. Here's an example of the directory structure using Codeigniter and CiAutoloading.";}i:2;i:51955;}i:1078;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:52178;}i:1079;a:3:{i:0;s:12:"preformatted";i:1;a:1:{i:0;s:262:"  application/libraries
    |
    |----Polycademy
            |
            |----MissionChecker
            |       |
            |       |----SomeClass.php
            |       
            |----Abstracts
                    |
                    |----aArmor.php";}i:2;i:52178;}i:1080;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:52178;}i:1081;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:135:"The namespaces are always referred to from the root of the base path. There can be further directories or less directories if you wish.";}i:2;i:52465;}i:1082;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:52600;}i:1083;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:52600;}i:1084;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:28:"Do note it is possible have ";}i:2;i:52602;}i:1085;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:71:"http://www.php.net/manual/en/language.namespaces.definitionmultiple.php";i:1;s:31:"multiple namespaces in one file";}i:2;i:52630;}i:1086;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:114:", however this is a bad practice as it will confuse you and other developers who expect namespaces as directories.";}i:2;i:52737;}i:1087;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:52851;}i:1088;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:52851;}i:1089;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:180:"Namespaces come to life when using autoloaders, especially PSR-0 compliant autoloaders. According to the PSR-0 rules, you have to namespace and structure your packages in this way:";}i:2;i:52853;}i:1090;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:53034;}i:1091;a:3:{i:0;s:10:"listo_open";i:1;a:0:{}i:2;i:53034;}i:1092;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:53034;}i:1093;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:53034;}i:1094;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:116:" A fully-qualified namespace and class must have the following structure \<Vendor Name>\(<Namespace>)*\<Class Name>.";}i:2;i:53038;}i:1095;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:53154;}i:1096;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:53154;}i:1097;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:53154;}i:1098;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:53154;}i:1099;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:49:" Each namespace must have a top-level namespace (";}i:2;i:53158;}i:1100;a:3:{i:0;s:18:"doublequoteopening";i:1;a:0:{}i:2;i:53207;}i:1101;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:11:"Vendor Name";}i:2;i:53208;}i:1102;a:3:{i:0;s:18:"doublequoteclosing";i:1;a:0:{}i:2;i:53219;}i:1103;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:2:").";}i:2;i:53220;}i:1104;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:53222;}i:1105;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:53222;}i:1106;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:53222;}i:1107;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:53222;}i:1108;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:61:" Each namespace can have as many sub-namespaces as it wishes.";}i:2;i:53226;}i:1109;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:53287;}i:1110;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:53287;}i:1111;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:53287;}i:1112;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:53287;}i:1113;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:98:" Each namespace separator is converted to a DIRECTORY_SEPARATOR when loading from the file system.";}i:2;i:53291;}i:1114;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:53389;}i:1115;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:53389;}i:1116;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:53389;}i:1117;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:53389;}i:1118;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:129:" Each underscore in the class name is converted to a DIRECTORY_SEPARATOR. The underscore has no special meaning in the namespace.";}i:2;i:53393;}i:1119;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:53522;}i:1120;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:53522;}i:1121;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:53522;}i:1122;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:53522;}i:1123;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:97:" The fully-qualified namespace and class is suffixed with .php when loading from the file system.";}i:2;i:53526;}i:1124;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:53623;}i:1125;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:53623;}i:1126;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:53623;}i:1127;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:53623;}i:1128;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:123:" Alphabetic characters in vendor names, namespaces, and class names may be of any combination of lower case and upper case.";}i:2;i:53627;}i:1129;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:53750;}i:1130;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:53750;}i:1131;a:3:{i:0;s:11:"listo_close";i:1;a:0:{}i:2;i:53750;}i:1132;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:53750;}i:1133;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:43:"So in our example the vendor name would be ";}i:2;i:53752;}i:1134;a:3:{i:0;s:18:"doublequoteopening";i:1;a:0:{}i:2;i:53795;}i:1135;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:10:"Polycademy";}i:2;i:53796;}i:1136;a:3:{i:0;s:18:"doublequoteclosing";i:1;a:0:{}i:2;i:53806;}i:1137;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:454:", the next namespace should be the package name. In our example that's either MissionChecker or Abstracts. The 5th rule is why we camelcase our filenames and class names. Most packages that are on Composer follow this structure, but not all of them follow it strictly. It is possible to skip having a vendor name, and just have the package name, and it's also possible just to autoload classes without namespaces by defining them as a classmap. Refer to ";}i:2;i:53807;}i:1138;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:48:"http://getcomposer.org/doc/04-schema.md#autoload";i:1;s:23:"autoloading on Composer";}i:2;i:54261;}i:1139;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:30:" for more information on that.";}i:2;i:54337;}i:1140;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:54367;}i:1141;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:54367;}i:1142;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:76:"As a recommendation when constructing your own libraries, try conforming to ";}i:2;i:54369;}i:1143;a:3:{i:0;s:18:"doublequoteopening";i:1;a:0:{}i:2;i:54445;}i:1144;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:15:"Package/Library";}i:2;i:54446;}i:1145;a:3:{i:0;s:18:"doublequoteclosing";i:1;a:0:{}i:2;i:54461;}i:1146;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:73:" style naming. If you are intending to share it, be PSR-0 compliant with ";}i:2;i:54462;}i:1147;a:3:{i:0;s:18:"doublequoteopening";i:1;a:0:{}i:2;i:54535;}i:1148;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:22:"Vendor/Package/Library";}i:2;i:54536;}i:1149;a:3:{i:0;s:18:"doublequoteclosing";i:1;a:0:{}i:2;i:54558;}i:1150;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:136:" style. However if you're importing third party libraries that are neither Composer or Sparks, then you should try to convert them into ";}i:2;i:54559;}i:1151;a:3:{i:0;s:18:"doublequoteopening";i:1;a:0:{}i:2;i:54695;}i:1152;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:22:"Vendor/Package/Library";}i:2;i:54696;}i:1153;a:3:{i:0;s:18:"doublequoteclosing";i:1;a:0:{}i:2;i:54718;}i:1154;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:58:" style. These would then be put in the third party folder.";}i:2;i:54719;}i:1155;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:54777;}i:1156;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:54777;}i:1157;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:150:"There are couple other important facets of namespacing that may be a bit confusing to a beginner. It's easier to explain this via code. Also note the ";}i:2;i:54779;}i:1158;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:64:"http://www.php.net/manual/en/language.namespaces.nsconstants.php";i:1;s:19:"namespace constants";}i:2;i:54929;}i:1159;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:111:", which you can use to explicitly refer to the current namespace if importing imports classes of the same name.";}i:2;i:55017;}i:1160;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:55128;}i:1161;a:3:{i:0;s:4:"file";i:1;a:3:{i:0;s:2024:"
//assume autoloading is setup

//ok so this file is in Guzzle/Url directory
namespace Guzzle\Url;

//we're importing something we want to use
use Guzzle\Cookie\CookieParser;

//here we're importing, but we're aliasing it too!
use Guzzle\Message as Awesome;

//here we're importing a directory, just imagine that it is a directory and not a file
use Guzzle\Directory;

class Mapper{

    public function __construct(){
    
        //there's never any need to specify filename extensions, the classes and files are the same name.
    
        //this works, because we imported the file (remember that class names should match file names)
        //it first looks at the current namespace, then the imported namespace
        //this is called an unqualified name
        $cookie_parser = new CookieParser; 
        
        //this may work, it's not imported, so the current namespace gets appended
        //it will only work if there was a Guzzle/Url/UrlParser.php
        //this is also called an unqualified name
        $url_parser = new UrlParser;
        
        //this is called a qualified name, the current namespace gets appended to it
        //it becomes Guzzle\Url\Another\Parser.php
        $another_parser = new Another\Parser;
        
        //this is called a FULLY qualified name, it does not append any of the current namespaces, and it does not recognise imported namespaces. It's like an absolute path.
        $absolute_parser = new \Other\Cool\Parser;
        
        //this uses an alias, and resolves to Guzzle\Message\Parsing.php
        $aliased_parser = new Awesome\Parsing;
        
        //this is not an alias, instead it points to the Directory import. So it resolves as Guzzle\Directory\SuperParser;
        $directory_parser = new Directory\SuperParser;
        //therefore if the use keyword points to a directory and not to a specific file, all of those files become fair game. However you need to use the last namespace directory and prefix all class initialisations
    
    }

}
";i:1;s:3:"php";i:2;s:10:"Mapper.php";}i:2;i:55135;}i:1162;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:55135;}i:1163;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:68:"The above code would correspond to this kind of directory structure:";}i:2;i:57184;}i:1164;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:57253;}i:1165;a:3:{i:0;s:12:"preformatted";i:1;a:1:{i:0;s:777:"  application/libraries
    |
    |----Guzzle
    |       |
    |       |----Url
    |       |       |
    |       |       |----Mapper.php
    |       |       |
    |       |       |----UrlParser.php
    |       |       |
    |       |       |----Another
    |       |               |
    |       |               |----Parser.php
    |       |       
    |       |----Cookie
    |       |       |
    |       |       |----CookeParser.php
    |       |
    |       |----Message
    |       |       |
    |       |       |----Parsing.php
    |       |
    |       |
    |       |
    |       |----Directory
    |               |
    |               |----SuperParser.php
    |
    |----Other
           |
           |----Cool
                   |
                   |----Parser.php";}i:2;i:57253;}i:1166;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:58100;}i:1167;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:14:"Static Classes";i:1;i:3;i:2;i:58100;}i:2;i:58100;}i:1168;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:58100;}i:1169;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:58100;}i:1170;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:293:"Static classes are actually classes that have static member properties or methods. These properties and methods can be called without instantiating the class. They almost do the same thing as a procedural function list, however they are more flexible to use and more consistent with OOP usage.";}i:2;i:58127;}i:1171;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:58420;}i:1172;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:58420;}i:1173;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:358:"Static classes are alternatives to procedurally defining a large amount of helper functions that simply operate on data without storing any state itself. It's better to use static classes in OOP for two reasons. Firstly it's the consistency with the rest of your OOP architecture, and secondly static classes can be autoloaded, whereas function lists cannot.";}i:2;i:58422;}i:1174;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:58780;}i:1175;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:58780;}i:1176;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:55:"Static classes are not instantiated. So you don't call ";}i:2;i:58782;}i:1177;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:58837;}i:1178;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:16:"new StaticClass;";}i:2;i:58839;}i:1179;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:58855;}i:1180;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:44:". You can call the class functions directly.";}i:2;i:58857;}i:1181;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:58901;}i:1182;a:3:{i:0;s:4:"code";i:1;a:3:{i:0;s:176:"
class StaticClass{

    public static function say_something(){
        
        echo 'What!';
        
    }

}

//call them directly like this
StaticClass::say_something();
";i:1;s:3:"php";i:2;N;}i:2;i:58908;}i:1183;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:58908;}i:1184;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:305:"The reason you cannot instantiate static classes, is because they don't store any state, they simply operate on other object's data. Therefore it doesn't make any sense to instantiate them. As instantiation is for the purposes of having same class (blueprint) be used for different object representations.";}i:2;i:59098;}i:1185;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:59403;}i:1186;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:59403;}i:1187;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:49:"Inside a static function, the normally available ";}i:2;i:59405;}i:1188;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:59454;}i:1189;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:5:"$this";}i:2;i:59456;}i:1190;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:59461;}i:1191;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:37:" keyword is no longer available. The ";}i:2;i:59463;}i:1192;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:59500;}i:1193;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:5:"$this";}i:2;i:59502;}i:1194;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:59507;}i:1195;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:154:" only exists when the object is instantiated. Since static classes are not instantiated, in order call it's own class methods you have to use the keyword ";}i:2;i:59509;}i:1196;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:59663;}i:1197;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:4:"self";}i:2;i:59665;}i:1198;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:59669;}i:1199;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:".";}i:2;i:59671;}i:1200;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:59672;}i:1201;a:3:{i:0;s:4:"code";i:1;a:3:{i:0;s:458:"
class StaticClass{

    public static $static_variable = ' Dude!';

    public static function say_something(){
        
        echo 'What ';
        self::other_func();
        
    }
    
    public static function other_func(){
    
        echo ' Ever';
        //notice how in instantiated objects we use $this->static_variable; Here we're using self::$static_variable
        echo self::$static_variable;
    
    }

}

StaticClass::say_something();
";i:1;s:3:"php";i:2;N;}i:2;i:59679;}i:1202;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:59679;}i:1203;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:274:"We would put any static classes into our libraries folder. You won't need many static classes, as most things should be instantiated objects. But if you have a bunch of functions related to each other that don't store any state in variables, then you can use static classes.";}i:2;i:60151;}i:1204;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:60425;}i:1205;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:60427;}i:1206;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:8:"Database";i:1;i:2;i:2;i:60427;}i:2;i:60427;}i:1207;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:2;}i:2;i:60427;}i:1208;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:60427;}i:1209;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:180:"Databases are where we store overall application state in the long term. Programming code that stores state, only store the state during the running of the session. In the case of ";}i:2;i:60449;}i:1210;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"PHP";}i:2;i:60629;}i:1211;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:244:", unless you're running a daemon, this only during the request and response cycle. Which means everything gets reset to their default status and the variables won't hold anything until you startup the program again. Therefore we need databases.";}i:2;i:60632;}i:1212;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:60876;}i:1213;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:60876;}i:1214;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:206:"There are many databases catered to many different situations. The one that we're going to be using is MySQL, which is the most popular relational database management system, and one more the flexible ones.";}i:2;i:60878;}i:1215;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:61084;}i:1216;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:61084;}i:1217;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:522:"Think of databases like Microsoft Excel. The excel program you're running can be thought of as an database instance. The excel document you opened can be thought of as the database. Each sheet in excel can be thought of as a table. Each table or sheet can have a large amount of columns and rows. We store data in a tabulated form, with each row denoting a section of related data, and each column being the type of the data. All of this is stored in multiple tables, and each table represents a plurality of related data.";}i:2;i:61086;}i:1218;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:61608;}i:1219;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:61608;}i:1220;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:403:"If you think about a blog. There would be a blog table. The table can have 5 columns being id, author, title, content and date. Each blog post occupies a row taking up those 5 columns. So the first blog post may be '1', 'Roger', 'The Beginning of the End', 'Today we went on a fishing trip, I saw lots of fishes. Then we went home.', '2013/01/01'. Each blog post after the first would do the same thing.";}i:2;i:61610;}i:1221;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:62013;}i:1222;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:62013;}i:1223;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:39:"Database software usually don't have a ";}i:2;i:62015;}i:1224;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"GUI";}i:2;i:62054;}i:1225;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:125:" that comes with it. You would normally have to interface it using the command line. However the PHPMyAdmin adds a web based ";}i:2;i:62057;}i:1226;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"GUI";}i:2;i:62182;}i:1227;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:248:" to any MySQL databases, so you'll do most of your database work there. For other databases, you have to find other GUIs. When interfacing with the database in programming, you would use an abstraction layer such as Codeigniter's Active Records or ";}i:2;i:62185;}i:1228;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"PHP";}i:2;i:62433;}i:1229;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:17:"'s PDO extension.";}i:2;i:62436;}i:1230;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:62453;}i:1231;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:6:"vshare";i:1;a:8:{s:4:"site";s:7:"youtube";s:5:"video";s:51:"4XX7X7upEIU&list=PLwwh-11EOGvMTTrLIdKsmEpn0C0nk9CRQ";s:5:"flash";s:131:"http://www.youtube.com/v/4XX7X7upEIU%26list%3DPLwwh-11EOGvMTTrLIdKsmEpn0C0nk9CRQ?allowFullScreen=true&allowScriptAccess=always&fs=1";s:4:"vars";a:3:{s:15:"allowFullScreen";s:4:"true";s:17:"allowScriptAccess";s:6:"always";s:2:"fs";s:1:"1";}s:5:"align";i:3;s:5:"width";i:520;s:6:"height";i:406;s:5:"title";s:0:"";}i:2;i:5;i:3;s:71:"{{ youtube>4XX7X7upEIU&list=PLwwh-11EOGvMTTrLIdKsmEpn0C0nk9CRQ?large }}";}i:2;i:62455;}i:1232;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:62455;}i:1233;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:423:"Before we start using the database, we should get acquainted with some of the architectural concepts in using databases. It's important to understand that databases are not part of your application server. They are a totally different long running process (it is persistent and not part of the request and response cycle) that is running and your programming in the application server connects to it and interacts with its ";}i:2;i:62528;}i:1234;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"API";}i:2;i:62951;}i:1235;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:".";}i:2;i:62954;}i:1236;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:62955;}i:1237;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:62957;}i:1238;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:13:"SQL and NoSQL";i:1;i:3;i:2;i:62957;}i:2;i:62957;}i:1239;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:62957;}i:1240;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:62957;}i:1241;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:29:"You may have heard the terms ";}i:2;i:62982;}i:1242;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"SQL";}i:2;i:63011;}i:1243;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:12:" and NoSQL. ";}i:2;i:63014;}i:1244;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"SQL";}i:2;i:63026;}i:1245;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:12:" stands for ";}i:2;i:63029;}i:1246;a:3:{i:0;s:18:"doublequoteopening";i:1;a:0:{}i:2;i:63041;}i:1247;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:25:"structured query language";}i:2;i:63042;}i:1248;a:3:{i:0;s:18:"doublequoteclosing";i:1;a:0:{}i:2;i:63067;}i:1249;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:18:", and NoSQL means ";}i:2;i:63068;}i:1250;a:3:{i:0;s:18:"doublequoteopening";i:1;a:0:{}i:2;i:63086;}i:1251;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:34:"not only structured query language";}i:2;i:63087;}i:1252;a:3:{i:0;s:18:"doublequoteclosing";i:1;a:0:{}i:2;i:63121;}i:1253;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:154:". Since the 1970s it has become a standardised and popular language that interfaces with relational (tabular) based databases. Now when people talk about ";}i:2;i:63122;}i:1254;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"SQL";}i:2;i:63276;}i:1255;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:51:" databases, they mean not only that the database's ";}i:2;i:63279;}i:1256;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"API";}i:2;i:63330;}i:1257;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:20:" require you to use ";}i:2;i:63333;}i:1258;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"SQL";}i:2;i:63353;}i:1259;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:38:", but that the database is relational.";}i:2;i:63356;}i:1260;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:63394;}i:1261;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:6:"vshare";i:1;a:8:{s:4:"site";s:5:"vimeo";s:5:"video";s:8:"46886385";s:5:"flash";s:51:"http://www.vimeo.com/moogaloop.swf?clip_id=46886385";s:4:"vars";a:1:{s:7:"clip_id";s:8:"46886385";}s:5:"align";i:1;s:5:"width";i:255;s:6:"height";i:210;s:5:"title";s:0:"";}i:2;i:5;i:3;s:25:"{{ vimeo>46886385?small}}";}i:2;i:63396;}i:1262;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:63396;}i:1263;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:227:"NoSQL arrived on the scene recently in 1998, and has become more popular in recent years. Essentially NoSQL databases don't conform to the relational model, so they don't store data in a tabular format. They also don't use the ";}i:2;i:63423;}i:1264;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"SQL";}i:2;i:63650;}i:1265;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:16:" language as an ";}i:2;i:63653;}i:1266;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"API";}i:2;i:63669;}i:1267;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:139:". NoSQL databases are useful for data that don't conform or are easily represented in tabular format. Some NoSQL databases are faster than ";}i:2;i:63672;}i:1268;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"SQL";}i:2;i:63811;}i:1269;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:27:" databases, simply because ";}i:2;i:63814;}i:1270;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"SQL";}i:2;i:63841;}i:1271;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:75:" databases usually have more checks and balances to keep the data reliable.";}i:2;i:63844;}i:1272;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:63919;}i:1273;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:63919;}i:1274;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:58:"http://kkovacs.eu/cassandra-vs-mongodb-vs-couchdb-vs-redis";i:1;s:33:"NoSQL is not one type of database";}i:2;i:63921;}i:1275;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:164:", there are many different ways of storing data outside of relational databases, however the topic is beyond the scope of this course. You can find out more in the ";}i:2;i:64017;}i:1276;a:3:{i:0;s:13:"interwikilink";i:1;a:4:{i:0;s:8:"wp>NoSQL";i:1;s:36:"wikipedia article on NoSQL databases";i:2;s:2:"wp";i:3;s:5:"NoSQL";}i:2;i:64181;}i:1277;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:".";}i:2;i:64230;}i:1278;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:64231;}i:1279;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:64231;}i:1280;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:106:"There are two NoSQL databases that have become popular and can be used for general applications. They are ";}i:2;i:64233;}i:1281;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:23:"http://www.mongodb.org/";i:1;s:7:"MongoDB";}i:2;i:64339;}i:1282;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:5:" and ";}i:2;i:64374;}i:1283;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:16:"http://redis.io/";i:1;s:5:"Redis";}i:2;i:64379;}i:1284;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:263:". The blog example can be easily replicated in MongoDB. The key difference between MongoDB and MySQL that is quite important for you as a startup to realise is this: One of the reasons MongoDB is faster than MySQL because it has poorer ACID transactional support.";}i:2;i:64405;}i:1285;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:64668;}i:1286;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:64668;}i:1287;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:489:"What are ACID transactions? Well first transactions are a unit of work performed within a database management system, and treated in a coherent and reliable way independent of other transactions. Transactions are used when you need that unit of work to be reliable even if the system crashes or bugs out and the unit of work stops either completely or partially. This unit of work needs to be isolated from the rest of the system, so there is no side effects from any erroneous operation. ";}i:2;i:64670;}i:1288;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:33:"http://en.wikipedia.org/wiki/ACID";i:1;s:28:"Transactions need to be ACID";}i:2;i:65159;}i:1289;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:54:". This means atomic, consistent, isolated and durable.";}i:2;i:65225;}i:1290;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:65280;}i:1291;a:3:{i:0;s:10:"listu_open";i:1;a:0:{}i:2;i:65280;}i:1292;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:65280;}i:1293;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:65280;}i:1294;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:48:" Atomic means the transaction is all or nothing.";}i:2;i:65284;}i:1295;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:65332;}i:1296;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:65332;}i:1297;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:65332;}i:1298;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:65332;}i:1299;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:145:" Consistent means that completing any transaction must keep the database valid, that is the transaction needs to conform to any data entry rules.";}i:2;i:65336;}i:1300;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:65481;}i:1301;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:65481;}i:1302;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:65481;}i:1303;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:65481;}i:1304;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:251:" Isolated means that if transactions are performed concurrently, the state of the system should be as if the transactions were performed one after the other. This could mean that the database is locked for a transaction and is opened when it finishes.";}i:2;i:65485;}i:1305;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:65736;}i:1306;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:65736;}i:1307;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:65736;}i:1308;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:65736;}i:1309;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:145:" Durable means that once a transaction completes, the data needs to be stored permanently to disk even if the system crashes straight afterwards.";}i:2;i:65740;}i:1310;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:65885;}i:1311;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:65885;}i:1312;a:3:{i:0;s:11:"listu_close";i:1;a:0:{}i:2;i:65885;}i:1313;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:65885;}i:1314;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:592:"ACID transactions are paramount for databases doing financial work. Imagine you went to an online store and bought a game. You put in your credit card details and click purchase. The system at minimum is doing two things. It is logging your credit card to the financial company, and then putting a record into its sales/delivery system. So that your money gets processed and your good gets delivered. But what if halfway through this process, the system unexpectedly crashed? If the transaction was not ACID, then your money gets processed, but the purchase/delivery order wouldn't be placed!";}i:2;i:65887;}i:1315;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:66479;}i:1316;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:66479;}i:1317;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:21:"MySQL and most other ";}i:2;i:66481;}i:1318;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"SQL";}i:2;i:66502;}i:1319;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:62:" databases have good transactional support, and you can setup ";}i:2;i:66505;}i:1320;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:69:"http://ellislab.com/codeigniter/user-guide/database/transactions.html";i:1;s:47:"transactions using Codeigniter's active records";}i:2;i:66567;}i:1321;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:77:". This abstracts the process making it easier to work with. Do note that the ";}i:2;i:66688;}i:1322;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:95:"http://www.kavoir.com/2009/09/mysql-engines-innodb-vs-myisam-a-comparison-of-pros-and-cons.html";i:1;s:58:"MySQL table needs to be setup with the InnoDB table engine";}i:2;i:66765;}i:1323;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:22:" to have transactions.";}i:2;i:66923;}i:1324;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:66945;}i:1325;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:66945;}i:1326;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:423:"So when choosing between using MongoDB or MySQL. If you the data you're trying to store naturally comes to mind as a relational data, that is data in tabular format that have relationships to each column, then choose MySQL. If your data doesn't fit that and comes to mind as an object that could have a variable number of columns (thus variable number of properties), choose MongoDB. If you need transactions, always use a ";}i:2;i:66947;}i:1327;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"SQL";}i:2;i:67370;}i:1328;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:10:" database.";}i:2;i:67373;}i:1329;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:67384;}i:1330;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:67384;}i:1331;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:17:"Database Planning";i:1;i:3;i:2;i:67384;}i:2;i:67384;}i:1332;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:67384;}i:1333;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:67384;}i:1334;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:317:"The complexity of your database depends on two things. Firstly the quantity and coherence of your data set, and what kind of questions and answers you want to extract out of your database. For relational databases, there are two concepts that are important in planning out your databases. The first is designing your ";}i:2;i:67413;}i:1335;a:3:{i:0;s:13:"interwikilink";i:1;a:4:{i:0;s:18:"wp>Database schema";i:1;s:6:"schema";i:2;s:2:"wp";i:3;s:15:"Database schema";}i:2;i:67730;}i:1336;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:20:", and the second is ";}i:2;i:67759;}i:1337;a:3:{i:0;s:13:"interwikilink";i:1;a:4:{i:0;s:25:"wp>Database normalization";i:1;s:22:"database normalisation";i:2;s:2:"wp";i:3;s:22:"Database normalization";}i:2;i:67779;}i:1338;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:".";}i:2;i:67831;}i:1339;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:67832;}i:1340;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:67832;}i:1341;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:380:"For most web applications, unless you're operating on big data, your schema planning should be fairly straight forward. However sometimes your web application will grow a bit more complex, and perhaps you want to extract insight from the data you have. This knowledge area is out of the scope of this course, however you can refer to the these tutorials if you want to learn more:";}i:2;i:67834;}i:1342;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:68215;}i:1343;a:3:{i:0;s:10:"listu_open";i:1;a:0:{}i:2;i:68215;}i:1344;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:68215;}i:1345;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:68215;}i:1346;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:" ";}i:2;i:68219;}i:1347;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:90:"http://net.tutsplus.com/tutorials/databases/visual-database-creation-with-mysql-workbench/";i:1;s:52:"Visual Database Schema Creation with MySQL Workbench";}i:2;i:68220;}i:1348;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:68367;}i:1349;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:68367;}i:1350;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:68367;}i:1351;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:68367;}i:1352;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:" ";}i:2;i:68371;}i:1353;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:88:"http://www.dreamincode.net/forums/topic/179103-relational-database-design-normalization/";i:1;s:31:"Database Normalisation Tutorial";}i:2;i:68372;}i:1354;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:68496;}i:1355;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:68496;}i:1356;a:3:{i:0;s:11:"listu_close";i:1;a:0:{}i:2;i:68496;}i:1357;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:68496;}i:1358;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:15:"Note that your ";}i:2;i:68498;}i:1359;a:3:{i:0;s:11:"strong_open";i:1;a:0:{}i:2;i:68513;}i:1360;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:49:"column names should follow the camel case pattern";}i:2;i:68515;}i:1361;a:3:{i:0;s:12:"strong_close";i:1;a:0:{}i:2;i:68564;}i:1362;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:40:". This is because if you're building an ";}i:2;i:68566;}i:1363;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:4:"AJAX";}i:2;i:68606;}i:1364;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:220:" application, javascript developers often use camel cases for their variables and object keys. If you follow up with camel case in your database column names, it will make it easier to communicate between javascript and ";}i:2;i:68610;}i:1365;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"PHP";}i:2;i:68830;}i:1366;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:".";}i:2;i:68833;}i:1367;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:68834;}i:1368;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:68836;}i:1369;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:10:"Data Types";i:1;i:4;i:2;i:68836;}i:2;i:68836;}i:1370;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:4;}i:2;i:68836;}i:1371;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:68836;}i:1372;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:64:"For pretty much every table you create, you'll need at least an ";}i:2;i:68856;}i:1373;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:68920;}i:1374;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:2:"id";}i:2;i:68922;}i:1375;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:68924;}i:1376;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:87:" column, which would be the unique number pointing to any particular row of data. This ";}i:2;i:68926;}i:1377;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:69013;}i:1378;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:2:"id";}i:2;i:69015;}i:1379;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:69017;}i:1380;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:90:" column needs to have a datatype of integer or larger, and it should have the property of ";}i:2;i:69019;}i:1381;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:69109;}i:1382;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:14:"AUTO_INCREMENT";}i:2;i:69111;}i:1383;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:69125;}i:1384;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:70:", and you should also position it as the primary key. The property of ";}i:2;i:69127;}i:1385;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:69197;}i:1386;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:14:"AUTO_INCREMENT";}i:2;i:69199;}i:1387;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:69213;}i:1388;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:248:" makes the row automatically increment the number as you insert more data even if you don't insert anything into it (this is why we don't have to worry about it when inserting new rows in the model). Making it the primary key makes MySQL index the ";}i:2;i:69215;}i:1389;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:69463;}i:1390;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:2:"id";}i:2;i:69465;}i:1391;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:69467;}i:1392;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:89:" column and gives it precedence making any look up queries with a matching id super fast.";}i:2;i:69469;}i:1393;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:69558;}i:1394;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:69558;}i:1395;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:79:"You should also take care to choose the correct data type for each column. Use ";}i:2;i:69560;}i:1396;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:69639;}i:1397;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:7:"VARCHAR";}i:2;i:69641;}i:1398;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:69648;}i:1399;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:51:" for any text with a set number of characters. Use ";}i:2;i:69650;}i:1400;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:69701;}i:1401;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:4:"TEXT";}i:2;i:69703;}i:1402;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:69707;}i:1403;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:56:" when you don't know how the long the data will be. Use ";}i:2;i:69709;}i:1404;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:69765;}i:1405;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:8:"FULLTEXT";}i:2;i:69767;}i:1406;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:69775;}i:1407;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:50:" when you're indexing it using MyISAM tables. Use ";}i:2;i:69777;}i:1408;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:69827;}i:1409;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:7:"TINYINT";}i:2;i:69829;}i:1410;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:69836;}i:1411;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:74:" if it's a binary true/false boolean data field. You can find out more at ";}i:2;i:69838;}i:1412;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:54:"http://dev.mysql.com/doc/refman/5.0/en/data-types.html";i:1;s:35:"MySQL's documentation on data types";}i:2;i:69912;}i:1413;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:".";}i:2;i:70006;}i:1414;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:70008;}i:1415;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:70008;}i:1416;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:14:"Active Records";i:1;i:3;i:2;i:70008;}i:2;i:70008;}i:1417;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:70008;}i:1418;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:70008;}i:1419;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:169:"When interfacing with a database programmatically, it's best practice to use a library to abstract the process of connecting to the database and also provide a standard ";}i:2;i:70034;}i:1420;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"API";}i:2;i:70203;}i:1421;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:71:" to all the different database commands. This is because although many ";}i:2;i:70206;}i:1422;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"SQL";}i:2;i:70277;}i:1423;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:15:" databases use ";}i:2;i:70280;}i:1424;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"SQL";}i:2;i:70295;}i:1425;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:39:", they often have differences in their ";}i:2;i:70298;}i:1426;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"SQL";}i:2;i:70337;}i:1427;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:138:" commands. It's far more easier to have a library remember all these commands then you writing different commands for different databases.";}i:2;i:70340;}i:1428;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:70478;}i:1429;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:70478;}i:1430;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:111:"Another reason to use libraries is security. A library will often force you to conform to a certain of writing ";}i:2;i:70480;}i:1431;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"SQL";}i:2;i:70591;}i:1432;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:57:" commands, and libraries would automatically escape your ";}i:2;i:70594;}i:1433;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"SQL";}i:2;i:70651;}i:1434;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:34:" commands to prevent any injected ";}i:2;i:70654;}i:1435;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"SQL";}i:2;i:70688;}i:1436;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:26:" destroying your database.";}i:2;i:70691;}i:1437;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:70717;}i:1438;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:70717;}i:1439;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:4:"For ";}i:2;i:70719;}i:1440;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"PHP";}i:2;i:70723;}i:1441;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:54:" in general, one the best native extensions to use is ";}i:2;i:70726;}i:1442;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:37:"http://php.net/manual/en/book.pdo.php";i:1;s:3:"PDO";}i:2;i:70780;}i:1443;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:58:". However for Codeigniter, it has a native library called ";}i:2;i:70825;}i:1444;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:70:"http://ellislab.com/codeigniter/user-guide/database/active_record.html";i:1;s:14:"Active Records";}i:2;i:70883;}i:1445;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:86:", and it's simpler to use. Refer to Codeigniter's documentation on the Active Records ";}i:2;i:70972;}i:1446;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"API";}i:2;i:71058;}i:1447;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:88:" for more information. Do note that Active Records is a subset of Codeigniter's overall ";}i:2;i:71061;}i:1448;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:62:"http://ellislab.com/codeigniter/user-guide/database/index.html";i:1;s:14:"Database class";}i:2;i:71149;}i:1449;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:54:". The database class provides much more functionality.";}i:2;i:71230;}i:1450;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:71284;}i:1451;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:71286;}i:1452;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:34:"Codeigniter Database Configuration";i:1;i:4;i:2;i:71286;}i:2;i:71286;}i:1453;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:4;}i:2;i:71286;}i:1454;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:71286;}i:1455;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:42:"For Codeigniter you should be configuring ";}i:2;i:71330;}i:1456;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:70:"http://ellislab.com/codeigniter/user-guide/database/configuration.html";i:1;s:58:"your database's connections in the configuration directory";}i:2;i:71372;}i:1457;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:" ";}i:2;i:71505;}i:1458;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:71506;}i:1459;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:31:"application/config/database.php";}i:2;i:71508;}i:1460;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:71539;}i:1461;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:".";}i:2;i:71541;}i:1462;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:71542;}i:1463;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:71542;}i:1464;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:5:"Your ";}i:2;i:71544;}i:1465;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:67:"http://ellislab.com/codeigniter/user-guide/database/connecting.html";i:1;s:31:"database can then be autoloaded";}i:2;i:71549;}i:1466;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:23:" through Codeigniter's ";}i:2;i:71652;}i:1467;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:71675;}i:1468;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:31:"application/config/autoload.php";}i:2;i:71677;}i:1469;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:71708;}i:1470;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:55:" and always switched on no matter which the user is on.";}i:2;i:71710;}i:1471;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:71765;}i:1472;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:71765;}i:1473;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:20:"You should set your ";}i:2;i:71767;}i:1474;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:71787;}i:1475;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:8:"db_debug";}i:2;i:71789;}i:1476;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:71797;}i:1477;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:122:" option to false during production and if you're explicitly logging the database errors as shown in the MVC model section.";}i:2;i:71799;}i:1478;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:71921;}i:1479;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:71921;}i:1480;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:36:"Note to access database errors when ";}i:2;i:71923;}i:1481;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:71959;}i:1482;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:8:"db_debug";}i:2;i:71961;}i:1483;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:71969;}i:1484;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:58:" is off you need to use these two undocumented properties:";}i:2;i:71971;}i:1485;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:72029;}i:1486;a:3:{i:0;s:4:"code";i:1;a:3:{i:0;s:353:"
$num   = $this->db->_error_number()
$msg = $this->db->_error_message();
//this is also useful to examine the actual query passed into the database
$last_query = $this->db->last_query();

//you can then log it via log_message
log_message('error', 'Problem Inserting to user table: ' . $msg . ' (' . $num . '), using this query: "' . $last_query . '"');
";i:1;s:3:"php";i:2;N;}i:2;i:72036;}i:1487;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:72036;}i:1488;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:6:"Refer ";}i:2;i:72403;}i:1489;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:62:"http://ellislab.com/codeigniter/user-guide/general/errors.html";i:1;s:45:"Codeigniter's documentation on error handling";}i:2;i:72409;}i:1490;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:303:" for more information on logging. Note that because log files are written to disk, this won't work in hosts that don't offer writable directories. Cloud hosts normally don't offer writable directories. However it is possible to make your helper class to log it to a third party or send logs to an email.";}i:2;i:72521;}i:1491;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:72825;}i:1492;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:72825;}i:1493;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:6:"Search";i:1;i:3;i:2;i:72825;}i:2;i:72825;}i:1494;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:72825;}i:1495;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:72825;}i:1496;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:279:"One of the most common things we do on a database is search for data. Actually most of the times we're selecting data that match some condition. That is not considered to be a search problem, it's a matching problem. This section specifically refers to wildcard search using the ";}i:2;i:72843;}i:1497;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:73122;}i:1498;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:4:"LIKE";}i:2;i:73124;}i:1499;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:73128;}i:1500;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:43:" operator or full text search with indexes.";}i:2;i:73130;}i:1501;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:73173;}i:1502;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:73173;}i:1503;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:4:"The ";}i:2;i:73175;}i:1504;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:60:"http://dev.mysql.com/doc/refman/5.0/en/pattern-matching.html";i:1;s:21:"SQL ''LIKE'' operator";}i:2;i:73179;}i:1505;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:71:" works like pattern matching. Essentially when you call something like ";}i:2;i:73265;}i:1506;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:73336;}i:1507;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:39:"SELECT * FROM pet WHERE name LIKE 'b%';";}i:2;i:73338;}i:1508;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:73377;}i:1509;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:76:" and this would get all rows from the pet table, where the name starts with ";}i:2;i:73379;}i:1510;a:3:{i:0;s:18:"doublequoteopening";i:1;a:0:{}i:2;i:73455;}i:1511;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:"b";}i:2;i:73456;}i:1512;a:3:{i:0;s:18:"doublequoteclosing";i:1;a:0:{}i:2;i:73457;}i:1513;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:36:" and any number of characters after ";}i:2;i:73458;}i:1514;a:3:{i:0;s:18:"doublequoteopening";i:1;a:0:{}i:2;i:73494;}i:1515;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:"b";}i:2;i:73495;}i:1516;a:3:{i:0;s:18:"doublequoteclosing";i:1;a:0:{}i:2;i:73496;}i:1517;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:6:". The ";}i:2;i:73497;}i:1518;a:3:{i:0;s:18:"doublequoteclosing";i:1;a:0:{}i:2;i:73503;}i:1519;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:"%";}i:2;i:73504;}i:1520;a:3:{i:0;s:18:"doublequoteclosing";i:1;a:0:{}i:2;i:73505;}i:1521;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:76:" sign is a wildcard. If you're looking for a row column to mention the word ";}i:2;i:73506;}i:1522;a:3:{i:0;s:18:"doublequoteopening";i:1;a:0:{}i:2;i:73582;}i:1523;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:3:"cat";}i:2;i:73583;}i:1524;a:3:{i:0;s:18:"doublequoteclosing";i:1;a:0:{}i:2;i:73586;}i:1525;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:37:" anywhere, then you would change the ";}i:2;i:73587;}i:1526;a:3:{i:0;s:18:"doublequoteopening";i:1;a:0:{}i:2;i:73624;}i:1527;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:2:"b%";}i:2;i:73625;}i:1528;a:3:{i:0;s:18:"doublequoteclosing";i:1;a:0:{}i:2;i:73627;}i:1529;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:4:" to ";}i:2;i:73628;}i:1530;a:3:{i:0;s:18:"doublequoteclosing";i:1;a:0:{}i:2;i:73632;}i:1531;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:5:"%cat%";}i:2;i:73633;}i:1532;a:3:{i:0;s:18:"doublequoteclosing";i:1;a:0:{}i:2;i:73638;}i:1533;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:58:". And of course if you're looking for something to end in ";}i:2;i:73639;}i:1534;a:3:{i:0;s:18:"doublequoteopening";i:1;a:0:{}i:2;i:73697;}i:1535;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:3:"cat";}i:2;i:73698;}i:1536;a:3:{i:0;s:18:"doublequoteclosing";i:1;a:0:{}i:2;i:73701;}i:1537;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:16:", then it would ";}i:2;i:73702;}i:1538;a:3:{i:0;s:18:"doublequoteclosing";i:1;a:0:{}i:2;i:73718;}i:1539;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:4:"%cat";}i:2;i:73719;}i:1540;a:3:{i:0;s:18:"doublequoteclosing";i:1;a:0:{}i:2;i:73723;}i:1541;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:146:". The Codeigniter's Active Records library provides an abstraction for these commands giving you a very simple search functionality. Commonly the ";}i:2;i:73724;}i:1542;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:73870;}i:1543;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:4:"LIKE";}i:2;i:73872;}i:1544;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:73876;}i:1545;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:225:" operator is used to search for tags. Imagine you had a blog post, and each blog post is given a set of tags. Kind of like the tags that Youtube uses for their videos. In order to search for these tags, you would not use the ";}i:2;i:73878;}i:1546;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:74103;}i:1547;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:5:"WHERE";}i:2;i:74105;}i:1548;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:74110;}i:1549;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:25:" operator, you would use ";}i:2;i:74112;}i:1550;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:74137;}i:1551;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:4:"LIKE";}i:2;i:74139;}i:1552;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:74143;}i:1553;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:6:" with ";}i:2;i:74145;}i:1554;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:74151;}i:1555;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:9:"%tagname%";}i:2;i:74153;}i:1556;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:74162;}i:1557;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:63:". If you had multiple tags to search for, you could either use ";}i:2;i:74164;}i:1558;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:74227;}i:1559;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:8:"AND LIKE";}i:2;i:74229;}i:1560;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:74237;}i:1561;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:4:" or ";}i:2;i:74239;}i:1562;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:74243;}i:1563;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:7:"OR LIKE";}i:2;i:74245;}i:1564;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:74252;}i:1565;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:102:". The former makes sure that all tags are present, the latter makes sure at least one tag is present. ";}i:2;i:74254;}i:1566;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:74356;}i:1567;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:74356;}i:1568;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:6:"Using ";}i:2;i:74358;}i:1569;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:74364;}i:1570;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:4:"LIKE";}i:2;i:74366;}i:1571;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:74370;}i:1572;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:118:" is highly precise, often you need more fine grained control over you search capability. What if you're searching for ";}i:2;i:74372;}i:1573;a:3:{i:0;s:18:"doublequoteopening";i:1;a:0:{}i:2;i:74490;}i:1574;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:3:"cat";}i:2;i:74491;}i:1575;a:3:{i:0;s:18:"doublequoteclosing";i:1;a:0:{}i:2;i:74494;}i:1576;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:16:", but a tag has ";}i:2;i:74495;}i:1577;a:3:{i:0;s:18:"doublequoteopening";i:1;a:0:{}i:2;i:74511;}i:1578;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:4:"cats";}i:2;i:74512;}i:1579;a:3:{i:0;s:18:"doublequoteclosing";i:1;a:0:{}i:2;i:74516;}i:1580;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:11:". Then the ";}i:2;i:74517;}i:1581;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:74528;}i:1582;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:4:"LIKE";}i:2;i:74530;}i:1583;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:74534;}i:1584;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:33:" operator would not the tag with ";}i:2;i:74536;}i:1585;a:3:{i:0;s:18:"doublequoteopening";i:1;a:0:{}i:2;i:74569;}i:1586;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:4:"cats";}i:2;i:74570;}i:1587;a:3:{i:0;s:18:"doublequoteclosing";i:1;a:0:{}i:2;i:74574;}i:1588;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:50:" unless you explicitly specified them. What about ";}i:2;i:74575;}i:1589;a:3:{i:0;s:18:"doublequoteopening";i:1;a:0:{}i:2;i:74625;}i:1590;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:7:"kittens";}i:2;i:74626;}i:1591;a:3:{i:0;s:18:"doublequoteclosing";i:1;a:0:{}i:2;i:74633;}i:1592;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:168:"? What happens when the data your searching through is larger, like perhaps you're searching through the blog's article content. This is when you need full text search.";}i:2;i:74634;}i:1593;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:74802;}i:1594;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:74802;}i:1595;a:3:{i:0;s:13:"interwikilink";i:1;a:4:{i:0;s:19:"wp>Full text search";i:1;s:16:"Full text search";i:2;s:2:"wp";i:3;s:16:"Full text search";}i:2;i:74804;}i:1596;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:147:" works by first establishing an index of the data. This index often groups related terms together, this is called stemming. For example, the words ";}i:2;i:74844;}i:1597;a:3:{i:0;s:18:"doublequoteopening";i:1;a:0:{}i:2;i:74991;}i:1598;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:6:"drives";}i:2;i:74992;}i:1599;a:3:{i:0;s:18:"doublequoteclosing";i:1;a:0:{}i:2;i:74998;}i:1600;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:2:", ";}i:2;i:74999;}i:1601;a:3:{i:0;s:18:"doublequoteopening";i:1;a:0:{}i:2;i:75001;}i:1602;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:5:"drove";}i:2;i:75002;}i:1603;a:3:{i:0;s:18:"doublequoteclosing";i:1;a:0:{}i:2;i:75007;}i:1604;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:6:", and ";}i:2;i:75008;}i:1605;a:3:{i:0;s:18:"doublequoteopening";i:1;a:0:{}i:2;i:75014;}i:1606;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:6:"driven";}i:2;i:75015;}i:1607;a:3:{i:0;s:18:"doublequoteclosing";i:1;a:0:{}i:2;i:75021;}i:1608;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:61:" will be recorded in the index under the single concept word ";}i:2;i:75022;}i:1609;a:3:{i:0;s:18:"doublequoteopening";i:1;a:0:{}i:2;i:75083;}i:1610;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:6:"drive.";}i:2;i:75084;}i:1611;a:3:{i:0;s:18:"doublequoteclosing";i:1;a:0:{}i:2;i:75090;}i:1612;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:40:" It will also ignore stop words such as ";}i:2;i:75091;}i:1613;a:3:{i:0;s:13:"emphasis_open";i:1;a:0:{}i:2;i:75131;}i:1614;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:3:"the";}i:2;i:75133;}i:1615;a:3:{i:0;s:14:"emphasis_close";i:1;a:0:{}i:2;i:75136;}i:1616;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:2:", ";}i:2;i:75138;}i:1617;a:3:{i:0;s:13:"emphasis_open";i:1;a:0:{}i:2;i:75140;}i:1618;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:2:"is";}i:2;i:75142;}i:1619;a:3:{i:0;s:14:"emphasis_close";i:1;a:0:{}i:2;i:75144;}i:1620;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:2:", ";}i:2;i:75146;}i:1621;a:3:{i:0;s:13:"emphasis_open";i:1;a:0:{}i:2;i:75148;}i:1622;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:2:"at";}i:2;i:75150;}i:1623;a:3:{i:0;s:14:"emphasis_close";i:1;a:0:{}i:2;i:75152;}i:1624;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:2:", ";}i:2;i:75154;}i:1625;a:3:{i:0;s:13:"emphasis_open";i:1;a:0:{}i:2;i:75156;}i:1626;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:5:"which";}i:2;i:75158;}i:1627;a:3:{i:0;s:14:"emphasis_close";i:1;a:0:{}i:2;i:75163;}i:1628;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:6:", and ";}i:2;i:75165;}i:1629;a:3:{i:0;s:13:"emphasis_open";i:1;a:0:{}i:2;i:75171;}i:1630;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:2:"on";}i:2;i:75173;}i:1631;a:3:{i:0;s:14:"emphasis_close";i:1;a:0:{}i:2;i:75175;}i:1632;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:232:". Then the search algorithm goes through the index instead of going through the raw data. This makes for a faster search on a large amount of content. The balancing act in using full text search is between precision and recall. The ";}i:2;i:75177;}i:1633;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:75409;}i:1634;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:4:"LIKE";}i:2;i:75411;}i:1635;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:75415;}i:1636;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:589:" operator has 100% precision, however it will have low recall. This makes it powerful if you're searching for an exact term. But often we don't know what kind of result we're looking for, so the full text search has higher recall. This however creates the problem of false positives. Results which are irrelevant to our query. There are a number of statistical and algorithmic techniques to improve a search engine, and they are all catered to different situations. You can read more about them on the Wikipedia article on full text search. For our purposes, we can keep it simple and use ";}i:2;i:75417;}i:1637;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:76006;}i:1638;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:4:"LIKE";}i:2;i:76008;}i:1639;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:76012;}i:1640;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:80:" when we're looking for tag like data, and full text search for everything else.";}i:2;i:76014;}i:1641;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:76094;}i:1642;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:76094;}i:1643;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:476:"To implement full text search on MySQL, you need to use the MyISAM table engine, not InnoDB. Remember that InnoDB provides transactions and is more efficient for write intensive tables, whereas MyISAM is optimised for read intensive and thus search based tables. You can use both tables together in a single database. Setting up needs to be done when you create the table first, not after you create the table. To setup with the MyISAM engine, you can either use PHPMyAdmin's ";}i:2;i:76096;}i:1644;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"GUI";}i:2;i:76572;}i:1645;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:2:", ";}i:2;i:76575;}i:1646;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:77:"http://www.ignoredbydinosaurs.com/2012/05/database-migrations-codeigniter-101";i:1;s:21:"Codeigniter's DBForge";}i:2;i:76577;}i:1647;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:13:" or straight ";}i:2;i:76680;}i:1648;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"SQL";}i:2;i:76693;}i:1649;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:14:" such as this:";}i:2;i:76696;}i:1650;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:76710;}i:1651;a:3:{i:0;s:4:"code";i:1;a:3:{i:0;s:237:"
CREATE TABLE pages (
  id int(10) UNSIGNED NOT NULL AUTO_INCREMENT,
  url text NOT NULL,
  title text NOT NULL,
  content text NOT NULL,
  updated datetime NOT NULL,
  PRIMARY KEY  (id),
  FULLTEXT KEY content (content)
) ENGINE=MyISAM
";i:1;s:3:"sql";i:2;N;}i:2;i:76717;}i:1652;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:76717;}i:1653;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:77:"If you already created the table, you can alter the table's engine using the ";}i:2;i:76968;}i:1654;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:55:"http://dev.mysql.com/doc/refman/5.0/en/alter-table.html";i:1;s:11:"ALTER TABLE";}i:2;i:77045;}i:1655;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:50:" syntax. Although it's easier to use PHPMyAdmin's ";}i:2;i:77116;}i:1656;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"GUI";}i:2;i:77166;}i:1657;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:317:". We're going to start using the database migration tool via Codeigniter's DBForge, so we can keep our database's schema synchronised between development servers. Do note that DBForge currently doesn't support changing the engine of the table, so you'll need to add an additional command using standard query methods.";}i:2;i:77169;}i:1658;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:77486;}i:1659;a:3:{i:0;s:4:"code";i:1;a:3:{i:0;s:137:"
//refer to migrations section to learn more about why we're doing this
$this->db->query('ALTER TABLE  `table_name` ENGINE = MYISAM');  
";i:1;s:3:"php";i:2;N;}i:2;i:77493;}i:1660;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:77493;}i:1661;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:113:"Active Records by itself does not have abstracted methods for full text search. However it is possible using the ";}i:2;i:77644;}i:1662;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:77757;}i:1663;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:5:"$this";}i:2;i:77759;}i:1664;a:3:{i:0;s:6:"entity";i:1;a:1:{i:0;s:2:"->";}i:2;i:77764;}i:1665;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:2:"db";}i:2;i:77766;}i:1666;a:3:{i:0;s:6:"entity";i:1;a:1:{i:0;s:2:"->";}i:2;i:77768;}i:1667;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:7:"where()";}i:2;i:77770;}i:1668;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:77777;}i:1669;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:129:" method. It has some quirks though. The method by default places backticks on your table and field names. This will corrupt your ";}i:2;i:77779;}i:1670;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"SQL";}i:2;i:77908;}i:1671;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:66:" query. You need to run a command with the 2nd parameter equal to ";}i:2;i:77911;}i:1672;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:77977;}i:1673;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:4:"NULL";}i:2;i:77979;}i:1674;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:77983;}i:1675;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:34:" and the third parameter equal to ";}i:2;i:77985;}i:1676;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:78019;}i:1677;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:5:"FALSE";}i:2;i:78021;}i:1678;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:78026;}i:1679;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:".";}i:2;i:78028;}i:1680;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:78029;}i:1681;a:3:{i:0;s:4:"code";i:1;a:3:{i:0;s:67:"
$this->db->where('MATCH (field) AGAINST ("value")', NULL, FALSE);
";i:1;s:3:"php";i:2;N;}i:2;i:78036;}i:1682;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:78036;}i:1683;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:87:"To learn about the syntax of full text searches check out these two external resources:";}i:2;i:78117;}i:1684;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:78205;}i:1685;a:3:{i:0;s:10:"listu_open";i:1;a:0:{}i:2;i:78205;}i:1686;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:78205;}i:1687;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:78205;}i:1688;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:" ";}i:2;i:78209;}i:1689;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:56:"http://www.mysqltutorial.org/mysql-full-text-search.aspx";i:1;N;}i:2;i:78210;}i:1690;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:78266;}i:1691;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:78266;}i:1692;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:78266;}i:1693;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:78266;}i:1694;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:" ";}i:2;i:78270;}i:1695;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:59:"http://devzone.zend.com/26/using-mysql-full-text-searching/";i:1;N;}i:2;i:78271;}i:1696;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:78330;}i:1697;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:78330;}i:1698;a:3:{i:0;s:11:"listu_close";i:1;a:0:{}i:2;i:78330;}i:1699;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:78330;}i:1700;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:30:"You can also elect to use the ";}i:2;i:78332;}i:1701;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:78362;}i:1702;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:5:"$this";}i:2;i:78364;}i:1703;a:3:{i:0;s:6:"entity";i:1;a:1:{i:0;s:2:"->";}i:2;i:78369;}i:1704;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:2:"db";}i:2;i:78371;}i:1705;a:3:{i:0;s:6:"entity";i:1;a:1:{i:0;s:2:"->";}i:2;i:78373;}i:1706;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:7:"query()";}i:2;i:78375;}i:1707;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:78382;}i:1708;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:108:" method as an alternative to Active Records. However this does not automatically escape the values for your ";}i:2;i:78384;}i:1709;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"SQL";}i:2;i:78492;}i:1710;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:136:" query opening you up to security issues. You will need to manually escape the values or use query binding. All of this is discussed in ";}i:2;i:78495;}i:1711;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:64:"http://ellislab.com/codeigniter/user-guide/database/queries.html";i:1;s:47:"Codeigniter's documentation on database queries";}i:2;i:78631;}i:1712;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:".";}i:2;i:78747;}i:1713;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:78748;}i:1714;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:78748;}i:1715;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:184:"If you have a large amount of content, and search is starting to get slower. You can either re-architect your database using one of the other database stores, or you can integrate the ";}i:2;i:78750;}i:1716;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:24:"http://sphinxsearch.com/";i:1;s:20:"Sphinx search engine";}i:2;i:78934;}i:1717;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:".";}i:2;i:78983;}i:1718;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:78984;}i:1719;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:6:"vshare";i:1;a:8:{s:4:"site";s:7:"youtube";s:5:"video";s:11:"d--v0NhjIfc";s:5:"flash";s:87:"http://www.youtube.com/v/d--v0NhjIfc?allowFullScreen=true&allowScriptAccess=always&fs=1";s:4:"vars";a:3:{s:15:"allowFullScreen";s:4:"true";s:17:"allowScriptAccess";s:6:"always";s:2:"fs";s:1:"1";}s:5:"align";i:3;s:5:"width";i:520;s:6:"height";i:406;s:5:"title";s:0:"";}i:2;i:5;i:3;s:31:"{{ youtube>d--v0NhjIfc?large }}";}i:2;i:78986;}i:1720;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:79018;}i:1721;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:5:"Redis";i:1;i:3;i:2;i:79018;}i:2;i:79018;}i:1722;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:79018;}i:1723;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:79018;}i:1724;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:274:"Redis is a special database that is catered towards volatile data. This is data in which persistence is not a major issue. It's data you're willing to throw away after finishing the session. It operates like an in-memory key to value data store. This means it is super fast.";}i:2;i:79035;}i:1725;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:79309;}i:1726;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:79309;}i:1727;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:202:"Redis in terms of web application development is usually used where memcached was used before. Essentially you can use it for session data, real time messages, publish and subscribing, caching and chat.";}i:2;i:79311;}i:1728;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:79513;}i:1729;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:79513;}i:1730;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:262:"We can switch to using Redis for session data if you require that kind of performance. For now we'll stick with working with MySQL, because it's simple and its enough for startup traffic. However if you're interested in hooking up Redis check out these articles:";}i:2;i:79515;}i:1731;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:79778;}i:1732;a:3:{i:0;s:10:"listu_open";i:1;a:0:{}i:2;i:79778;}i:1733;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:79778;}i:1734;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:79778;}i:1735;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:" ";}i:2;i:79782;}i:1736;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:20:"http://try.redis.io/";i:1;s:25:"Interative Redis Tutorial";}i:2;i:79783;}i:1737;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:79833;}i:1738;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:79833;}i:1739;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:79833;}i:1740;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:79833;}i:1741;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:" ";}i:2;i:79837;}i:1742;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:66:"http://phpmaster.com/an-introduction-to-redis-in-php-using-predis/";i:1;s:36:"Introduction to using Redis with PHP";}i:2;i:79838;}i:1743;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:79945;}i:1744;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:79945;}i:1745;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:79945;}i:1746;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:79945;}i:1747;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:" ";}i:2;i:79949;}i:1748;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:73:"http://www.justincarmony.com/blog/2012/01/10/php-workers-with-redis-solo/";i:1;s:44:"Using Predis as a message queue to pass jobs";}i:2;i:79950;}i:1749;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:80072;}i:1750;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:80072;}i:1751;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:80072;}i:1752;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:80072;}i:1753;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:" ";}i:2;i:80076;}i:1754;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:53:"http://blog.jmoz.co.uk/websockets-ratchet-react-redis";i:1;s:22:"Redis with Web Sockets";}i:2;i:80077;}i:1755;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:80157;}i:1756;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:80157;}i:1757;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:80157;}i:1758;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:80157;}i:1759;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:32:" Libraries for utilising Redis: ";}i:2;i:80161;}i:1760;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:44:"https://github.com/joelcox/codeigniter-redis";i:1;s:17:"Codeigniter Redis";}i:2;i:80193;}i:1761;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:2:", ";}i:2;i:80259;}i:1762;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:29:"https://github.com/nrk/predis";i:1;s:6:"Predis";}i:2;i:80261;}i:1763;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:5:" and ";}i:2;i:80301;}i:1764;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:35:"https://github.com/nrk/predis-async";i:1;s:30:"Predis-Async (requires daemon)";}i:2;i:80306;}i:1765;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:80376;}i:1766;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:80376;}i:1767;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:80376;}i:1768;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:80376;}i:1769;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:" ";}i:2;i:80380;}i:1770;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:24:"http://garantiadata.com/";i:1;s:18:"Redis Cloud Server";}i:2;i:80381;}i:1771;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:24:" - for using with Cloud9";}i:2;i:80428;}i:1772;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:80452;}i:1773;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:80452;}i:1774;a:3:{i:0;s:11:"listu_close";i:1;a:0:{}i:2;i:80452;}i:1775;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:80453;}i:1776;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:10:"Migrations";i:1;i:3;i:2;i:80453;}i:2;i:80453;}i:1777;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:80453;}i:1778;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:80453;}i:1779;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:357:"Database migrations is the process of synchronising your database schema between multiple different development servers and production servers. They are useful when you need to change your development environment to a different computer or when you're working with teams. Do note that migrations are not for synchronising data, it's only for schema changes.";}i:2;i:80475;}i:1780;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:80832;}i:1781;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:80832;}i:1782;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:181:"Synchronising code between teams and servers is easy now with the use of Git. However databases require more work to do this. The old way of doing database migrations was to export ";}i:2;i:80834;}i:1783;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"SQL";}i:2;i:81015;}i:1784;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:84:" and its data from your current database, and import into a program that could read ";}i:2;i:81018;}i:1785;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"SQL";}i:2;i:81102;}i:1786;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:233:" and that was connected to the server you wanted to import into. This was a cumbersome method and was inefficient. Instead database migrations are done programmatically through database scaffolding methods. Rather than migrating the ";}i:2;i:81105;}i:1787;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"SQL";}i:2;i:81338;}i:1788;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:658:". We create the database using an abstraction language, this will contain both the creation and destruction of the schema. We then run this code once and it will create our database for us. When we need to synchronise database schema, we simply synchronise the code and abstraction library, and run the code again on the other server. This way migrations becomes a simple matter of exchanging code via a version control system, and running it once to keep up with your team. If we decided that our latest schema change was incorrect, we can rollback easily because the code to destroy the data was already written and we can just run the destruction portion.";}i:2;i:81341;}i:1789;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:81999;}i:1790;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:81999;}i:1791;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:36:"Codeigniter offers its own brand of ";}i:2;i:82001;}i:1792;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:67:"http://ellislab.com/codeigniter/user-guide/libraries/migration.html";i:1;s:10:"migrations";}i:2;i:82037;}i:1793;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:55:". To activate migrations, you need to enable it in the ";}i:2;i:82119;}i:1794;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:82174;}i:1795;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:21:"config/migrations.php";}i:2;i:82176;}i:1796;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:82197;}i:1797;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:36:". Polycademy recommends you set the ";}i:2;i:82199;}i:1798;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:82235;}i:1799;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:14:"migration_type";}i:2;i:82237;}i:1800;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:82251;}i:1801;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:72:" to be sequential, as this simplifies the naming of our migrations. The ";}i:2;i:82253;}i:1802;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:82325;}i:1803;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:21:"migration_auto_latest";}i:2;i:82327;}i:1804;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:82348;}i:1805;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:60:" can be set to false, and you don't need to worry about the ";}i:2;i:82350;}i:1806;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:82410;}i:1807;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:17:"migration_version";}i:2;i:82412;}i:1808;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:82429;}i:1809;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:".";}i:2;i:82431;}i:1810;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:82432;}i:1811;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:82432;}i:1812;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:26:"Next you need to create a ";}i:2;i:82434;}i:1813;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:82460;}i:1814;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:11:"migrate.php";}i:2;i:82462;}i:1815;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:82473;}i:1816;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:121:" controller. You'll have a variation of this code depending on what kind of flexibility you need your migrations to have.";}i:2;i:82475;}i:1817;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:82596;}i:1818;a:3:{i:0;s:4:"file";i:1;a:3:{i:0;s:541:"
<?php defined('BASEPATH') OR exit('No direct script access allowed');

class Migrate extends CI_Controller {

    public function __construct(){

        parent::__construct();
        $this->load->library('migration');

    }

    public function index(){
    
        //this code means we're always going to get the latest migrations, that's why we didn't need to worry about migration_version in the migration config.
        if(!$this->migration->latest()){
            show_error($this->migration->error_string());
        }

    }

}
";i:1;s:3:"php";i:2;s:11:"migrate.php";}i:2;i:82603;}i:1819;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:82603;}i:1820;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:211:"When you run migrations, you would simply visit that page once. It'll work, and it won't double up even if you visit twice! By the way, for security reasons, you may wish to limit this to be accessible only via ";}i:2;i:83170;}i:1821;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:42:"http://stackoverflow.com/a/11744750/582917";i:1;s:16:"the command line";}i:2;i:83381;}i:1822;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:144:". Or only when you're authenticated. Or just disable it during production, but only after you have migrated the schema to the production server.";}i:2;i:83444;}i:1823;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:83588;}i:1824;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:83588;}i:1825;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:130:"Now you have the controller and config set up, you need to create your first schema migration. These files would be stored in the ";}i:2;i:83590;}i:1826;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:83720;}i:1827;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:22:"application/migrations";}i:2;i:83722;}i:1828;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:83744;}i:1829;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:44:" folder. Each of these classes would extend ";}i:2;i:83746;}i:1830;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:83790;}i:1831;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:12:"CI_Migration";}i:2;i:83792;}i:1832;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:83804;}i:1833;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:49:" and they would have at minimum two methods. The ";}i:2;i:83806;}i:1834;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:83855;}i:1835;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:2:"up";}i:2;i:83857;}i:1836;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:83859;}i:1837;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:50:" method is called when running the migration. The ";}i:2;i:83861;}i:1838;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:83911;}i:1839;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:4:"down";}i:2;i:83913;}i:1840;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:83917;}i:1841;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:124:" method is called when rolling back. You can roll back by specifying more methods in the migrate controller, or setting the ";}i:2;i:83919;}i:1842;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:84043;}i:1843;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:17:"migration_version";}i:2;i:84045;}i:1844;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:84062;}i:1845;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:176:". We're going to assume that you just want to keep moving forward and not rollback. The names of each migration is prefixed with three numbers. The first schema will always be ";}i:2;i:84064;}i:1846;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:84240;}i:1847;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:3:"001";}i:2;i:84242;}i:1848;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:84245;}i:1849;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:87:". The name of the class will be the same as the filename but without the three numbers.";}i:2;i:84247;}i:1850;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:84334;}i:1851;a:3:{i:0;s:4:"file";i:1;a:3:{i:0;s:1382:"
<?php defined('BASEPATH') OR exit('No direct script access allowed');

//notice that the name of the class will be Migration_add_missions whereas the file name is 001_add_missions
class Migration_add_missions extends CI_Migration {

    public function up(){

        //dbforge is already loaded when extending from CI_Migration
        
        //dbforge will notice you're adding a field called id, it will automatically be assigned as an INT(9) auto_incrementing Primary Key.
        $this->dbforge->add_field('id');

        $this->dbforge->add_field(
            array(
                'title' => array(
                    'type' => 'VARCHAR',
                    'constraint' => '100',
                ),
                'description' => array(
                    'type' => 'TEXT',
                ),
                'parameters' => array(
                    'type' => 'TEXT',
                ),
            )
        );

        $this->dbforge->create_table('missions');
        
        //you can also use active records and standard queries to insert raw data (though it's inadvisable except for dummy data like the first login account). You may have to autoload the database library to have it ready

    }

    public function down(){

        //when rolling back all we need to is remove the missions table
        $this->dbforge->drop_table('missions');

    }

}

";i:1;s:3:"php";i:2;s:20:"001_add_missions.php";}i:2;i:84341;}i:1852;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:84341;}i:1853;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:91:"Each successive migration will be one number higher than the previous. So the next will be ";}i:2;i:85758;}i:1854;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:85849;}i:1855;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:22:"002_some_thing_new.php";}i:2;i:85851;}i:1856;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:85873;}i:1857;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:24:" with the class name of ";}i:2;i:85875;}i:1858;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:85899;}i:1859;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:24:"Migration_some_thing_new";}i:2;i:85901;}i:1860;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:85925;}i:1861;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:308:". If you have to make changes to your schema, you never edit your previous migration. You always create a new migration to be applied! This is because of the linear history philosophy of migrations makes it easy to rollback. If you're going to go back in time, then you're going to create temporal disasters!";}i:2;i:85927;}i:1862;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:86235;}i:1863;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:86235;}i:1864;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:26:"Make sure to refer to the ";}i:2;i:86237;}i:1865;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:62:"http://ellislab.com/codeigniter/user-guide/database/forge.html";i:1;s:21:"DBForge documentation";}i:2;i:86263;}i:1866;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:22:" for more information.";}i:2;i:86351;}i:1867;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:86374;}i:1868;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:86374;}i:1869;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:8:"Security";i:1;i:2;i:2;i:86374;}i:2;i:86374;}i:1870;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:2;}i:2;i:86374;}i:1871;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:86374;}i:1872;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:400:"Security of web applications is important whenever you're handling user input, user account information or financial transactions. For the purposes of Polycademy, we'll be focusing on input validation, handling passwords, ssl encryption and payments. This section of security sets up the foundation for understanding sessions and authentication. Security is vast area of investigation, check out the ";}i:2;i:86396;}i:1873;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:41:"https://www.owasp.org/index.php/Main_Page";i:1;s:10:"OWASP site";}i:2;i:86796;}i:1874;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:22:" for more information.";}i:2;i:86852;}i:1875;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:86875;}i:1876;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:86875;}i:1877;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:16:"Input Validation";i:1;i:3;i:2;i:86875;}i:2;i:86875;}i:1878;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:86875;}i:1879;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:86875;}i:1880;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:474:"The most important concept to understand in security is to never trust the user. If your application only pushes out content but doesn't accept any input, then you don't need to really about this. However most likely you'll need to accept some user input, if only to change and edit settings for your web application. The most common implementation of accepting user input is the login and account administration, but any feature that is dependent on user input would apply.";}i:2;i:86903;}i:1881;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:87377;}i:1882;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:87377;}i:1883;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:669:"When you accept user input, you could either process the instructions and return the output without any state being kept, or query the state and return the output, or modify the state. The state here would refer to the database state which could be considered the overall application state. When you're just processing instructions, the most important thing is to not allow the user to execute any code that may interfere or cause side effects in your processing. When you're querying or modifying the database state, the most important thing is to prevent your user from querying state they don't have permissions for or modifying state that they shouldn't be able to.";}i:2;i:87379;}i:1884;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:88048;}i:1885;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:88048;}i:1886;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:325:"All three of these situations is about first validating that the user has permissions to access the feature you're providing (such as authentication), secondly validating their operations are legal within your rules (such as XSS filtering), and then isolating their operations so they have no undesired side effects (such as ";}i:2;i:88050;}i:1887;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"SQL";}i:2;i:88375;}i:1888;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:12:" injection).";}i:2;i:88378;}i:1889;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:88390;}i:1890;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:88390;}i:1891;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:201:"The first validation is a matter of authentication, that is checking if the client is someone that can access your server and applying any permission rules onto their session. This is discussed in the ";}i:2;i:88392;}i:1892;a:3:{i:0;s:9:"locallink";i:1;a:2:{i:0;s:23:"sessions_authentication";i:1;s:25:"Sessions & Authentication";}i:2;i:88593;}i:1893;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:9:" section.";}i:2;i:88647;}i:1894;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:88656;}i:1895;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:88658;}i:1896;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:11:"Constraints";i:1;i:4;i:2;i:88658;}i:2;i:88658;}i:1897;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:4;}i:2;i:88658;}i:1898;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:88658;}i:1899;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:120:"In the above mentioned second validation, it is a matter of applying constraints onto inputted data. You should use the ";}i:2;i:88679;}i:1900;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:44:"https://github.com/Polycademy/PHP-Validation";i:1;s:22:"PHP-Validation library";}i:2;i:88799;}i:1901;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:122:" to validate data coming into your models. Data validation should happen in the model, as that's the final point of entry.";}i:2;i:88870;}i:1902;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:88992;}i:1903;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:88992;}i:1904;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:65:"Here's a list of example constraints you may apply on data input:";}i:2;i:88994;}i:1905;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:89060;}i:1906;a:3:{i:0;s:10:"listu_open";i:1;a:0:{}i:2;i:89060;}i:1907;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:89060;}i:1908;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:89060;}i:1909;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:48:" Required - whether the data was sent in or not.";}i:2;i:89064;}i:1910;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:89112;}i:1911;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:89112;}i:1912;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:89112;}i:1913;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:89112;}i:1914;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:58:" Size limit - in terms of word limit or binary size limit.";}i:2;i:89116;}i:1915;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:89174;}i:1916;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:89174;}i:1917;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:89174;}i:1918;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:89174;}i:1919;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:75:" Data type - was the date really a date? Was the integer really an integer?";}i:2;i:89178;}i:1920;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:89253;}i:1921;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:89253;}i:1922;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:89253;}i:1923;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:89253;}i:1924;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:64:" Match - Did the password entry and password confirmation match?";}i:2;i:89257;}i:1925;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:89321;}i:1926;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:89321;}i:1927;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:89321;}i:1928;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:89321;}i:1929;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:61:" Integrity - Was the email passed in a valid email structure?";}i:2;i:89325;}i:1930;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:89386;}i:1931;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:89386;}i:1932;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:89386;}i:1933;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:89386;}i:1934;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:106:" Allowed - Did the input pass in restricted characters? Such as numbers when you only wanted the alphabet.";}i:2;i:89390;}i:1935;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:89496;}i:1936;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:89496;}i:1937;a:3:{i:0;s:11:"listu_close";i:1;a:0:{}i:2;i:89496;}i:1938;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:89498;}i:1939;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:10:"XSS & CSRF";i:1;i:4;i:2;i:89498;}i:2;i:89498;}i:1940;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:4;}i:2;i:89498;}i:1941;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:89498;}i:1942;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:127:"Two other constraints techniques are important to overall web application security. They are XSS filtering and CSRF protection.";}i:2;i:89518;}i:1943;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:89645;}i:1944;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:89645;}i:1945;a:3:{i:0;s:13:"interwikilink";i:1;a:4:{i:0;s:23:"wp>Cross-site scripting";i:1;s:3:"XSS";i:2;s:2:"wp";i:3;s:20:"Cross-site scripting";}i:2;i:89647;}i:1946;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:605:" or Cross Site Scripting happens when you accept user input and later display on the page to other users. That user input may be a cracker writing scripts which will then be executed when it is later interpreted by the browser of other users. This is dangerous as it can not only compromise the security of your users, but it can undermine the trust of your customers if they find out that visiting your site is dangerous. This usually happens in forums or places which accept comments. Codeigniter provides a global or granular way of filtering scripts out of form input. For the global option, just set ";}i:2;i:89678;}i:1947;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:90283;}i:1948;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:20:"global_xss_filtering";}i:2;i:90285;}i:1949;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:90305;}i:1950;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:8:" in the ";}i:2;i:90307;}i:1951;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:90315;}i:1952;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:29:"application/config/config.php";}i:2;i:90317;}i:1953;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:90346;}i:1954;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:339:" to true. However this may affect inputs which you are expecting scripts and not displaying them. It may also slow down your server, since not all user input is displayed back to the page or displayed in a manner in which XSS is possible. So it is often recommended to leave global XSS filtering switched off, and instead only apply it to ";}i:2;i:90348;}i:1955;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:66:"http://ellislab.com/codeigniter/user-guide/libraries/security.html";i:1;s:22:"individual form inputs";}i:2;i:90687;}i:1956;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:47:" when you're using the form validation library.";}i:2;i:90780;}i:1957;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:90827;}i:1958;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:8:"imagebox";i:1;a:2:{i:0;i:1;i:1;a:11:{s:4:"type";s:13:"internalmedia";s:3:"src";s:45:":web_application_development:csrf-diagram.png";s:5:"title";s:0:"";s:5:"align";s:5:"right";s:5:"width";s:3:"200";s:6:"height";N;s:5:"cache";s:5:"cache";s:7:"linking";s:7:"details";s:1:"w";s:3:"200";s:6:"detail";s:138:"/lib/exe/detail.php?id=web_application_development%3Aphp_-_server_side_architecture&amp;media=web_application_development:csrf-diagram.png";s:5:"exist";b:1;}}i:2;i:1;i:3;s:54:"[{{ :web_application_development:csrf-diagram.png?200|";}i:2;i:90829;}i:1959;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:8:"imagebox";i:1;a:2:{i:0;i:3;i:1;s:12:"CSRF Diagram";}i:2;i:3;i:3;s:12:"CSRF Diagram";}i:2;i:90883;}i:1960;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:8:"imagebox";i:1;a:2:{i:0;i:4;i:1;s:3:"}}]";}i:2;i:4;i:3;s:3:"}}]";}i:2;i:90895;}i:1961;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:90895;}i:1962;a:3:{i:0;s:13:"interwikilink";i:1;a:4:{i:0;s:29:"wp>Cross-site request forgery";i:1;s:4:"CSRF";i:2;s:2:"wp";i:3;s:26:"Cross-site request forgery";}i:2;i:90900;}i:1963;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:486:" or cross site request forgery is a slightly more complicated attack method. Basically a cracker creates a website that looks legitimate, but contains hidden javascript or links that point to your website's form or RESTful resource that requires authentication. Now the cracker needs to trick a user of your web application to come to his/her website. If that user has been authenticated to your website via a cookie based session, and if that session has not died or that user clicked ";}i:2;i:90938;}i:1964;a:3:{i:0;s:18:"doublequoteopening";i:1;a:0:{}i:2;i:91424;}i:1965;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:11:"remember me";}i:2;i:91425;}i:1966;a:3:{i:0;s:18:"doublequoteclosing";i:1;a:0:{}i:2;i:91436;}i:1967;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:602:" on the login, then the cracker's website can extract that cookie session and use it to authenticate its own request to your web application. This is why it's called cross site request forgery, because it's exploiting the trust of the user to forge a request to your web application. If you don't have CSRF protection, then the cracker now has access to your system via the user's credentials. This could be disastrous for not only your service if that user has high level permissions, but can also be disastrous if the cracker gains financial or private information of that user from your web service.";}i:2;i:91437;}i:1968;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:92039;}i:1969;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:92039;}i:1970;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:453:"CSRF can be defeated by using CSRF tokens. Essentially on every page load, a CSRF token will be generated, and placed in the user's cookie and also on the page form that is to be submitted. When the form is submitted, the token is compared to the cookie's token to see if they match. If a third party were to post the form, they would have a different CSRF token to the token stored in the user's session cookie. This would render their request invalid.";}i:2;i:92041;}i:1971;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:92494;}i:1972;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:92494;}i:1973;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:79:"Codeigniter provides CSRF protection natively. The settings are located in the ";}i:2;i:92496;}i:1974;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:92575;}i:1975;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:29:"application/config/config.php";}i:2;i:92577;}i:1976;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:92606;}i:1977;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:12:". Make sure ";}i:2;i:92608;}i:1978;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:92620;}i:1979;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:15:"csrf_protection";}i:2;i:92622;}i:1980;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:92637;}i:1981;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:269:" is set to true. Now when the user comes into the page, the CSRF token will be set as part of their cookies. Check this out by going to Polycademy.com or PHPBounce and check the cookies tab in Firebug. However in order to set it on any form inputs, you need to use the ";}i:2;i:92639;}i:1982;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:92908;}i:1983;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:9:"form_open";}i:2;i:92910;}i:1984;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:92919;}i:1985;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:30:" function that is part of the ";}i:2;i:92921;}i:1986;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:67:"http://ellislab.com/codeigniter/user-guide/helpers/form_helper.html";i:1;s:11:"Form Helper";}i:2;i:92951;}i:1987;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:28:". This is documented in the ";}i:2;i:93034;}i:1988;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:66:"http://ellislab.com/codeigniter/user-guide/libraries/security.html";i:1;s:14:"Security Class";}i:2;i:93062;}i:1989;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:2:". ";}i:2;i:93147;}i:1990;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:93149;}i:1991;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:9:"form_open";}i:2;i:93151;}i:1992;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:93160;}i:1993;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:92:" will automatically add a hidden input field with the CSRF token. However if you cannot use ";}i:2;i:93162;}i:1994;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:93254;}i:1995;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:9:"form_open";}i:2;i:93256;}i:1996;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:93265;}i:1997;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:14:", you can use ";}i:2;i:93267;}i:1998;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:93281;}i:1999;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:5:"$this";}i:2;i:93283;}i:2000;a:3:{i:0;s:6:"entity";i:1;a:1:{i:0;s:2:"->";}i:2;i:93288;}i:2001;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:8:"security";}i:2;i:93290;}i:2002;a:3:{i:0;s:6:"entity";i:1;a:1:{i:0;s:2:"->";}i:2;i:93298;}i:2003;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:15:"get_csrf_hash()";}i:2;i:93300;}i:2004;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:93315;}i:2005;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:5:" and ";}i:2;i:93317;}i:2006;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:93322;}i:2007;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:5:"$this";}i:2;i:93324;}i:2008;a:3:{i:0;s:6:"entity";i:1;a:1:{i:0;s:2:"->";}i:2;i:93329;}i:2009;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:8:"security";}i:2;i:93331;}i:2010;a:3:{i:0;s:6:"entity";i:1;a:1:{i:0;s:2:"->";}i:2;i:93339;}i:2011;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:21:"get_csrf_token_name()";}i:2;i:93341;}i:2012;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:93362;}i:2013;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:35:". You can see these methods on the ";}i:2;i:93364;}i:2014;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:87:"https://github.com/EllisLab/CodeIgniter/blob/develop/system/core/Security.php#L243-L269";i:1;s:33:"Security class on the github repo";}i:2;i:93399;}i:2015;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:95:". The CSRF token will be automatically validated on only and every POST requests. Whenever the ";}i:2;i:93524;}i:2016;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:63:"http://ellislab.com/codeigniter/user-guide/libraries/input.html";i:1;s:11:"Input class";}i:2;i:93619;}i:2017;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:56:" (which is natively autoloaded) detects a POST request, ";}i:2;i:93698;}i:2018;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:41:"http://stackoverflow.com/a/6244868/582917";i:1;s:51:"it will call on CSRF verify from the Security class";}i:2;i:93754;}i:2019;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:".";}i:2;i:93851;}i:2020;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:93852;}i:2021;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:93852;}i:2022;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:86:"One more thing, to use CSRF or XSS clean, you need to setup an encryption key in your ";}i:2;i:93854;}i:2023;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:93940;}i:2024;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:29:"application/config/config.php";}i:2;i:93942;}i:2025;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:93971;}i:2026;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:204:". This will be used by the security and encryption class to encrypt hashes and keys for you. Just randomly select 32 characters as your encryption key. Make sure to change it before going into production.";}i:2;i:93973;}i:2027;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:94177;}i:2028;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:94179;}i:2029;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:35:"Isolation & Preventing Side effects";i:1;i:4;i:2;i:94179;}i:2;i:94179;}i:2030;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:4;}i:2;i:94179;}i:2031;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:94179;}i:2032;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:176:"Finally the third validation is about isolating user input. There are two possibilities where user input may cause side effects. The first is code injection, and the second is ";}i:2;i:94224;}i:2033;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:60:"http://php.net/manual/en/security.database.sql-injection.php";i:1;s:13:"SQL injection";}i:2;i:94400;}i:2034;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:126:". We already addressed front end code injection through XSS filtering, but preventing back end code injection is even easier. ";}i:2;i:94478;}i:2035;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:40:"http://stackoverflow.com/a/951868/582917";i:1;s:41:"All you have to do is to not use ''eval''";}i:2;i:94604;}i:2036;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:203:". Basically don't execute or run anything the user gives you. You shouldn't store code in the database either. (Evalling can get quite complicated if you're trying to implement something like PHPBounce!)";}i:2;i:94690;}i:2037;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:94893;}i:2038;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:94893;}i:2039;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:52:"The second is a more pertinent problem. When we run ";}i:2;i:94895;}i:2040;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"SQL";}i:2;i:94947;}i:2041;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:188:" queries, such as searching for some rows which has the field name matching to some user inputted name, then we run the risk of that user inputted name not being a name and being an extra ";}i:2;i:94950;}i:2042;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"SQL";}i:2;i:95138;}i:2043;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:45:" instruction, such as drop table. To prevent ";}i:2;i:95141;}i:2044;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"SQL";}i:2;i:95186;}i:2045;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:171:" injection, we first escape the input, this means putting backslashes on any operators so they are interpreted as text. This was the original method of protecting against ";}i:2;i:95189;}i:2046;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"SQL";}i:2;i:95360;}i:2047;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:196:" injection. However this has been deprecated as it is not foolproof and it was an ugly method of writing a function for each input. Instead bound parameters have been suggested, where you setup a ";}i:2;i:95363;}i:2048;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"SQL";}i:2;i:95559;}i:2049;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:93:" template and then insert the variables. MySQL will never interpret the inserted variable as ";}i:2;i:95562;}i:2050;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"SQL";}i:2;i:95655;}i:2051;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:".";}i:2;i:95658;}i:2052;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:95659;}i:2053;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:95659;}i:2054;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:335:"However, since we're using Codeigniter's active records, we don't need to worry about this at all. Codeigniter will automatically escape and bind any of our variables. Unless we're using the standard query method, because that's a raw anything goes method for complex queries that active records doesn't provide. So yay for frameworks!";}i:2;i:95661;}i:2055;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:95996;}i:2056;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:95998;}i:2057;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:11:"AJAX & CSRF";i:1;i:4;i:2;i:95998;}i:2;i:95998;}i:2058;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:4;}i:2;i:95998;}i:2059;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:95998;}i:2060;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:11:"When using ";}i:2;i:96019;}i:2061;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:4:"AJAX";}i:2;i:96030;}i:2062;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:167:", there's three problems you have to solve in order to implement it with CSRF. The first problem is that the CSRF is validated on any POST requests. If you were using ";}i:2;i:96034;}i:2063;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:4:"AJAX";}i:2;i:96201;}i:2064;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:46:" to serialise a form entry that was used with ";}i:2;i:96205;}i:2065;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:96251;}i:2066;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:11:"form_open()";}i:2;i:96253;}i:2067;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:96264;}i:2068;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:444:", then it would work, because Codeigniter automatically added the CSRF token as a hidden input field. However if you were to submit POST requests outside of a form input, such as through submitting some action via a button, then the CSRF would not validate because there was no CSRF token sent through with the request. In order to solve this problem, you need to capture the CSRF token from the cookie with javascript, and inject it into your ";}i:2;i:96266;}i:2069;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:4:"AJAX";}i:2;i:96710;}i:2070;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:55:" POST requests. There's a couple methods of doing this:";}i:2;i:96714;}i:2071;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:96770;}i:2072;a:3:{i:0;s:10:"listu_open";i:1;a:0:{}i:2;i:96770;}i:2073;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:96770;}i:2074;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:96770;}i:2075;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:" ";}i:2;i:96774;}i:2076;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:86:"http://jerel.co/blog/2012/03/a-simple-solution-to-codeigniter-csrf-protection-and-ajax";i:1;N;}i:2;i:96775;}i:2077;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:96861;}i:2078;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:96861;}i:2079;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:96861;}i:2080;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:96861;}i:2081;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:" ";}i:2;i:96865;}i:2082;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:57:"http://aymsystems.com/ajax-csrf-protection-codeigniter-20";i:1;N;}i:2;i:96866;}i:2083;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:96923;}i:2084;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:96923;}i:2085;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:96923;}i:2086;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:96923;}i:2087;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:" ";}i:2;i:96927;}i:2088;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:88:"http://blog.biernacki.ca/2011/12/enabling-csrf-protection-in-codeigniter-for-ajax-calls/";i:1;N;}i:2;i:96928;}i:2089;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:97016;}i:2090;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:97016;}i:2091;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:97016;}i:2092;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:97016;}i:2093;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:12:" Simply use ";}i:2;i:97020;}i:2094;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:97032;}i:2095;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:5:"$this";}i:2;i:97034;}i:2096;a:3:{i:0;s:6:"entity";i:1;a:1:{i:0;s:2:"->";}i:2;i:97039;}i:2097;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:8:"security";}i:2;i:97041;}i:2098;a:3:{i:0;s:6:"entity";i:1;a:1:{i:0;s:2:"->";}i:2;i:97049;}i:2099;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:21:"get_csrf_token_name()";}i:2;i:97051;}i:2100;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:97072;}i:2101;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:5:" and ";}i:2;i:97074;}i:2102;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:97079;}i:2103;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:5:"$this";}i:2;i:97081;}i:2104;a:3:{i:0;s:6:"entity";i:1;a:1:{i:0;s:2:"->";}i:2;i:97086;}i:2105;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:8:"security";}i:2;i:97088;}i:2106;a:3:{i:0;s:6:"entity";i:1;a:1:{i:0;s:2:"->";}i:2;i:97096;}i:2107;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:15:"get_csrf_hash()";}i:2;i:97098;}i:2108;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:97113;}i:2109;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:39:" and pass them to javascript variables.";}i:2;i:97115;}i:2110;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:97154;}i:2111;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:97154;}i:2112;a:3:{i:0;s:11:"listu_close";i:1;a:0:{}i:2;i:97154;}i:2113;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:97154;}i:2114;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:51:"The second problem is of CSRF regeneration. In the ";}i:2;i:97156;}i:2115;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:97207;}i:2116;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:29:"application/config/config.php";}i:2;i:97209;}i:2117;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:97238;}i:2118;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:247:", there's an option to regenerate CSRF. This would regenerate the CSRF on each POST request. This would work fine in a page load based form. So every time you submitted the form, the page reloaded with the new CSRF code. However when you're using ";}i:2;i:97240;}i:2119;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:4:"AJAX";}i:2;i:97487;}i:2120;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:382:" to submit POST requests, then the page doesn't get reloaded. When you submit another request or concurrent asynchronous requests, then the CSRF gets regenerated on the server, but the client side still has the old CSRF token. The easiest way to resolve this is to simply disable CSRF token regeneration. However a more complex method may involve extracting the CSRF token from the ";}i:2;i:97491;}i:2121;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:4:"AJAX";}i:2;i:97873;}i:2122;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:190:" response and refreshing the token on the client side's cookie and CSRF variable via javascript. This will require you to pass back the CSRF token on each response on the server side though.";}i:2;i:97877;}i:2123;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:98067;}i:2124;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:98067;}i:2125;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:39:"The third problem is the newer RESTful ";}i:2;i:98069;}i:2126;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:4:"HTTP";}i:2;i:98108;}i:2127;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:219:" methods called PUT and DELETE. The CSRF is not validated when you send in a PUT or DELETE request. In order to do so, you'll need to extend the Security class with a custom class and add in a new method similar to the ";}i:2;i:98112;}i:2128;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:98331;}i:2129;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:5:"$this";}i:2;i:98333;}i:2130;a:3:{i:0;s:6:"entity";i:1;a:1:{i:0;s:2:"->";}i:2;i:98338;}i:2131;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:8:"security";}i:2;i:98340;}i:2132;a:3:{i:0;s:6:"entity";i:1;a:1:{i:0;s:2:"->";}i:2;i:98348;}i:2133;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:13:"csrf_verify()";}i:2;i:98350;}i:2134;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:98363;}i:2135;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:399:" method. You'll need to remove the conditional checking of POST requests, since you're trying to do this for PUT and DELETE requests. Remember you're not removing the native method, but adding a newer one. The native one gets called by the Input class automatically, so you don't want to break the Input class's dependencies. Once you have the custom library loaded, you simply call your version of ";}i:2;i:98365;}i:2136;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:98764;}i:2137;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:13:"csrf_verify()";}i:2;i:98766;}i:2138;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:98779;}i:2139;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:97:" on any controller that receives PUT and DELETE requests. However this may not be required since ";}i:2;i:98781;}i:2140;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:42:"http://stackoverflow.com/a/11972282/582917";i:1;s:74:"PUT and DELETE requests are difficult to use when attempting a CSRF attack";}i:2;i:98878;}i:2141;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:".";}i:2;i:98999;}i:2142;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:99001;}i:2143;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:99001;}i:2144;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:18:"Handling Passwords";i:1;i:3;i:2;i:99001;}i:2;i:99001;}i:2145;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:99001;}i:2146;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:99001;}i:2147;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:89:"When you start to have user accounts, you'll need to figure out how to handle passwords. ";}i:2;i:99031;}i:2148;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:47:"http://www.phptherightway.com/#password_hashing";i:1;s:55:"The trick is never store raw passwords in your database";}i:2;i:99120;}i:2149;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:552:". You need to encrypt all passwords and only store the hash in the database. When the user submits their password, you encrypt it in the same manner and you compare the hashes, not the raw passwords. What this means is that if someone else got access to your database, they still wouldn't be able to figure out that the real password was. It also means you as the developer won't know what the real passwords are. This is why when you forgot your old password, most secure web applications ask you for a new one, there's no way to get the old one back.";}i:2;i:99227;}i:2150;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:99779;}i:2151;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:99779;}i:2152;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:394:"Encryption is a vast knowledge area that is beyond the scope of this course. There are weak encryptions and there are strong encryptions. The term encryption technically refers to two way encryption that is the ability of encrypting and decrypting data. For passwords, we only want one way encryption. The technical word for this is hashing. Hashing by itself is not enough. Crackers can use a ";}i:2;i:99781;}i:2153;a:3:{i:0;s:13:"interwikilink";i:1;a:4:{i:0;s:16:"wp>Rainbow table";i:1;s:13:"rainbow table";i:2;s:2:"wp";i:3;s:13:"Rainbow table";}i:2;i:100175;}i:2154;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:227:" with precompiled collision lists of source input and corresponding hash, and match those to your hashes (if they got access to it) and acquire a list of source input. This is why password hashing involves on extra step called ";}i:2;i:100209;}i:2155;a:3:{i:0;s:13:"interwikilink";i:1;a:4:{i:0;s:22:"wp>Salt (cryptography)";i:1;s:7:"salting";i:2;s:2:"wp";i:3;s:19:"Salt (cryptography)";}i:2;i:100436;}i:2156;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:".";}i:2;i:100470;}i:2157;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:100471;}i:2158;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:100471;}i:2159;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:47:"The recommended encryption method as of now is ";}i:2;i:100473;}i:2160;a:3:{i:0;s:13:"interwikilink";i:1;a:4:{i:0;s:9:"wp>bcrypt";i:1;s:6:"Bcrypt";i:2;s:2:"wp";i:3;s:6:"bcrypt";}i:2;i:100520;}i:2161;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:50:". You can use the bcrypt encrytion method via the ";}i:2;i:100540;}i:2162;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:100590;}i:2163;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:7:"crypt()";}i:2;i:100592;}i:2164;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:100599;}i:2165;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:8:" native ";}i:2;i:100601;}i:2166;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"PHP";}i:2;i:100609;}i:2167;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:36:" function. This is explained in the ";}i:2;i:100612;}i:2168;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:41:"http://stackoverflow.com/a/6337021/582917";i:1;s:36:"Stackoverflow post on bcrypt hashing";}i:2;i:100648;}i:2169;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:6:". The ";}i:2;i:100730;}i:2170;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:47:"http://www.php.net/manual/en/function.crypt.php";i:1;s:14:"crypt function";}i:2;i:100736;}i:2171;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:88:" will automatically add a salt to your passwords, so you don't have to worry about that.";}i:2;i:100802;}i:2172;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:100890;}i:2173;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:100890;}i:2174;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:67:"However there is a new native password hashing function that is on ";}i:2;i:100892;}i:2175;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"PHP";}i:2;i:100959;}i:2176;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:55:" 5.5 or greater. Its functionality is explained in the ";}i:2;i:100962;}i:2177;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:38:"https://wiki.php.net/rfc/password_hash";i:1;s:31:"accepted RFC for implementation";}i:2;i:101017;}i:2178;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:7:". Most ";}i:2;i:101091;}i:2179;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"PHP";}i:2;i:101098;}i:2180;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:31:" hosts do not currently run on ";}i:2;i:101101;}i:2181;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"PHP";}i:2;i:101132;}i:2182;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:11:" 5.5, so a ";}i:2;i:101135;}i:2183;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:44:"https://github.com/ircmaxell/password_compat";i:1;s:27:"password compatibility shim";}i:2;i:101146;}i:2184;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:346:" has been created for hosts running on 5.3.7 or greater. The problem with this is that Cloud9 and Appfog do not currently support 5.3.7. However Pagodabox and dotCloud will work with the compatibility shim. If you intend to use the shim, you'll need to develop locally and host it on dotCloud or Pagodabox. Make sure to check the version of your ";}i:2;i:101222;}i:2185;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"PHP";}i:2;i:101568;}i:2186;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:29:" with the console command of ";}i:2;i:101571;}i:2187;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:101600;}i:2188;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:6:"php -v";}i:2;i:101602;}i:2189;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:101608;}i:2190;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:".";}i:2;i:101610;}i:2191;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:101612;}i:2192;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:101612;}i:2193;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:3:"SSL";i:1;i:3;i:2;i:101612;}i:2;i:101612;}i:2194;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:101612;}i:2195;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:101612;}i:2196;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:325:"While the above security measures protect your server from unwanted external attacks, none of them protect the transmission of data over the wire. If you're transmitting sensitive data over the internet such as financial transactions, credit card information or even just user login and password, it's essential to implement ";}i:2;i:101627;}i:2197;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"SSL";}i:2;i:101952;}i:2198;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:".";}i:2;i:101955;}i:2199;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:101956;}i:2200;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:101956;}i:2201;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"SSL";}i:2;i:101958;}i:2202;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:56:" or secure sockets layer is actually the predecessor of ";}i:2;i:101961;}i:2203;a:3:{i:0;s:13:"interwikilink";i:1;a:4:{i:0;s:27:"wp>Transport Layer Security";i:1;s:35:"TLS called transport layer security";i:2;s:2:"wp";i:3;s:24:"Transport Layer Security";}i:2;i:102017;}i:2204;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:36:". However most people still call it ";}i:2;i:102084;}i:2205;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"SSL";}i:2;i:102120;}i:2206;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:35:". You are accessing a website over ";}i:2;i:102123;}i:2207;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"SSL";}i:2;i:102158;}i:2208;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:56:" whenever you have the HTTPS protocol on your browser's ";}i:2;i:102161;}i:2209;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"URL";}i:2;i:102217;}i:2210;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:195:" location. That means any data you send over to the website and any data you receive from the website has been encrypted against any eavesdroppers. Note that there are complications when you use ";}i:2;i:102220;}i:2211;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"SSL";}i:2;i:102415;}i:2212;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:30:" protected resources with non ";}i:2;i:102418;}i:2213;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"SSL";}i:2;i:102448;}i:2214;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:84:" protected resources on the same page. It's recommended that if you're going to use ";}i:2;i:102451;}i:2215;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"SSL";}i:2;i:102535;}i:2216;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:122:", just use it for every page, this will simplify the process. Nowadays servers and connections are fast enough to process ";}i:2;i:102538;}i:2217;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"SSL";}i:2;i:102660;}i:2218;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:46:" quickly so there won't be any noticeable lag.";}i:2;i:102663;}i:2219;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:102709;}i:2220;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:102709;}i:2221;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"SSL";}i:2;i:102711;}i:2222;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:84:" is as much about identification as it is about encryption. So although you can use ";}i:2;i:102714;}i:2223;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"SSL";}i:2;i:102798;}i:2224;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:287:" without buying a certificate from a certificate authority, any external users will get a notice that your certificate cannot be trusted, this is not very good for user experience. Therefore you should buy a real certificate from a real certificate authority. When the client requests a ";}i:2;i:102801;}i:2225;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"SSL";}i:2;i:103088;}i:2226;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:234:" connection, the server sends that certificate, the client validates and uses it to encrypt its request. Then the connection is established, and everything operates as normal. You may need to redirect your users who are attempting an ";}i:2;i:103091;}i:2227;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:4:"HTTP";}i:2;i:103325;}i:2228;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:139:" connection to HTTPS connection. This is how sites like Facebook and Twitter operate, they will always redirect you to an HTTPS connection.";}i:2;i:103329;}i:2229;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:103468;}i:2230;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:103468;}i:2231;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:13:"Implementing ";}i:2;i:103470;}i:2232;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"SSL";}i:2;i:103483;}i:2233;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:66:" depends on your host. Refer to the host documentation to install ";}i:2;i:103486;}i:2234;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"SSL";}i:2;i:103552;}i:2235;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:53:". You will then need to modify some settings on your ";}i:2;i:103555;}i:2236;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"DNS";}i:2;i:103608;}i:2237;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:53:", .htaccess and your framework code. For example for ";}i:2;i:103611;}i:2238;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:37:"https://docs.appfog.com/customize/ssl";i:1;s:34:"AppFog check their Custom SSL docs";}i:2;i:103664;}i:2239;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:2:". ";}i:2;i:103740;}i:2240;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:103742;}i:2241;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:103742;}i:2242;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:16:"Remember to use ";}i:2;i:103744;}i:2243;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"SSL";}i:2;i:103760;}i:2244;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:51:" with Codeigniter, you'll need to change your base ";}i:2;i:103763;}i:2245;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"URL";}i:2;i:103814;}i:2246;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:82:" to represent HTTPS protocol and you'll need set the cookies to be delivered over ";}i:2;i:103817;}i:2247;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"SSL";}i:2;i:103899;}i:2248;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:9:" in your ";}i:2;i:103902;}i:2249;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:103911;}i:2250;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:29:"application/config/config.php";}i:2;i:103913;}i:2251;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:103942;}i:2252;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:55:". To modify htaccess settings to redirect all users to ";}i:2;i:103944;}i:2253;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"SSL";}i:2;i:103999;}i:2254;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:21:" connection see this ";}i:2;i:104002;}i:2255;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:44:"http://ellislab.com/forums/viewthread/86113/";i:1;s:12:"forum thread";}i:2;i:104023;}i:2256;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:".";}i:2;i:104084;}i:2257;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:104085;}i:2258;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:104085;}i:2259;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:65:"When you're developing on localhost, you won't need to implement ";}i:2;i:104087;}i:2260;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"SSL";}i:2;i:104152;}i:2261;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:47:" until you're ready to deploy. This is because ";}i:2;i:104155;}i:2262;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"SSL";}i:2;i:104202;}i:2263;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:134:" really doesn't have anything to do with the application server, it's all about request and response cycle between the client and the ";}i:2;i:104205;}i:2264;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:4:"HTTP";}i:2;i:104339;}i:2265;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:130:" server. The application server doesn't need to care how its requests and responses are being handled. However if you need to see ";}i:2;i:104343;}i:2266;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"SSL";}i:2;i:104473;}i:2267;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:52:" being done on the localhost check this tutorial on ";}i:2;i:104476;}i:2268;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:55:"http://www.neilstuff.com/apache/apache2-ssl-windows.htm";i:1;s:26:"Apache with SSL on Windows";}i:2;i:104528;}i:2269;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:".";}i:2;i:104614;}i:2270;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:104616;}i:2271;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:104616;}i:2272;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:23:"Payments & Credit Cards";i:1;i:3;i:2;i:104616;}i:2;i:104616;}i:2273;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:104616;}i:2274;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:104616;}i:2275;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:121:"In short don't bother. Leave it to the experts. Have a third party process transactions for you and they will handle any ";}i:2;i:104651;}i:2276;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"SSL";}i:2;i:104772;}i:2277;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:209:" related issues. If you are adamant about implementing this yourself be prepared to shell out a lot of cash and resources, because it's not just about technology, but PCI compliance, legal issues and auditing.";}i:2;i:104775;}i:2278;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:104984;}i:2279;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:104984;}i:2280;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:54:"Rather than implementing the merchant processor's own ";}i:2;i:104986;}i:2281;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"API";}i:2;i:105040;}i:2282;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:81:" package you can use the Omnipay package that supports multiple payment gateways:";}i:2;i:105043;}i:2283;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:105125;}i:2284;a:3:{i:0;s:10:"listu_open";i:1;a:0:{}i:2;i:105125;}i:2285;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:105125;}i:2286;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:105125;}i:2287;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:" ";}i:2;i:105129;}i:2288;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:40:"https://github.com/adrianmacneil/omnipay";i:1;s:7:"Omnipay";}i:2;i:105130;}i:2289;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:105182;}i:2290;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:105182;}i:2291;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:105182;}i:2292;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:105182;}i:2293;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:" ";}i:2;i:105186;}i:2294;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:19:"https://pin.net.au/";i:1;s:39:"Payment Gateway designed for Developers";}i:2;i:105187;}i:2295;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:105250;}i:2296;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:105250;}i:2297;a:3:{i:0;s:11:"listu_close";i:1;a:0:{}i:2;i:105250;}i:2298;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:105253;}i:2299;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:25:"Sessions & Authentication";i:1;i:2;i:2;i:105253;}i:2;i:105253;}i:2300;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:2;}i:2;i:105253;}i:2301;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:105253;}i:2302;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:815:"For there to be users to your web application, you need user accounts. To have user accounts to need to authenticate any login request, and then you need to keep their logged in state persistent on the server or client side, or else they'd have to login on each page request. This is achieved through an authentication system and sessions. When you start to have more complicated user accounts such as administrators, moderators, paying customers or guests, then you need an access control list. Note that the implementations discussed below are based on a non-RESTful system. RESTful systems demand a different philosophy and technical implementation for authentication. For pragmatic reasons we're not going to fully abide by REST, because it's currently too strict and it's more about philosophy than technology.";}i:2;i:105292;}i:2303;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:106108;}i:2304;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:106108;}i:2305;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:8:"Sessions";i:1;i:3;i:2;i:106108;}i:2;i:106108;}i:2306;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:106108;}i:2307;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:106108;}i:2308;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1115:"Sessions refer to the state of a particular user logged into your system and interacting with it. The key to implementing sessions is understanding where this state data is kept. State in terms of web applications should be kept on both the client and the server. The client stores state via an encrypted cookie. The server keeps state in the database. When the user first logs in, the server will setup a cookie with all the user's login data and send it to the client's browser, at the same time it will create a corresponding entry into the database. The cookie will have an expiration date that matches the expiration date in the database. Each time the user requests some resource to the server, the server will check the cookie and match it to the database session data, if they match, it means the user is still logged in and interacting with the system. This is how most web applications authenticate their users. The remember me functionality is based on a long expiration cookie, but eventually all cookies die. Once the cookie is cleared or dead, the user will need to login again to recycle the process.";}i:2;i:106128;}i:2309;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:107243;}i:2310;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:107243;}i:2311;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:182:"There are other methods of keeping session state, most of it depends on whether you're talking about the client or server. For clients, one other method is to store the state in the ";}i:2;i:107245;}i:2312;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"URL";}i:2;i:107427;}i:2313;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:159:" as query parameters rather than as a cookie. For the server, one other method involves storing the session data in memory such as memcache or Redis database. ";}i:2;i:107430;}i:2314;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"PHP";}i:2;i:107589;}i:2315;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:145:" also offers native sessions which stores to file disk. However the cookie based with database backend sessions is the easiest and most flexible.";}i:2;i:107592;}i:2316;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:107737;}i:2317;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:107737;}i:2318;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:56:"You could implement all of this functionality using raw ";}i:2;i:107739;}i:2319;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"PHP";}i:2;i:107795;}i:2320;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:54:", but we're using a framework, and we'll also use the ";}i:2;i:107798;}i:2321;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:50:"https://github.com/benedmunds/CodeIgniter-Ion-Auth";i:1;s:8:"Ion Auth";}i:2;i:107852;}i:2322;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:43:" third party library to abstract the messy ";}i:2;i:107915;}i:2323;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:4:"HTTP";}i:2;i:107958;}i:2324;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:10:" handling.";}i:2;i:107962;}i:2325;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:107972;}i:2326;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:107972;}i:2327;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:190:"There's a caveat to all of the above information. In the RESTful standard, state should be kept at the client, and the server should not be transmitting state. This will be discussed in the ";}i:2;i:107974;}i:2328;a:3:{i:0;s:9:"locallink";i:1;a:2:{i:0;s:4:"rest";i:1;s:12:"REST section";}i:2;i:108164;}i:2329;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:110:". For now you just have to know that there are alternatives to session state if you need to be REST compliant.";}i:2;i:108186;}i:2330;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:108297;}i:2331;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:108297;}i:2332;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:21:"Authentication System";i:1;i:3;i:2;i:108297;}i:2;i:108297;}i:2333;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:108297;}i:2334;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:108297;}i:2335;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:106:"To implement this system in Codeigniter, you need to first setup your cookie and session settings in your ";}i:2;i:108330;}i:2336;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:108436;}i:2337;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:29:"application/config/config.php";}i:2;i:108438;}i:2338;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:108467;}i:2339;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:108:". The settings are straight forward, make sure to customise the prefix to match your web application's name.";}i:2;i:108469;}i:2340;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:108577;}i:2341;a:3:{i:0;s:4:"code";i:1;a:3:{i:0;s:780:"
//this is the config from PHPBounce! Notice the bounce_ to customise the name of the cookies.

$config['sess_driver'] = 'cookie';
$config['sess_valid_drivers'] = array();
$config['sess_cookie_name'] = 'session';
$config['sess_expiration'] = 7200;
$config['sess_expire_on_close'] = FALSE;
$config['sess_encrypt_cookie'] = TRUE;
$config['sess_use_database'] = FALSE; //we're not using CI's native session database functionality, so leave this false
$config['sess_table_name'] = 'bounce_sessions';
$config['sess_match_ip'] = FALSE;
$config['sess_match_useragent']	= TRUE;
$config['sess_time_to_update'] = 300;

$config['cookie_prefix']	= 'bounce_';
$config['cookie_domain']	= '';
$config['cookie_path']		= '/';
$config['cookie_secure']	= FALSE;
$config['cookie_httponly'] 	= FALSE;
";i:1;s:3:"php";i:2;N;}i:2;i:108584;}i:2342;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:108584;}i:2343;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:138:"We won't actually be using Codeigniter's session database store session state serverside, but a third party authentication library called ";}i:2;i:109378;}i:2344;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:50:"https://github.com/benedmunds/CodeIgniter-Ion-Auth";i:1;s:8:"Ion Auth";}i:2;i:109516;}i:2345;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:64:". Simply follow the instructions on their Github repository and ";}i:2;i:109579;}i:2346;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:31:"http://benedmunds.com/ion_auth/";i:1;s:33:"official documentation to install";}i:2;i:109643;}i:2347;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:320:" ion auth. Make sure to use bcrypt for your password handling. This package is kind of ugly, the code has not been formatted well, however it is a rock solid library and easy to customise. Ion auth will actually provide you password handling, authentication, session handling and a simple access control list all in one.";}i:2;i:109712;}i:2348;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:110033;}i:2349;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:110033;}i:2350;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:19:"Access Control List";i:1;i:3;i:2;i:110033;}i:2;i:110033;}i:2351;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:110033;}i:2352;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:110033;}i:2353;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:134:"An access control list is refers the process of validating different users for different levels of permissions. Implementations of an ";}i:2;i:110064;}i:2354;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"ACL";}i:2;i:110198;}i:2355;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:114:" can range from simple group permissions to complicated role based permissions often implemented in forums. Using ";}i:2;i:110201;}i:2356;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:50:"https://github.com/benedmunds/CodeIgniter-Ion-Auth";i:1;s:8:"Ion Auth";}i:2;i:110315;}i:2357;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:282:" provides a simple group based permission model. Essentially every user is assigned to one group. Instead of storing permission codes into the group's database state, you as the developer simply checks if the user is part of a particular group and then grants or denies permissions.";}i:2;i:110378;}i:2358;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:110660;}i:2359;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:110660;}i:2360;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:290:"This is not a robust system since you will need to keep track of all the permissions while writing the code (the permissions are not centralised), and you cannot take advantage of cascading permissions or anything complicated. However it is simple and easy to use and covers most use cases.";}i:2;i:110662;}i:2361;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:110952;}i:2362;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:110952;}i:2363;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:150:"If you do need more a complicated permissions system (such as multi-level accounts) consider implementing bitwise/bitmask permissions or use the Zend ";}i:2;i:110954;}i:2364;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"ACL";}i:2;i:111104;}i:2365;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:74:" library (it's part of the Zend framework, but can be used independently).";}i:2;i:111107;}i:2366;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:111181;}i:2367;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:111181;}i:2368;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:63:"Refer to these resources for using bits for permission systems:";}i:2;i:111183;}i:2369;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:111247;}i:2370;a:3:{i:0;s:10:"listu_open";i:1;a:0:{}i:2;i:111247;}i:2371;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:111247;}i:2372;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:111247;}i:2373;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:" ";}i:2;i:111251;}i:2374;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:77:"http://alanhollis.com/a-quick-guide-to-using-bitmasks-for-permissions-in-php/";i:1;N;}i:2;i:111252;}i:2375;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:111329;}i:2376;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:111329;}i:2377;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:111329;}i:2378;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:111329;}i:2379;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:" ";}i:2;i:111333;}i:2380;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:86:"http://www.php4every1.com/tutorials/create-permissions-using-bitwise-operators-in-php/";i:1;N;}i:2;i:111334;}i:2381;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:111420;}i:2382;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:111420;}i:2383;a:3:{i:0;s:11:"listu_close";i:1;a:0:{}i:2;i:111420;}i:2384;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:111420;}i:2385;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:37:"Refer to these resources to use Zend ";}i:2;i:111422;}i:2386;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"ACL";}i:2;i:111459;}i:2387;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:":";}i:2;i:111462;}i:2388;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:111464;}i:2389;a:3:{i:0;s:10:"listu_open";i:1;a:0:{}i:2;i:111464;}i:2390;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:111464;}i:2391;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:111464;}i:2392;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:" ";}i:2;i:111468;}i:2393;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:54:"http://lucdebrouwer.nl/adding-zend-acl-to-codeigniter/";i:1;N;}i:2;i:111469;}i:2394;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:111523;}i:2395;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:111523;}i:2396;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:111523;}i:2397;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:111523;}i:2398;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:" ";}i:2;i:111527;}i:2399;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:28:"http://www.mattstone.me/?p=3";i:1;N;}i:2;i:111528;}i:2400;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:111556;}i:2401;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:111556;}i:2402;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:111556;}i:2403;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:111556;}i:2404;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:" ";}i:2;i:111560;}i:2405;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:84:"http://framework.zend.com/wiki/display/ZFUSER/Using+Zend_Acl+with+a+database+backend";i:1;N;}i:2;i:111561;}i:2406;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:111645;}i:2407;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:111645;}i:2408;a:3:{i:0;s:11:"listu_close";i:1;a:0:{}i:2;i:111645;}i:2409;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:111646;}i:2410;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:9:".htaccess";i:1;i:2;i:2;i:111646;}i:2;i:111646;}i:2411;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:2;}i:2;i:111646;}i:2412;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:111646;}i:2413;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:4:"The ";}i:2;i:111669;}i:2414;a:3:{i:0;s:13:"interwikilink";i:1;a:4:{i:0;s:12:"wp>.htaccess";i:1;s:9:".htaccess";i:2;s:2:"wp";i:3;s:9:".htaccess";}i:2;i:111673;}i:2415;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:68:" file is a directory level configuration file used to configure the ";}i:2;i:111699;}i:2416;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:4:"HTTP";}i:2;i:111767;}i:2417;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:50:" server. It is most commonly used with the Apache ";}i:2;i:111771;}i:2418;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:4:"HTTP";}i:2;i:111821;}i:2419;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:111:" server. It has several common uses in web applications. One of which is authorisation, it is possible for the ";}i:2;i:111825;}i:2420;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:4:"HTTP";}i:2;i:111936;}i:2421;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:507:" server to request authorisation credentials before granting a response. Normally this isn't used due to poor user experience and limited authorisation functionality, instead it is more commonly used to simply deny all access in directories that should not be publicly accessible such your configuration directory or library directory. You'll notice in Codeigniter that there is an .htaccess file placed in every almost every directory, most of which are simply denying all access. Other major uses include ";}i:2;i:111940;}i:2422;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"URL";}i:2;i:112447;}i:2423;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:217:" rewriting, compression and controlling the browser cache. We'll also be using the .htaccess file that comes with H5BP and packaged using Initializr as an example since it implements many of these features by default.";}i:2;i:112450;}i:2424;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:112667;}i:2425;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:112669;}i:2426;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:13:"URL Rewriting";i:1;i:3;i:2;i:112669;}i:2;i:112669;}i:2427;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:112669;}i:2428;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:112669;}i:2429;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:53:"http://httpd.apache.org/docs/2.0/mod/mod_rewrite.html";i:1;s:13:"URL rewriting";}i:2;i:112694;}i:2430;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:29:" means modifying a website's ";}i:2;i:112765;}i:2431;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"URL";}i:2;i:112794;}i:2432;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:197:" so that it looks different. Why would you want to do this? Well one implement is when you're using the front controller method in an MVC web application, then all requests are routed first to the ";}i:2;i:112797;}i:2433;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:112994;}i:2434;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:9:"index.php";}i:2;i:112996;}i:2435;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:113005;}i:2436;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:74:" as the front controller. Any subsequent parameters would be passed in as ";}i:2;i:113007;}i:2437;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"URL";}i:2;i:113081;}i:2438;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:74:" segments to point to any controller and method. This would result into a ";}i:2;i:113084;}i:2439;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"URL";}i:2;i:113158;}i:2440;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:12:" similar to ";}i:2;i:113161;}i:2441;a:3:{i:0;s:18:"doublequoteopening";i:1;a:0:{}i:2;i:113173;}i:2442;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:46:"http://example.com/index.php/controller/method";i:1;N;}i:2;i:113174;}i:2443;a:3:{i:0;s:18:"doublequoteclosing";i:1;a:0:{}i:2;i:113220;}i:2444;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:34:". Having the index.php inside the ";}i:2;i:113221;}i:2445;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"URL";}i:2;i:113255;}i:2446;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:99:" is superfluous, we might as well not have it and have the server expect it by default. We can use ";}i:2;i:113258;}i:2447;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"URL";}i:2;i:113357;}i:2448;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:44:" rewriting to remove the index.php from the ";}i:2;i:113360;}i:2449;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"URL";}i:2;i:113404;}i:2450;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:18:" and preserve the ";}i:2;i:113407;}i:2451;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"URL";}i:2;i:113425;}i:2452;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:17:"'s functionality.";}i:2;i:113428;}i:2453;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:113445;}i:2454;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:113445;}i:2455;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:30:"Note you need to activate the ";}i:2;i:113447;}i:2456;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:113477;}i:2457;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:11:"mod_rewrite";}i:2;i:113479;}i:2458;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:113490;}i:2459;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:33:" extension to Apache to run this.";}i:2;i:113492;}i:2460;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:113525;}i:2461;a:3:{i:0;s:4:"code";i:1;a:3:{i:0;s:1493:"
#this section is already provided by H5BP, but we modified to suit Codeigniter, different frameworks will require different options
#this is condtion to check if the module was loaded by apache, most hosts support it automatically
<IfModule mod_rewrite.c>
    #this is an option telling Apache to recognise symbolic links, so if you were trying a URL pointing to a file which was a link to another file, it will follow that link to the real file, the + sign is just for merging any options set previously
    Options +FollowSymlinks
    #turn on the rewriting engine!
    RewriteEngine On
    #these are conditions for the the rewrite rule
    #this condition is true if the terms index.php, images, css, js, robots.txt, favicon.ico do not appear in the URL, if they do, then we don't want to activate the rewrite rule, since this would point to a valid resource
    RewriteCond $1 !^(index\.php|images|css|js|robots\.txt|favicon\.ico)
    #this condition is true if the requested resource is not a valid file
    RewriteCond %{REQUEST_FILENAME} !-f
    #this condition is true if the requested resource is not a valid directory
    RewriteCond %{REQUEST_FILENAME} !-d
    #the below is based on REGEX (it takes the URL segments after the example.com and appends them to index.php, passing it back as the URL to be called) So that way instead of calling www.example.com/index.php/controller, I can just call www.example.com/controler
    RewriteRule ^(.*)$ ./index.php/$1 [L,QSA]
</IfModule>
";i:1;N;i:2;N;}i:2;i:113532;}i:2462;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:113532;}i:2463;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:50:"When rewriting is setup, Apache first matches the ";}i:2;i:115035;}i:2464;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"URL";}i:2;i:115085;}i:2465;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:218:" against a rule pattern. If it does not match, mod_rewrite immediately stops processing that rule, and goes on to the next rule. If the pattern matches, mod_rewrite checks for rule conditions. If none are present, the ";}i:2;i:115088;}i:2466;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"URL";}i:2;i:115306;}i:2467;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:268:" will be replaced with a new string, constructed from the substitution string, and mod_rewrite goes on to the next rule. If RewriteConds exist, an inner loop is started, processing them in the order that they are listed. Conditions are not matched against the current ";}i:2;i:115309;}i:2468;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"URL";}i:2;i:115577;}i:2469;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:487:" directly. A TestString is constructed by expanding variables, back-references, map lookups, etc., against which the CondPattern is matched. If the pattern fails to match one of the conditions, the complete set of rule and associated conditions fails. If the pattern matches a given condition, then matching continues to the next condition, until no more conditions are available. If all conditions match, processing is continued with the substitution of the Substitution string for the ";}i:2;i:115580;}i:2470;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"URL";}i:2;i:116067;}i:2471;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:".";}i:2;i:116070;}i:2472;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:116071;}i:2473;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:116071;}i:2474;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:51:"Another example would be removing or adding in the ";}i:2;i:116073;}i:2475;a:3:{i:0;s:18:"doublequoteopening";i:1;a:0:{}i:2;i:116124;}i:2476;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:3:"www";}i:2;i:116125;}i:2477;a:3:{i:0;s:18:"doublequoteclosing";i:1;a:0:{}i:2;i:116128;}i:2478;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:4:" to ";}i:2;i:116129;}i:2479;a:3:{i:0;s:18:"doublequoteopening";i:1;a:0:{}i:2;i:116133;}i:2480;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:18:"http://example.com";i:1;N;}i:2;i:116134;}i:2481;a:3:{i:0;s:18:"doublequoteclosing";i:1;a:0:{}i:2;i:116152;}i:2482;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:42:". Polycademy recommends you to remove the ";}i:2;i:116153;}i:2483;a:3:{i:0;s:18:"doublequoteopening";i:1;a:0:{}i:2;i:116195;}i:2484;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:3:"www";}i:2;i:116196;}i:2485;a:3:{i:0;s:18:"doublequoteclosing";i:1;a:0:{}i:2;i:116199;}i:2486;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:50:" as it is not necessary either. This shortens the ";}i:2;i:116200;}i:2487;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"URL";}i:2;i:116250;}i:2488;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:67:" making it easier to share. Furthermore by explicitly removing the ";}i:2;i:116253;}i:2489;a:3:{i:0;s:18:"doublequoteopening";i:1;a:0:{}i:2;i:116320;}i:2490;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:3:"www";}i:2;i:116321;}i:2491;a:3:{i:0;s:18:"doublequoteclosing";i:1;a:0:{}i:2;i:116324;}i:2492;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:150:" you remove the possibility of duplicate URLs pointing to the same content. This is important for SEO as search engines do not like duplicate content.";}i:2;i:116325;}i:2493;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:116475;}i:2494;a:3:{i:0;s:4:"code";i:1;a:3:{i:0;s:361:"
#this is already activated by default
<IfModule mod_rewrite.c>
    #this is true if HTTPS isn't on, we don't want to mess with that
    RewriteCond %{HTTPS} !=on
    #this cond is true if the HTTP_HOST began with "www" (or else why bother rewriting)
    RewriteCond %{HTTP_HOST} ^www\.(.+)$ [NC]
    RewriteRule ^ http://%1%{REQUEST_URI} [R=301,L]
</IfModule>
";i:1;N;i:2;N;}i:2;i:116482;}i:2495;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:116482;}i:2496;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"URL";}i:2;i:116853;}i:2497;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:219:" rewriting can also be done via the application server using routing functionality, however this does not intercept the connection when it was first made, so you can only point to different resources but not change the ";}i:2;i:116856;}i:2498;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"URL";}i:2;i:117075;}i:2499;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:23:" in the user's browser.";}i:2;i:117078;}i:2500;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:117101;}i:2501;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:117101;}i:2502;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:136:"H5BP also provides a large amount of other rewrite rules to make your life easier, you read the comments in the supplied .htaccess file.";}i:2;i:117103;}i:2503;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:117239;}i:2504;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:117239;}i:2505;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:46:"To learn more about rewriting, check out this ";}i:2;i:117241;}i:2506;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:80:"http://net.tutsplus.com/tutorials/other/a-deeper-look-at-mod_rewrite-for-apache/";i:1;s:29:"Nettuts tutorial on rewriting";}i:2;i:117287;}i:2507;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:".";}i:2;i:117401;}i:2508;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:117403;}i:2509;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:117403;}i:2510;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:11:"Compression";i:1;i:3;i:2;i:117403;}i:2;i:117403;}i:2511;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:117403;}i:2512;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:117403;}i:2513;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:411:"Compression is the science of using algorithms to concatenate separate files and encode it in a format that reduces redundancy in order to compress the file size. You can then transmit the files over the internet and save time to upload/download and bandwidth. The compressed files will need to be decompressed to be use, because the compressed encoding is not designed to be easily editable. It is possible to ";}i:2;i:117426;}i:2514;a:3:{i:0;s:13:"interwikilink";i:1;a:4:{i:0;s:19:"wp>HTTP compression";i:1;s:24:"compress website content";i:2;s:2:"wp";i:3;s:16:"HTTP compression";}i:2;i:117837;}i:2515;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:".";}i:2;i:117885;}i:2516;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:117886;}i:2517;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:117886;}i:2518;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:84:"http://betterexplained.com/articles/how-to-optimize-your-site-with-gzip-compression/";i:1;s:60:"Modern browsers can accept compressed archives from websites";}i:2;i:117888;}i:2519;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:302:" and automatically decompress the content before displaying it. While it takes time and resources to compress and decompress content, the size savings in transmission can reach up to 80%. This can seriously improve the transmission performance of your website. You can check the size savings using the ";}i:2;i:118037;}i:2520;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:47:"http://www.whatsmyip.org/http-compression-test/";i:1;s:24:"WhatsMyIPAddress service";}i:2;i:118339;}i:2521;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:56:" and submit popular websites and check the size savings.";}i:2;i:118415;}i:2522;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:118471;}i:2523;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:118471;}i:2524;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:46:"On the client side, browsers will only accept ";}i:2;i:118473;}i:2525;a:3:{i:0;s:13:"interwikilink";i:1;a:4:{i:0;s:7:"wp>gzip";i:1;s:4:"gzip";i:2;s:2:"wp";i:3;s:4:"gzip";}i:2;i:118519;}i:2526;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:64:" compressed content. This is executed when the browser sends an ";}i:2;i:118535;}i:2527;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:4:"HTTP";}i:2;i:118599;}i:2528;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:39:" request to the server. Along with the ";}i:2;i:118603;}i:2529;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:4:"HTTP";}i:2;i:118642;}i:2530;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:25:" request, they add in an ";}i:2;i:118646;}i:2531;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:118671;}i:2532;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:15:"Accept-Encoding";}i:2;i:118673;}i:2533;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:118688;}i:2534;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:87:" field with values of compression types. For example this could be the browser request:";}i:2;i:118690;}i:2535;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:118777;}i:2536;a:3:{i:0;s:4:"code";i:1;a:3:{i:0;s:83:"
GET /encrypted-area HTTP/1.1
Host: www.example.com
Accept-Encoding: gzip, deflate
";i:1;N;i:2;N;}i:2;i:118784;}i:2537;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:118784;}i:2538;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:77:"On the server side, gzipping can take place on the application server or the ";}i:2;i:118877;}i:2539;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:4:"HTTP";}i:2;i:118954;}i:2540;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:20:" server. The Apache ";}i:2;i:118958;}i:2541;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:4:"HTTP";}i:2;i:118978;}i:2542;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:186:" server can take care of this for you. There are two methods of gzipping data using Apache, you can either use mod_gzip or mod_deflate. Both of these are extension modules to the Apache ";}i:2;i:118982;}i:2543;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:4:"HTTP";}i:2;i:119168;}i:2544;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:150:" server. mod_gzip is somewhat more reliable than mod_deflate, however mod_deflate is quicker at compression and decompression. Both use gzip encoding.";}i:2;i:119172;}i:2545;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:119322;}i:2546;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:119322;}i:2547;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:160:"H5BP's .htaccess file already by default provides gzipping rules. Note that gzipping is only used on text based files that are delivered to the browser such as ";}i:2;i:119324;}i:2548;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:4:"HTML";}i:2;i:119484;}i:2549;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:2:", ";}i:2;i:119488;}i:2550;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"CSS";}i:2;i:119490;}i:2551;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:5:" and ";}i:2;i:119493;}i:2552;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:2:"JS";}i:2;i:119498;}i:2553;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:160:". Images are not gzipped because image formats have already been compressed by virtue of their format. Double compression simply increases the size of the file.";}i:2;i:119500;}i:2554;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:119660;}i:2555;a:3:{i:0;s:4:"code";i:1;a:3:{i:0;s:1255:"
<IfModule mod_deflate.c>
    #This is using the mod_deflate filter, notice  how we "deflate" the output based on the type of the file. The type of the file is determined by their MIME type. So these are all the kinds of files that H5BP will deflate just before they get sent to the browser.
    <IfModule mod_filter.c>
        AddOutputFilterByType DEFLATE application/atom+xml \
                                      application/javascript \
                                      application/json \
                                      application/rss+xml \
                                      application/vnd.ms-fontobject \
                                      application/x-font-ttf \
                                      application/xhtml+xml \
                                      application/xml \
                                      font/opentype \
                                      image/svg+xml \
                                      image/x-icon \
                                      text/css \
                                      text/html \
                                      text/plain \
                                      text/x-component \
                                      text/xml
    </IfModule>
</IfModule>
";i:1;N;i:2;N;}i:2;i:119667;}i:2556;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:119667;}i:2557;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:25:"The server sends back an ";}i:2;i:120932;}i:2558;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:4:"HTTP";}i:2;i:120957;}i:2559;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:26:" response similar to this:";}i:2;i:120961;}i:2560;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:120987;}i:2561;a:3:{i:0;s:4:"code";i:1;a:3:{i:0;s:293:"
HTTP/1.1 200 OK
Date: Mon, 23 May 2005 22:38:34 GMT
Server: Apache/1.3.3.7 (Unix)  (Red-Hat/Linux)
Last-Modified: Wed, 08 Jan 2003 23:11:55 GMT
Etag: "3f80f-1b6-3e1cb03b"
Accept-Ranges: bytes
Content-Length: 438
Connection: close
Content-Type: text/html; charset=UTF-8
Content-Encoding: gzip
";i:1;N;i:2;N;}i:2;i:120994;}i:2562;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:120994;}i:2563;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:120:"Notice that the content-encoding has a value of gzip. If we use H5BP's deflate module command instead, then it will use ";}i:2;i:121297;}i:2564;a:3:{i:0;s:18:"doublequoteopening";i:1;a:0:{}i:2;i:121417;}i:2565;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:7:"deflate";}i:2;i:121418;}i:2566;a:3:{i:0;s:18:"doublequoteclosing";i:1;a:0:{}i:2;i:121425;}i:2567;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:".";}i:2;i:121426;}i:2568;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:121428;}i:2569;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:121428;}i:2570;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:25:"Controlling Browser Cache";i:1;i:3;i:2;i:121428;}i:2;i:121428;}i:2571;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:121428;}i:2572;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:121428;}i:2573;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:513:"The .htaccess file also has the ability to control the browser cache. Browsers naturally cache the content that it receives so that when you visit the website a second time, it will load the resources from cache rather than reloading it from the server. However sometimes you need fine grain control over how long the resources should be cached and a fallback to cache bust cached items if you need to do a quick change. Again H5BP provides us all this, so you don't need to change anything. The relevant code is:";}i:2;i:121465;}i:2574;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:121978;}i:2575;a:3:{i:0;s:4:"code";i:1;a:3:{i:0;s:2131:"
<IfModule mod_expires.c>
    ExpiresActive on
    # Perhaps better to whitelist expires rules? Perhaps.
    ExpiresDefault                          "access plus 1 month"
    
    # cache.appcache needs re-requests in FF 3.6 (thanks Remy ~Introducing HTML5)
    ExpiresByType text/cache-manifest       "access plus 0 seconds"
    
    # Your document html
    ExpiresByType text/html                 "access plus 0 seconds"
    
    # Data should not be cached as dynamic websites change this often!
    ExpiresByType text/xml                  "access plus 0 seconds"
    ExpiresByType application/xml           "access plus 0 seconds"
    ExpiresByType application/json          "access plus 0 seconds"
    
    # Feeds change often but not that often
    ExpiresByType application/rss+xml       "access plus 1 hour"
    ExpiresByType application/atom+xml      "access plus 1 hour"
    
    # Favicon (cannot be renamed)
    ExpiresByType image/x-icon              "access plus 1 week"
    
    # Media: images, video, audio
    ExpiresByType image/gif                 "access plus 1 month"
    ExpiresByType image/png                 "access plus 1 month"
    ExpiresByType image/jpeg                "access plus 1 month"
    ExpiresByType video/ogg                 "access plus 1 month"
    ExpiresByType audio/ogg                 "access plus 1 month"
    ExpiresByType video/mp4                 "access plus 1 month"
    ExpiresByType video/webm                "access plus 1 month"
    
    # HTC files  (css3pie)
    ExpiresByType text/x-component          "access plus 1 month"
    
    # Webfonts
    ExpiresByType application/x-font-ttf    "access plus 1 month"
    ExpiresByType font/opentype             "access plus 1 month"
    ExpiresByType application/x-font-woff   "access plus 1 month"
    ExpiresByType image/svg+xml             "access plus 1 month"
    ExpiresByType application/vnd.ms-fontobject "access plus 1 month"
    
    # CSS and JavaScript hardly ever change
    ExpiresByType text/css                  "access plus 1 year"
    ExpiresByType application/javascript    "access plus 1 year"
</IfModule>
";i:1;N;i:2;N;}i:2;i:121985;}i:2576;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:121985;}i:2577;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:102:"You'll notice how cache control is a simple matter of defining the expiration date of files via their ";}i:2;i:124126;}i:2578;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:4:"MIME";}i:2;i:124228;}i:2579;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:179:" type. The default cache times are quite long, so we need a way to cache bust any items we changed. The simplest way of doing this is simply adding a dummy query parameter to the ";}i:2;i:124232;}i:2580;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"URL";}i:2;i:124411;}i:2581;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:2:". ";}i:2;i:124414;}i:2582;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:83:"https://github.com/h5bp/html5-boilerplate/blob/master/doc/htaccess.md#cache-busting";i:1;s:79:"However this was not always reliable for clients who were behind a proxy server";}i:2;i:124416;}i:2583;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:192:". That's why the file extension cache busting method was produced with mod_rewrite in the .htaccess file. These rules by default have not been activated, you'll need to uncomment out the hash ";}i:2;i:124583;}i:2584;a:3:{i:0;s:18:"doublequoteclosing";i:1;a:0:{}i:2;i:124775;}i:2585;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:"#";}i:2;i:124776;}i:2586;a:3:{i:0;s:18:"doublequoteclosing";i:1;a:0:{}i:2;i:124777;}i:2587;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:13:" to use them.";}i:2;i:124778;}i:2588;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:124791;}i:2589;a:3:{i:0;s:4:"code";i:1;a:3:{i:0;s:374:"
#these rules will need to be uncommented
<IfModule mod_rewrite.c>
    RewriteCond %{REQUEST_FILENAME} !-f
    RewriteCond %{REQUEST_FILENAME} !-d
    #looks for files that have (anything).(any numbers).(js or css or png or jpg or gif) and returns them as (anything).(js or css or png or jpg or gif)
    RewriteRule ^(.+)\.(\d+)\.(js|css|png|jpg|gif)$ $1.$3 [L]
</IfModule>
";i:1;N;i:2;N;}i:2;i:124798;}i:2590;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:124798;}i:2591;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:180:"This way instead of using query parameters, you can cache bust javascript, css, png, jpg or gif files by prepending random numbers to the file extension. For example to cache bust ";}i:2;i:125182;}i:2592;a:3:{i:0;s:18:"doublequoteopening";i:1;a:0:{}i:2;i:125362;}i:2593;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:8:"main.css";}i:2;i:125363;}i:2594;a:3:{i:0;s:18:"doublequoteclosing";i:1;a:0:{}i:2;i:125371;}i:2595;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:10:", in your ";}i:2;i:125372;}i:2596;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:4:"HTML";}i:2;i:125382;}i:2597;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:23:", simply link to it by ";}i:2;i:125386;}i:2598;a:3:{i:0;s:18:"doublequoteopening";i:1;a:0:{}i:2;i:125409;}i:2599;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:12:"main.123.css";}i:2;i:125410;}i:2600;a:3:{i:0;s:18:"doublequoteclosing";i:1;a:0:{}i:2;i:125422;}i:2601;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:140:". You do not need to change name of the actual file, just the link to it. So you just change the numbers everytime you make a change to the ";}i:2;i:125423;}i:2602;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"CSS";}i:2;i:125563;}i:2603;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:81:" file. From them on, the new version will be cached appropriately by the browser.";}i:2;i:125566;}i:2604;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:125648;}i:2605;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:125648;}i:2606;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:7:"Caching";i:1;i:2;i:2;i:125648;}i:2;i:125648;}i:2607;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:2;}i:2;i:125648;}i:2608;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:125648;}i:2609;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:546:"Caching is a matter of storing dynamically produced data in a static state so that the data does not need to be reproduced every time it is called. There are many different types of cache and different methods are suitable for different contexts. As a startup you shouldn't worry about caching unless you start to see performance bottlenecks. In the end the browser is the best place to store cache, and that's already been handled by H5BP. Other than that there are mainly three types of caching, opcode caching, file caching and memory caching.";}i:2;i:125669;}i:2610;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:126216;}i:2611;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:126216;}i:2612;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:14:"Opcode Caching";i:1;i:3;i:2;i:126216;}i:2;i:126216;}i:2613;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:126216;}i:2614;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:126216;}i:2615;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"PHP";}i:2;i:126242;}i:2616;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:184:" is an interpreted language, so every time it runs, it will interpret and compile it while it runs. Opcode caching is about caching the compiled bytecodes of any particular script, so ";}i:2;i:126245;}i:2617;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"PHP";}i:2;i:126429;}i:2618;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:178:" can simply execute the compiled code without having to interpret and compile again. All of this is already handled automatically by default, so you don't need to worry about it.";}i:2;i:126432;}i:2619;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:126611;}i:2620;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:126611;}i:2621;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:12:"File Caching";i:1;i:3;i:2;i:126611;}i:2;i:126611;}i:2622;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:126611;}i:2623;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:126611;}i:2624;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:70:"File caching refers to how a cache is stored, not necessarily caching ";}i:2;i:126635;}i:2625;a:3:{i:0;s:18:"doublequoteopening";i:1;a:0:{}i:2;i:126705;}i:2626;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:5:"files";}i:2;i:126706;}i:2627;a:3:{i:0;s:18:"doublequoteclosing";i:1;a:0:{}i:2;i:126711;}i:2628;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:371:". File caching is mainly used for either web page output caching or database caching. This is done so to avoid unnecessary database calls or even to shortcut the processing time of any long winded operation. Accessing the filesystem can often be much faster than accessing a database. By the nature of file caching, the host you're using must allow writable filesystems. ";}i:2;i:126712;}i:2629;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:127083;}i:2630;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:127083;}i:2631;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:177:"Codeigniter offers two native caching libraries relying on a writable file system. Both are quite simple file caching systems and don't offer granular control over partial data.";}i:2;i:127085;}i:2632;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:127263;}i:2633;a:3:{i:0;s:10:"listu_open";i:1;a:0:{}i:2;i:127263;}i:2634;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:127263;}i:2635;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:127263;}i:2636;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:" ";}i:2;i:127267;}i:2637;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:63:"http://ellislab.com/codeigniter/user-guide/general/caching.html";i:1;s:23:"Web Page Output Caching";}i:2;i:127268;}i:2638;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:118:" - Can only be used on full pages. Best suited for static pages that have to query the database and don't change much.";}i:2;i:127359;}i:2639;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:127477;}i:2640;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:127477;}i:2641;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:127477;}i:2642;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:127477;}i:2643;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:" ";}i:2;i:127481;}i:2644;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:64:"http://ellislab.com/codeigniter/user-guide/database/caching.html";i:1;s:16:"Database Caching";}i:2;i:127482;}i:2645;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:230:" - This caches the results of a database query to file. This is best used for data that users may read a lot but doesn't change much. It does not an expiration timer, so you'll need to manage the cache clearing on other callbacks.";}i:2;i:127567;}i:2646;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:127797;}i:2647;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:127797;}i:2648;a:3:{i:0;s:11:"listu_close";i:1;a:0:{}i:2;i:127797;}i:2649;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:127797;}i:2650;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:24:"Phil Sturgeon created a ";}i:2;i:127799;}i:2651;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:50:"https://github.com/philsturgeon/codeigniter-cache/";i:1;s:23:"partial caching library";}i:2;i:127823;}i:2652;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:166:" that is far more powerful and allows granular control over your caching. You'll need to create your own conditionals to either read from cache or do full processing.";}i:2;i:127901;}i:2653;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:128068;}i:2654;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:128068;}i:2655;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:14:"Memory Caching";i:1;i:3;i:2;i:128068;}i:2;i:128068;}i:2656;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:128068;}i:2657;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:128068;}i:2658;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:455:"Sometimes file caching just doesn't cut it, we need access to that data faster. That's when you would start to use memory caching. Storing data into memory is very fast, however it is very volatile, and you can't actually store that much into memory. Therefore memory caching should be used for very short term data and constantly changing volatile data. User account sessions is one aspect that many high traffic web applications cache into their memory.";}i:2;i:128094;}i:2659;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:128549;}i:2660;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:128549;}i:2661;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:478:"There are many different implementations of memory caching, and the different methods have different properties especially when it comes to multi-server scaling. Think about it, how can the memory cache extend out to hundreds if not thousands of different servers, and each client may need to access a shared memory space. Again all of these factors are most likely not important at the startup stage. However if you are interested in implementing this you should look into the ";}i:2;i:128551;}i:2662;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:30:"https://github.com/jamm/memory";i:1;s:25:"PHP Memory Cacher library";}i:2;i:129029;}i:2663;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:149:" that abstracts the commands to store data into memory. It supports a number of different memory caches including APC, Memcache, Redis and Couchbase.";}i:2;i:129089;}i:2664;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:129238;}i:2665;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:129238;}i:2666;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:77:"Note that Codeigniter also provides a more powerful caching class called the ";}i:2;i:129240;}i:2667;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:65:"http://ellislab.com/codeigniter/user-guide/libraries/caching.html";i:1;s:14:"Caching Driver";}i:2;i:129317;}i:2668;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:81:". It also allows you to specify APC or Memcache. However it's not as good as the ";}i:2;i:129401;}i:2669;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"PHP";}i:2;i:129482;}i:2670;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:15:" Memory Cacher.";}i:2;i:129485;}i:2671;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:129500;}i:2672;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:129500;}i:2673;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:11:"Be wary of ";}i:2;i:129502;}i:2674;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:52:"http://en.wikipedia.org/wiki/Race_condition#Software";i:1;s:15:"race conditions";}i:2;i:129513;}i:2675;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:79:" when you're using memory caching with multiple servers and multiple processes!";}i:2;i:129585;}i:2676;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:129665;}i:2677;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:129665;}i:2678;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:15:"RESTful Routing";i:1;i:2;i:2;i:129665;}i:2;i:129665;}i:2679;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:2;}i:2;i:129665;}i:2680;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:129665;}i:2681;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:63:"Routing refers to the practice of customising the direction of ";}i:2;i:129694;}i:2682;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:4:"HTTP";}i:2;i:129757;}i:2683;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:89:" requests to the designated controller that handles the request. This is not the same as ";}i:2;i:129761;}i:2684;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"URL";}i:2;i:129850;}i:2685;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:71:" rewriting although it operates similarly. Routing does not change the ";}i:2;i:129853;}i:2686;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"URL";}i:2;i:129924;}i:2687;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:247:" in the browser, it simply changes the controller that gets called. Routing usually takes place in the front controller, as the front controller is the gate that accepts all requests. Codeigniter automatically routs requests based on this pattern:";}i:2;i:129927;}i:2688;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:130174;}i:2689;a:3:{i:0;s:4:"code";i:1;a:3:{i:0;s:288:"
http://example.com/controller/method/1st_parameter/
# or
http://example.com/directory/controller/method/1st_parameter/
# you can also have multiple parameters (each of these parameters must be accepted by the controller)
http://example.com/controller/method/1st_parameter/2nd_parameter/
";i:1;N;i:2;N;}i:2;i:130181;}i:2690;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:130181;}i:2691;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:188:"Note that Codeigniter by default does not allow nesting of directory subfolders. You can only go one level deep. If you require deep nesting of your directories, you should either use the ";}i:2;i:130479;}i:2692;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:69:"https://bitbucket.org/wiredesignz/codeigniter-modular-extensions-hmvc";i:1;s:14:"HMVC extension";}i:2;i:130667;}i:2693;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:4:" or ";}i:2;i:130755;}i:2694;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:42:"http://stackoverflow.com/a/13752487/582917";i:1;s:23:"modify the router class";}i:2;i:130759;}i:2695;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:2:". ";}i:2;i:130829;}i:2696;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:130831;}i:2697;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:130831;}i:2698;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:138:"However sometimes you do not want to abide by this default pattern. Sometimes you need to customise your routes so that when someone gets ";}i:2;i:130833;}i:2699;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:130971;}i:2700;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:43:"http://example.com/controller/1st_parameter";i:1;N;}i:2;i:130973;}i:2701;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:131016;}i:2702;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:32:", they will actually pointed to ";}i:2;i:131018;}i:2703;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:131050;}i:2704;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:70:"http://example.com/different_controller/different_method/1st_parameter";i:1;N;}i:2;i:131052;}i:2705;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:131122;}i:2706;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:33:". Again this does not change the ";}i:2;i:131124;}i:2707;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"URL";}i:2;i:131157;}i:2708;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:64:" in the client's browser, all of this is done behind the scenes.";}i:2;i:131160;}i:2709;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:131224;}i:2710;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:131224;}i:2711;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:40:"To implement custom routes, you can use ";}i:2;i:131226;}i:2712;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:63:"http://ellislab.com/codeigniter/user-guide/general/routing.html";i:1;s:51:"Codeigniter's native URI Routing configuration file";}i:2;i:131266;}i:2713;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:12:" located in ";}i:2;i:131385;}i:2714;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:131397;}i:2715;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:29:"application/config/routes.php";}i:2;i:131399;}i:2716;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:131428;}i:2717;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:".";}i:2;i:131430;}i:2718;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:131431;}i:2719;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:131431;}i:2720;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:250:"One question that was often asked by beginning developers is, how best to rout your applications. Before there weren't any conventions or standards as to how URLs should be constructed. However in recent years the REST standard has become mainstream.";}i:2;i:131433;}i:2721;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:131684;}i:2722;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:131684;}i:2723;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:4:"REST";i:1;i:3;i:2;i:131684;}i:2;i:131684;}i:2724;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:131684;}i:2725;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:131684;}i:2726;a:3:{i:0;s:13:"interwikilink";i:1;a:4:{i:0;s:34:"wp>Representational state transfer";i:1;s:4:"REST";i:2;s:2:"wp";i:3;s:31:"Representational state transfer";}i:2;i:131700;}i:2727;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:181:" stands for Representational State Transfer which was invented by Roy Fielding in his doctoral thesis. To understand REST, you should first investigate the history of the internet. ";}i:2;i:131743;}i:2728;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:47:"http://blog.dhananjaynene.com/2009/06/why-rest/";i:1;s:93:"Dhananjay Nene explains the history of internet and how it led to the REST architecture style";}i:2;i:131924;}i:2729;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:93:". Once you have understood where the internet came from, you should read this article on how ";}i:2;i:132069;}i:2730;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:71:"http://blog.dhananjaynene.com/2009/06/rest-is-the-dbms-of-the-internet/";i:1;s:47:"REST can be understood the DBMS of the internet";}i:2;i:132162;}i:2731;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:32:". Another good reference is the ";}i:2;i:132285;}i:2732;a:3:{i:0;s:13:"interwikilink";i:1;a:4:{i:0;s:30:"wp>Hypertext Transfer Protocol";i:1;s:25:"Wikipedia article on HTTP";i:2;s:2:"wp";i:3;s:27:"Hypertext Transfer Protocol";}i:2;i:132317;}i:2733;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:".";}i:2;i:132377;}i:2734;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:132378;}i:2735;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:132378;}i:2736;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:116:"REST has emerged as the dominant model of web services. You can think of all the major open APIs such as Facebook's ";}i:2;i:132380;}i:2737;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"API";}i:2;i:132496;}i:2738;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:12:", Twitter's ";}i:2;i:132499;}i:2739;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"API";}i:2;i:132511;}i:2740;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:14:" and Github's ";}i:2;i:132514;}i:2741;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"API";}i:2;i:132528;}i:2742;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:196:" as REST based. But REST is not just for APIs, in fact the REST movement is about converting all web resources into APIs. If you think about it, your browser is the client, and all servers expose ";}i:2;i:132531;}i:2743;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"API";}i:2;i:132727;}i:2744;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:120:" methods to access its resources and do things to its resources. REST however places constraints on how we expose those ";}i:2;i:132730;}i:2745;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"API";}i:2;i:132850;}i:2746;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:9:" methods.";}i:2;i:132853;}i:2747;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:132862;}i:2748;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:132862;}i:2749;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:243:"As explained in the history of the internet, when people started to use the internet for more than just accessing static information or exchanging files, businesses started to create service oriented architectures. These architectures exposed ";}i:2;i:132864;}i:2750;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"API";}i:2;i:133107;}i:2751;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:228:" methods that were called RPCs (remote procedure calls). This style of architecture was neither scalable or efficient. The reason being is that vendors needed to provide an extensive documentation upfront about how to use their ";}i:2;i:133110;}i:2752;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"API";}i:2;i:133338;}i:2753;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:7:". Each ";}i:2;i:133341;}i:2754;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"API";}i:2;i:133348;}i:2755;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:555:" call was unique to each vendor. There was no standardisation in the way we called the APIs. REST came along and standardised these approaches. The most important constraint of REST is the enforcement of an uniform interface of operation verbs, that were completely independent of the resource type. Basically clients should not need to know what the resource they're calling to understand the operation they are executing. You may start to realise that this is similar  to the concept of interfaces in OOP. Just imagine that all web servers were objects ";}i:2;i:133351;}i:2756;a:3:{i:0;s:18:"doublequoteopening";i:1;a:0:{}i:2;i:133906;}i:2757;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:12:"implementing";}i:2;i:133907;}i:2758;a:3:{i:0;s:18:"doublequoteclosing";i:1;a:0:{}i:2;i:133919;}i:2759;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:64:" the REST interface which defined four methods: (in the case of ";}i:2;i:133920;}i:2760;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:4:"HTTP";}i:2;i:133984;}i:2761;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:28:") GET, POST, PUT and DELETE.";}i:2;i:133988;}i:2762;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:134016;}i:2763;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:134016;}i:2764;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:107:"The next most important constraint of the REST architecture is that every resource on the web has a unique ";}i:2;i:134018;}i:2765;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"URL";}i:2;i:134125;}i:2766;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:17:". Every resource ";}i:2;i:134128;}i:2767;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"URL";}i:2;i:134145;}i:2768;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:45:" can be called upon using either of the four ";}i:2;i:134148;}i:2769;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:4:"HTTP";}i:2;i:134193;}i:2770;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:174:" methods, and this would do different functions based on what the resource is. Furthermore every resource needs to be manually readable just by the web browser, so that your ";}i:2;i:134197;}i:2771;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"API";}i:2;i:134371;}i:2772;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:32:" users can understand what your ";}i:2;i:134374;}i:2773;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"API";}i:2;i:134406;}i:2774;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:324:" is without having write code. REST style doesn't care what your resource is, that's up to you. It doesn't specify what functionality you're providing, just simply the style of communication between the client and the server. So your resource depending on what the client wants can be requested in different formats (called ";}i:2;i:134409;}i:2775;a:3:{i:0;s:18:"doublequoteopening";i:1;a:0:{}i:2;i:134733;}i:2776;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:15:"Representations";}i:2;i:134734;}i:2777;a:3:{i:0;s:18:"doublequoteclosing";i:1;a:0:{}i:2;i:134749;}i:2778;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:20:"), such as straight ";}i:2;i:134750;}i:2779;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:4:"HTML";}i:2;i:134770;}i:2780;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:12:", JSON (for ";}i:2;i:134774;}i:2781;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:4:"AJAX";}i:2;i:134786;}i:2782;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:10:") or even ";}i:2;i:134790;}i:2783;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"XML";}i:2;i:134800;}i:2784;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:187:". An important thing to understand is that URLs which are resources should be nouns. There should not be any verbs that specify actions in the URLs. The actions are specified by the four ";}i:2;i:134803;}i:2785;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:4:"HTTP";}i:2;i:134990;}i:2786;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:14:" verb methods.";}i:2;i:134994;}i:2787;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:135008;}i:2788;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:135008;}i:2789;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:253:"These constraints along with the many other constraints make RESTful web services highly scalable and easy to use. This is why the SOA (service oriented architecture) industry using RPCs is moving towards ROA (resourceful/restful oriented architecture).";}i:2;i:135010;}i:2790;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:135263;}i:2791;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:135263;}i:2792;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:9:"The four ";}i:2;i:135265;}i:2793;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:4:"HTTP";}i:2;i:135274;}i:2794;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:24:" methods work like this:";}i:2;i:135278;}i:2795;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:135303;}i:2796;a:3:{i:0;s:10:"listu_open";i:1;a:0:{}i:2;i:135303;}i:2797;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:135303;}i:2798;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:135303;}i:2799;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:36:" GET - this is the simplest type of ";}i:2;i:135307;}i:2800;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:4:"HTTP";}i:2;i:135343;}i:2801;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:80:" request method; the one that browsers use each time you click a link or type a ";}i:2;i:135347;}i:2802;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"URL";}i:2;i:135427;}i:2803;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:86:" into the address bar. It instructs the server to transmit the data identified by the ";}i:2;i:135430;}i:2804;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"URL";}i:2;i:135516;}i:2805;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:283:" to the client. Data should never be modified on the server side as a result of a GET request. In this sense, a GET request is read-only, but of course, once the client receives the data, it is free to do any operation with it on its own side – for instance, format it for display.";}i:2;i:135519;}i:2806;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:135802;}i:2807;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:135802;}i:2808;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:135802;}i:2809;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:135802;}i:2810;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:151:" POST - this is used when the processing you wish to happen on the server should be repeated, if the POST request is repeated, this means they are not ";}i:2;i:135806;}i:2811;a:3:{i:0;s:18:"doublequoteopening";i:1;a:0:{}i:2;i:135957;}i:2812;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:10:"idempotent";}i:2;i:135958;}i:2813;a:3:{i:0;s:18:"doublequoteclosing";i:1;a:0:{}i:2;i:135968;}i:2814;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:85:". You are essentially telling the server to take the request payload and add it as a ";}i:2;i:135969;}i:2815;a:3:{i:0;s:18:"doublequoteopening";i:1;a:0:{}i:2;i:136054;}i:2816;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:11:"subordinate";}i:2;i:136055;}i:2817;a:3:{i:0;s:18:"doublequoteclosing";i:1;a:0:{}i:2;i:136066;}i:2818;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:52:" to the resource. Think of it as a create operation.";}i:2;i:136067;}i:2819;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:136119;}i:2820;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:136119;}i:2821;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:136119;}i:2822;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:136119;}i:2823;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:105:" PUT - is very similar to POST, but is used for updating a resource too. So you're telling the server to ";}i:2;i:136123;}i:2824;a:3:{i:0;s:18:"doublequoteopening";i:1;a:0:{}i:2;i:136228;}i:2825;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:3:"put";}i:2;i:136229;}i:2826;a:3:{i:0;s:18:"doublequoteclosing";i:1;a:0:{}i:2;i:136232;}i:2827;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:50:" the request payload into the designated resource ";}i:2;i:136233;}i:2828;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"URL";}i:2;i:136283;}i:2829;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:18:". If the resource ";}i:2;i:136286;}i:2830;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"URL";}i:2;i:136304;}i:2831;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:47:" already exists, then it updates the resource. ";}i:2;i:136307;}i:2832;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:61:"http://stackoverflow.com/questions/630453/put-vs-post-in-rest";i:1;s:63:"Therefore it can be used for both create and update operations.";}i:2;i:136354;}i:2833;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:91:" However most developers would recommend it to keep it as update so you don't get confused.";}i:2;i:136483;}i:2834;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:136574;}i:2835;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:136574;}i:2836;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:136574;}i:2837;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:136574;}i:2838;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:70:" DELETE - this means delete the resource from the designated resource ";}i:2;i:136578;}i:2839;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"URL";}i:2;i:136648;}i:2840;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:".";}i:2;i:136651;}i:2841;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:136652;}i:2842;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:136652;}i:2843;a:3:{i:0;s:11:"listu_close";i:1;a:0:{}i:2;i:136652;}i:2844;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:136652;}i:2845;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:9:"The four ";}i:2;i:136654;}i:2846;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:4:"HTTP";}i:2;i:136663;}i:2847;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:29:" methods are appended to the ";}i:2;i:136667;}i:2848;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:4:"HTTP";}i:2;i:136696;}i:2849;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:63:" header when the client sends the request. If the resource was ";}i:2;i:136700;}i:2850;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:136763;}i:2851;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:16:"example.com/blog";}i:2;i:136765;}i:2852;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:136781;}i:2853;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:20:". Then we could GET ";}i:2;i:136783;}i:2854;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:136803;}i:2855;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:16:"example.com/blog";}i:2;i:136805;}i:2856;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:136821;}i:2857;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:48:" and retrieve all the blog posts. We could POST ";}i:2;i:136823;}i:2858;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:136871;}i:2859;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:16:"example.com/blog";}i:2;i:136873;}i:2860;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:136889;}i:2861;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:44:" and create a new blog post. In reality the ";}i:2;i:136891;}i:2862;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"URL";}i:2;i:136935;}i:2863;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:19:" would actually be ";}i:2;i:136938;}i:2864;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:136957;}i:2865;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:31:"example.com/blog/id_of_new_post";}i:2;i:136959;}i:2866;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:136990;}i:2867;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:113:". Because it doesn't modify the blog resource, but adds a child resource to the blog resource. We could also PUT ";}i:2;i:136992;}i:2868;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:137105;}i:2869;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:36:"example.com/blog/already_existing_id";}i:2;i:137107;}i:2870;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:137143;}i:2871;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:48:" and it would update the child resource with an ";}i:2;i:137145;}i:2872;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:137193;}i:2873;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:2:"id";}i:2;i:137195;}i:2874;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:137197;}i:2875;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:58:" equal to an already existing id. Finally we could DELETE ";}i:2;i:137199;}i:2876;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:137257;}i:2877;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:36:"example.com/blog/already_existing_id";}i:2;i:137259;}i:2878;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:137295;}i:2879;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:".";}i:2;i:137297;}i:2880;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:137298;}i:2881;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:137298;}i:2882;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:130:"One thing to realise is that browsers don't currently support PUT or DELETE verbs in normal operation or forms except through XHR ";}i:2;i:137300;}i:2883;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:4:"AJAX";}i:2;i:137430;}i:2884;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:147:". This means that if you need browser users to access PUT and DELETE actions directly, then they will need to specified as part of their URLs like ";}i:2;i:137434;}i:2885;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:137581;}i:2886;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:27:"example.com/resource/delete";}i:2;i:137583;}i:2887;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:137610;}i:2888;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:113:". This is a violation of RESTful principles but it's necessary. However it they are meant to be accessed through ";}i:2;i:137612;}i:2889;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:4:"AJAX";}i:2;i:137725;}i:2890;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:49:", then you can force the verbs to be part of the ";}i:2;i:137729;}i:2891;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:4:"HTTP";}i:2;i:137778;}i:2892;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:86:" header when sending the request, and your server will handle the request accordingly.";}i:2;i:137782;}i:2893;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:137868;}i:2894;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:137868;}i:2895;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:75:"If the request comes from GET, any parameters should be extracted from the ";}i:2;i:137870;}i:2896;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"URL";}i:2;i:137945;}i:2897;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:27:" using the global variable ";}i:2;i:137948;}i:2898;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:137975;}i:2899;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:5:"$_GET";}i:2;i:137977;}i:2900;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:137982;}i:2901;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:63:". If the request comes from POST. It can be extracted from the ";}i:2;i:137984;}i:2902;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:138047;}i:2903;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:6:"$_POST";}i:2;i:138049;}i:2904;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:138055;}i:2905;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:35:" variable. These are abstracted by ";}i:2;i:138057;}i:2906;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:63:"http://ellislab.com/codeigniter/user-guide/libraries/input.html";i:1;s:25:"Codeigniter's Input class";}i:2;i:138092;}i:2907;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:113:". However if you use PUT or DELETE, these do not get automatically put into a global variable you'll need to use ";}i:2;i:138185;}i:2908;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:41:"http://php.net/manual/en/wrappers.php.php";i:1;s:19:"php://input wrapper";}i:2;i:138298;}i:2909;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:2:". ";}i:2;i:138363;}i:2910;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:64:"http://stackoverflow.com/questions/8893574/php-php-input-vs-post";i:1;s:64:"This will extract the raw request payload without any processing";}i:2;i:138365;}i:2911;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:22:". You may need to use ";}i:2;i:138498;}i:2912;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:47:"http://php.net/manual/en/function.parse-str.php";i:1;s:11:"parse_str()";}i:2;i:138520;}i:2913;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:144:" function if the payload is serialised key to value format. However a more common data format that gets put into the request payload when using ";}i:2;i:138583;}i:2914;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:4:"AJAX";}i:2;i:138727;}i:2915;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:46:" would be JSON. This would require you to use ";}i:2;i:138731;}i:2916;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:49:"http://php.net/manual/en/function.json-decode.php";i:1;s:13:"json_decode()";}i:2;i:138777;}i:2917;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:138:". Make sure to understand how the request payload is structured and plan for it. Doing it properly will avoid the need to painfully debug ";}i:2;i:138844;}i:2918;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:4:"AJAX";}i:2;i:138982;}i:2919;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:161:" request and responses. Using Firebug or other web developer tools will be very helpful in this regard. Remember to XSS clean and validate any of these requests.";}i:2;i:138986;}i:2920;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:139147;}i:2921;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:139147;}i:2922;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:73:"Once you've handled the request you need to pass back a response with an ";}i:2;i:139149;}i:2923;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:98:"http://blog.garethj.com/2009/02/17/building-a-restful-web-application-with-php/#returningResponses";i:1;s:30:"appropriate HTTP response code";}i:2;i:139222;}i:2924;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:".";}i:2;i:139355;}i:2925;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:139357;}i:2926;a:3:{i:0;s:10:"listu_open";i:1;a:0:{}i:2;i:139357;}i:2927;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:139357;}i:2928;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:139357;}i:2929;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:49:" 200 OK: successful request when data is returned";}i:2;i:139361;}i:2930;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:139410;}i:2931;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:139410;}i:2932;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:139410;}i:2933;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:139410;}i:2934;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:70:" 201 Created: Successful request when something is created at another ";}i:2;i:139414;}i:2935;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"URL";}i:2;i:139484;}i:2936;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:57:" (specified by the value returned in the Location header)";}i:2;i:139487;}i:2937;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:139544;}i:2938;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:139544;}i:2939;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:139544;}i:2940;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:139544;}i:2941;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:183:" 204 No Content: Successful request when no data is returned, can be used when someone is trying to update or delete something that already has the same update or already been deleted";}i:2;i:139548;}i:2942;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:139731;}i:2943;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:139731;}i:2944;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:139731;}i:2945;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:139731;}i:2946;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:94:" 400 Bad Request: Incorrect parameters specified on request, can be used for validation errors";}i:2;i:139735;}i:2947;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:139829;}i:2948;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:139829;}i:2949;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:139829;}i:2950;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:139829;}i:2951;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:98:" 403 Unauthorised: Can be used for incorrect login, can't use 401 in a session based cookie system";}i:2;i:139833;}i:2952;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:139931;}i:2953;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:139931;}i:2954;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:139931;}i:2955;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:139931;}i:2956;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:45:" 404 Not Found: No resource at the specified ";}i:2;i:139935;}i:2957;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"URL";}i:2;i:139980;}i:2958;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:139983;}i:2959;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:139983;}i:2960;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:139983;}i:2961;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:139983;}i:2962;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:64:" 405 Method Not Allowed: when a client makes a request using an ";}i:2;i:139987;}i:2963;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:4:"HTTP";}i:2;i:140051;}i:2964;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:37:" verb not supported at the requested ";}i:2;i:140055;}i:2965;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"URL";}i:2;i:140092;}i:2966;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:51:" (supported verbs are returned in the Allow header)";}i:2;i:140095;}i:2967;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:140146;}i:2968;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:140146;}i:2969;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:140146;}i:2970;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:140146;}i:2971;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:56:" 406 Not Acceptable: Requested data format not supported";}i:2;i:140150;}i:2972;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:140206;}i:2973;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:140206;}i:2974;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:140206;}i:2975;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:140206;}i:2976;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:161:" 409 Conflict: Indicates the request couldn't be completed due to a conlict, can be used when some re-registers with the same email/password on a web application";}i:2;i:140210;}i:2977;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:140371;}i:2978;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:140371;}i:2979;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:140371;}i:2980;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:140371;}i:2981;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:96:" 500 Internal Server Error: An unexpected error occurred, use this for database or system errors";}i:2;i:140375;}i:2982;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:140471;}i:2983;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:140471;}i:2984;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:140471;}i:2985;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:140471;}i:2986;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:69:" 501 Not Implemented: when a client makes a request using an unknown ";}i:2;i:140475;}i:2987;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:4:"HTTP";}i:2;i:140544;}i:2988;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:5:" verb";}i:2;i:140548;}i:2989;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:140553;}i:2990;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:140553;}i:2991;a:3:{i:0;s:11:"listu_close";i:1;a:0:{}i:2;i:140553;}i:2992;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:140553;}i:2993;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:288:"The 200 status code doesn't actually need to be manually returned, if you return any data, the browser will assume it was a 200 status code. Some of these status codes will be implemented on different levels in your application. For example a 501 error would be implemented at either the ";}i:2;i:140555;}i:2994;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:4:"HTTP";}i:2;i:140843;}i:2995;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:35:" server level or the routing level.";}i:2;i:140847;}i:2996;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:140882;}i:2997;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:140882;}i:2998;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:251:"One constraint of RESTful architecture is the concept of stateless server. Essentially the server should not manage the state of the request. Every request is supposed to carry all the necessary payload to authenticate and validate the request, hence ";}i:2;i:140884;}i:2999;a:3:{i:0;s:18:"doublequoteopening";i:1;a:0:{}i:2;i:141135;}i:3000;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:14:"State Transfer";}i:2;i:141136;}i:3001;a:3:{i:0;s:18:"doublequoteclosing";i:1;a:0:{}i:2;i:141150;}i:3002;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:239:" in the REST name. This means servers using database sessions actually violate RESTful style. Note that we're talking application state not resource state. Application state is the state of the client in interacting with your application. ";}i:2;i:141151;}i:3003;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:64:"http://jcalcote.wordpress.com/2009/08/10/restful-authentication/";i:1;s:41:"This is somewhat controversial constraint";}i:2;i:141390;}i:3004;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:440:". While there are advantages to stateless servers in scalability, because if you have a million clients, you don't have a million records of session to manage, instead each client simply passes in their authentication token each time they want something, it some what difficult to create a secure authentication method that is good of user experience when complying with statelessness. There are number of methods that are described in the ";}i:2;i:141500;}i:3005;a:3:{i:0;s:9:"locallink";i:1;a:2:{i:0;s:27:"providing_web_services_apis";i:1;s:28:"Providing a Web Service APIs";}i:2;i:141940;}i:3006;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:103:" section. However you need to balance your effort against your reward. The question to ask yourself is ";}i:2;i:142001;}i:3007;a:3:{i:0;s:18:"doublequoteopening";i:1;a:0:{}i:2;i:142104;}i:3008;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:27:"Are you building a RESTful ";}i:2;i:142105;}i:3009;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"API";}i:2;i:142132;}i:3010;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:136:" which will only be used by your own web based browser clients (that might be a single page application), or are you building a RESTful ";}i:2;i:142135;}i:3011;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"API";}i:2;i:142271;}i:3012;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:57:" for third party web services so they can create mashups?";}i:2;i:142274;}i:3013;a:3:{i:0;s:18:"doublequoteclosing";i:1;a:0:{}i:2;i:142331;}i:3014;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:423:". If your answer is the former, you can then choose to either create a RESTful compliant authentication scheme (difficult) or go with the old cookie database based sessions. If your answer was the latter, then you should definitely create a RESTful compliant authentication scheme, as your clients (who are third party services) will be expecting that, and servers usually don't carry cookies. You can also use a both in a ";}i:2;i:142332;}i:3015;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:93:"http://programmers.stackexchange.com/questions/141019/should-cookies-be-used-in-a-restful-api";i:1;s:56:"fallback strategy to deal with both browsers and servers";}i:2;i:142755;}i:3016;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:".";}i:2;i:142909;}i:3017;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:142910;}i:3018;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:142910;}i:3019;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:221:"Now you understand the RESTful standard. The first thing to implement RESTful style URLs through your application's routing feature. You could manually write all the resource routes yourself. Or you can use the excellent ";}i:2;i:142912;}i:3020;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:39:"https://github.com/jamierumbelow/pigeon";i:1;s:14:"Pigeon library";}i:2;i:143133;}i:3021;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:173:" that is integrated into Codeigniter and can be called from the routes config file. This is just the tip of the iceberg, but you're on your way to a RESTful web application.";}i:2;i:143191;}i:3022;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:143365;}i:3023;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:143365;}i:3024;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:15:"Handling Output";i:1;i:3;i:2;i:143365;}i:2;i:143365;}i:3025;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:143365;}i:3026;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:143365;}i:3027;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:14:"Each resource ";}i:2;i:143392;}i:3028;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"URL";}i:2;i:143406;}i:3029;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:93:" should be able viewable in different formats according to RESTful standards. This is called ";}i:2;i:143409;}i:3030;a:3:{i:0;s:13:"interwikilink";i:1;a:4:{i:0;s:22:"wp>Content negotiation";i:1;s:19:"content negotiation";i:2;s:2:"wp";i:3;s:19:"Content negotiation";}i:2;i:143502;}i:3031;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:92:". Clients and browsers can specify the data formats they are capable of receiving using the ";}i:2;i:143548;}i:3032;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:4:"HTTP";}i:2;i:143640;}i:3033;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:209:" Accept header. In javacript this can be set using the setRequestHeader method on the XMLHttpRequest object. A normal browser request (meaning navigating using the URLs in the browser) does not add any custom ";}i:2;i:143644;}i:3034;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:4:"HTTP";}i:2;i:143853;}i:3035;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:85:" Accept headers to the request. You can use jQuery or direct javascript to add it in.";}i:2;i:143857;}i:3036;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:143942;}i:3037;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:143942;}i:3038;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:77:"On the server side you would receive accept headers by extracting the global ";}i:2;i:143944;}i:3039;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"PHP";}i:2;i:144021;}i:3040;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:10:" variable ";}i:2;i:144024;}i:3041;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:144034;}i:3042;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:10:"$_SERVER['";}i:2;i:144036;}i:3043;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:4:"HTTP";}i:2;i:144046;}i:3044;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:9:"_ACCEPT']";}i:2;i:144050;}i:3045;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:144059;}i:3046;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:57:". Codeigniter provides an abstraction for this via their ";}i:2;i:144061;}i:3047;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:63:"http://ellislab.com/codeigniter/user-guide/libraries/input.html";i:1;s:11:"Input class";}i:2;i:144118;}i:3048;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:18:", you can use the ";}i:2;i:144197;}i:3049;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:144215;}i:3050;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:5:"$this";}i:2;i:144217;}i:3051;a:3:{i:0;s:6:"entity";i:1;a:1:{i:0;s:2:"->";}i:2;i:144222;}i:3052;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:5:"input";}i:2;i:144224;}i:3053;a:3:{i:0;s:6:"entity";i:1;a:1:{i:0;s:2:"->";}i:2;i:144229;}i:3054;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:8:"server()";}i:2;i:144231;}i:3055;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:144239;}i:3056;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:389:" command. The accept headers will need be parsed using a combination of string functions and regex depending how flexible you want it to be. Most of the times if you're providing multiple response formats, then it's a resource that is to be called from a third party web service, you can simply rely on the first acceptable data format in their request header, since developers using your ";}i:2;i:144241;}i:3057;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"API";}i:2;i:144630;}i:3058;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:44:" would want only one format. Look into this ";}i:2;i:144633;}i:3059;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:100:"http://stackoverflow.com/questions/1049401/how-to-select-content-type-from-http-accept-header-in-php";i:1;s:22:"Stackoverflow question";}i:2;i:144677;}i:3060;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:2:", ";}i:2;i:144804;}i:3061;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:47:"https://github.com/kwijibo/Accept-Header-Parser";i:1;s:28:"Accept-Header-Parser Library";}i:2;i:144806;}i:3062;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:23:" and this blog article ";}i:2;i:144886;}i:3063;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:67:"http://bililite.com/blog/2010/01/06/parsing-the-http-accept-header/";i:1;s:30:"Parsing the HTTP Accept Header";}i:2;i:144909;}i:3064;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:17:" for inspiration.";}i:2;i:145011;}i:3065;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:145028;}i:3066;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:145028;}i:3067;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:223:"Since your resources will have different representational formats depending on how the client requested it, this then becomes a matter of handling output. The best way to implement this is through a templating library. The ";}i:2;i:145030;}i:3068;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:42:"https://github.com/Polycademy/CiTemplating";i:1;s:20:"CiTemplating library";}i:2;i:145253;}i:3069;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:145:" that I discussed earlier is built for this. Simply create different layouts for different representational formats. Now when you need to output ";}i:2;i:145320;}i:3070;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:4:"HTML";}i:2;i:145465;}i:3071;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:9:", use an ";}i:2;i:145469;}i:3072;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:4:"HTML";}i:2;i:145478;}i:3073;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:209:" layout. If you need JSON, use a JSON layout. The layouts stay the same, it's the data that you inject that changes. By the way JSON doesn't really have a template, because JSON is usually extracted raw using ";}i:2;i:145482;}i:3074;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:4:"AJAX";}i:2;i:145691;}i:3075;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:75:", and then manipulated by javascript, and then rendered on the client side.";}i:2;i:145695;}i:3076;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:145770;}i:3077;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:145770;}i:3078;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:77:"Of course if the data doesn't change much, remember to cache the JSON output!";}i:2;i:145772;}i:3079;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:145850;}i:3080;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:145850;}i:3081;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:27:"Consuming Web Services APIs";i:1;i:2;i:2;i:145850;}i:2;i:145850;}i:3082;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:2;}i:2;i:145850;}i:3083;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:145850;}i:3084;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:139:"Now that you understand how REST works, you pretty much understand how all the major web service APIs work as long as they are not the old ";}i:2;i:145891;}i:3085;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"RPC";}i:2;i:146030;}i:3086;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:"/";}i:2;i:146033;}i:3087;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:4:"SOAP";}i:2;i:146034;}i:3088;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:91:" service oriented architecture. Now instead of manually coding all the granular aspects of ";}i:2;i:146038;}i:3089;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:4:"HTTP";}i:2;i:146129;}i:3090;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:177:" handling and processing the request and response of RESTful architectures, you can use many well tested libraries that developers have created to abstract all those procedures.";}i:2;i:146133;}i:3091;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:146310;}i:3092;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:146310;}i:3093;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"API";}i:2;i:146312;}i:3094;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:4:" or ";}i:2;i:146315;}i:3095;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:4:"HTTP";}i:2;i:146319;}i:3096;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:153:" related libraries sit on either the consumption side or the provision side. This section talks about consuming third party APIs. This means you need an ";}i:2;i:146323;}i:3097;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:4:"HTTP";}i:2;i:146476;}i:3098;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:48:" client library. Do note however that different ";}i:2;i:146480;}i:3099;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:4:"HTTP";}i:2;i:146528;}i:3100;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:120:" client libraries have support for different authorisation and authentication schemes. All libraries will support basic ";}i:2;i:146532;}i:3101;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:4:"HTTP";}i:2;i:146652;}i:3102;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:86:" authentication passing in username and password with each request, some will support ";}i:2;i:146656;}i:3103;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:79:"http://stackoverflow.com/questions/599048/http-digest-authentication-versus-ssl";i:1;s:26:"HTTP digest authentication";}i:2;i:146742;}i:3104;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:428:", but you have to watch out for any web service APIs that a rely on Oauth 1.0a or Oauth 2.0. Twitter for examples uses Oauth 1.0a whereas Facebook, Google and Github implemented Oauth 2.0. Many web services are moving from Oauth 1.0a to 2.0 but it will take a long time before Oauth 2.0 becomes a standard. Some of the more basic third party services don't need so much authentication complexity, they simply use private key or ";}i:2;i:146852;}i:3105;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:4:"HTTP";}i:2;i:147280;}i:3106;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:103:" basic authentication. In fact some services have no authentication schemes and you can just query the ";}i:2;i:147284;}i:3107;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"URL";}i:2;i:147387;}i:3108;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:10:" directly.";}i:2;i:147390;}i:3109;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:147400;}i:3110;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:147400;}i:3111;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:29:"Here's a list of client side ";}i:2;i:147402;}i:3112;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:4:"HTTP";}i:2;i:147431;}i:3113;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:69:"/REST libraries you can take advantage of. Note that these are for a ";}i:2;i:147435;}i:3114;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"PHP";}i:2;i:147504;}i:3115;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:153:" server to act as a client side to a third party service. If you're intending for the browser to be the client, you'll need to find javascript libraries.";}i:2;i:147507;}i:3116;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:147661;}i:3117;a:3:{i:0;s:10:"listu_open";i:1;a:0:{}i:2;i:147661;}i:3118;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:147661;}i:3119;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:147661;}i:3120;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:" ";}i:2;i:147665;}i:3121;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:54:"https://github.com/philsturgeon/codeigniter-restclient";i:1;s:39:"Phil Sturgeon's Codeigniter REST Client";}i:2;i:147666;}i:3122;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:81:" - This library is integrated into Codeigniter. You can see how to use it on the ";}i:2;i:147764;}i:3123;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:85:"http://net.tutsplus.com/tutorials/php/working-with-restful-services-in-codeigniter-2/";i:1;s:36:"bottom half of his Nettut's tutorial";}i:2;i:147845;}i:3124;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:16:". This supports ";}i:2;i:147971;}i:3125;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:4:"HTTP";}i:2;i:147987;}i:3126;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:11:" basic and ";}i:2;i:147991;}i:3127;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:4:"HTTP";}i:2;i:148002;}i:3128;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:8:" digest.";}i:2;i:148006;}i:3129;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:148014;}i:3130;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:148014;}i:3131;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:148014;}i:3132;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:148014;}i:3133;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:" ";}i:2;i:148018;}i:3134;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:21:"http://guzzlephp.org/";i:1;s:6:"Guzzle";}i:2;i:148019;}i:3135;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:39:" - A full featured and well documented ";}i:2;i:148051;}i:3136;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:4:"HTTP";}i:2;i:148090;}i:3137;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:29:" client library. It supports ";}i:2;i:148094;}i:3138;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:4:"HTTP";}i:2;i:148123;}i:3139;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:50:" basic, digest and Oauth 1 authentication schemes.";}i:2;i:148127;}i:3140;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:148177;}i:3141;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:148177;}i:3142;a:3:{i:0;s:11:"listu_close";i:1;a:0:{}i:2;i:148177;}i:3143;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:148177;}i:3144;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:48:"Of course you cannot just rely libraries, every ";}i:2;i:148179;}i:3145;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"API";}i:2;i:148227;}i:3146;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:78:" has their own documentation. You'll have to read about them in your own time.";}i:2;i:148230;}i:3147;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:148308;}i:3148;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:148308;}i:3149;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:83:"You'll notice that almost all APIs requiring any kind of authentication will use a ";}i:2;i:148310;}i:3150;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"SSL";}i:2;i:148393;}i:3151;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:98:" connection with the HTTPS protocol. This is to prevent eavesdropping on your authentication keys.";}i:2;i:148396;}i:3152;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:148495;}i:3153;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:148495;}i:3154;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:17:"Third Party Login";i:1;i:3;i:2;i:148495;}i:2;i:148495;}i:3155;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:148495;}i:3156;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:148495;}i:3157;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:332:"Consuming third party APIs is relatively a straight forward matter once you have understood the fundamentals of REST. However authenticating against third parties is difficult due to the numerous implementations. Before we go further, let's go through a bit of history. In 2005 Brad Fitzpatrick the creator of Live Journal, created ";}i:2;i:148524;}i:3158;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:27:"http://openidexplained.com/";i:1;s:6:"OpenID";}i:2;i:148856;}i:3159;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:856:". He called it a distributed identification system. This was the beginning of the concept of third party login systems, that were designed to remove the need to constantly register at sites and forums just access them. After all if everyone was just entering a username, password and email, why can't a trusted authority simply keep a database of these records, and all web services can simply use their records when someone wanted to login? In 2006, Twitter was attempting to integrate OpenID into their systems. At the same time another company Ma.gnolia wanted to authorise the integration of their services into the desktop dashboard widgets. Several developers from these companies met up to discuss how best to implement this system. They concluded that even with OpenID that provided third party login, there were still no standards for third party ";}i:2;i:148894;}i:3160;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"API";}i:2;i:149750;}i:3161;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:102:" authorisation. So they began work on Oauth 1.0 and eventually Oauth 1.0a with security improvements. ";}i:2;i:149753;}i:3162;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:17:"http://oauth.net/";i:1;s:9:"Oauth 2.0";}i:2;i:149855;}i:3163;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:161:" is now be worked on and many companies have already adopted drafts of the standard, however the standard is still fresh so documentation is few and far between.";}i:2;i:149886;}i:3164;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:150047;}i:3165;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:150047;}i:3166;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:168:"In order to future proof this course, we're going to talk about Oauth 2 and not Oauth 1. The Oauth standard has gone through 31 drafts and as of this writing stands on ";}i:2;i:150049;}i:3167;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"RFC";}i:2;i:150217;}i:3168;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:11:" 6749. The ";}i:2;i:150220;}i:3169;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:34:"http://tools.ietf.org/html/rfc6749";i:1;s:89:"complete documentation on Oauth 2 is located on Internet Engineering Task Force's website";}i:2;i:150231;}i:3170;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:59:". The important parts of that document to developers is at ";}i:2;i:150359;}i:3171;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:44:"http://tools.ietf.org/html/rfc6749#section-4";i:1;s:9:"section 4";}i:2;i:150418;}i:3172;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:187:" where it starts talking about the different authorisation flows or schemes that relevant to different contexts. You should start reading from there. Other sources of information include:";}i:2;i:150476;}i:3173;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:150664;}i:3174;a:3:{i:0;s:10:"listu_open";i:1;a:0:{}i:2;i:150664;}i:3175;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:150664;}i:3176;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:150664;}i:3177;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:17:" Aaron Parecki's ";}i:2;i:150668;}i:3178;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:63:"http://aaronparecki.com/articles/2012/07/29/1/oauth2-simplified";i:1;s:64:"simpler explanation of the different Oauth 2 authorisation flows";}i:2;i:150685;}i:3179;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:".";}i:2;i:150817;}i:3180;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:150818;}i:3181;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:150818;}i:3182;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:150818;}i:3183;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:150818;}i:3184;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:" ";}i:2;i:150822;}i:3185;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:50:"https://developers.google.com/accounts/docs/OAuth2";i:1;s:24:"Google's Oauth2 diagrams";}i:2;i:150823;}i:3186;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:150902;}i:3187;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:150902;}i:3188;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:150902;}i:3189;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:150902;}i:3190;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:" ";}i:2;i:150906;}i:3191;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:45:"http://tutorials.jenkov.com/oauth2/index.html";i:1;s:25:"Jenkov's Oauth2 Tutorials";}i:2;i:150907;}i:3192;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:150982;}i:3193;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:150982;}i:3194;a:3:{i:0;s:11:"listu_close";i:1;a:0:{}i:2;i:150982;}i:3195;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:150982;}i:3196;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:489:"The most used flow would be the Authorisation Code Grant flow. We first have to register our web application at the third party web service. They should provide us with our application credentials as a client ID and client secret. We then produce a link on the front end, that points to the authorisation end point which would be at the third party. The user would click on that link and allow our application to access their information. The third party service redirects our user with a ";}i:2;i:150984;}i:3197;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"URL";}i:2;i:151473;}i:3198;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:56:" that has that has an authorisation code as part of the ";}i:2;i:151476;}i:3199;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"URL";}i:2;i:151532;}i:3200;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:70:" query parameters. We would extract this query parameter and call the ";}i:2;i:151535;}i:3201;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"API";}i:2;i:151605;}i:3202;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:193:" end point (which could be the same server as the authorisation end point or different servers) with this authorisation code and exchange it for access token. Finally we use the token and make ";}i:2;i:151608;}i:3203;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"API";}i:2;i:151801;}i:3204;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:24:" calls with that in our ";}i:2;i:151804;}i:3205;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:4:"HTTP";}i:2;i:151828;}i:3206;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:293:" header. This access token may be time limited for a particular session. You can see that there are three separate requests your server is making here. One request for the user to allow access, another request to exchange the authorisation code for an access token, and a final request to the ";}i:2;i:151832;}i:3207;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"API";}i:2;i:152125;}i:3208;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:23:" with the access token.";}i:2;i:152128;}i:3209;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:152151;}i:3210;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:152151;}i:3211;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:123:"If we were making a single page application and required third party login without any server side calls, we would use the ";}i:2;i:152153;}i:3212;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:46:"http://tools.ietf.org/html/rfc6749#section-4.2";i:1;s:19:"Implicit Grant flow";}i:2;i:152276;}i:3213;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:40:" which doesn't expose the client secret.";}i:2;i:152346;}i:3214;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:152386;}i:3215;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:152386;}i:3216;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:282:"If you wanted your application to modify its own resources that are on the third party independent of any user logging in, then you would use the client credentials grant flow. Think of it as the software or server logging into its own account, there is no human user involved here.";}i:2;i:152388;}i:3217;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:152670;}i:3218;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:152670;}i:3219;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:295:"Another interesting use case would be the single page application logging in via Oauth 2 to our own server based provider. This could use the password grant flow (the user is logging in) or the client credentials (the software is logging in) grant flow. This is discussed in the next section on ";}i:2;i:152672;}i:3220;a:3:{i:0;s:9:"locallink";i:1;a:2:{i:0;s:27:"providing_web_services_apis";i:1;s:26:"Providing Web Service APIs";}i:2;i:152967;}i:3221;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:".";}i:2;i:153026;}i:3222;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:153027;}i:3223;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:153027;}i:3224;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:148:"If you want to provide your user the ability to auto login or remember me functionality while using third party logins, you have to make use of the ";}i:2;i:153029;}i:3225;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:153177;}i:3226;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:13:"refresh_token";}i:2;i:153179;}i:3227;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:153192;}i:3228;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:305:" grant type. The refresh token may be optionally provided to you when you exchange the authorisation code to get the access token. So if the third party doesn't provide it, then you can't have auto login with that third party. The access token expires after some time, you'll have to check the particular ";}i:2;i:153194;}i:3229;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"API";}i:2;i:153499;}i:3230;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:213:" docs to see how they represent that. You can constantly use the access token until it expires, in which case the next time your user visits, you'll send a refresh token to acquire a new access token. So make you ";}i:2;i:153502;}i:3231;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:122:"http://stackoverflow.com/questions/9809742/how-to-automate-login-to-google-api-to-get-oauth-2-0-token-to-access-known-user";i:1;s:65:"store the access token and refresh token in your account database";}i:2;i:153715;}i:3232;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:27:". This is explained in the ";}i:2;i:153907;}i:3233;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:44:"http://tools.ietf.org/html/rfc6749#section-6";i:1;s:39:"IETF rfc about refreshing access tokens";}i:2;i:153934;}i:3234;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:221:". Furthermore in order to have a proper user account database, you would extract the necessary information about the user you need and cache in your database, so that way you don't need to constantly call the third party ";}i:2;i:154022;}i:3235;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"API";}i:2;i:154243;}i:3236;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:62:" for the same information each time your user makes a request.";}i:2;i:154246;}i:3237;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:154308;}i:3238;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:154308;}i:3239;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:98:"We have a number of libraries available to abstract all of these authentication schemes and flows.";}i:2;i:154310;}i:3240;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:154409;}i:3241;a:3:{i:0;s:10:"listu_open";i:1;a:0:{}i:2;i:154409;}i:3242;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:154409;}i:3243;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:154409;}i:3244;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:" ";}i:2;i:154413;}i:3245;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:49:"https://github.com/philsturgeon/codeigniter-oauth";i:1;s:19:"Codeigniter Oauth 1";}i:2;i:154414;}i:3246;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:154487;}i:3247;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:154487;}i:3248;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:154487;}i:3249;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:154487;}i:3250;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:" ";}i:2;i:154491;}i:3251;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:50:"https://github.com/philsturgeon/codeigniter-oauth2";i:1;s:19:"Codeigniter Oauth 2";}i:2;i:154492;}i:3252;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:154566;}i:3253;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:154566;}i:3254;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:154566;}i:3255;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:154566;}i:3256;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:" ";}i:2;i:154570;}i:3257;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:34:"http://hybridauth.sourceforge.net/";i:1;s:10:"HybridAuth";}i:2;i:154571;}i:3258;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:146:" - probably supports the most amount of schemes and flows. It focuses more on provider integration so it does have support for OAuth 1 and OAuth2.";}i:2;i:154620;}i:3259;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:154766;}i:3260;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:154766;}i:3261;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:154766;}i:3262;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:154766;}i:3263;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:" ";}i:2;i:154770;}i:3264;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:58:"https://github.com/mamprogr/CodeIgniter-IonAuth-HybridAuth";i:1;s:33:"HybridAuth combined with Ion Auth";}i:2;i:154771;}i:3265;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:154867;}i:3266;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:154867;}i:3267;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:154867;}i:3268;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:154867;}i:3269;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:" ";}i:2;i:154871;}i:3270;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:18:"http://opauth.org/";i:1;s:6:"Opauth";}i:2;i:154872;}i:3271;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:33:" - Inspired by OmniAuth in Rails.";}i:2;i:154901;}i:3272;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:154934;}i:3273;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:154934;}i:3274;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:154934;}i:3275;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:154934;}i:3276;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:" ";}i:2;i:154938;}i:3277;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:41:"https://github.com/Lusitanian/PHPoAuthLib";i:1;s:11:"PHPoAuthLib";}i:2;i:154939;}i:3278;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:56:" - Generic library that supports both Oauth1 and Oauth2.";}i:2;i:154996;}i:3279;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:155052;}i:3280;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:155052;}i:3281;a:3:{i:0;s:11:"listu_close";i:1;a:0:{}i:2;i:155052;}i:3282;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:155053;}i:3283;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:27:"Providing Web Services APIs";i:1;i:2;i:2;i:155053;}i:2;i:155053;}i:3284;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:2;}i:2;i:155053;}i:3285;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:155053;}i:3286;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:126:"The internet is becoming more of a neural net of applications than just a large file hosting service. The rise of REST, JSON, ";}i:2;i:155094;}i:3287;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:4:"AJAX";}i:2;i:155220;}i:3288;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:163:" and web services have given even more rise to web mashups and integrations. Some companies have been built through integration into a larger more popular service.";}i:2;i:155224;}i:3289;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:155387;}i:3290;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:155387;}i:3291;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:19:"Creating a popular ";}i:2;i:155389;}i:3292;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"API";}i:2;i:155408;}i:3293;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:167:" is probably more about business value than the exact technical implementation. Never the less implementing APIs require a different mind set from just consuming APIs.";}i:2;i:155411;}i:3294;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:155578;}i:3295;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:155578;}i:3296;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:258:"The first thing to note is that you should create your APIs from the REST standard. From there you will need to consider what kind of resources you're going to expose, and what you're going to let your consumers do with those resources through the different ";}i:2;i:155580;}i:3297;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:4:"HTTP";}i:2;i:155838;}i:3298;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:312:" methods. Next you'll need to figure out your response formats, basically how your data will be represented and therefore consumed. RESTful philosophy states you should support as many as possible! Afterwards you'll need to consider your authentication scheme, which all depends on how people will be using your ";}i:2;i:155842;}i:3299;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"API";}i:2;i:156154;}i:3300;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:220:". Are they accessing the user account data so they have third party login, or are they using your service for machine to machine communication and third party processing instead? You should also consider versioning your ";}i:2;i:156157;}i:3301;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"API";}i:2;i:156377;}i:3302;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:26:", so you can upgrade your ";}i:2;i:156380;}i:3303;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"API";}i:2;i:156406;}i:3304;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:75:" without breaking backwards compatibility. That simply means prefixing all ";}i:2;i:156409;}i:3305;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"API";}i:2;i:156484;}i:3306;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:27:" calls with something like ";}i:2;i:156487;}i:3307;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:156514;}i:3308;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:36:"example.com/apiv1/resource/parameter";}i:2;i:156516;}i:3309;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:156552;}i:3310;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:10:" and then ";}i:2;i:156554;}i:3311;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:156564;}i:3312;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:36:"example.com/apiv2/resource/parameter";}i:2;i:156566;}i:3313;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:156602;}i:3314;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:39:". Finally you'll need to throttle your ";}i:2;i:156604;}i:3315;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"API";}i:2;i:156643;}i:3316;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:189:" calls, so your users won't overload the server. You'll need to consider all the different exceptions and errors that you will output to the client for incorrect authorisation or incorrect ";}i:2;i:156646;}i:3317;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:4:"HTTP";}i:2;i:156835;}i:3318;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:9:" methods.";}i:2;i:156839;}i:3319;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:156848;}i:3320;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:156848;}i:3321;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:263:"Most of these implementations are outside the scope of this course, but a lot of that theory has already been covered in previous sections. This section will just focus on provisioning an authorisation scheme and handling RESTful responses. Jamie Rumbelow's book ";}i:2;i:156850;}i:3322;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:56:"https://efendibooks.com/books/codeigniter-handbook/vol-2";i:1;s:40:"CodeIgniter Handbook - Vol. 2 API Design";}i:2;i:157113;}i:3323;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:61:" is also a good reference if you want to get stuck into this.";}i:2;i:157214;}i:3324;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:157275;}i:3325;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:157277;}i:3326;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:26:"AJAX JSON Message Protocol";i:1;i:3;i:2;i:157277;}i:2;i:157277;}i:3327;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:157277;}i:3328;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:157277;}i:3329;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:26:"When we've established an ";}i:2;i:157315;}i:3330;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"API";}i:2;i:157341;}i:3331;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:578:" for either our own single page application or externals to use, we need to establish a convention for our JSON messages. There's no recommended best practice, so we can make up our own. Polycademy recommends the following protocol for all your server outputted messages. These messages should be constructed on your model layer, because that's where your errors primarily come from and that's where your validation takes place. However you can also use these messages on the controller, and when messages come back from your model, you can augment them in your controller. See ";}i:2;i:157344;}i:3332;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:68:"https://blog.apigee.com/detail/restful_api_design_what_about_errors/";i:1;s:38:"Apigee's blog post on API error design";}i:2;i:157922;}i:3333;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:5:" and ";}i:2;i:158033;}i:3334;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:70:"https://blog.apigee.com/detail/restful_api_design_tips_for_versioning/";i:1;s:14:"API versioning";}i:2;i:158038;}i:3335;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:22:" for more information.";}i:2;i:158127;}i:3336;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:158149;}i:3337;a:3:{i:0;s:4:"code";i:1;a:3:{i:0;s:1084:"

//the content can be whatever we want, simply put in what makes sense, and what the client would need
//the code can be:
//success => standard success for any particular request
//error => standard error, no system failure, expect that content would be a message string, pretty much all of the 400 errors, also includes any errors to update or delete (if those didn't work), these errors are harmless
//validation_error => validation errors for POST or PUT, expect that content would be an object of validation error messages
//system_error => real important error, like couldn't communicate to the database, basically any 500 error
//redirect => force a redirect on the client side, this is necessary for single page apps, since the client side handles the routing

{
    "content": {}, //this can be an object, array or string
    "code": "", //this could be "success"/"error"/"validation_error"/"system_error"/"redirect",
    "http": "", //this could be any of the HTTP codes
    "redirect": "url/to/redirect/to" //this allows the server to redirect the single page app client
}
";i:1;s:10:"javascript";i:2;N;}i:2;i:158156;}i:3338;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:158156;}i:3339;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:118:"Also note that if you are implementing web sockets, they require a more strict message protocol such as STOMP or WAMP.";}i:2;i:159261;}i:3340;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:159380;}i:3341;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:159380;}i:3342;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:40:"RESTful Authentication & Stateless State";i:1;i:3;i:2;i:159380;}i:2;i:159380;}i:3343;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:159380;}i:3344;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:159380;}i:3345;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:38:"The first thing to do is to go buy an ";}i:2;i:159432;}i:3346;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"SSL";}i:2;i:159470;}i:3347;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:119:" certificate from a valid CA. All Oauth2 connections must be through HTTPS because we are transmitting sensitive data. ";}i:2;i:159473;}i:3348;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"SSL";}i:2;i:159592;}i:3349;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:773:" connections are designed to authenticate the connection to the server, but also identifies the server as trustworthy. In order to RESTfully authenticate the client, we must first understand an important constrant of REST, and that is REST applications are stateless. That is, the server should be not be managing the application state of the user. This means cookies with corresponding database records are not an option. Application state should be handled by the client, not the server. The server only manages resource states. The difference being that application state are variables that are only relevant to one particular client, and hence are volatile and quickly destroyed when the user leaves. Resource states are sharable and persistent and used by all clients.";}i:2;i:159595;}i:3350;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:160368;}i:3351;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:160368;}i:3352;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:252:"Now for the purposes of sanity, if you have complex state keeping requirements such as a shopping cart, or you don't think you'll scale out to billions of users, you can relax this constraint. REST is not a religion. Use it when it's practical for you.";}i:2;i:160370;}i:3353;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:160622;}i:3354;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:160622;}i:3355;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:87:"However let's investigate our REST compliant authentication or stateless state options.";}i:2;i:160624;}i:3356;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:160712;}i:3357;a:3:{i:0;s:10:"listu_open";i:1;a:0:{}i:2;i:160712;}i:3358;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:160712;}i:3359;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:160712;}i:3360;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:" ";}i:2;i:160716;}i:3361;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:4:"HTTP";}i:2;i:160717;}i:3362;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:54:" Basic Authentication - User and Password sent on the ";}i:2;i:160721;}i:3363;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:4:"HTTP";}i:2;i:160775;}i:3364;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:151:" headers each request. This has an ugly log in interface, and lacks a log out capability. Very basic, it's better for machine to machine communication.";}i:2;i:160779;}i:3365;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:160930;}i:3366;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:160930;}i:3367;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:160930;}i:3368;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:160930;}i:3369;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:" ";}i:2;i:160934;}i:3370;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:4:"HTTP";}i:2;i:160935;}i:3371;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:18:" Digest - Same as ";}i:2;i:160939;}i:3372;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:4:"HTTP";}i:2;i:160957;}i:3373;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:89:" Basic but now the username and password is encrypted. It still has the same problems as ";}i:2;i:160961;}i:3374;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:4:"HTTP";}i:2;i:161050;}i:3375;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:61:" Basic though, and the encryption isn't strong. Refer to the ";}i:2;i:161054;}i:3376;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:47:"http://php.net/manual/en/features.http-auth.php";i:1;s:61:"PHP documentation for capturing HTTP basic or digest requests";}i:2;i:161115;}i:3377;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:".";}i:2;i:161228;}i:3378;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:161229;}i:3379;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:161229;}i:3380;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:161229;}i:3381;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:161229;}i:3382;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:71:" Query Parameter Authentication - A unique session ID is placed on the ";}i:2;i:161233;}i:3383;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"URL";}i:2;i:161304;}i:3384;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:152:" as a query parameter. This gets matched to a row in a cache or database. This is pretty the same as session cookies, only now the session ID is in the ";}i:2;i:161307;}i:3385;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"URL";}i:2;i:161459;}i:3386;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:89:". This allows it to be more portable than session cookies, since cookies are part of the ";}i:2;i:161462;}i:3387;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:4:"HTTP";}i:2;i:161551;}i:3388;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:38:" standard, and you may want your REST ";}i:2;i:161555;}i:3389;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"API";}i:2;i:161593;}i:3390;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:192:" accessible by other interfaces. However this has problems since now when people share their URLs they will have their session ID appended to their URLs which make no sense to the new visitor.";}i:2;i:161596;}i:3391;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:161788;}i:3392;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:161788;}i:3393;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:161788;}i:3394;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:161788;}i:3395;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:93:" Implement your sessions or shopping cart as a resource on the server which has a persistent ";}i:2;i:161792;}i:3396;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"URL";}i:2;i:161885;}i:3397;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:46:" associated to each session. You can then use ";}i:2;i:161888;}i:3398;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:4:"HTTP";}i:2;i:161934;}i:3399;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:246:" verbs to manipulate these sessions. This is not truly RESTful since you're just providing a REST interface to the session cookie/database implementation. This does not have the scalability benefits of having application state on the client side.";}i:2;i:161938;}i:3400;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:162184;}i:3401;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:162184;}i:3402;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:162184;}i:3403;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:162184;}i:3404;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:" ";}i:2;i:162188;}i:3405;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:47:"http://www.peej.co.uk/articles/no-sessions.html";i:1;s:78:"Use javascript and single page applications to handle state on the client side";}i:2;i:162189;}i:3406;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:220:". They will use HTML5 APIs for local storage or other mechanisms to store any application state. A unique identifier or username and password information will still need to be passed to the server for validation however.";}i:2;i:162319;}i:3407;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:162539;}i:3408;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:162539;}i:3409;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:162539;}i:3410;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:162539;}i:3411;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:129:" Provide your own Oauth 2.0 authorisation scheme. This one is the most viable, and you can couple it with the javascript method. ";}i:2;i:162543;}i:3412;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:162672;}i:3413;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:162672;}i:3414;a:3:{i:0;s:11:"listu_close";i:1;a:0:{}i:2;i:162672;}i:3415;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:162672;}i:3416;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:71:"As I said before. The specific flows when providing your own Oauth 2.0 ";}i:2;i:162674;}i:3417;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"API";}i:2;i:162745;}i:3418;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:255:" depends on the clients who will be accessing it. If it's a web application used by clients who are browsers, this usually means they have user accounts. Since you're the one providing the front end, there will be a trust relationship, so you can use the ";}i:2;i:162748;}i:3419;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:46:"http://tools.ietf.org/html/rfc6749#section-4.3";i:1;s:19:"password grant flow";}i:2;i:163003;}i:3420;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:64:". However if it's machines that will be communicating with your ";}i:2;i:163073;}i:3421;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"API";}i:2;i:163137;}i:3422;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:144:" to access their machine user account, or maybe your front end does not require a log in, just a unique application state, then you can use the ";}i:2;i:163140;}i:3423;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:46:"http://tools.ietf.org/html/rfc6749#section-4.4";i:1;s:29:"client credentials grant flow";}i:2;i:163284;}i:3424;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:".";}i:2;i:163364;}i:3425;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:163365;}i:3426;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:163365;}i:3427;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:74:"Luckily there's premade libraries that are designed for Oauth 2.0 servers.";}i:2;i:163367;}i:3428;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:163442;}i:3429;a:3:{i:0;s:10:"listu_open";i:1;a:0:{}i:2;i:163442;}i:3430;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:163442;}i:3431;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:163442;}i:3432;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:" ";}i:2;i:163446;}i:3433;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:59:"https://github.com/alexbilbie/CodeIgniter-OAuth-2.0-Server/";i:1;s:28:"Codeigniter OAuth 2.0 Server";}i:2;i:163447;}i:3434;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:35:" - Documentation is sparse on this.";}i:2;i:163539;}i:3435;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:163574;}i:3436;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:163574;}i:3437;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:163574;}i:3438;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:163574;}i:3439;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:" ";}i:2;i:163578;}i:3440;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:45:"https://github.com/bshaffer/oauth2-server-php";i:1;s:25:"Generic Oauth2 Server PHP";}i:2;i:163579;}i:3441;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:114:" - This is the best server based implementation of Oauth 2.0 I've seen and it has good documentation and examples.";}i:2;i:163654;}i:3442;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:163768;}i:3443;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:163768;}i:3444;a:3:{i:0;s:11:"listu_close";i:1;a:0:{}i:2;i:163768;}i:3445;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:163768;}i:3446;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:372:"Regardless of the authentication scheme, if writing state management in javascript is not your cup of tea, then just stick to simple cookie to database session management. Just remember that in order to scale cookie to database sessions, you'll need a distributed memory caching technology such as memcache or redis, so that it can be accessible across multiple computers.";}i:2;i:163770;}i:3447;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:164143;}i:3448;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:164143;}i:3449;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:14:"RESTful Server";i:1;i:3;i:2;i:164143;}i:2;i:164143;}i:3450;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:164143;}i:3451;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:164143;}i:3452;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:24:"Phil Sturgeon created a ";}i:2;i:164169;}i:3453;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:54:"https://github.com/philsturgeon/codeigniter-restserver";i:1;s:37:"Codeigniter REST based server library";}i:2;i:164193;}i:3454;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:44:". It provides basic authentication schemes, ";}i:2;i:164289;}i:3455;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:4:"HTTP";}i:2;i:164333;}i:3456;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:78:" method handling and output format handling. He explained how it works in his ";}i:2;i:164337;}i:3457;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:85:"http://net.tutsplus.com/tutorials/php/working-with-restful-services-in-codeigniter-2/";i:1;s:50:"Nettuts article on the server and client libraries";}i:2;i:164415;}i:3458;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:".";}i:2;i:164555;}i:3459;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:164556;}i:3460;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:164556;}i:3461;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:30:"Other implementations include:";}i:2;i:164558;}i:3462;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:164589;}i:3463;a:3:{i:0;s:10:"listu_open";i:1;a:0:{}i:2;i:164589;}i:3464;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:164589;}i:3465;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:164589;}i:3466;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:" ";}i:2;i:164593;}i:3467;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:91:"http://www.websanova.com/tutorials/web-services/how-to-design-a-rest-api-and-why-you-should";i:1;s:44:"Websanova's tutorial on REST in Codeigniter.";}i:2;i:164594;}i:3468;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:164734;}i:3469;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:164734;}i:3470;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:164734;}i:3471;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:164734;}i:3472;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:" ";}i:2;i:164738;}i:3473;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:34:"http://adamwhitney.net/blog/?p=707";i:1;s:53:"Adam Whitney's take on RESTful service in Codeigniter";}i:2;i:164739;}i:3474;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:164831;}i:3475;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:164831;}i:3476;a:3:{i:0;s:11:"listu_close";i:1;a:0:{}i:2;i:164831;}i:3477;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:164831;}i:3478;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:52:"There are also frameworks designed to be used as an ";}i:2;i:164833;}i:3479;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"API";}i:2;i:164885;}i:3480;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:154:". You shouldn't follow each person's implementation religiously, find what works good for your purposes and just implement it, it's the best way to learn.";}i:2;i:164888;}i:3481;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:165042;}i:3482;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:165044;}i:3483;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:14:"Debugging APIs";i:1;i:3;i:2;i:165044;}i:2;i:165044;}i:3484;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:165044;}i:3485;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:165044;}i:3486;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:133:"Also note that debugging APIs will require the use of Curl. Firebug and associated web developer tools will also help when debugging ";}i:2;i:165070;}i:3487;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:4:"AJAX";}i:2;i:165203;}i:3488;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:6:" APIs.";}i:2;i:165207;}i:3489;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:165213;}i:3490;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:165215;}i:3491;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:21:"Concurrent Processing";i:1;i:2;i:2;i:165215;}i:2;i:165215;}i:3492;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:2;}i:2;i:165215;}i:3493;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:165215;}i:3494;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:155:"Concurrent processing is sometimes necessary when the processing work that is needed to be done will take a longer time than what is acceptable. Operating ";}i:2;i:165250;}i:3495;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"PHP";}i:2;i:165405;}i:3496;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:444:" in a single thread would mean that the user would get no response and could not interact with the user interface until that processing finished. This is not very good for user experience. Common applications involve processing images thumbnails, uploading and encoding video, compiling code, simultaneously sending thousands of emails, producing PDFs and asynchronously querying multiple third party services. Note that this isn't the same as ";}i:2;i:165408;}i:3497;a:3:{i:0;s:18:"doublequoteopening";i:1;a:0:{}i:2;i:165852;}i:3498;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:14:"periodic tasks";}i:2;i:165853;}i:3499;a:3:{i:0;s:18:"doublequoteclosing";i:1;a:0:{}i:2;i:165867;}i:3500;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:31:" which is often carried out by ";}i:2;i:165868;}i:3501;a:3:{i:0;s:13:"interwikilink";i:1;a:4:{i:0;s:7:"wp>Cron";i:1;s:4:"Cron";i:2;s:2:"wp";i:3;s:4:"Cron";}i:2;i:165899;}i:3502;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:".";}i:2;i:165915;}i:3503;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:165916;}i:3504;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:165916;}i:3505;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:226:"Before we go any further, let's examine what is concurrent processing. Concurrent processing refers to the techniques in making a CPU core multitask across processes. The key point to understand is that there are two kinds of ";}i:2;i:165918;}i:3506;a:3:{i:0;s:18:"doublequoteopening";i:1;a:0:{}i:2;i:166144;}i:3507;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:9:"processes";}i:2;i:166145;}i:3508;a:3:{i:0;s:18:"doublequoteclosing";i:1;a:0:{}i:2;i:166154;}i:3509;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:56:" in computing. There is the proper process that we call ";}i:2;i:166155;}i:3510;a:3:{i:0;s:18:"doublequoteopening";i:1;a:0:{}i:2;i:166211;}i:3511;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:7:"process";}i:2;i:166212;}i:3512;a:3:{i:0;s:18:"doublequoteclosing";i:1;a:0:{}i:2;i:166219;}i:3513;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:37:" and a light-weight process called a ";}i:2;i:166220;}i:3514;a:3:{i:0;s:18:"doublequoteopening";i:1;a:0:{}i:2;i:166257;}i:3515;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:6:"thread";}i:2;i:166258;}i:3516;a:3:{i:0;s:18:"doublequoteclosing";i:1;a:0:{}i:2;i:166264;}i:3517;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:825:". Processes are independent tasks that occupy separate memory space. Threads are processes that share their memory space and are therefore contained within a process. Therefore a single process can have many threads. Single core CPUs implement multitasking by context switching between threads, and have a scheduler that switches between proper processes. This is done at phenomenal speeds, so we get the illusion of multitasking. Multiple core CPUs run multiple processes at the same time, but of course due to thread context switching, we can lots of programs at the same time. We can encode a video, watch Youtube, play music, use Firefox, download torrents, play a 3D game all at the same time. Our computer may slow down eventually, but it all seems to happen at the same time. The creation of extra processes is called ";}i:2;i:166265;}i:3518;a:3:{i:0;s:18:"doublequoteopening";i:1;a:0:{}i:2;i:167090;}i:3519;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:7:"forking";}i:2;i:167091;}i:3520;a:3:{i:0;s:18:"doublequoteclosing";i:1;a:0:{}i:2;i:167098;}i:3521;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:4:" or ";}i:2;i:167099;}i:3522;a:3:{i:0;s:18:"doublequoteopening";i:1;a:0:{}i:2;i:167103;}i:3523;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:12:"multiprocess";}i:2;i:167104;}i:3524;a:3:{i:0;s:18:"doublequoteclosing";i:1;a:0:{}i:2;i:167116;}i:3525;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:48:", whereas the creation of new threads is simply ";}i:2;i:167117;}i:3526;a:3:{i:0;s:18:"doublequoteopening";i:1;a:0:{}i:2;i:167165;}i:3527;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:14:"multithreading";}i:2;i:167166;}i:3528;a:3:{i:0;s:18:"doublequoteclosing";i:1;a:0:{}i:2;i:167180;}i:3529;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:75:". Here are extra resources that you read to understand this in more detail:";}i:2;i:167181;}i:3530;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:167257;}i:3531;a:3:{i:0;s:10:"listu_open";i:1;a:0:{}i:2;i:167257;}i:3532;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:167257;}i:3533;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:167257;}i:3534;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:" ";}i:2;i:167261;}i:3535;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:70:"http://www.geekride.com/fork-forking-vs-threading-thread-linux-kernel/";i:1;s:20:"Forking vs Threading";}i:2;i:167262;}i:3536;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:".";}i:2;i:167357;}i:3537;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:167358;}i:3538;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:167358;}i:3539;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:167358;}i:3540;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:167358;}i:3541;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:" ";}i:2;i:167362;}i:3542;a:3:{i:0;s:13:"interwikilink";i:1;a:4:{i:0;s:24:"wp>Computer multitasking";i:1;s:21:"Computer Multitasking";i:2;s:2:"wp";i:3;s:21:"Computer multitasking";}i:2;i:167363;}i:3543;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:167413;}i:3544;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:167413;}i:3545;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:167413;}i:3546;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:167413;}i:3547;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:" ";}i:2;i:167417;}i:3548;a:3:{i:0;s:13:"interwikilink";i:1;a:4:{i:0;s:23:"wp>Concurrent computing";i:1;s:20:"Concurrent Computing";i:2;s:2:"wp";i:3;s:20:"Concurrent computing";}i:2;i:167418;}i:3549;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:167466;}i:3550;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:167466;}i:3551;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:167466;}i:3552;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:167466;}i:3553;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:" ";}i:2;i:167470;}i:3554;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:42:"http://stackoverflow.com/a/14201579/582917";i:1;s:35:"Multiprocess vs Multithreads in PHP";}i:2;i:167471;}i:3555;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:167553;}i:3556;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:167553;}i:3557;a:3:{i:0;s:11:"listu_close";i:1;a:0:{}i:2;i:167553;}i:3558;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:167553;}i:3559;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:29:"The default configuration of ";}i:2;i:167555;}i:3560;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"PHP";}i:2;i:167584;}i:3561;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:98:" makes it difficult to do concurrent processing. There are two reasons, the short lived nature of ";}i:2;i:167587;}i:3562;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"PHP";}i:2;i:167685;}i:3563;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:18:" under the Apache ";}i:2;i:167688;}i:3564;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:4:"HTTP";}i:2;i:167706;}i:3565;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:64:" server and the lack of native multithreading. Firstly when the ";}i:2;i:167710;}i:3566;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:4:"HTTP";}i:2;i:167774;}i:3567;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:32:" server such as Apache executes ";}i:2;i:167778;}i:3568;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"PHP";}i:2;i:167810;}i:3569;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:27:" to handle a response, the ";}i:2;i:167813;}i:3570;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"PHP";}i:2;i:167840;}i:3571;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:38:" does not run for long, Apache or the ";}i:2;i:167843;}i:3572;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"PHP";}i:2;i:167881;}i:3573;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:244:" settings automatically spawns a new process and quickly shuts down the process after a bit of time. This matches the request response cycle of the web, but sometimes you need a long running process to handle large tasks or to act as a kind of ";}i:2;i:167884;}i:3574;a:3:{i:0;s:18:"doublequoteopening";i:1;a:0:{}i:2;i:168128;}i:3575;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:8:"watchdog";}i:2;i:168129;}i:3576;a:3:{i:0;s:18:"doublequoteclosing";i:1;a:0:{}i:2;i:168137;}i:3577;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:295:" that reacts to new tasks without having to be completely initiated each time a task is required to be completed. This can be overcome by using daemons. Secondly the lack of multithreading can be overcome by either implementing a multiprocess architecture instead, or using the new experimental ";}i:2;i:168138;}i:3578;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:20:"http://pthreads.org/";i:1;s:18:"Pthreads extension";}i:2;i:168433;}i:3579;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:186:". Multithreading is outside the scope of this course, but do check out the extension if you have special needs. We're going to examine multiprocess architecture and long running daemons.";}i:2;i:168476;}i:3580;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:168662;}i:3581;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:168662;}i:3582;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:7:"Native ";}i:2;i:168664;}i:3583;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"PHP";}i:2;i:168671;}i:3584;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:425:" functions allow you to fork off a process so it becomes an independent process. While this does spread the workload, it's not very flexible since you can't get any messages or responses back from the forked working process. It's just a blackbox, you won't even know if it succeeded or not. A better way is using job managing queue and long running worker daemons (or short lived worker processes depending on what you need).";}i:2;i:168674;}i:3585;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:169099;}i:3586;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:169099;}i:3587;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:321:"A job managing queue is simply a daemon (a persistent process) that receives messages to manage jobs and then creates jobs by spinning up a worker processes, or passing messages to idle workers to start work. It can then manage them by asking about their status and also passing back responses to the main parent process.";}i:2;i:169101;}i:3588;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:169422;}i:3589;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:169422;}i:3590;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:56:"There are two good choices for a job managing queue for ";}i:2;i:169424;}i:3591;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"PHP";}i:2;i:169480;}i:3592;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:":";}i:2;i:169483;}i:3593;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:169485;}i:3594;a:3:{i:0;s:10:"listu_open";i:1;a:0:{}i:2;i:169485;}i:3595;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:169485;}i:3596;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:169485;}i:3597;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:" ";}i:2;i:169489;}i:3598;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:19:"http://gearman.org/";i:1;s:7:"Gearman";}i:2;i:169490;}i:3599;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:169521;}i:3600;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:169521;}i:3601;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:169521;}i:3602;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:169521;}i:3603;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:" ";}i:2;i:169525;}i:3604;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:22:"http://www.zeromq.org/";i:1;s:3:"ZMQ";}i:2;i:169526;}i:3605;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:91:" - ZMQ is actually much more than just a job manager, read their documentation to find out.";}i:2;i:169556;}i:3606;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:169647;}i:3607;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:169647;}i:3608;a:3:{i:0;s:11:"listu_close";i:1;a:0:{}i:2;i:169647;}i:3609;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:169647;}i:3610;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:69:"Refer to these blog tutorials for more information on implementation:";}i:2;i:169649;}i:3611;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:169719;}i:3612;a:3:{i:0;s:10:"listu_open";i:1;a:0:{}i:2;i:169719;}i:3613;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:169719;}i:3614;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:169719;}i:3615;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:" ";}i:2;i:169723;}i:3616;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:58:"http://www.lornajane.net/posts/2011/Using-Gearman-from-PHP";i:1;N;}i:2;i:169724;}i:3617;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:169782;}i:3618;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:169782;}i:3619;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:169782;}i:3620;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:169782;}i:3621;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:" ";}i:2;i:169786;}i:3622;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:64:"http://www.mwop.net/blog/240-Writing-Gearman-Workers-in-PHP.html";i:1;N;}i:2;i:169787;}i:3623;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:169851;}i:3624;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:169851;}i:3625;a:3:{i:0;s:11:"listu_close";i:1;a:0:{}i:2;i:169851;}i:3626;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:169851;}i:3627;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:201:"Please note, that due to your host environments, you may not able to use daemons or worker processes, such as ZMQ or Gearman. dotCloud is one cloud host offering worker processes. Remember to also use ";}i:2;i:169853;}i:3628;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:23:"http://supervisord.org/";i:1;s:10:"Supervisor";}i:2;i:170054;}i:3629;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:69:" to keep your daemons persistent, it will restart them if they crash.";}i:2;i:170092;}i:3630;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:170161;}i:3631;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:170161;}i:3632;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:6:"iframe";i:1;a:7:{s:3:"url";s:60:"http://www.slideshare.net/slideshow/embed_code/2340418?rel=0";s:5:"width";s:5:"427px";s:6:"height";s:5:"356px";s:3:"alt";N;s:6:"scroll";b:0;s:6:"border";b:0;s:5:"align";b:0;}i:2;i:5;i:3;s:98:"{{url>http://www.slideshare.net/slideshow/embed_code/2340418?rel=0 427px,356px noscroll noborder}}";}i:2;i:170163;}i:3633;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:170261;}i:3634;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:170261;}i:3635;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:100:"An important concept to understand is that using long running daemons instead of Apache's spin up a ";}i:2;i:170263;}i:3636;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"PHP";}i:2;i:170363;}i:3637;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:225:" instance for each request, can be beneficial for different scenarios. A lot of the excitement about Node.js is attributed to its event driven asynchronous non-blocking IO architecture, allowing it to serve many connections. ";}i:2;i:170366;}i:3638;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"PHP";}i:2;i:170591;}i:3639;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:34:" has its own implementations with ";}i:2;i:170594;}i:3640;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:20:"http://reactphp.org/";i:1;s:5:"React";}i:2;i:170628;}i:3641;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:5:" and ";}i:2;i:170658;}i:3642;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:41:"https://github.com/shaneharter/PHP-Daemon";i:1;s:10:"PHP-Daemon";}i:2;i:170663;}i:3643;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:".";}i:2;i:170719;}i:3644;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:170720;}i:3645;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:170722;}i:3646;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:25:"Configuration for Daemons";i:1;i:3;i:2;i:170722;}i:2;i:170722;}i:3647;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:170722;}i:3648;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:170722;}i:3649;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:172:"The concept of worker daemons can be implemented in two different ways. Either as a true daemon which would be an independent long running process that can be managed with ";}i:2;i:170759;}i:3650;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:23:"http://supervisord.org/";i:1;s:10:"Supervisor";}i:2;i:170931;}i:3651;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:41:", or as a script that's initiated by the ";}i:2;i:170969;}i:3652;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:4:"HTTP";}i:2;i:171010;}i:3653;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:42:" server which most likely would be Apache.";}i:2;i:171014;}i:3654;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:171056;}i:3655;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:171056;}i:3656;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:87:"In order to implement it in the second way, you'll need configure Apache to modify the ";}i:2;i:171058;}i:3657;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:171145;}i:3658;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:7:"php.ini";}i:2;i:171147;}i:3659;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:171154;}i:3660;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:22:" settings so that the ";}i:2;i:171156;}i:3661;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"PHP";}i:2;i:171178;}i:3662;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:72:" script can be executed for a longer time. Apache by default closes the ";}i:2;i:171181;}i:3663;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"PHP";}i:2;i:171253;}i:3664;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:95:" execution if it runs for too long. The most flexible way of configuring Apache is through the ";}i:2;i:171256;}i:3665;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:171351;}i:3666;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:9:".htaccess";}i:2;i:171353;}i:3667;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:171362;}i:3668;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:32:" file. This can be done through ";}i:2;i:171364;}i:3669;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:42:"http://davidwalsh.name/php-values-htaccess";i:1;s:18:"setting PHP values";}i:2;i:171396;}i:3670;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:52:". Another way is directly in the script through the ";}i:2;i:171461;}i:3671;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:71:"http://davidwalsh.name/increase-php-script-execution-time-limit-ini_set";i:1;s:18:"ini_set() function";}i:2;i:171513;}i:3672;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:".";}i:2;i:171607;}i:3673;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:171608;}i:3674;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:171608;}i:3675;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:31:"Here's an example of different ";}i:2;i:171610;}i:3676;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"PHP";}i:2;i:171641;}i:3677;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:26:" settings set through the ";}i:2;i:171644;}i:3678;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:171670;}i:3679;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:9:".htaccess";}i:2;i:171672;}i:3680;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:171681;}i:3681;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:71:". Remember this will only apply to applications launched by the Apache ";}i:2;i:171683;}i:3682;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:4:"HTTP";}i:2;i:171754;}i:3683;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:82:" server. If you want it to be a separate long running process, you'll need to use ";}i:2;i:171758;}i:3684;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:171840;}i:3685;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:9:"ini_set()";}i:2;i:171842;}i:3686;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:171851;}i:3687;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:100:" for each individual process, but some of the ini settings wouldn't apply to a command line process.";}i:2;i:171853;}i:3688;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:171953;}i:3689;a:3:{i:0;s:4:"code";i:1;a:3:{i:0;s:495:"
#changes the maximum file size that can be uploaded
php_value upload_max_filesize 2M
#changes in seconds the length of execution
php_value max_execution_time 300
#the time in seconds of how long PHP is allowed to parse GET and POST data
php_value max_input_time 5
#the memory limit that PHP is allowed to occupy (takes up RAM), this can be for one script or the entire PHP application
php_value memory_limit 10M
#the maximum filesize that the POST payload can occupy
php_value post_max_size 2M
";i:1;N;i:2;N;}i:2;i:171960;}i:3690;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:171960;}i:3691;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:30:"You can also investigate more ";}i:2;i:172465;}i:3692;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:51:"http://www.php.net/manual/en/info.configuration.php";i:1;s:47:"configuration settings in the PHP documentation";}i:2;i:172495;}i:3693;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:".";}i:2;i:172598;}i:3694;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:172599;}i:3695;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:172601;}i:3696;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:17:"Hosting Solutions";i:1;i:3;i:2;i:172601;}i:2;i:172601;}i:3697;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:172601;}i:3698;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:172601;}i:3699;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:244:"Not all web hosts will offer concurrent processing features, mainly because running a daemon takes up CPU and resources that cannot be shared across multiple accounts. Here are your options whenever you need to run a daemon or worker processes.";}i:2;i:172630;}i:3700;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:172874;}i:3701;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:172874;}i:3702;a:3:{i:0;s:11:"strong_open";i:1;a:0:{}i:2;i:172876;}i:3703;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:4:"Free";}i:2;i:172878;}i:3704;a:3:{i:0;s:12:"strong_close";i:1;a:0:{}i:2;i:172882;}i:3705;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:0:"";}i:2;i:172884;}i:3706;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:172885;}i:3707;a:3:{i:0;s:10:"listu_open";i:1;a:0:{}i:2;i:172885;}i:3708;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:172885;}i:3709;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:172885;}i:3710;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:5:" Use ";}i:2;i:172889;}i:3711;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:25:"https://www.dotcloud.com/";i:1;s:8:"dotCloud";}i:2;i:172894;}i:3712;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:13:", they offer ";}i:2;i:172932;}i:3713;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:40:"http://docs.dotcloud.com/guides/daemons/";i:1;s:18:"background daemons";}i:2;i:172945;}i:3714;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:48:" and an job queue alternative to Gearman called ";}i:2;i:173008;}i:3715;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:42:"https://github.com/chrisboulton/php-resque";i:1;s:10:"PHP-Resque";}i:2;i:173056;}i:3716;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:19:". They even have a ";}i:2;i:173113;}i:3717;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:46:"http://docs.dotcloud.com/tutorials/php/resque/";i:1;s:31:"guide for setting up PHP-Resque";}i:2;i:173132;}i:3718;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:41:" on themselves. You can learn more about ";}i:2;i:173214;}i:3719;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"PHP";}i:2;i:173255;}i:3720;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:8:"-Resque ";}i:2;i:173258;}i:3721;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:59:"http://www.kamisama.me/2011/11/07/php-rescue-with-phpredis/";i:1;s:4:"here";}i:2;i:173266;}i:3722;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:146:". However do note that their workers cannot communicate TCP or UDP ports (for now) meaning they cannot support Websockets over this configuration.";}i:2;i:173334;}i:3723;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:173480;}i:3724;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:173480;}i:3725;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:173480;}i:3726;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:173480;}i:3727;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:5:" Use ";}i:2;i:173484;}i:3728;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:19:"http://www.iron.io/";i:1;s:7:"Iron.io";}i:2;i:173489;}i:3729;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:28:", they offer a cloud hosted ";}i:2;i:173520;}i:3730;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:25:"http://www.iron.io/worker";i:1;s:14:"worker service";}i:2;i:173548;}i:3731;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:5:" and ";}i:2;i:173592;}i:3732;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:21:"http://www.iron.io/mq";i:1;s:13:"message queue";}i:2;i:173597;}i:3733;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:361:". You can host your workers on their worker service and use their framework to communicate, or you can use their message queue to scale your messaging. This way you can entirely outsource your concurrent processing and job queuing tasks to Iron.io. It may even be possible to run worker daemons that listen on UDP and TCP ports, but this has not been confirmed.";}i:2;i:173636;}i:3734;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:173997;}i:3735;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:173997;}i:3736;a:3:{i:0;s:11:"listu_close";i:1;a:0:{}i:2;i:173997;}i:3737;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:173997;}i:3738;a:3:{i:0;s:11:"strong_open";i:1;a:0:{}i:2;i:173999;}i:3739;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:4:"Paid";}i:2;i:174001;}i:3740;a:3:{i:0;s:12:"strong_close";i:1;a:0:{}i:2;i:174005;}i:3741;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:0:"";}i:2;i:174007;}i:3742;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:174008;}i:3743;a:3:{i:0;s:10:"listu_open";i:1;a:0:{}i:2;i:174008;}i:3744;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:174008;}i:3745;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:174008;}i:3746;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:7:" Buy a ";}i:2;i:174012;}i:3747;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:22:"http://www.linode.com/";i:1;s:6:"Linode";}i:2;i:174019;}i:3748;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:98:" virtual private server. You'll have access to the whole server and you can run anything you want.";}i:2;i:174052;}i:3749;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:174150;}i:3750;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:174150;}i:3751;a:3:{i:0;s:11:"listu_close";i:1;a:0:{}i:2;i:174150;}i:3752;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:174151;}i:3753;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:13:"Sockets & RTC";i:1;i:2;i:2;i:174151;}i:2;i:174151;}i:3754;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:2;}i:2;i:174151;}i:3755;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:174151;}i:3756;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:265:"You've heard of the real time web right? The rise of single page applications? Well these rely on web sockets and occasionally RTC. Before you go ahead with this, you need to understand network programming, the underlying protocols that the internet is built upon. ";}i:2;i:174178;}i:3757;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:57:"http://gafferongames.com/networking-for-game-programmers/";i:1;s:129:"Glenn Fiedler has provided an excellent series of blogs articles talking about network programming geared towards game developers";}i:2;i:174443;}i:3758;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:31:". Read that before you proceed.";}i:2;i:174634;}i:3759;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:174665;}i:3760;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:174665;}i:3761;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"PHP";}i:2;i:174667;}i:3762;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:52:" has one good server side web socket implementation:";}i:2;i:174670;}i:3763;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:174723;}i:3764;a:3:{i:0;s:10:"listu_open";i:1;a:0:{}i:2;i:174723;}i:3765;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:174723;}i:3766;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:174723;}i:3767;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:" ";}i:2;i:174727;}i:3768;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:18:"http://socketo.me/";i:1;s:7:"Ratchet";}i:2;i:174728;}i:3769;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:469:" - Ratchet is a library/framework for asynchronous event based socket programming. This will allow you to create chat servers and other real time updates via socket push. It runs as a daemon similar to Gearman. Well specifically the framework is not a daemon, but any class leveraging Ratchet would be the daemon. This daemon would operate separately from your main solution stack. So make sure to architect it properly. Since it will be on different port to your main ";}i:2;i:174758;}i:3770;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:4:"HTTP";}i:2;i:175227;}i:3771;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:32:" server, you'll need to place a ";}i:2;i:175231;}i:3772;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:22:"http://haproxy.1wt.eu/";i:1;s:7:"HAProxy";}i:2;i:175263;}i:3773;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:139:" in front of both Ratchet and Apache. Then you'll use ZMQ or Gearman to pass messages between your main application and your socket server.";}i:2;i:175297;}i:3774;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:175436;}i:3775;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:175436;}i:3776;a:3:{i:0;s:11:"listu_close";i:1;a:0:{}i:2;i:175436;}i:3777;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:175436;}i:3778;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:191:"There will be no free web hosts that will support a Ratchet configuration, you'll need to purchase a VPS or dedicated host to run this. Another option would be to use the third party service ";}i:2;i:175438;}i:3779;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:18:"http://pusher.com/";i:1;s:6:"Pusher";}i:2;i:175629;}i:3780;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:36:" as your intermediate socket server.";}i:2;i:175658;}i:3781;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:175694;}i:3782;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:175694;}i:3783;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:39:"http://www.scriptol.com/ajax/webrtc.php";i:1;s:7:"Web RTC";}i:2;i:175696;}i:3784;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:30:" is a very new technology, so ";}i:2;i:175747;}i:3785;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:49:"https://labs.ericsson.com/blog/a-web-rtc-tutorial";i:1;s:49:"there aren't many applications of this technology";}i:2;i:175777;}i:3786;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:38:". You can however use the third party ";}i:2;i:175880;}i:3787;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"API";}i:2;i:175918;}i:3788;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:" ";}i:2;i:175921;}i:3789;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:22:"http://www.tokbox.com/";i:1;s:6:"TokBox";}i:2;i:175922;}i:3790;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:18:" for WebRTC video.";}i:2;i:175955;}i:3791;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:175973;}i:3792;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:175973;}i:3793;a:3:{i:0;s:12:"document_end";i:1;a:0:{}i:2;i:175973;}}