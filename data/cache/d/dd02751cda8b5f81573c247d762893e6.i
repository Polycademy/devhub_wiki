a:451:{i:0;a:3:{i:0;s:14:"document_start";i:1;a:0:{}i:2;i:0;}i:1;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:30:"PHP - Server Side Architecture";i:1;i:1;i:2;i:1;}i:2;i:1;}i:2;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:1;}i:2;i:1;}i:3;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:1;}i:4;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"PHP";}i:2;i:47;}i:5;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:80:" is a server side scripting language. It is a dynamic and interpreted language. ";}i:2;i:50;}i:6;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"PHP";}i:2;i:130;}i:7;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:69:" is not compiled. It runs through an interpreter, which is usually a ";}i:2;i:133;}i:8;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"PHP";}i:2;i:202;}i:9;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:99:" processor module that is integrated into a web server. For our purposes, that would be the Apache ";}i:2;i:205;}i:10;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:4:"HTTP";}i:2;i:304;}i:11;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:23:" server which includes ";}i:2;i:308;}i:12;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:331;}i:13;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:7:"mod_php";}i:2;i:333;}i:14;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:340;}i:15;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:26:" as the processor module. ";}i:2;i:342;}i:16;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"PHP";}i:2;i:368;}i:17;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:20:" can also be ran as ";}i:2;i:371;}i:18;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"CGI";}i:2;i:391;}i:19;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:35:", but that is not as common as the ";}i:2;i:394;}i:20;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:429;}i:21;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:7:"mod_php";}i:2;i:431;}i:22;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:438;}i:23;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:64:" method. It started out being an embedded scripting language to ";}i:2;i:440;}i:24;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:4:"HTML";}i:2;i:504;}i:25;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:314:", but grew into a full fledged programming language. It includes its own command line interface and can run as a stand alone server (but only used for development). It is single threaded and share nothing, meaning that it doesn't natively support concurrent processing and it doesn't share data between processes. ";}i:2;i:508;}i:26;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"PHP";}i:2;i:822;}i:27;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:105:" is currently the most widely used web programming language powering Wikipedia, Facebook, Digg and more. ";}i:2;i:825;}i:28;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:930;}i:29;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:930;}i:30;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:44:"While going through this article, try using ";}i:2;i:932;}i:31;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:26:"http://phpbounce.aws.af.cm";i:1;s:9:"PHPBounce";}i:2;i:976;}i:32;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:78:" to quickly test out your code if you don't have a chance to run a web server.";}i:2;i:1016;}i:33;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:1094;}i:34;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:1096;}i:35;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:33:"Object Oriented Programming (OOP)";i:1;i:2;i:2;i:1096;}i:2;i:1096;}i:36;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:2;}i:2;i:1096;}i:37;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:1096;}i:38;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:23:"There four fundamental ";}i:2;i:1143;}i:39;a:3:{i:0;s:13:"interwikilink";i:1;a:4:{i:0;s:23:"wp>Programming paradigm";i:1;s:21:"programming paradigms";i:2;s:2:"wp";i:3;s:20:"Programming paradigm";}i:2;i:1166;}i:40;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:74:". They are object-oriented, imperative, functional and logic programming. ";}i:2;i:1215;}i:41;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"PHP";}i:2;i:1289;}i:42;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:161:" can support multiple paradigms, namely procedural (imperative) and object oriented. It incorporates aspects of functional, but developers don't architect their ";}i:2;i:1292;}i:43;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"PHP";}i:2;i:1453;}i:44;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:76:" applications in a functional way. The most common programming paradigm for ";}i:2;i:1456;}i:45;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"PHP";}i:2;i:1532;}i:46;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:20:" is object oriented.";}i:2;i:1535;}i:47;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:1555;}i:48;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:1555;}i:49;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:823:"Object oriented simply means that we try to separate our programming into logical units of code. Each unit of code is an object. Each object can have multiple data properties that describe the object and multiple functions called methods. When we normally start programming, we naturally start in a procedural manner, specifying a list of tasks and subroutines before getting an end result. However in OOP, each object is an independent unit of code capable of receiving input, processing data and returning output. Each object can call on other objects, be dependent on external objects, or extended from parent objects. Each object has a distinct role. The decision of how granular we want when separating code into objects depends on the complexity of the unit of code. If you can find yourself doing multiple different ";}i:2;i:1557;}i:50;a:3:{i:0;s:13:"emphasis_open";i:1;a:0:{}i:2;i:2380;}i:51;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:5:"types";}i:2;i:2382;}i:52;a:3:{i:0;s:14:"emphasis_close";i:1;a:0:{}i:2;i:2387;}i:53;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:70:" of tasks in one subroutine, then it's probably time to separate each ";}i:2;i:2389;}i:54;a:3:{i:0;s:13:"emphasis_open";i:1;a:0:{}i:2;i:2459;}i:55;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:4:"type";}i:2;i:2461;}i:56;a:3:{i:0;s:14:"emphasis_close";i:1;a:0:{}i:2;i:2465;}i:57;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:69:" of functionality into different objects or different object methods.";}i:2;i:2467;}i:58;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:2536;}i:59;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:2536;}i:60;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:120:"In order to create objects, we actually first specify a class. Classes are blueprints for objects. Objects are actually ";}i:2;i:2538;}i:61;a:3:{i:0;s:13:"emphasis_open";i:1;a:0:{}i:2;i:2658;}i:62;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:9:"instances";}i:2;i:2660;}i:63;a:3:{i:0;s:14:"emphasis_close";i:1;a:0:{}i:2;i:2669;}i:64;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:70:" of classes. So a single class can be used to create multiple objects.";}i:2;i:2671;}i:65;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:2741;}i:66;a:3:{i:0;s:4:"code";i:1;a:3:{i:0;s:158:"
//a class of Elephant, classes are usually capitalised
class Elephant{}

//$elephant is an object instance of the Elephant class
$elephant = new Elephant();
";i:1;s:3:"php";i:2;N;}i:2;i:2748;}i:67;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:2748;}i:68;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:86:"OOP has four main concepts: encapsulation, abstraction, inheritance and polymorphism. ";}i:2;i:2920;}i:69;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:3006;}i:70;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:3008;}i:71;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:13:"Encapsulation";i:1;i:3;i:2;i:3008;}i:2;i:3008;}i:72;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:3008;}i:73;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:3008;}i:74;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:411:"OOP arose from the need to modularise and separate the functionality of software as software grew in complexity. The OOP approach encourages encapsulation which means we should place units of data inside objects which can only be accessed and manipulated through the object's methods. The methods act as intermediaries between different objects. You should never access data properties from the object directly.";}i:2;i:3033;}i:75;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:3444;}i:76;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:3444;}i:77;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:222:"The motivation for encapsulation is discipline and abstraction. By encapsulating the data properties and thus the state of the object, we're hiding the implementation details of the object, but instead providing an method ";}i:2;i:3446;}i:78;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"API";}i:2;i:3668;}i:79;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:205:" that external objects can access. This helps with the abstraction process by providing a consistent way of accessing objects. This discipline is also useful when software development takes place in teams.";}i:2;i:3671;}i:80;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:3876;}i:81;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:3876;}i:82;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:184:"Furthermore since the data properties are hidden, and only the names of methods are accessible, we can change the implementation details of the object without worrying of breaking the ";}i:2;i:3878;}i:83;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"API";}i:2;i:4062;}i:84;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:19:" for other objects.";}i:2;i:4065;}i:85;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:4084;}i:86;a:3:{i:0;s:4:"code";i:1;a:3:{i:0;s:666:"
class Elephant{

    //encapsulated private data property of $_colour. The private makes it only accessible within the object's instance using $this. This underscore is only a convention of prefixing private or protected variables.
    private $_colour;
    
    //public accessor method that sets the $_colour and echos it
    public function set_colour($colour){
        $this->_colour = $colour;
        echo $colour;
    }
  
}

$red_elephant = new Elephant();
//we can access the public method that acts as the intermediary to the private data property
$red_elephant->set_colour('red');

$green_elephant = new Elephant();
$green_elephant->set_colour('green');
";i:1;s:3:"php";i:2;N;}i:2;i:4091;}i:87;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:4770;}i:88;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:11:"Abstraction";i:1;i:3;i:2;i:4770;}i:2;i:4770;}i:89;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:4770;}i:90;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:4770;}i:91;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:332:"Encapsulation is actually technique of a more generic concept called abstraction. Objects should be abstracted. This means that the concrete implementation details should be hidden and abstracted away, so that only contextually important methods are available at a particular perspective. Here's a couple examples: the concept of a ";}i:2;i:4793;}i:92;a:3:{i:0;s:18:"doublequoteopening";i:1;a:0:{}i:2;i:5125;}i:93;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:4:"List";}i:2;i:5126;}i:94;a:3:{i:0;s:18:"doublequoteclosing";i:1;a:0:{}i:2;i:5130;}i:95;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:22:" is an abstraction of ";}i:2;i:5131;}i:96;a:3:{i:0;s:18:"doublequoteopening";i:1;a:0:{}i:2;i:5153;}i:97;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:10:"Fruit List";}i:2;i:5154;}i:98;a:3:{i:0;s:18:"doublequoteclosing";i:1;a:0:{}i:2;i:5164;}i:99;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:4:" or ";}i:2;i:5165;}i:100;a:3:{i:0;s:18:"doublequoteopening";i:1;a:0:{}i:2;i:5169;}i:101;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:8:"Car List";}i:2;i:5170;}i:102;a:3:{i:0;s:18:"doublequoteclosing";i:1;a:0:{}i:2;i:5178;}i:103;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:19:". The concept of a ";}i:2;i:5179;}i:104;a:3:{i:0;s:18:"doublequoteopening";i:1;a:0:{}i:2;i:5198;}i:105;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:12:"Living Thing";}i:2;i:5199;}i:106;a:3:{i:0;s:18:"doublequoteclosing";i:1;a:0:{}i:2;i:5211;}i:107;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:22:" is an abstraction of ";}i:2;i:5212;}i:108;a:3:{i:0;s:18:"doublequoteopening";i:1;a:0:{}i:2;i:5234;}i:109;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:7:"Animals";}i:2;i:5235;}i:110;a:3:{i:0;s:18:"doublequoteclosing";i:1;a:0:{}i:2;i:5242;}i:111;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:28:" which is an abstraction of ";}i:2;i:5243;}i:112;a:3:{i:0;s:18:"doublequoteopening";i:1;a:0:{}i:2;i:5271;}i:113;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:3:"Dog";}i:2;i:5272;}i:114;a:3:{i:0;s:18:"doublequoteclosing";i:1;a:0:{}i:2;i:5275;}i:115;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:17:". The concept of ";}i:2;i:5276;}i:116;a:3:{i:0;s:18:"doublequoteopening";i:1;a:0:{}i:2;i:5293;}i:117;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:6:"People";}i:2;i:5294;}i:118;a:3:{i:0;s:18:"doublequoteclosing";i:1;a:0:{}i:2;i:5300;}i:119;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:33:" is an abstraction of the person ";}i:2;i:5301;}i:120;a:3:{i:0;s:18:"doublequoteopening";i:1;a:0:{}i:2;i:5334;}i:121;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:5:"Roger";}i:2;i:5335;}i:122;a:3:{i:0;s:18:"doublequoteclosing";i:1;a:0:{}i:2;i:5340;}i:123;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:5:" and ";}i:2;i:5341;}i:124;a:3:{i:0;s:18:"doublequoteopening";i:1;a:0:{}i:2;i:5346;}i:125;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:7:"Matthew";}i:2;i:5347;}i:126;a:3:{i:0;s:18:"doublequoteclosing";i:1;a:0:{}i:2;i:5354;}i:127;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:122:". When constructing an object, the available object properties should be relevant to the context of which it is used. All ";}i:2;i:5355;}i:128;a:3:{i:0;s:18:"doublequoteopening";i:1;a:0:{}i:2;i:5477;}i:129;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:6:"People";}i:2;i:5478;}i:130;a:3:{i:0;s:18:"doublequoteclosing";i:1;a:0:{}i:2;i:5484;}i:131;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:40:" may have heights and weights, but only ";}i:2;i:5485;}i:132;a:3:{i:0;s:18:"doublequoteopening";i:1;a:0:{}i:2;i:5525;}i:133;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:5:"Roger";}i:2;i:5526;}i:134;a:3:{i:0;s:18:"doublequoteclosing";i:1;a:0:{}i:2;i:5531;}i:135;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:22:" has a preference for ";}i:2;i:5532;}i:136;a:3:{i:0;s:18:"doublequoteopening";i:1;a:0:{}i:2;i:5554;}i:137;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:13:"Action Movies";}i:2;i:5555;}i:138;a:3:{i:0;s:18:"doublequoteclosing";i:1;a:0:{}i:2;i:5568;}i:139;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:10:" and only ";}i:2;i:5569;}i:140;a:3:{i:0;s:18:"doublequoteopening";i:1;a:0:{}i:2;i:5579;}i:141;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:7:"Matthew";}i:2;i:5580;}i:142;a:3:{i:0;s:18:"doublequoteclosing";i:1;a:0:{}i:2;i:5587;}i:143;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:21:" has a tattoo saying ";}i:2;i:5588;}i:144;a:3:{i:0;s:18:"doublequoteopening";i:1;a:0:{}i:2;i:5609;}i:145;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:11:"I'm Awesome";}i:2;i:5610;}i:146;a:3:{i:0;s:18:"doublequoteclosing";i:1;a:0:{}i:2;i:5621;}i:147;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:27:". So when I'm defining the ";}i:2;i:5622;}i:148;a:3:{i:0;s:18:"doublequoteopening";i:1;a:0:{}i:2;i:5649;}i:149;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:6:"People";}i:2;i:5650;}i:150;a:3:{i:0;s:18:"doublequoteclosing";i:1;a:0:{}i:2;i:5656;}i:151;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:145:" object, it should not have properties of movie preferences or tattoos, those are not contextually relevant to how I would perceive or represent ";}i:2;i:5657;}i:152;a:3:{i:0;s:18:"doublequoteopening";i:1;a:0:{}i:2;i:5802;}i:153;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:6:"People";}i:2;i:5803;}i:154;a:3:{i:0;s:18:"doublequoteclosing";i:1;a:0:{}i:2;i:5809;}i:155;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:24:" as an abstract concept.";}i:2;i:5810;}i:156;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:5834;}i:157;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:5834;}i:158;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:200:"Abstraction is achieved by encapsulating concrete implementation details, but it can also be achieved by leaving concrete implementation details later to extend the abstract class as the parent class.";}i:2;i:5836;}i:159;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:6037;}i:160;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:6037;}i:161;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:11:"Inheritance";i:1;i:3;i:2;i:6037;}i:2;i:6037;}i:162;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:6037;}i:163;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:6037;}i:164;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:292:"Inheritance can be used to establish an abstract hierarchy of concepts and objects. At the same time because we're not rewriting the parent class's code, we enhance code reuse. Essentially child classes can inherit from parent classes, so that it inherits its parent's properties and methods.";}i:2;i:6060;}i:165;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:6352;}i:166;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:6352;}i:167;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:98:"Methods specified in the parent classes can be overwritten by child classes unless finalised with ";}i:2;i:6354;}i:168;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:6452;}i:169;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:6:"final ";}i:2;i:6454;}i:170;a:3:{i:0;s:13:"emphasis_open";i:1;a:0:{}i:2;i:6460;}i:171;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:5:"scope";}i:2;i:6462;}i:172;a:3:{i:0;s:14:"emphasis_close";i:1;a:0:{}i:2;i:6467;}i:173;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:10:" function ";}i:2;i:6469;}i:174;a:3:{i:0;s:13:"emphasis_open";i:1;a:0:{}i:2;i:6479;}i:175;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:4:"name";}i:2;i:6481;}i:176;a:3:{i:0;s:14:"emphasis_close";i:1;a:0:{}i:2;i:6485;}i:177;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:2:"{}";}i:2;i:6487;}i:178;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:6489;}i:179;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:2:". ";}i:2;i:6491;}i:180;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"PHP";}i:2;i:6493;}i:181;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:182:" also does not support multiple inheritance, so a child can only inherit from one parent. However there are different strategies to overcome this. Classes can also chain inheritance.";}i:2;i:6496;}i:182;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:6678;}i:183;a:3:{i:0;s:4:"code";i:1;a:3:{i:0;s:807:"
class Animal{

    //private scoped variables will not be accessible in the child classes
    private $_exists = true;
    
    //protected scoped variables are accessible in the child class but not outside of the class
    protected $_breathing_noise = 'breathing';
    
    public function breathe(){
        echo $this->_breathing_noise;
    }
    
}

//Elephant is a child of the abstract parent Animal class
class Elephant extends Animal{
    
    private $_colour;
    
    public function set_colour($colour){
        $this->_colour = $colour;
        echo $colour;
    }
    
    public function set_breathing($noise){
        $this->_breathing_noise = $noise;
    }
    
}
     
$elephant = new Elephant();
$elephant->set_colour('red');
$elephant->set_breathing('HRRUMPH!');
$elephant->breathe();
";i:1;s:3:"php";i:2;N;}i:2;i:6685;}i:184;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:7506;}i:185;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:12:"Polymorphism";i:1;i:3;i:2;i:7506;}i:2;i:7506;}i:186;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:7506;}i:187;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:7506;}i:188;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:337:"Simply put polymorphism is simply that classes can have different functionality and yet share the same interface. Essentially you would be able to call a method that has a name that is shared by classes which occupy the same abstraction but have different functionality. The point is so that you can write less code by having to specify ";}i:2;i:7530;}i:189;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:7867;}i:190;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:2:"if";}i:2;i:7869;}i:191;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:7871;}i:192;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:256:" statements to switch functionality based on some context. This also means when you're working in teams you can know that the classes with have the same kinds of APIs even though they do different things, especially when they are all used in the same ways.";}i:2;i:7873;}i:193;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:8129;}i:194;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:8129;}i:195;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:219:"An example would be a button. Everybody knows how to interact with a button. You either press it or you don't. But what the button does, who knows? So all buttons should have the same interface, such as a method called ";}i:2;i:8131;}i:196;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:8350;}i:197;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:5:"press";}i:2;i:8352;}i:198;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:8357;}i:199;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:".";}i:2;i:8359;}i:200;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:8360;}i:201;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:8360;}i:202;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:76:"Polymorphism is supported by two extra constructs: Interfaces and Abstracts.";}i:2;i:8362;}i:203;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:8438;}i:204;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:8440;}i:205;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:10:"Interfaces";i:1;i:4;i:2;i:8440;}i:2;i:8440;}i:206;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:4;}i:2;i:8440;}i:207;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:8440;}i:208;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:16:"INTERFACES why? ";}i:2;i:8460;}i:209;a:3:{i:0;s:6:"entity";i:1;a:1:{i:0;s:2:"->";}i:2;i:8476;}i:210;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:293:" For teams and for dependency injection.
Basically you type hint in the constructor for an object to be injected but also to implement a interface contract.
The interface is like the blueprint for your classes.
You can be assured that all classes implementing this interface will have a fixed ";}i:2;i:8478;}i:211;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"API";}i:2;i:8771;}i:212;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:176:".
Then if you are swapping out your classes to something else, you can pass in a new object that still implements that interface, and you don't have to worry about whether the ";}i:2;i:8774;}i:213;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"API";}i:2;i:8950;}i:214;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:285:" methods change. They still work the same.
Interfaces can be combined too, to provide some sort of super class implementation. So this class can be used anywhere or either-or. Regardless of whether the type hint is for the first interface or for the second interface. It'll still work!";}i:2;i:8953;}i:215;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:9238;}i:216;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:9238;}i:217;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:72:"Use interfaces to group related classes that are meant to have the same ";}i:2;i:9240;}i:218;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"API";}i:2;i:9312;}i:219;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:".";}i:2;i:9315;}i:220;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:9316;}i:221;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:9318;}i:222;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:9:"Abstracts";i:1;i:4;i:2;i:9318;}i:2;i:9318;}i:223;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:4;}i:2;i:9318;}i:224;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:9318;}i:225;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:273:"Use abstracts to provide a boilerplate class. Like a parent class which has some common methods, and yet has methods that has to be implemented. Abstract methods have to be either protected or public which then has to be represented. You can only inherit from one abstract.";}i:2;i:9337;}i:226;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:9610;}i:227;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:9610;}i:228;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:19:"Use abstracts as a ";}i:2;i:9612;}i:229;a:3:{i:0;s:11:"strong_open";i:1;a:0:{}i:2;i:9631;}i:230;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:40:"parent class that needs to have children";}i:2;i:9633;}i:231;a:3:{i:0;s:12:"strong_close";i:1;a:0:{}i:2;i:9673;}i:232;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:37:". Not just any standard parent class.";}i:2;i:9675;}i:233;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:9712;}i:234;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:9712;}i:235;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:20:"Like abstract armor ";}i:2;i:9714;}i:236;a:3:{i:0;s:6:"entity";i:1;a:1:{i:0;s:2:"->";}i:2;i:9734;}i:237;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:811:" chinese armor, european armor. Abstract armor and abstract sword can implement physical_object interface. The interface can specify that all physical_objects need weight method. The abstract armor leaves the weight undefined, but requires an abstract of blacksmith and defines a common function of armor rating calculation. Then Chinese_Armor extends abstract Armor. This creates the weight function as defined by interface and blacksmith function as defined by the abstract. It creates a protection function unique to Chinese_Armor. Then we create a Fight function that type hints for either Physical Object, or Ab_Armor. We create the Chinese_Armor and pass the dependency into the constructor dependency injection. Then in the fight we use the protection function. Note that the abstract can reference $this";}i:2;i:9736;}i:238;a:3:{i:0;s:6:"entity";i:1;a:1:{i:0;s:2:"->";}i:2;i:10547;}i:239;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:175:"weight even though it hasn't been defined, this is because the interface says it will be implemented, so the abstract can rely on this. Abstracts are never used by themselves.";}i:2;i:10549;}i:240;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:10724;}i:241;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:10726;}i:242;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:21:"Model View Controller";i:1;i:2;i:2;i:10726;}i:2;i:10726;}i:243;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:2;}i:2;i:10726;}i:244;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:10726;}i:245;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:33:"Diagram of MVC including a router";}i:2;i:10761;}i:246;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:10794;}i:247;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:10794;}i:248;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:22:"Separation of concerns";}i:2;i:10796;}i:249;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:10818;}i:250;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:10820;}i:251;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:5:"Model";i:1;i:3;i:2;i:10820;}i:2;i:10820;}i:252;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:10820;}i:253;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:10837;}i:254;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:4:"View";i:1;i:3;i:2;i:10837;}i:2;i:10837;}i:255;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:10837;}i:256;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:10853;}i:257;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:10:"Controller";i:1;i:3;i:2;i:10853;}i:2;i:10853;}i:258;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:10853;}i:259;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:10875;}i:260;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:10:"Templating";i:1;i:2;i:2;i:10875;}i:2;i:10875;}i:261;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:2;}i:2;i:10875;}i:262;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:10875;}i:263;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:18:"What is templating";}i:2;i:10899;}i:264;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:10917;}i:265;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:10919;}i:266;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:15:"Using Libraries";i:1;i:2;i:2;i:10919;}i:2;i:10919;}i:267;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:2;}i:2;i:10919;}i:268;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:10919;}i:269;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:8:"CI style";}i:2;i:10948;}i:270;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:10956;}i:271;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:10956;}i:272;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:8:"Composer";}i:2;i:10958;}i:273;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:10966;}i:274;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:10966;}i:275;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:6:"Sparks";}i:2;i:10968;}i:276;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:10974;}i:277;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:10974;}i:278;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:10:"Namespaces";}i:2;i:10976;}i:279;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:10986;}i:280;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:10986;}i:281;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:11:"Autoloading";}i:2;i:10988;}i:282;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:10999;}i:283;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:10999;}i:284;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:42:"Autoloading works with Codeigniter aswell.";}i:2;i:11001;}i:285;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:11043;}i:286;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:11043;}i:287;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:43:"You need to enable hooks on the config.php.";}i:2;i:11045;}i:288;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:11088;}i:289;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:11088;}i:290;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:24:"Then in hooks.php define";}i:2;i:11090;}i:291;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:11114;}i:292;a:3:{i:0;s:4:"code";i:1;a:3:{i:0;s:185:"
//pre_system autoloader
$hook['pre_system'] = array(
    'class' => 'Autoloader',
    'function'  => '__construct',
    'filename'  => 'Autoloader.php',
    'filepath'  => 'hooks',
);
";i:1;s:3:"php";i:2;s:9:"hooks.php";}i:2;i:11121;}i:293;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:11121;}i:294;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:361:"Place this into the hooks directory. It is a PSR-0 compliant autoloader.
Do not use underscores in your library names, (_). They will be translated into directories.
All folders and files should be Capitalised and Camelcased.
Interfaces and Abstracts can be placed as iInterface or aAbstract and polaced in Interface and Abstract folder.
Use namespaces and use ";}i:2;i:11330;}i:295;a:3:{i:0;s:18:"doublequoteopening";i:1;a:0:{}i:2;i:11691;}i:296;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:3:"use";}i:2;i:11692;}i:297;a:3:{i:0;s:18:"doublequoteclosing";i:1;a:0:{}i:2;i:11695;}i:298;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:271:" to import aliases. Import straight to the file. Then initialise classes automagically. Use fully qualified names to access static classes or library classes.
Place static classes in the library folder.
Capable of using third_party too.
Folder names can have underscores.";}i:2;i:11696;}i:299;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:11967;}i:300;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:11967;}i:301;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:7:"If the ";}i:2;i:11969;}i:302;a:3:{i:0;s:18:"doublequoteopening";i:1;a:0:{}i:2;i:11976;}i:303;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:3:"use";}i:2;i:11977;}i:304;a:3:{i:0;s:18:"doublequoteclosing";i:1;a:0:{}i:2;i:11980;}i:305;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:420:" keyword only points to a directory and not to a specific file, that all of those files become fair game. However you need to use the last namespace directory and prefix to all class initialisations. Like use Phpbounce\Mission_checker;
Then your initialisations would be new Mission_checker\Lint(); There's no need to specify the filenames. The filenames should always be the same as the class names. One class per file.";}i:2;i:11981;}i:306;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:12401;}i:307;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:12403;}i:308;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:8:"Database";i:1;i:2;i:2;i:12403;}i:2;i:12403;}i:309;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:2;}i:2;i:12403;}i:310;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:12403;}i:311;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"SQL";}i:2;i:12425;}i:312;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:12428;}i:313;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:12428;}i:314;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:5:"NoSQL";}i:2;i:12430;}i:315;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:12435;}i:316;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:12435;}i:317;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:44:"Persistent vs Non-Persistent (volatile data)";}i:2;i:12437;}i:318;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:12481;}i:319;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:12481;}i:320;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:34:"Caching with Redis or session data";}i:2;i:12483;}i:321;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:12517;}i:322;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:12517;}i:323;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:23:"Transactions and ATOMIC";}i:2;i:12519;}i:324;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:12542;}i:325;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:12542;}i:326;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:24:"Searching with full text";}i:2;i:12544;}i:327;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:12568;}i:328;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:12570;}i:329;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:8:"Security";i:1;i:2;i:2;i:12570;}i:2;i:12570;}i:330;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:2;}i:2;i:12570;}i:331;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:12570;}i:332;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:23:"Should make a security ";}i:2;i:12592;}i:333;a:3:{i:0;s:18:"doublequoteopening";i:1;a:0:{}i:2;i:12615;}i:334;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:9:"checklist";}i:2;i:12616;}i:335;a:3:{i:0;s:18:"doublequoteclosing";i:1;a:0:{}i:2;i:12625;}i:336;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:19:" before deployment.";}i:2;i:12626;}i:337;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:12645;}i:338;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:12645;}i:339;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:23:"Input validation + CSRF";}i:2;i:12647;}i:340;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:12670;}i:341;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:12670;}i:342;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:18:"Handling Passwords";}i:2;i:12672;}i:343;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:12690;}i:344;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:12690;}i:345;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:34:"Handling payments and credit cards";}i:2;i:12692;}i:346;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:12726;}i:347;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:12728;}i:348;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:25:"Sessions & Authentication";i:1;i:2;i:2;i:12728;}i:2;i:12728;}i:349;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:2;}i:2;i:12728;}i:350;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:12728;}i:351;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:19:"Cursory note about ";}i:2;i:12767;}i:352;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:4:"AJAX";}i:2;i:12786;}i:353;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:".";}i:2;i:12790;}i:354;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:12791;}i:355;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:12793;}i:356;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:9:".htaccess";i:1;i:2;i:2;i:12793;}i:2;i:12793;}i:357;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:2;}i:2;i:12793;}i:358;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:12793;}i:359;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:10:"For apache";}i:2;i:12816;}i:360;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:12826;}i:361;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:12826;}i:362;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"URL";}i:2;i:12828;}i:363;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:10:" rewriting";}i:2;i:12831;}i:364;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:12841;}i:365;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:12841;}i:366;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:16:"GZIP Compression";}i:2;i:12843;}i:367;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:12859;}i:368;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:12861;}i:369;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:7:"Caching";i:1;i:2;i:2;i:12861;}i:2;i:12861;}i:370;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:2;}i:2;i:12861;}i:371;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:12861;}i:372;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:16:"Database Caching";}i:2;i:12882;}i:373;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:12898;}i:374;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:12898;}i:375;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:12:"View Caching";}i:2;i:12900;}i:376;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:12912;}i:377;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:12912;}i:378;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:18:"APC Opcode Caching";}i:2;i:12914;}i:379;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:12932;}i:380;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:12932;}i:381;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:12:"File caching";}i:2;i:12934;}i:382;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:12946;}i:383;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:12946;}i:384;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:8:"Memcache";}i:2;i:12948;}i:385;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:12956;}i:386;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:12958;}i:387;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:21:"Concurrent Processing";i:1;i:2;i:2;i:12958;}i:2;i:12958;}i:388;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:2;}i:2;i:12958;}i:389;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:12958;}i:390;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:15:"Multithreading ";}i:2;i:12993;}i:391;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"PHP";}i:2;i:13008;}i:392;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:21:" is not multithreaded";}i:2;i:13011;}i:393;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:13032;}i:394;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:13032;}i:395;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:96:"For offloading work (image thumbnailing), distributing work (getting data from multiple places).";}i:2;i:13034;}i:396;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:13130;}i:397;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:13130;}i:398;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:13:"Using daemons";}i:2;i:13132;}i:399;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:13145;}i:400;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:13145;}i:401;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:9:"Using ZMQ";}i:2;i:13147;}i:402;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:13156;}i:403;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:13156;}i:404;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:21:"Using Gearman workers";}i:2;i:13158;}i:405;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:13179;}i:406;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:13179;}i:407;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:167:"A note due to host environments, you may not able to use daemons, zmq or gearman. You may then have to use hacks, or use dotCloud's workers. Or thirdparty the workers.";}i:2;i:13181;}i:408;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:13348;}i:409;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:13348;}i:410;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:37:"Use Supervisor to keep track of tasks";}i:2;i:13350;}i:411;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:13387;}i:412;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:13389;}i:413;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:27:"Consuming Web Services APIs";i:1;i:2;i:2;i:13389;}i:2;i:13389;}i:414;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:2;}i:2;i:13389;}i:415;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:13389;}i:416;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:10:"Using REST";}i:2;i:13430;}i:417;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:13440;}i:418;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:13440;}i:419;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:5:"Oauth";}i:2;i:13442;}i:420;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:13447;}i:421;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:13447;}i:422;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:6:"Oauth2";}i:2;i:13449;}i:423;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:13455;}i:424;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:13457;}i:425;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:27:"Providing Web Services APIs";i:1;i:2;i:2;i:13457;}i:2;i:13457;}i:426;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:2;}i:2;i:13457;}i:427;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:13457;}i:428;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:14:"REST provision";}i:2;i:13498;}i:429;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:13512;}i:430;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:13512;}i:431;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:15:"Oauth Provision";}i:2;i:13514;}i:432;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:13529;}i:433;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:13529;}i:434;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:4:"JSON";}i:2;i:13531;}i:435;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:13535;}i:436;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:13535;}i:437;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:7:"Pusher ";}i:2;i:13537;}i:438;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"API";}i:2;i:13544;}i:439;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:13547;}i:440;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:13549;}i:441;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:13:"Sockets & RTC";i:1;i:2;i:2;i:13549;}i:2;i:13549;}i:442;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:2;}i:2;i:13549;}i:443;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:13549;}i:444;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:53:"Sockets using Ratchet (daemons) (Pub/Sub) and HAProxy";}i:2;i:13576;}i:445;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:13629;}i:446;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:13629;}i:447;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:28:"RTC (tokbox) and UDP and TCP";}i:2;i:13631;}i:448;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:13659;}i:449;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:13659;}i:450;a:3:{i:0;s:12:"document_end";i:1;a:0:{}i:2;i:13659;}}