<span class="kw2">interface</span> iAdd<span class="br0">&#123;</span>
&nbsp;
    <span class="co1">//interfaces can also demand parameters</span>
    <span class="kw2">public</span> <span class="kw2">function</span> add<span class="br0">&#40;</span><span class="re0">$one</span><span class="sy0">,</span> <span class="re0">$two</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
<span class="br0">&#125;</span>
&nbsp;
<span class="kw2">class</span> Calculator implements iAdd<span class="br0">&#123;</span>
&nbsp;
    <span class="kw2">public</span> <span class="kw2">function</span> add<span class="br0">&#40;</span><span class="re0">$one</span><span class="sy0">,</span> <span class="re0">$two</span><span class="br0">&#41;</span><span class="br0">&#123;</span>
        <span class="re0">$result</span> <span class="sy0">=</span> <span class="re0">$one</span> <span class="sy0">+</span> <span class="re0">$two</span><span class="sy0">;</span>
        <span class="kw1">return</span> <span class="re0">$result</span><span class="sy0">;</span>
    <span class="br0">&#125;</span>
&nbsp;
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
<span class="kw2">class</span> Calculation<span class="br0">&#123;</span>
&nbsp;
    <span class="co1">//the iAdd type hint here forces the $calculator to be any object that implements the iAdd interface, because Calculation is expecting the add method which is guaranteed by the iAdd interface</span>
    <span class="kw2">public</span> <span class="kw2">function</span> __construct<span class="br0">&#40;</span>iAdd <span class="re0">$calculator</span><span class="sy0">,</span> <span class="re0">$one</span><span class="sy0">,</span> <span class="re0">$two</span><span class="br0">&#41;</span><span class="br0">&#123;</span>
        <span class="re0">$result</span> <span class="sy0">=</span> <span class="re0">$calculator</span><span class="sy0">-&gt;</span><span class="me1">add</span><span class="br0">&#40;</span><span class="re0">$one</span><span class="sy0">,</span> <span class="re0">$two</span><span class="br0">&#41;</span><span class="sy0">;</span>
        <span class="kw1">echo</span> <span class="re0">$result</span><span class="sy0">;</span>
    <span class="br0">&#125;</span>
&nbsp;
<span class="br0">&#125;</span>
&nbsp;
<span class="co1">//if I passed in an object that didn't implement the iAdd interface, the typehint would cause a fatal error</span>
<span class="co1">//you may notice that this object instantiation has parentheses &quot;()&quot;, these are used when there is a __construct method, which is called as soon as the object is instantiated</span>
<span class="re0">$calculation</span> <span class="sy0">=</span> <span class="kw2">new</span> Calculation<span class="br0">&#40;</span><span class="kw2">new</span> Calculator<span class="sy0">,</span> <span class="nu0">5</span><span class="sy0">,</span> <span class="nu0">6</span><span class="br0">&#41;</span><span class="sy0">;</span>