a:344:{i:0;a:3:{i:0;s:14:"document_start";i:1;a:0:{}i:2;i:0;}i:1;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:15:"Web Programming";i:1;i:1;i:2;i:1;}i:2;i:1;}i:2;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:1;}i:2;i:1;}i:3;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:1;}i:4;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:40:"Intro to web programming, separate into ";}i:2;i:32;}i:5;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"PHP";}i:2;i:72;}i:6;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:5:" and ";}i:2;i:75;}i:7;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:2:"JS";}i:2;i:80;}i:8;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:".";}i:2;i:82;}i:9;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:83;}i:10;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:85;}i:11;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:6:"Syntax";i:1;i:2;i:2;i:85;}i:2;i:85;}i:12;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:2;}i:2;i:85;}i:13;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:85;}i:14;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:33:"Refer to documentation for syntax";}i:2;i:105;}i:15;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:138;}i:16;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:138;}i:17;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"PHP";}i:2;i:140;}i:18;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:36:".net, PHPBounce, PHPMaster, Net tuts";}i:2;i:143;}i:19;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:179;}i:20;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:179;}i:21;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:14:"MDN, Books on ";}i:2;i:181;}i:22;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:2:"JS";}i:2;i:195;}i:23;a:3:{i:0;s:6:"entity";i:1;a:1:{i:0;s:3:"...";}i:2;i:197;}i:24;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:11:" Codecademy";}i:2;i:200;}i:25;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:211;}i:26;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:213;}i:27;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:10:"Frameworks";i:1;i:2;i:2;i:213;}i:2;i:213;}i:28;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:2;}i:2;i:213;}i:29;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:213;}i:30;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:14:"Refer to these";}i:2;i:237;}i:31;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:251;}i:32;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:251;}i:33;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:22:"Codeigniter User Guide";}i:2;i:253;}i:34;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:275;}i:35;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:8:"imagebox";i:1;a:2:{i:0;i:1;i:1;a:11:{s:4:"type";s:13:"internalmedia";s:3:"src";s:64:":web_application_development:jquery_application_architecture.jpg";s:5:"title";s:0:"";s:5:"align";s:5:"right";s:5:"width";s:3:"200";s:6:"height";N;s:5:"cache";s:5:"cache";s:7:"linking";s:7:"details";s:1:"w";s:3:"200";s:6:"detail";s:174:"/polycademy_projects/devhub_wiki/lib/exe/detail.php?id=web_application_development%3Aweb_programming&amp;media=web_application_development:jquery_application_architecture.jpg";s:5:"exist";b:1;}}i:2;i:1;i:3;s:73:"[{{ :web_application_development:jquery_application_architecture.jpg?200|";}i:2;i:278;}i:36;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:8:"imagebox";i:1;a:2:{i:0;i:3;i:1;s:37:"jQuery Application Architecture Guide";}i:2;i:3;i:3;s:37:"jQuery Application Architecture Guide";}i:2;i:351;}i:37;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:8:"imagebox";i:1;a:2:{i:0;i:4;i:1;s:3:"}}]";}i:2;i:4;i:3;s:3:"}}]";}i:2;i:388;}i:38;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:388;}i:39;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:19:"Javascript MVC docs";}i:2;i:393;}i:40;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:412;}i:41;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:412;}i:42;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:11:"JQuery Docs";}i:2;i:414;}i:43;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:425;}i:44;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:427;}i:45;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:12:"Architecture";i:1;i:2;i:2;i:427;}i:2;i:427;}i:46;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:2;}i:2;i:427;}i:47;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:453;}i:48;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:35:"Understanding the Application Stack";i:1;i:3;i:2;i:453;}i:2;i:453;}i:49;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:453;}i:50;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:500;}i:51;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:26:"Consuming Web Services API";i:1;i:3;i:2;i:500;}i:2;i:500;}i:52;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:500;}i:53;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:500;}i:54;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:10:"REST style";}i:2;i:538;}i:55;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:548;}i:56;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:548;}i:57;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:12:"Client Heavy";}i:2;i:550;}i:58;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:562;}i:59;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:562;}i:60;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:22:"Composer (third party)";}i:2;i:564;}i:61;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:586;}i:62;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:586;}i:63;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:5:"MVC, ";}i:2;i:588;}i:64;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:2:"JS";}i:2;i:593;}i:65;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:10:" based MVC";}i:2;i:595;}i:66;a:3:{i:0;s:6:"entity";i:1;a:1:{i:0;s:3:"...";}i:2;i:605;}i:67;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:608;}i:68;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:608;}i:69;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:10:"Templating";}i:2;i:610;}i:70;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:620;}i:71;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:620;}i:72;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:10:"Namespaces";}i:2;i:622;}i:73;a:3:{i:0;s:6:"entity";i:1;a:1:{i:0;s:3:"...";}i:2;i:632;}i:74;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:4:" etc";}i:2;i:635;}i:75;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:639;}i:76;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:641;}i:77;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:11:"Autoloading";i:1;i:3;i:2;i:641;}i:2;i:641;}i:78;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:641;}i:79;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:641;}i:80;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:42:"Autoloading works with Codeigniter aswell.";}i:2;i:664;}i:81;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:706;}i:82;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:706;}i:83;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:43:"You need to enable hooks on the config.php.";}i:2;i:708;}i:84;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:751;}i:85;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:751;}i:86;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:24:"Then in hooks.php define";}i:2;i:753;}i:87;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:777;}i:88;a:3:{i:0;s:4:"code";i:1;a:3:{i:0;s:185:"
//pre_system autoloader
$hook['pre_system'] = array(
    'class' => 'Autoloader',
    'function'  => '__construct',
    'filename'  => 'Autoloader.php',
    'filepath'  => 'hooks',
);
";i:1;s:3:"php";i:2;s:9:"hooks.php";}i:2;i:784;}i:89;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:784;}i:90;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:361:"Place this into the hooks directory. It is a PSR-0 compliant autoloader.
Do not use underscores in your library names, (_). They will be translated into directories.
All folders and files should be Capitalised and Camelcased.
Interfaces and Abstracts can be placed as iInterface or aAbstract and polaced in Interface and Abstract folder.
Use namespaces and use ";}i:2;i:993;}i:91;a:3:{i:0;s:18:"doublequoteopening";i:1;a:0:{}i:2;i:1354;}i:92;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:3:"use";}i:2;i:1355;}i:93;a:3:{i:0;s:18:"doublequoteclosing";i:1;a:0:{}i:2;i:1358;}i:94;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:271:" to import aliases. Import straight to the file. Then initialise classes automagically. Use fully qualified names to access static classes or library classes.
Place static classes in the library folder.
Capable of using third_party too.
Folder names can have underscores.";}i:2;i:1359;}i:95;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:1630;}i:96;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:1630;}i:97;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:7:"If the ";}i:2;i:1632;}i:98;a:3:{i:0;s:18:"doublequoteopening";i:1;a:0:{}i:2;i:1639;}i:99;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:3:"use";}i:2;i:1640;}i:100;a:3:{i:0;s:18:"doublequoteclosing";i:1;a:0:{}i:2;i:1643;}i:101;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:420:" keyword only points to a directory and not to a specific file, that all of those files become fair game. However you need to use the last namespace directory and prefix to all class initialisations. Like use Phpbounce\Mission_checker;
Then your initialisations would be new Mission_checker\Lint(); There's no need to specify the filenames. The filenames should always be the same as the class names. One class per file.";}i:2;i:1644;}i:102;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:2064;}i:103;a:3:{i:0;s:4:"code";i:1;a:3:{i:0;s:2124:"
<?php

class Autoloader{
    
    public function __construct(){
        
        //LOADING COMPOSER
        if(file_exists(FCPATH . '/vendor/autoload.php')){
            include_once FCPATH . '/vendor/autoload.php';
        }
        
        //STANDARD AUTOLOADER
        spl_autoload_register(array($this, 'autoload'));
        
        //use vendor/package/Library.php for package related stuff (psr-0 kind of thing) (each package can have its own autoloader and get its own interfaces and abstracts)
        //use Library.php for non-packaged libraries framework specific
        //use abstracts/aLibrary.php for non-packaged abstracts framework specific
        //use interfaces/iLibrary.php for non-packaged interfaces framework specific
        //MY_Library.php will be loaded using $this->load as a CI specific library
        
    }
    
    public function autoload($class){
        
        //PSR-0 autoloader
        
        $library_path = APPPATH . 'libraries/';
        $third_party_path = APPPATH . 'third_party/';
        
        //remote the first ns (\) since libraries already have it
        
        $class = ltrim($class, '\\');
        $file  = '';
        $namespace = '';
        
        if ($last_namespace_pos = strrpos($class, '\\')) {
            
            $namespace = substr($class, 0, $last_namespace_pos);
            $class = substr($class, $last_namespace_pos + 1);
            //replace all backslashes with DIRECTORY_SEPARATOR, it adds one more to the end
            $file = strtr($namespace, '\\', DIRECTORY_SEPARATOR) . DIRECTORY_SEPARATOR;
            
        }
        
        //replace all class names with (_) with DIRECTORY_SEPARATOR
        $file .= strtr($class, '_', DIRECTORY_SEPARATOR);
        
        if(file_exists($library_path . $file . '.php')){
            
            require_once($library_path . $file . '.php');
            return;
            
        }elseif(file_exists($third_party_path . $file . '.php')){
            
            require_once($third_party_path . $file . '.php');
            return;
            
        }
        
    }
    
}
";i:1;s:3:"php";i:2;s:14:"Autoloader.php";}i:2;i:2071;}i:104;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:2071;}i:105;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:7:"Caching";}i:2;i:4224;}i:106;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:4231;}i:107;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:4231;}i:108;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:13:"Using workers";}i:2;i:4233;}i:109;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:4246;}i:110;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:4246;}i:111;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:25:"A note about coffeescript";}i:2;i:4248;}i:112;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:4273;}i:113;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:4273;}i:114;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:38:"HTML5 stack (browser level, dom level)";}i:2;i:4275;}i:115;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:4313;}i:116;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:4313;}i:117;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:9:"Sockets, ";}i:2;i:4315;}i:118;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:4:"AJAX";}i:2;i:4324;}i:119;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:36:", all the communication level stacks";}i:2;i:4328;}i:120;a:3:{i:0;s:6:"entity";i:1;a:1:{i:0;s:3:"...";}i:2;i:4364;}i:121;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:4367;}i:122;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:4367;}i:123;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:14:"Multithreading";}i:2;i:4369;}i:124;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:4383;}i:125;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:4383;}i:126;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:13:"Async vs sync";}i:2;i:4385;}i:127;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:4398;}i:128;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:4398;}i:129;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:24:"Single Page Applications";}i:2;i:4400;}i:130;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:4424;}i:131;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:4424;}i:132;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:22:"Polyglot apps with ZMQ";}i:2;i:4426;}i:133;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:4448;}i:134;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:4448;}i:135;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:8:"TCP, UDP";}i:2;i:4450;}i:136;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:4458;}i:137;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:4458;}i:138;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:164:"For CI: Use the helper folder for static classes. Use an autoloader for interfaces/abstracts. Actually extend the loader method to allow load without instantiation.";}i:2;i:4460;}i:139;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:4624;}i:140;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:4624;}i:141;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:16:"INTERFACES why? ";}i:2;i:4626;}i:142;a:3:{i:0;s:6:"entity";i:1;a:1:{i:0;s:2:"->";}i:2;i:4642;}i:143;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:293:" For teams and for dependency injection.
Basically you type hint in the constructor for an object to be injected but also to implement a interface contract.
The interface is like the blueprint for your classes.
You can be assured that all classes implementing this interface will have a fixed ";}i:2;i:4644;}i:144;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"API";}i:2;i:4937;}i:145;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:176:".
Then if you are swapping out your classes to something else, you can pass in a new object that still implements that interface, and you don't have to worry about whether the ";}i:2;i:4940;}i:146;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"API";}i:2;i:5116;}i:147;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:285:" methods change. They still work the same.
Interfaces can be combined too, to provide some sort of super class implementation. So this class can be used anywhere or either-or. Regardless of whether the type hint is for the first interface or for the second interface. It'll still work!";}i:2;i:5119;}i:148;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:5404;}i:149;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:5404;}i:150;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:273:"Use abstracts to provide a boilerplate class. Like a parent class which has some common methods, and yet has methods that has to be implemented. Abstract methods have to be either protected or public which then has to be represented. You can only inherit from one abstract.";}i:2;i:5406;}i:151;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:5679;}i:152;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:5679;}i:153;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:72:"Use interfaces to group related classes that are meant to have the same ";}i:2;i:5681;}i:154;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"API";}i:2;i:5753;}i:155;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:".";}i:2;i:5756;}i:156;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:5757;}i:157;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:5757;}i:158;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:19:"Use abstracts as a ";}i:2;i:5759;}i:159;a:3:{i:0;s:11:"strong_open";i:1;a:0:{}i:2;i:5778;}i:160;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:40:"parent class that needs to have children";}i:2;i:5780;}i:161;a:3:{i:0;s:12:"strong_close";i:1;a:0:{}i:2;i:5820;}i:162;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:37:". Not just any standard parent class.";}i:2;i:5822;}i:163;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:5859;}i:164;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:5859;}i:165;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:20:"Like abstract armor ";}i:2;i:5861;}i:166;a:3:{i:0;s:6:"entity";i:1;a:1:{i:0;s:2:"->";}i:2;i:5881;}i:167;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:811:" chinese armor, european armor. Abstract armor and abstract sword can implement physical_object interface. The interface can specify that all physical_objects need weight method. The abstract armor leaves the weight undefined, but requires an abstract of blacksmith and defines a common function of armor rating calculation. Then Chinese_Armor extends abstract Armor. This creates the weight function as defined by interface and blacksmith function as defined by the abstract. It creates a protection function unique to Chinese_Armor. Then we create a Fight function that type hints for either Physical Object, or Ab_Armor. We create the Chinese_Armor and pass the dependency into the constructor dependency injection. Then in the fight we use the protection function. Note that the abstract can reference $this";}i:2;i:5883;}i:168;a:3:{i:0;s:6:"entity";i:1;a:1:{i:0;s:2:"->";}i:2;i:6694;}i:169;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:175:"weight even though it hasn't been defined, this is because the interface says it will be implemented, so the abstract can rely on this. Abstracts are never used by themselves.";}i:2;i:6696;}i:170;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:6872;}i:171;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:6872;}i:172;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:8:"Security";i:1;i:3;i:2;i:6872;}i:2;i:6872;}i:173;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:6872;}i:174;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:6872;}i:175;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:23:"Should make a security ";}i:2;i:6892;}i:176;a:3:{i:0;s:18:"doublequoteopening";i:1;a:0:{}i:2;i:6915;}i:177;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:9:"checklist";}i:2;i:6916;}i:178;a:3:{i:0;s:18:"doublequoteclosing";i:1;a:0:{}i:2;i:6925;}i:179;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:19:" before deployment.";}i:2;i:6926;}i:180;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:6945;}i:181;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:6947;}i:182;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:8:"Patterns";i:1;i:2;i:2;i:6947;}i:2;i:6947;}i:183;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:2;}i:2;i:6947;}i:184;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:6969;}i:185;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:9:"Standards";i:1;i:3;i:2;i:6969;}i:2;i:6969;}i:186;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:6969;}i:187;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:6969;}i:188;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:10:"Check the ";}i:2;i:6990;}i:189;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"PHP";}i:2;i:7000;}i:190;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:32:" Fig (Framework Interop Group): ";}i:2;i:7003;}i:191;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:23:"http://www.php-fig.org/";i:1;N;}i:2;i:7035;}i:192;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:7058;}i:193;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:7058;}i:194;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:36:"Then checkout their PSR standards. (";}i:2;i:7060;}i:195;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"PHP";}i:2;i:7096;}i:196;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:26:" Standard Recommendation).";}i:2;i:7099;}i:197;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:7125;}i:198;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:7125;}i:199;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:19:"Regular expressions";}i:2;i:7128;}i:200;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:7147;}i:201;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:7147;}i:202;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:17:"Intro to patterns";}i:2;i:7149;}i:203;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:7166;}i:204;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:7166;}i:205;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:7:"Pub/sub";}i:2;i:7168;}i:206;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:7175;}i:207;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:7175;}i:208;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:12:"Event driven";}i:2;i:7177;}i:209;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:7189;}i:210;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:7189;}i:211;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:41:"Artificial Intelligence, machine learning";}i:2;i:7191;}i:212;a:3:{i:0;s:6:"entity";i:1;a:1:{i:0;s:3:"...";}i:2;i:7232;}i:213;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:7235;}i:214;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:7235;}i:215;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:48:"Closures, anonymous functions, function currying";}i:2;i:7237;}i:216;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:7285;}i:217;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:7285;}i:218;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:31:"Design patterns from both sides";}i:2;i:7287;}i:219;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:7318;}i:220;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:7318;}i:221;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:2:"JS";}i:2;i:7320;}i:222;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:39:" use patterns such as canvas and webGL.";}i:2;i:7322;}i:223;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:7361;}i:224;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:7361;}i:225;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:12:"Teach binary";}i:2;i:7363;}i:226;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:7375;}i:227;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:7375;}i:228;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:36:"Using bitwise operators for settings";}i:2;i:7377;}i:229;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:7413;}i:230;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:7413;}i:231;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:19:"Using interfaces + ";}i:2;i:7415;}i:232;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:73:"http://net.tutsplus.com/tutorials/how-to-write-code-that-embraces-change/";i:1;N;}i:2;i:7434;}i:233;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:7507;}i:234;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:7507;}i:235;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:58:"Dependency Injection (typehinting with default being null)";}i:2;i:7509;}i:236;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:7568;}i:237;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:7568;}i:238;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:19:"Dynamic Client Side";i:1;i:3;i:2;i:7568;}i:2;i:7568;}i:239;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:7568;}i:240;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:7568;}i:241;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:3:"OOP";}i:2;i:7599;}i:242;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:7602;}i:243;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:7602;}i:244;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:22:"Functional Programming";}i:2;i:7604;}i:245;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:7626;}i:246;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:7626;}i:247;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:12:"Type Hinting";}i:2;i:7628;}i:248;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:7640;}i:249;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:7640;}i:250;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:64:"Programming Tactics, Module Augmentation Pattern, Facade Pattern";}i:2;i:7642;}i:251;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:7706;}i:252;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:7706;}i:253;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"DOM";}i:2;i:7708;}i:254;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:13:" manipulation";}i:2;i:7711;}i:255;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:7724;}i:256;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:7724;}i:257;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:16:"Input Validation";}i:2;i:7726;}i:258;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:7742;}i:259;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:7744;}i:260;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:8:"Database";i:1;i:3;i:2;i:7744;}i:2;i:7744;}i:261;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:7744;}i:262;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:7744;}i:263;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:15:"Database access";}i:2;i:7764;}i:264;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:7779;}i:265;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:7779;}i:266;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:22:"Database normalisation";}i:2;i:7781;}i:267;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:7803;}i:268;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:7803;}i:269;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:12:"Foreign keys";}i:2;i:7805;}i:270;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:7817;}i:271;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:7817;}i:272;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:22:"Indexing and searching";}i:2;i:7819;}i:273;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:7841;}i:274;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:7841;}i:275;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:17:"NoSQL what is it?";}i:2;i:7843;}i:276;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:7861;}i:277;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:7861;}i:278;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:8:"Workflow";i:1;i:2;i:2;i:7861;}i:2;i:7861;}i:279;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:2;}i:2;i:7861;}i:280;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:7883;}i:281;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:28:"Software Development Process";i:1;i:3;i:2;i:7883;}i:2;i:7883;}i:282;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:7883;}i:283;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:7883;}i:284;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:3:"DRY";}i:2;i:7923;}i:285;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:7926;}i:286;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:7926;}i:287;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:4:"KISS";}i:2;i:7928;}i:288;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:7932;}i:289;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:7932;}i:290;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:99:"Googling (using stack overflow, online etiquette, using github issues, contributing to open source)";}i:2;i:7934;}i:291;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:8033;}i:292;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:8033;}i:293;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:34:"People to follow or blogs to read!";}i:2;i:8035;}i:294;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:8069;}i:295;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:8071;}i:296;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:11:"Bug Testing";i:1;i:3;i:2;i:8071;}i:2;i:8071;}i:297;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:8071;}i:298;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:8071;}i:299;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:13:"Using firebug";}i:2;i:8094;}i:300;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:8107;}i:301;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:8107;}i:302;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:12:"Using Xdebug";}i:2;i:8109;}i:303;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:8121;}i:304;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:8121;}i:305;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:3:"TDD";}i:2;i:8123;}i:306;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:8126;}i:307;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:8126;}i:308;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:3:"BDD";}i:2;i:8128;}i:309;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:8131;}i:310;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:8131;}i:311;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:19:"Database Migrations";}i:2;i:8133;}i:312;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:8152;}i:313;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:8154;}i:314;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:11:"Build Tools";i:1;i:3;i:2;i:8154;}i:2;i:8154;}i:315;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:8154;}i:316;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:8154;}i:317;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:41:"Build Tools (minification, concatenation)";}i:2;i:8177;}i:318;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:8218;}i:319;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:8218;}i:320;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:5:"Phing";}i:2;i:8220;}i:321;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:8225;}i:322;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:8227;}i:323;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:39:"Notable Code Libraries and Web Services";i:1;i:2;i:2;i:8227;}i:2;i:8227;}i:324;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:2;}i:2;i:8227;}i:325;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:8227;}i:326;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:14:"List them down";}i:2;i:8280;}i:327;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:8294;}i:328;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:8294;}i:329;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:13:"Use packagist";}i:2;i:8296;}i:330;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:8309;}i:331;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:8309;}i:332;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:10:"Use github";}i:2;i:8311;}i:333;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:8321;}i:334;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:8321;}i:335;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:9:"Use bower";}i:2;i:8323;}i:336;a:3:{i:0;s:6:"entity";i:1;a:1:{i:0;s:3:"...";}i:2;i:8332;}i:337;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:4:" etc";}i:2;i:8335;}i:338;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:8339;}i:339;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:8339;}i:340;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:53:"Google Maps, Twitter, Facebook, Open Layers, D3.. etc";}i:2;i:8341;}i:341;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:8394;}i:342;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:8394;}i:343;a:3:{i:0;s:12:"document_end";i:1;a:0:{}i:2;i:8394;}}